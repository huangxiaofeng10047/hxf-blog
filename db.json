{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/20210508015248.jpg","path":"images/20210508015248.jpg","modified":0,"renderable":0},{"_id":"source/images/20210508015248.webp","path":"images/20210508015248.webp","modified":0,"renderable":0},{"_id":"source/images/DIYgod-avatar2.jpeg","path":"images/DIYgod-avatar2.jpeg","modified":0,"renderable":0},{"_id":"source/images/image-20210507231725024.png","path":"images/image-20210507231725024.png","modified":0,"renderable":0},{"_id":"source/images/image-20210507231725024.webp","path":"images/image-20210507231725024.webp","modified":0,"renderable":0},{"_id":"source/images/image-20210508020412096-0410659.webp","path":"images/image-20210508020412096-0410659.webp","modified":0,"renderable":0},{"_id":"source/images/image-20210508020412096-0411479.webp","path":"images/image-20210508020412096-0411479.webp","modified":0,"renderable":0},{"_id":"source/images/image-20210508020412096-0411479.png","path":"images/image-20210508020412096-0411479.png","modified":0,"renderable":0},{"_id":"source/images/image-20210508020412096.webp","path":"images/image-20210508020412096.webp","modified":0,"renderable":0},{"_id":"source/images/u6VKbdFmzW4P8vD-0462488.webp","path":"images/u6VKbdFmzW4P8vD-0462488.webp","modified":0,"renderable":0},{"_id":"source/images/u6VKbdFmzW4P8vD.webp","path":"images/u6VKbdFmzW4P8vD.webp","modified":0,"renderable":0},{"_id":"source/images/w5yoNzm1lCPQtgZ-0462980.webp","path":"images/w5yoNzm1lCPQtgZ-0462980.webp","modified":0,"renderable":0},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","path":"images/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","modified":0,"renderable":0},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048-0463051.webp","path":"images/w5yoNzm1lCPQtgZ-0463048-0463051.webp","modified":0,"renderable":0},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048.webp","path":"images/w5yoNzm1lCPQtgZ-0463048.webp","modified":0,"renderable":0},{"_id":"source/images/w5yoNzm1lCPQtgZ.webp","path":"images/w5yoNzm1lCPQtgZ.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg","path":"images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.webp","path":"images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD.jpg","path":"images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.jpg","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.webp","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.jpg","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.webp","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.jpg","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.webp","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.jpg","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.webp","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.jpg","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.webp","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.webp","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.jpg","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.webp","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.webp","modified":0,"renderable":0},{"_id":"themes/sagiri/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/Candyshop.otf","path":"fonts/Candyshop.otf","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/sigmarone1.woff2","path":"fonts/sigmarone1.woff2","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/sigmarone2.woff2","path":"fonts/sigmarone2.woff2","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/sigmarone3.woff2","path":"fonts/sigmarone3.woff2","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod-avatar.jpg","path":"images/DIYgod-avatar.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod-avatar.webp","path":"images/DIYgod-avatar.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/alipay.webp","path":"images/alipay.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod-avatar2.jpeg","path":"images/DIYgod-avatar2.jpeg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod-avatar2.webp","path":"images/DIYgod-avatar2.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card-avatar.jpg","path":"images/card-avatar.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.webp","path":"images/apple-touch-icon-next.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.png","path":"images/cc-by-nc-nd.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card-avatar.webp","path":"images/card-avatar.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card-avatar2.jpeg","path":"images/card-avatar2.jpeg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.png","path":"images/cc-by-nc-sa.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc.png","path":"images/cc-by-nc.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card-avatar2.webp","path":"images/card-avatar2.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.webp","path":"images/cc-by-nc-sa.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc.webp","path":"images/cc-by-nc.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nd.png","path":"images/cc-by-nd.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-sa.png","path":"images/cc-by-sa.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.webp","path":"images/cc-by-nc-nd.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by.png","path":"images/cc-by.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-zero.png","path":"images/cc-zero.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nd.webp","path":"images/cc-by-nd.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-sa.webp","path":"images/cc-by-sa.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-zero.webp","path":"images/cc-zero.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cursor.ico","path":"images/cursor.ico","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by.webp","path":"images/cc-by.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/footer.png","path":"images/footer.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/footer.webp","path":"images/footer.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling.jpg","path":"images/header-darling.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling.webp","path":"images/header-darling.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling2.jpg","path":"images/header-darling2.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling2.webp","path":"images/header-darling2.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling4.jpg","path":"images/header-darling4.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling3.jpg","path":"images/header-darling3.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling3.webp","path":"images/header-darling3.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling4.webp","path":"images/header-darling4.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darlings.jpg","path":"images/header-darlings.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darlings.webp","path":"images/header-darlings.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx-s.png","path":"images/header-gyx-s.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx-s.webp","path":"images/header-gyx-s.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-leg.jpg","path":"images/header-leg.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx.png","path":"images/header-gyx.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx.webp","path":"images/header-gyx.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-sagiri.jpg","path":"images/header-sagiri.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-mai.jpg","path":"images/header-mai.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-sagiri.webp","path":"images/header-sagiri.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header.jpg","path":"images/header.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-leg.webp","path":"images/header-leg.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-mai.webp","path":"images/header-mai.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/scroll.png","path":"images/scroll.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header.webp","path":"images/header.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/scroll.webp","path":"images/scroll.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/searchicon.webp","path":"images/searchicon.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/wechatpay.webp","path":"images/wechatpay.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/js/sagiri.min.js","path":"js/sagiri.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/js/sagiri.min.js.map","path":"js/sagiri.min.js.map","modified":1,"renderable":1},{"_id":"themes/sagiri/source/js/sagiri.min.js.LICENSE.txt","path":"js/sagiri.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/sw-toolbox/sw-toolbox.js","path":"lib/sw-toolbox/sw-toolbox.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/LICENSE.md","path":"lib/velocity-animate/LICENSE.md","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/README.md","path":"lib/velocity-animate/README.md","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/package.json","path":"lib/velocity-animate/package.json","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.js","path":"lib/velocity-animate/velocity.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.min.js","path":"lib/velocity-animate/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.js","path":"lib/velocity-animate/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.min.js","path":"lib/velocity-animate/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.moc","path":"images/live2d/22/22.moc","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.model.json","path":"images/live2d/22/22.model.json","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.model.json","path":"images/live2d/33/33.model.json","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/css/share.min.css","path":"lib/social-share.js/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.moc","path":"images/live2d/33/33.moc","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/js/jquery.share.min.js","path":"lib/social-share.js/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/js/social-share.min.js","path":"lib/social-share.js/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.eot","path":"lib/social-share.js/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.svg","path":"lib/social-share.js/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.ttf","path":"lib/social-share.js/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.woff","path":"lib/social-share.js/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.png","path":"images/live2d/22/22.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.webp","path":"images/live2d/22/22.2048/texture_00.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.png","path":"images/live2d/33/33.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.webp","path":"images/live2d/33/33.2048/texture_00.webp","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/android-chrome-192x192.png","path":"android-chrome-192x192.png","modified":1,"renderable":0},{"_id":"source/android-chrome-256x256.png","path":"android-chrome-256x256.png","modified":1,"renderable":0},{"_id":"source/android-chrome-192x192.webp","path":"android-chrome-192x192.webp","modified":1,"renderable":0},{"_id":"source/android-chrome-256x256.webp","path":"android-chrome-256x256.webp","modified":1,"renderable":0},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":0},{"_id":"source/card.jpg","path":"card.jpg","modified":1,"renderable":0},{"_id":"source/browserconfig.xml","path":"browserconfig.xml","modified":1,"renderable":0},{"_id":"source/apple-touch-icon.webp","path":"apple-touch-icon.webp","modified":1,"renderable":0},{"_id":"source/favicon-16x16.png","path":"favicon-16x16.png","modified":1,"renderable":0},{"_id":"source/failure.ico","path":"failure.ico","modified":1,"renderable":0},{"_id":"source/favicon-16x16.webp","path":"favicon-16x16.webp","modified":1,"renderable":0},{"_id":"source/favicon-32x32.png","path":"favicon-32x32.png","modified":1,"renderable":0},{"_id":"source/favicon-32x32.webp","path":"favicon-32x32.webp","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/mstile-150x150.png","path":"mstile-150x150.png","modified":1,"renderable":0},{"_id":"source/mstile-150x150.webp","path":"mstile-150x150.webp","modified":1,"renderable":0},{"_id":"source/safari-pinned-tab.svg","path":"safari-pinned-tab.svg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/20210426.md","hash":"f3e2e99ed63428d206d7ab327c76fb77f32c971a","modified":1623034889873},{"_id":"source/_posts/20201223.md","hash":"cef6df4e758814d12b64d44f1c151fdb27150d3f","modified":1623034889873},{"_id":"source/.DS_Store","hash":"cafdf4ed51b54ef0c08f45ca2e9d2ad99cce77ac","modified":1623034889873},{"_id":"source/_posts/GraphQL及元数据驱动架构在后端BFF中的实践.md","hash":"32841ecc25b29d3c09cf6f1924ed992a05d6b34d","modified":1629792157455},{"_id":"source/_posts/Pulsar-入门及介绍.md","hash":"91bbdb947a2b53d6a66949dd7de6b4e9f722acf4","modified":1629679118700},{"_id":"source/_posts/gradle配置.md","hash":"7a7cbde481ddd642a561ddff6afb0bfb468332e6","modified":1629679118714},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1623034889875},{"_id":"source/_posts/macos设置.md","hash":"e6ae10aca95d0572307178b2f817d78205761963","modified":1629679118722},{"_id":"source/_posts/iceberg-flink设置.md","hash":"bffe4ae9f609ce30c2de1f65a921a234a3b043ce","modified":1629679118715},{"_id":"source/_posts/nginx设置.md","hash":"bd7d95248cad8f27cf550953b0242b07c7d90f2d","modified":1629679118723},{"_id":"source/_posts/usr-libexec-java-home奇葩境遇.md","hash":"86343ff124469e8f30695ac87816aba132eadf1e","modified":1626937267794},{"_id":"source/_posts/webp图片踩坑.md","hash":"e66610a62d85258e327ee290778b05246bc164a4","modified":1626937271042},{"_id":"source/_posts/搭建macos的本地k8s环境.md","hash":"2f408ef7cc78f621b9e6e937f83510fad0cd5cc6","modified":1623034889877},{"_id":"source/_posts/利用-GitHub-Action-自动发布-Docker.md","hash":"8ce6ef07a6a631f28c7d5895c72e93a99ed46355","modified":1629679118743},{"_id":"source/_posts/时间轮算法.md","hash":"2544412b2babd2bc4ed6d9a9b9e0df4db5476e8d","modified":1626937281451},{"_id":"source/_posts/用sdk建设环境信息.md","hash":"91bdc4e20a60486ebfec2619c657d4b92e0dcd6a","modified":1626937287913},{"_id":"source/_posts/用pm2后台运行hexo.md","hash":"8d5817e878b97fe60cd236c495ee2af863a9c3ce","modified":1626937284327},{"_id":"source/_posts/设计模式.md","hash":"c72a2a41b9d8247c95f6c5bf12ec73a893138613","modified":1626937293932},{"_id":"source/about/me.md","hash":"4c6c7e05a6b72f9d6a69141d1eb7e6f82e2821eb","modified":1623034889878},{"_id":"source/images/DIYgod-avatar2.jpeg","hash":"ba161f6d1371fcd8f114c11dec716f44704cda6f","modified":1623034889880},{"_id":"source/images/20210508015248.webp","hash":"cf0b31d85afc18abb010799f624ee587e67274b8","modified":1623034889879},{"_id":"source/images/image-20210507231725024.webp","hash":"6965cab109357ffa56539cd760720e0d5290d5ad","modified":1623034889891},{"_id":"source/images/image-20210508020412096-0410659.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1623034889891},{"_id":"source/images/image-20210508020412096-0411479.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1623034889892},{"_id":"source/images/image-20210508020412096.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1623034889892},{"_id":"source/images/u6VKbdFmzW4P8vD-0462488.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1623034889893},{"_id":"source/images/w5yoNzm1lCPQtgZ-0462980.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889893},{"_id":"source/images/u6VKbdFmzW4P8vD.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1623034889893},{"_id":"source/images/w5yoNzm1lCPQtgZ.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889895},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889894},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048-0463051.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889894},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889894},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1623034889881},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889883},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889884},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889885},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889886},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1623034889887},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1623034889888},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889887},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1623034889887},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1623034889888},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1623034889888},{"_id":"source/images/20210508015248.jpg","hash":"4a9c0c031d718fbe16e4688850b559f2f627f53b","modified":1623034889879},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1623034889882},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1623034889885},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1623034889884},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1623034889887},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1623034889886},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1623034889888},{"_id":"source/images/image-20210508020412096-0411479.png","hash":"c85ec3b6551e70ca4c0b61e3509019759e8bf785","modified":1623034889892},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg","hash":"8a5ea329b1054ae64a60a6e6856ab4c582496fd8","modified":1623034889880},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD.jpg","hash":"8a5ea329b1054ae64a60a6e6856ab4c582496fd8","modified":1623034889882},{"_id":"source/images/image-20210507231725024.png","hash":"394e54f109af2bc2110f8303aded993782ff1800","modified":1623034889890},{"_id":"themes/sagiri/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206984012},{"_id":"themes/sagiri/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206983945},{"_id":"themes/sagiri/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206983946},{"_id":"themes/sagiri/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206983996},{"_id":"themes/sagiri/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206983997},{"_id":"themes/sagiri/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206983998},{"_id":"themes/sagiri/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206984010},{"_id":"themes/sagiri/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206984011},{"_id":"themes/sagiri/.gitignore","hash":"aacec766c7c47f83f5dc0dba1b5d330e7299957d","modified":1623206983925},{"_id":"themes/sagiri/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1623206983924},{"_id":"themes/sagiri/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1623206983925},{"_id":"themes/sagiri/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1623206983925},{"_id":"themes/sagiri/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1623206983926},{"_id":"themes/sagiri/LICENSE","hash":"59c9ba55a87ff36cef60087e88bd4ecb6c2fa656","modified":1623206983927},{"_id":"themes/sagiri/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1623206983926},{"_id":"themes/sagiri/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1623206983926},{"_id":"themes/sagiri/package.json","hash":"6f594bfec20b16772a041c4de513e1b656f25640","modified":1625205543816},{"_id":"themes/sagiri/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1623206983926},{"_id":"themes/sagiri/README.md","hash":"69e1bccf354a3f9e7f5da847c5b03fe12f8322c7","modified":1623206983927},{"_id":"themes/sagiri/webpack.config.js","hash":"77fe4f14155d5864836242a109b32560fad101ba","modified":1623206984114},{"_id":"themes/sagiri/_config.yml","hash":"26fa77e64354a9f66c2c9879abbad58822602fdc","modified":1629679118902},{"_id":"themes/sagiri/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1623206983928},{"_id":"themes/sagiri/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1623206983929},{"_id":"themes/sagiri/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1623206983929},{"_id":"themes/sagiri/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1623206983929},{"_id":"themes/sagiri/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1623206983930},{"_id":"themes/sagiri/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1623206983930},{"_id":"themes/sagiri/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1623206983931},{"_id":"themes/sagiri/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1623206983930},{"_id":"themes/sagiri/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1623206983931},{"_id":"themes/sagiri/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1623206983931},{"_id":"themes/sagiri/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1623206983932},{"_id":"themes/sagiri/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1623206983932},{"_id":"themes/sagiri/languages/zh-Hans.yml","hash":"50621422a4e34af7b0b7fbbcd84071dbf8c54800","modified":1623206983932},{"_id":"themes/sagiri/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1623206983933},{"_id":"themes/sagiri/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1623206983933},{"_id":"themes/sagiri/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1623206983960},{"_id":"themes/sagiri/layout/category.swig","hash":"d8a8fff8a88048e9f22e16cccd0ad9f4616dc45a","modified":1623206983960},{"_id":"themes/sagiri/layout/archive.swig","hash":"0d66294ad7c8eac9106afe60dc23b82a8bcac1f7","modified":1623206983960},{"_id":"themes/sagiri/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1623206983961},{"_id":"themes/sagiri/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1623206983961},{"_id":"themes/sagiri/scripts/img.js","hash":"8208369446e084d381d11824828c4f67ede225d8","modified":1627454321740},{"_id":"themes/sagiri/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1623206983963},{"_id":"themes/sagiri/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1623206983963},{"_id":"themes/sagiri/layout/_layout.swig","hash":"87e3ef5a6e71b574827650d69db82db5186e5018","modified":1623206983935},{"_id":"themes/sagiri/layout/page.swig","hash":"88aab03cf8eae38723e9dbb577b7d3c5a4e30d7b","modified":1623206983961},{"_id":"themes/sagiri/layout/tag.swig","hash":"4c45c8fb1223c803ad6810ef7f1e59037ca44dfb","modified":1623206983962},{"_id":"themes/sagiri/src/clipboard.js","hash":"4baacf61c835fdf5a5655f1c2da893ead22901c5","modified":1623206984104},{"_id":"themes/sagiri/src/bootstrap.js","hash":"ec8b018eabcc176c873344d1fd5cbaff16740db1","modified":1623206984103},{"_id":"themes/sagiri/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1623206984103},{"_id":"themes/sagiri/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1623206984103},{"_id":"themes/sagiri/src/kanban.js","hash":"4bbec857c26eddf005ac4171d85b7747902afbe3","modified":1623206984105},{"_id":"themes/sagiri/src/index.js","hash":"4f953f2bb64fe39c3d23beb929f26bcef8ccf2ad","modified":1623206984105},{"_id":"themes/sagiri/src/evanyou.js","hash":"6c96bbc6b2f667fef833492a5c4aca14aed9c721","modified":1623206984105},{"_id":"themes/sagiri/src/leancloud.js","hash":"04cdd7e7ae77113940c4ccf363677fdc15800d53","modified":1623206984105},{"_id":"themes/sagiri/src/mix.js","hash":"4c19936cd810154424928a0bd78b11e5857af29a","modified":1623206984109},{"_id":"themes/sagiri/src/online.js","hash":"6a609e05a83bbaa6934b19af7419ae6d1ec8ae92","modified":1623206072621},{"_id":"themes/sagiri/src/motion.js","hash":"a25ff81d7c7797de62c68b3b1d2c378714bb8564","modified":1623206984110},{"_id":"themes/sagiri/src/pisces.js","hash":"5435227d07e0b68956434059331e3b1e0ca27cb1","modified":1623206984110},{"_id":"themes/sagiri/src/pjax.js","hash":"6f12048d1d6db7a3f1928bdc25617d04831cb89b","modified":1623206984111},{"_id":"themes/sagiri/src/post-details.js","hash":"d47606954d3f7260780e9697b61b98913cc88416","modified":1623206984111},{"_id":"themes/sagiri/src/scroll.js","hash":"e8247a81985cfe433b58a4fe97e4f0647643b93c","modified":1623206984111},{"_id":"themes/sagiri/src/search.js","hash":"639e5887e7b6a1911fd634cb6c8ce69b5d4e4488","modified":1623206984112},{"_id":"themes/sagiri/src/share.js","hash":"65723b7da17d8e9149ce2f4bcaae60e7d1c81354","modified":1623206984112},{"_id":"themes/sagiri/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1623206984112},{"_id":"themes/sagiri/src/since.js","hash":"b302b356980f6ffb05d5b0c35fdb2a87b26764a1","modified":1623206984113},{"_id":"themes/sagiri/src/cursor-effects.js","hash":"a11acc813a04f7910670206307be16a0fe713115","modified":1623206984104},{"_id":"themes/sagiri/src/title.js","hash":"9bd4a96c4bae595a060d1510d252939699559fc1","modified":1623206984113},{"_id":"themes/sagiri/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1623206983934},{"_id":"themes/sagiri/layout/_macro/post-collapse.swig","hash":"3afe74eb3ae25fa127d9dd63e5390edde5c69185","modified":1623206983935},{"_id":"themes/sagiri/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1623206983934},{"_id":"themes/sagiri/src/type.js","hash":"ba1b2eac5891319a77417f27681b77c9b3c4d3e9","modified":1623206984113},{"_id":"themes/sagiri/src/zoom.js","hash":"d54bdda5f6108855e89c35fdd6684cb9308e233c","modified":1623206984114},{"_id":"themes/sagiri/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1623206983935},{"_id":"themes/sagiri/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1623206983936},{"_id":"themes/sagiri/src/utils.js","hash":"d9125debbeb43a145af5c2b8013fcb9336ccdef1","modified":1623206984114},{"_id":"themes/sagiri/layout/_macro/post.swig","hash":"4e12ef32d7a912ff262237804ad95f2106df737f","modified":1629190724481},{"_id":"themes/sagiri/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1623206983937},{"_id":"themes/sagiri/layout/_partials/footer.swig","hash":"61f137f84ac0237d9a163f39f36fa32eb7bd22e4","modified":1623206983938},{"_id":"themes/sagiri/layout/_partials/comments.swig","hash":"8c09a6eb22a3c663ec9d7dfdcd40299729f9031c","modified":1623206983937},{"_id":"themes/sagiri/layout/_macro/sidebar.swig","hash":"ff81d6a6fd483fc11dfeedd2c8ede1f3f5c2724d","modified":1623206983937},{"_id":"themes/sagiri/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1623206983940},{"_id":"themes/sagiri/layout/_partials/pagination.swig","hash":"359971397fd42138ae8fd04adf852f82a81d73b3","modified":1623206983940},{"_id":"themes/sagiri/layout/_partials/header.swig","hash":"eb54eb8068ce63834c74e8e75607658ece70b847","modified":1623206983939},{"_id":"themes/sagiri/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1623206983940},{"_id":"themes/sagiri/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1623206983944},{"_id":"themes/sagiri/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1623206983944},{"_id":"themes/sagiri/layout/_partials/head.swig","hash":"691c8d5413784afeea6e61daaad0116511fd7df8","modified":1623206983938},{"_id":"themes/sagiri/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1623206983955},{"_id":"themes/sagiri/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1623206983955},{"_id":"themes/sagiri/layout/_scripts/vendors.swig","hash":"6c0697b604c602a7cefdca4b25a1873b9d629e7c","modified":1623206983946},{"_id":"themes/sagiri/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1623206983956},{"_id":"themes/sagiri/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1623206983956},{"_id":"themes/sagiri/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1623206983964},{"_id":"themes/sagiri/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1623206983964},{"_id":"themes/sagiri/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1623206983965},{"_id":"themes/sagiri/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1623206983965},{"_id":"themes/sagiri/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1623206983965},{"_id":"themes/sagiri/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1623206983966},{"_id":"themes/sagiri/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1623206983966},{"_id":"themes/sagiri/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1623206983966},{"_id":"themes/sagiri/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1623206983967},{"_id":"themes/sagiri/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1623206983955},{"_id":"themes/sagiri/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1623206983956},{"_id":"themes/sagiri/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1623206983957},{"_id":"themes/sagiri/source/css/main.styl","hash":"891bf6fc7832a89e7ff8b5e1cb09cdab17c034e7","modified":1623206984011},{"_id":"themes/sagiri/source/fonts/Candyshop.otf","hash":"2d4fffc6d278cc8010f75422246bf368a764c125","modified":1623206984012},{"_id":"themes/sagiri/source/fonts/sigmarone3.woff2","hash":"5f62e2560d08e71274fac25c49825113a09776c7","modified":1623206984013},{"_id":"themes/sagiri/source/fonts/sigmarone2.woff2","hash":"feaa47ccbf19dfb2812fa8306f421b88e90af723","modified":1623206984013},{"_id":"themes/sagiri/source/images/DIYgod-avatar.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1623206984014},{"_id":"themes/sagiri/source/fonts/sigmarone1.woff2","hash":"35d4f8be95cbf9ced2c3eae1bfe63d5ce8ee7214","modified":1623206984012},{"_id":"themes/sagiri/source/images/DIYgod-avatar.webp","hash":"a7200fad65f069ca3f3256b4dd573d9d2e36c829","modified":1623206984014},{"_id":"themes/sagiri/source/images/DIYgod.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1623206072560},{"_id":"themes/sagiri/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1623206072560},{"_id":"themes/sagiri/source/images/alipay.webp","hash":"e4b890a58f4fa1448a0a2d5c9a6c9a747ab5cae5","modified":1623206984016},{"_id":"themes/sagiri/source/images/DIYgod-avatar2.jpeg","hash":"ba161f6d1371fcd8f114c11dec716f44704cda6f","modified":1623206984015},{"_id":"themes/sagiri/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1623206984017},{"_id":"themes/sagiri/source/images/alipay.png","hash":"bc3750d18e6bf1d5f1e24c25455b00d26c3ff447","modified":1623206984016},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1623206984016},{"_id":"themes/sagiri/source/images/DIYgod-avatar2.webp","hash":"fa07ba341621ea2b35393feabe797c4262ddae55","modified":1623206984015},{"_id":"themes/sagiri/source/images/card.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1623206072562},{"_id":"themes/sagiri/source/images/card-avatar.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1623206984018},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.png","hash":"f7839bdd799c452a4e807a2365849acc0748b3fd","modified":1623206984019},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.webp","hash":"a67fcf955e00f160cf687335673a8cbdc587d456","modified":1623206984017},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.png","hash":"cb36e36c3e3959a54ac289e309a4a89a016107bc","modified":1623206984020},{"_id":"themes/sagiri/source/images/cc-by-nc.png","hash":"eaf656bdd1ff61c345a7d42b94ac6f25435f5c42","modified":1623206984021},{"_id":"themes/sagiri/source/images/card-avatar.webp","hash":"980ebd262b2c68baa784a58be7afaa55edd60f28","modified":1623206984018},{"_id":"themes/sagiri/source/images/cc-by-nc.webp","hash":"5c8a54299712f843d290fed413925a2c3c3318c4","modified":1623206984021},{"_id":"themes/sagiri/source/images/card-avatar2.webp","hash":"f4641971faa9e8059e3181abee3fed52736e2ca0","modified":1623206984019},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.webp","hash":"5fde7a2f79adc7d200cac995df45a84d64b2494c","modified":1623206984020},{"_id":"themes/sagiri/source/images/cc-by-nd.png","hash":"6420f0e99cb3e90d3c37e0e8513d16ada14fed37","modified":1623206984021},{"_id":"themes/sagiri/source/images/cc-by-sa.png","hash":"d62ae0fd7204bf889b3f2cbe89eae5865a71c056","modified":1623206984022},{"_id":"themes/sagiri/source/images/cc-by.png","hash":"63f01c43cb5d03cb83d3c867c5ecb768cd89d9df","modified":1623206984023},{"_id":"themes/sagiri/source/images/cc-zero.png","hash":"fd4ce5a5851ef47c3b525652cc3ae8128d405c8f","modified":1623206984023},{"_id":"themes/sagiri/source/images/cc-by-nd.webp","hash":"2a5cc8580f7aadb947e558360bda5dd663eeecc1","modified":1623206984022},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.webp","hash":"a9da48b761a7586f899f826170bc86d26c2ec08a","modified":1623206984020},{"_id":"themes/sagiri/source/images/cc-zero.webp","hash":"bbe5c624b52986f383c0bc0aed4e4c93b1f3b680","modified":1623206984024},{"_id":"themes/sagiri/source/images/cursor.ico","hash":"cd8349fb9cef6c217fc364cf35eae6819cebf5d6","modified":1623206984024},{"_id":"themes/sagiri/source/images/cc-by-sa.webp","hash":"9afcad8c2cb3f4170b2a8bb5fd6fcc4c34616c19","modified":1623206984022},{"_id":"themes/sagiri/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1623206072565},{"_id":"themes/sagiri/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1623206072566},{"_id":"themes/sagiri/source/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1623206072565},{"_id":"themes/sagiri/source/images/favicon.ico","hash":"51cfa2cab8ae30b79cd7360dba747e705ad93bb4","modified":1623206072566},{"_id":"themes/sagiri/source/images/cc-by.webp","hash":"9a364fca486147d5fe120487edbcc5617d4a1759","modified":1623206984023},{"_id":"themes/sagiri/source/images/footer.webp","hash":"d5b03e8d76bcfc4f966ea3408bdc0b90874ca0e8","modified":1623206984025},{"_id":"themes/sagiri/source/images/footer.png","hash":"5f27807ccb8beeed9a909571783797901c52c3b7","modified":1623206984024},{"_id":"themes/sagiri/source/images/header-darling.webp","hash":"84ea4042c5e4a57e9b1832fdf4db536aa9d2e040","modified":1623206984026},{"_id":"themes/sagiri/source/images/header-darling.jpg","hash":"428d430fd9086c207a4a18d6c55308a74441bfe5","modified":1623206984026},{"_id":"themes/sagiri/source/images/header-gyx-s.webp","hash":"d16a445dadc05c1976ffbf3ab88de618d1db360a","modified":1623206984042},{"_id":"themes/sagiri/source/images/header-sagiri.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1623206984055},{"_id":"themes/sagiri/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1623206984067},{"_id":"themes/sagiri/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1623206984069},{"_id":"themes/sagiri/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1623206984068},{"_id":"themes/sagiri/source/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1623206984069},{"_id":"themes/sagiri/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1623206984068},{"_id":"themes/sagiri/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1623206984068},{"_id":"themes/sagiri/source/images/scroll.webp","hash":"f5e9b67b639f03e0a1ccf171b17d1b5ee811765d","modified":1623206984069},{"_id":"themes/sagiri/source/images/searchicon.webp","hash":"4dc91243df4ec53a3a98fd0ec9a4abaa15606dd3","modified":1623206984070},{"_id":"themes/sagiri/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1623206984070},{"_id":"themes/sagiri/source/images/header.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1623206984056},{"_id":"themes/sagiri/source/images/wechatpay.png","hash":"0c730f3963f3042d0dfcc78837d9a4cf2f05f8fc","modified":1623206984070},{"_id":"themes/sagiri/source/images/wechatpay.webp","hash":"d69056969d3e7101ebb9f4d3a382722093fff86c","modified":1623206984071},{"_id":"themes/sagiri/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1623206983939},{"_id":"themes/sagiri/source/js/sagiri.min.js.LICENSE.txt","hash":"0fb9313bdafca45073c08270d1df087eedbef9c4","modified":1623206984074},{"_id":"themes/sagiri/layout/_partials/head/external-fonts.swig","hash":"b3bb94baa38c4406b619b9e12f482991af8c9c6a","modified":1623206983939},{"_id":"themes/sagiri/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1623206983941},{"_id":"themes/sagiri/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1623206983942},{"_id":"themes/sagiri/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1623206983941},{"_id":"themes/sagiri/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1623206983942},{"_id":"themes/sagiri/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1623206983943},{"_id":"themes/sagiri/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1623206983943},{"_id":"themes/sagiri/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1623206983945},{"_id":"themes/sagiri/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1623206983945},{"_id":"themes/sagiri/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1623206983946},{"_id":"themes/sagiri/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1623206983942},{"_id":"themes/sagiri/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1623206983947},{"_id":"themes/sagiri/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1623206983947},{"_id":"themes/sagiri/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1623206983948},{"_id":"themes/sagiri/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1623206983948},{"_id":"themes/sagiri/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1623206983950},{"_id":"themes/sagiri/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1623206983949},{"_id":"themes/sagiri/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1623206983948},{"_id":"themes/sagiri/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1623206983949},{"_id":"themes/sagiri/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1623206983951},{"_id":"themes/sagiri/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1623206983950},{"_id":"themes/sagiri/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1623206983951},{"_id":"themes/sagiri/layout/_third-party/comments/disqus.swig","hash":"44db46b891650375ec1119de667656292441c908","modified":1623206983952},{"_id":"themes/sagiri/layout/_third-party/analytics/lean-analytics.swig","hash":"17d29648b8c7ac4a0f1aca9f7d409d7c15cde1c8","modified":1623206983950},{"_id":"themes/sagiri/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1623206983951},{"_id":"themes/sagiri/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1623206983952},{"_id":"themes/sagiri/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1623206983953},{"_id":"themes/sagiri/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1623206983953},{"_id":"themes/sagiri/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1623206983953},{"_id":"themes/sagiri/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1623206983954},{"_id":"themes/sagiri/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1623206983954},{"_id":"themes/sagiri/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1623206983958},{"_id":"themes/sagiri/layout/_third-party/comments/valine.swig","hash":"1b492d528a7d48216d4548011000fced2f4a538d","modified":1623206983954},{"_id":"themes/sagiri/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1623206983996},{"_id":"themes/sagiri/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1623206983959},{"_id":"themes/sagiri/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1623206983959},{"_id":"themes/sagiri/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1623206983958},{"_id":"themes/sagiri/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1623206983996},{"_id":"themes/sagiri/source/css/_mixins/Pisces.styl","hash":"0fe615385932fa8712513ed2046d72cfe88bd2d7","modified":1623206983997},{"_id":"themes/sagiri/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1623206984010},{"_id":"themes/sagiri/source/css/_mixins/base.styl","hash":"036429baccd0b35de273625f8655b7c9b009bc46","modified":1623206983997},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1623206984084},{"_id":"themes/sagiri/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1623206984009},{"_id":"themes/sagiri/source/css/_variables/Pisces.styl","hash":"9341024f4db35632feeb6822e88afb80f3658564","modified":1623206984010},{"_id":"themes/sagiri/source/css/_variables/base.styl","hash":"160f18a96f6451ce2f89563efefb41005a42cb55","modified":1623206984011},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1623206984087},{"_id":"themes/sagiri/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1623206984088},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1623206984087},{"_id":"themes/sagiri/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1623206984086},{"_id":"themes/sagiri/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1623206984088},{"_id":"themes/sagiri/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1623206984089},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1623206984090},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1623206984089},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1623206984089},{"_id":"themes/sagiri/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1623206984091},{"_id":"themes/sagiri/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1623206984090},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1623206984090},{"_id":"themes/sagiri/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1623206984091},{"_id":"themes/sagiri/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1623206984091},{"_id":"themes/sagiri/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1623206984092},{"_id":"themes/sagiri/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1623206984092},{"_id":"themes/sagiri/source/lib/velocity-animate/LICENSE.md","hash":"15e34f281b5684c052b25312be271735e2030379","modified":1623206984099},{"_id":"themes/sagiri/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1623206984092},{"_id":"themes/sagiri/source/lib/sw-toolbox/sw-toolbox.js","hash":"4750ebaf8cc28da8c1a9843ba0ebeca0fd812487","modified":1623206984097},{"_id":"themes/sagiri/source/lib/velocity-animate/package.json","hash":"6911ae2c4a3bd5073e74acc935644efccda6f9d0","modified":1623206984099},{"_id":"themes/sagiri/source/lib/velocity-animate/README.md","hash":"62bf5d569f4f2217a83ebc673d762fc0360cc07d","modified":1623206984099},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1623206984101},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.js","hash":"924f7ccc5d6504bcf581352e410722fbd4ee5051","modified":1623206984102},{"_id":"themes/sagiri/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1623206983958},{"_id":"themes/sagiri/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1623206983957},{"_id":"themes/sagiri/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1623206983968},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1623206984102},{"_id":"themes/sagiri/source/css/_common/components/back-to-top.styl","hash":"5d39998b755152cfb9e48a0c7e87dfdec9f185f9","modified":1623206983968},{"_id":"themes/sagiri/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1623206983969},{"_id":"themes/sagiri/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1623206983969},{"_id":"themes/sagiri/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1623206983969},{"_id":"themes/sagiri/source/css/_common/components/pagination.styl","hash":"39970bedf79ea1c6c6b2669acb21f0fea32a93d1","modified":1623206983975},{"_id":"themes/sagiri/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1623206983984},{"_id":"themes/sagiri/source/css/_common/scaffolding/base.styl","hash":"a9396c9cb667fc1b8d47b341ceb2beae269c1b08","modified":1623206983993},{"_id":"themes/sagiri/source/css/_common/outline/outline.styl","hash":"287296c977dddcf8196e10255235d016b6abcf68","modified":1623206983993},{"_id":"themes/sagiri/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1623206983994},{"_id":"themes/sagiri/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1623206983994},{"_id":"themes/sagiri/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1623206983995},{"_id":"themes/sagiri/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1623206983995},{"_id":"themes/sagiri/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1623206983999},{"_id":"themes/sagiri/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1623206983994},{"_id":"themes/sagiri/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1623206984000},{"_id":"themes/sagiri/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1623206983998},{"_id":"themes/sagiri/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1623206984000},{"_id":"themes/sagiri/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1623206983999},{"_id":"themes/sagiri/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1623206984003},{"_id":"themes/sagiri/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1623206984001},{"_id":"themes/sagiri/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1623206984000},{"_id":"themes/sagiri/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1623206984001},{"_id":"themes/sagiri/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1623206984004},{"_id":"themes/sagiri/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1623206984003},{"_id":"themes/sagiri/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1623206984004},{"_id":"themes/sagiri/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1623206984003},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_brand.styl","hash":"c27cd870ac870c8b740e79d916db1088f1d53101","modified":1623206984006},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_darling.styl","hash":"dcf18c2edff6f63504d2e38c686eab8001bf5b95","modified":1623206984006},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_footer.styl","hash":"0e09d9876f6f1b7aa0c6b4fde0eeaf00cdfb7634","modified":1623206984006},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_archive.styl","hash":"5fc138c64c3935448f7ff09eeb95d7d29b1cdeb9","modified":1623206984005},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_layout.styl","hash":"92a48de3c9ad7cba4b2973256c904a999e687771","modified":1623206984007},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_links.styl","hash":"a4593517234513ef939a66b49e7cab9374a5f861","modified":1623206984007},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_posts.styl","hash":"0399d3112ed99074df61f7b6e994dd2284d9e39f","modified":1623206984008},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_menu.styl","hash":"356dc43a48581948b148be4aa1479136daf4a936","modified":1623206984008},{"_id":"themes/sagiri/source/css/_schemes/Pisces/index.styl","hash":"dd4475245862d4478d7da83f47f988b2ca57e1e9","modified":1623206984009},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_mai.styl","hash":"042ec4dfc3672d01447876323b7ac3dc41fa766f","modified":1623206984007},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_sidebar.styl","hash":"f01c3db533b85c81715f13634a064215dbc128fd","modified":1623206984008},{"_id":"themes/sagiri/source/images/live2d/33/33.model.json","hash":"be96f72ae0f7fc77bfb6661caecd7a819c23611d","modified":1623206984067},{"_id":"themes/sagiri/source/images/live2d/22/22.model.json","hash":"bdbd71cb422fc16192d7bee838d099e68d41fec0","modified":1623206984060},{"_id":"themes/sagiri/source/lib/social-share.js/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1623206984093},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1623206984094},{"_id":"themes/sagiri/source/lib/social-share.js/js/social-share.min.js","hash":"4798c0fe6c75506eebbbb3cab8cf01dcb7f59908","modified":1623206984096},{"_id":"themes/sagiri/source/lib/social-share.js/js/jquery.share.min.js","hash":"7d3a7135cee30a5ccc38e2818a5bf8c03f7028a0","modified":1623206984096},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1623206984094},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1623206984095},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1623206984095},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1623206984098},{"_id":"themes/sagiri/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1623206983970},{"_id":"themes/sagiri/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1623206983970},{"_id":"themes/sagiri/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1623206983971},{"_id":"themes/sagiri/source/css/_common/components/header/menu.styl","hash":"edc7952499d96fe73cddaf15450a7b416ddf0175","modified":1623206983971},{"_id":"themes/sagiri/source/css/_common/components/header/site-meta.styl","hash":"325d9fbca3bea9cbdc5141e46dbbc07cade733bc","modified":1623206983971},{"_id":"themes/sagiri/source/css/_common/components/header/site-nav.styl","hash":"8f746dcf0f12852884c2409af68ccadd17434dff","modified":1623206983972},{"_id":"themes/sagiri/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1623206983972},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1623206984098},{"_id":"themes/sagiri/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1623206983974},{"_id":"themes/sagiri/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1623206983973},{"_id":"themes/sagiri/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1623206983973},{"_id":"themes/sagiri/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1623206983974},{"_id":"themes/sagiri/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1623206983975},{"_id":"themes/sagiri/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1623206983974},{"_id":"themes/sagiri/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1623206983976},{"_id":"themes/sagiri/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1623206983975},{"_id":"themes/sagiri/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1623206983977},{"_id":"themes/sagiri/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1623206983977},{"_id":"themes/sagiri/source/css/_common/components/post/post-collapse.styl","hash":"deb446c348fc423d3406945088f0f8f9cbbc06ab","modified":1623206983976},{"_id":"themes/sagiri/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1623206983978},{"_id":"themes/sagiri/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1623206983978},{"_id":"themes/sagiri/source/css/_common/components/post/post-nav.styl","hash":"0e281f7a5456cb0829a704eb8ea3e42540aefe76","modified":1623206983978},{"_id":"themes/sagiri/source/css/_common/components/post/post-expand.styl","hash":"266e807edc07a5ba8db12e6c9a0fa090747bde9e","modified":1623206983977},{"_id":"themes/sagiri/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1623206983979},{"_id":"themes/sagiri/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1623206983979},{"_id":"themes/sagiri/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1623206983979},{"_id":"themes/sagiri/source/css/_common/components/post/post-title.styl","hash":"63ceb42f7d4a162c1e277bd1db1dd50371b79490","modified":1623206983980},{"_id":"themes/sagiri/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1623206983980},{"_id":"themes/sagiri/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1623206983980},{"_id":"themes/sagiri/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1623206983985},{"_id":"themes/sagiri/source/css/_common/components/post/post.styl","hash":"6711a9fe08c33578a3aa22a6d9f1f1ee4e26db74","modified":1623206983981},{"_id":"themes/sagiri/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1623206983985},{"_id":"themes/sagiri/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1623206983986},{"_id":"themes/sagiri/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1623206983986},{"_id":"themes/sagiri/source/css/_common/components/tags/group-pictures.styl","hash":"f37c7598c03d2dd28925711b1176cb424fae7268","modified":1623206983986},{"_id":"themes/sagiri/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1623206983987},{"_id":"themes/sagiri/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1623206983987},{"_id":"themes/sagiri/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1623206983988},{"_id":"themes/sagiri/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1623206983988},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1623206983981},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1623206983981},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1623206983982},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1623206983982},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"115be924fecaee8072c2f3be068b5e4717d3c2a9","modified":1623206983982},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1623206983983},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar.styl","hash":"fa448a9e784b08f459eeeff4d815aa8788a2dca4","modified":1623206983984},{"_id":"themes/sagiri/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1623206983988},{"_id":"themes/sagiri/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1623206983984},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"332a98c13976b464310125fb4c992b03997670ca","modified":1623206983983},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1623206983983},{"_id":"themes/sagiri/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1623206983989},{"_id":"themes/sagiri/source/css/_common/components/third-party/balloon.styl","hash":"6bbf6ec67610ee80e1178a59234050ac2d085837","modified":1623206983989},{"_id":"themes/sagiri/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1623206983990},{"_id":"themes/sagiri/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1623206983990},{"_id":"themes/sagiri/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1623206983990},{"_id":"themes/sagiri/source/css/_common/components/third-party/headroom.styl","hash":"8618c8805fcfb06659f8f83976529dfc4c3d5d0b","modified":1623206983991},{"_id":"themes/sagiri/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1623206983992},{"_id":"themes/sagiri/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1623206983992},{"_id":"themes/sagiri/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1623206983991},{"_id":"themes/sagiri/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1623206983991},{"_id":"themes/sagiri/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1623206984001},{"_id":"themes/sagiri/source/css/_common/components/third-party/third-party.styl","hash":"34c6e5aa49b0221f3ceac323a979a51d3b7d0506","modified":1623206983992},{"_id":"themes/sagiri/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1623206984002},{"_id":"themes/sagiri/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1623206984005},{"_id":"themes/sagiri/source/images/card-avatar2.jpeg","hash":"0c26051e7302dcde32d546da24cc24de9f1ad23c","modified":1623206984019},{"_id":"themes/sagiri/source/images/header.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1623206984056},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.webp","hash":"e5dafe1d0eb1859c5be3643fc0723e4d0b10f7f8","modified":1623206984059},{"_id":"themes/sagiri/src/live2d.js","hash":"81846d8c45195df78620b46f200b74f1243b297b","modified":1623206984109},{"_id":"themes/sagiri/yarn.lock","hash":"01aac03ba17f9d884222e2d69c11683a73609a61","modified":1625205547527},{"_id":"themes/sagiri/source/images/header-darling2.jpg","hash":"e2ae6c5df17411838955d231e9a76321b2001c5c","modified":1623206984027},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.webp","hash":"ea15326bcbb692a272dbd793163e55c030fedda8","modified":1623206984065},{"_id":"themes/sagiri/source/images/header-gyx.webp","hash":"194c54813297f72538dd2ae62ae538ce9ba4245d","modified":1623206984047},{"_id":"themes/sagiri/source/images/header-mai.webp","hash":"a5aa4f650bf5a998fd792d035b76171e908d9c32","modified":1623206984054},{"_id":"themes/sagiri/source/images/live2d/22/22.moc","hash":"63a7992de8c4658ee432822b5710565481610f0e","modified":1623206984060},{"_id":"themes/sagiri/source/images/header-darling2.webp","hash":"9f283b3656471833c7f768e97852140dfe12742f","modified":1623206984028},{"_id":"themes/sagiri/source/images/live2d/33/33.moc","hash":"80a030342ac1b6a7cd8acb441bcb207d8803b76b","modified":1623206984067},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.png","hash":"b002297b31421137a64fad594f7593133cea3cbf","modified":1623206984058},{"_id":"themes/sagiri/source/images/header-gyx-s.png","hash":"2b6b2f9904f0bbd35715adae276e7d8fc20572f2","modified":1623206984042},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.js","hash":"4241265a2c7755b42d5aa478b46e77efd8093c23","modified":1623206984101},{"_id":"themes/sagiri/source/images/header-mai.jpg","hash":"b9890a3d76f62437462475a2c51c6b8442898379","modified":1623206984053},{"_id":"themes/sagiri/source/images/header-darlings.webp","hash":"0d3e794a5a402d615ec4a36fb525fedc3487a026","modified":1623206984041},{"_id":"themes/sagiri/source/images/header-sagiri.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1623206984055},{"_id":"themes/sagiri/source/images/header-darlings.jpg","hash":"20156313f1e9b02f28da3f5ca7b7ac607c6ea4f0","modified":1623206984040},{"_id":"themes/sagiri/source/images/header-darling4.webp","hash":"cd9c479ef8c5d0e1d5d6d77259ca5e1522db9b8f","modified":1623206984038},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1623206984086},{"_id":"themes/sagiri/source/images/header-darling3.jpg","hash":"da8965efff676a86af6ed61451c3c13fe8a30bf3","modified":1623206984030},{"_id":"themes/sagiri/source/images/header-darling3.webp","hash":"d8cdee7124b0a0e21fa9cc82bbb64134d3778061","modified":1623206984032},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.png","hash":"6d710da6056de69bfe0c33ac1b9e837b327b2f7b","modified":1623206984064},{"_id":"themes/sagiri/source/js/sagiri.min.js","hash":"39e43550a15e8badfc6a1c83a3c9b4bef9aeeab9","modified":1623206984074},{"_id":"themes/sagiri/source/images/header-darling4.jpg","hash":"e64b1131d266f98e81d68ca36dcf5324cb901e50","modified":1623206984037},{"_id":"themes/sagiri/source/images/header-leg.jpg","hash":"426445281820258e0859b78e3b5e8279546dc3f5","modified":1623206984050},{"_id":"themes/sagiri/source/images/header-leg.webp","hash":"fd1692cd000bc739cc478785f2fbb2daa759ca5f","modified":1623206984052},{"_id":"themes/sagiri/source/images/header-gyx.png","hash":"c72a623d4407c90df6cfb6ca22b1337ded8d831f","modified":1623206984046},{"_id":"themes/sagiri/source/js/sagiri.min.js.map","hash":"3910a9d37e2858e55e5f3c59a1ebbbcb268ca657","modified":1629679120083},{"_id":"themes/sagiri/package-lock.json","hash":"a71773c4d9878d30bd70b1dd5752cd691ef1662a","modified":1625205543808},{"_id":"source/_posts/shiro.md","hash":"a9f6f387a95683096ce70681b079ca5bb3a54835","modified":1627441016394},{"_id":"source/_posts/image-20210611150230176.png","hash":"43fcdacd8b11170621c8f8dc38516ef4be230c32","modified":1623394956575},{"_id":"public/atom.xml","hash":"d0ecc40c78b192e237b23f6555008f85661ed8a0","modified":1629249578178},{"_id":"public/sitemap.xml","hash":"0bdee719de5291fd478cbb1d2fd973d7d5e10c2b","modified":1629249578178},{"_id":"public/about/me.html","hash":"e9e30ba91b82221a978d3492a8241b39bf58ada0","modified":1629185814895},{"_id":"public/shiro/index.html","hash":"9b69e44fd8d8a7fa2bf5d65dc8df0c9a58b40a82","modified":1629188738235},{"_id":"public/hello-world/index.html","hash":"e8945496adf87fb9d033856255b9c36d539bdbad","modified":1626923741552},{"_id":"public/搭建macos的本地k8s环境/index.html","hash":"c228e20f40e41d468495e02bdb5b5fdae1110dda","modified":1626847719117},{"_id":"public/usr-libexec-java-home奇葩境遇/index.html","hash":"19ff4b7434f69367b367ea11159f1dbda445c7de","modified":1629188738235},{"_id":"public/gradle配置/index.html","hash":"49b7d6f92e92a72476987ac681a55317c5ad26c3","modified":1629188738235},{"_id":"public/用sdk建设环境信息/index.html","hash":"52a185d57a849f5a149c5e02f53785d54adbe069","modified":1629188738235},{"_id":"public/利用-GitHub-Action-自动发布-Docker/index.html","hash":"1390811d38468575521fe32e637ebaf3e5172234","modified":1629188738235},{"_id":"public/Pulsar-入门及介绍/index.html","hash":"75b0e1726e758332ea5c313190b41ab7c2edcfcf","modified":1629188738235},{"_id":"public/GraphQL及元数据驱动架构在后端BFF中的实践/index.html","hash":"a73672fad7102399de060f53d31ba25b4d3f943f","modified":1629188738235},{"_id":"public/webp图片踩坑/index.html","hash":"67f5f408d7b47210b7b39874d643dd26a9d18eca","modified":1629188738235},{"_id":"public/nginx设置/index.html","hash":"38cfb06997ff206c955d74247af6cb206f0ece33","modified":1629188738235},{"_id":"public/用pm2后台运行hexo/index.html","hash":"95c0ff7cf0ed57bf35be475b1bd2c1fda2a232d3","modified":1629188738235},{"_id":"public/iceberg-flink设置/index.html","hash":"3c4e58fd72a676e5abaf93c3e17bff5f0bd86952","modified":1629188738235},{"_id":"public/macos设置/index.html","hash":"a1b4079e7a7f7716d2d59bf14d063bae47a3ffc5","modified":1629188738235},{"_id":"public/20210426/index.html","hash":"854cc260b44edc40c898beef5fc5a11e38b5e526","modified":1629188738235},{"_id":"public/20201223/index.html","hash":"7ff47578c76c8e53f6050c29ac4d9757ad1d4964","modified":1629188738235},{"_id":"public/时间轮算法/index.html","hash":"d103370b7893ab847f9fc085c2365dd7d1f143c8","modified":1629188738235},{"_id":"public/设计模式/index.html","hash":"dc5e75f80546b00fb7856bff16aaa7b29f7aa36f","modified":1629188738235},{"_id":"public/archives/2020/12/index.html","hash":"7ce7f36533a90d3ec9d042fef982a7140caa7e1a","modified":1629249578178},{"_id":"public/archives/index.html","hash":"c7fc172fcc22dc8dc079c6a6b8f7a880e1f28cfa","modified":1629249578178},{"_id":"public/archives/2021/index.html","hash":"4b246663bc7921ad079625ceba7d889ab4e60800","modified":1629249578178},{"_id":"public/archives/2021/04/index.html","hash":"f11871fecc90300cb0e11a55a511b3ff33b39733","modified":1629249578178},{"_id":"public/archives/2021/05/index.html","hash":"565bb19030bc004401a30cef0e9ce7ffc83626bb","modified":1629249578178},{"_id":"public/archives/2021/06/index.html","hash":"af482cc87a1a4c5000a5d956403320b04a3b996b","modified":1629249578178},{"_id":"public/archives/2020/index.html","hash":"d735eb0221ab2de8ec79e649fffdb4b33f4a4615","modified":1629249578178},{"_id":"public/index.html","hash":"8289e81a13aa587881a377b3efe33ac44d1f22b5","modified":1629249578178},{"_id":"public/page/2/index.html","hash":"6456c8ee9198c2d2d69f03064f2976ac2e1f6b2f","modified":1629249578178},{"_id":"public/images/image-20210507231725024.webp","hash":"6965cab109357ffa56539cd760720e0d5290d5ad","modified":1626847719117},{"_id":"public/images/20210508015248.webp","hash":"cf0b31d85afc18abb010799f624ee587e67274b8","modified":1626847719117},{"_id":"public/images/DIYgod-avatar2.jpeg","hash":"ba161f6d1371fcd8f114c11dec716f44704cda6f","modified":1626847719117},{"_id":"public/images/image-20210508020412096-0410659.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1626847719117},{"_id":"public/images/u6VKbdFmzW4P8vD-0462488.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1626847719117},{"_id":"public/images/image-20210508020412096.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1626847719117},{"_id":"public/images/u6VKbdFmzW4P8vD.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1626847719117},{"_id":"public/images/w5yoNzm1lCPQtgZ-0462980.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/w5yoNzm1lCPQtgZ-0463048-0463051.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/image-20210508020412096-0411479.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1626847719117},{"_id":"public/images/w5yoNzm1lCPQtgZ.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/w5yoNzm1lCPQtgZ-0463048.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1626847719117},{"_id":"public/fonts/Candyshop.otf","hash":"2d4fffc6d278cc8010f75422246bf368a764c125","modified":1626847719117},{"_id":"public/fonts/sigmarone2.woff2","hash":"feaa47ccbf19dfb2812fa8306f421b88e90af723","modified":1626847719117},{"_id":"public/fonts/sigmarone1.woff2","hash":"35d4f8be95cbf9ced2c3eae1bfe63d5ce8ee7214","modified":1626847719117},{"_id":"public/fonts/sigmarone3.woff2","hash":"5f62e2560d08e71274fac25c49825113a09776c7","modified":1626847719117},{"_id":"public/images/DIYgod-avatar.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1626847719117},{"_id":"public/images/alipay.png","hash":"bc3750d18e6bf1d5f1e24c25455b00d26c3ff447","modified":1626847719117},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1625103584694},{"_id":"public/images/DIYgod-avatar.webp","hash":"a7200fad65f069ca3f3256b4dd573d9d2e36c829","modified":1626847719117},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1626847719117},{"_id":"public/images/DIYgod.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1625103584694},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1626847719117},{"_id":"public/images/alipay.webp","hash":"e4b890a58f4fa1448a0a2d5c9a6c9a747ab5cae5","modified":1626847719117},{"_id":"public/images/DIYgod-avatar2.webp","hash":"fa07ba341621ea2b35393feabe797c4262ddae55","modified":1626847719117},{"_id":"public/images/card-avatar.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1626847719117},{"_id":"public/images/card.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1625103584694},{"_id":"public/images/cc-by-nc-sa.png","hash":"cb36e36c3e3959a54ac289e309a4a89a016107bc","modified":1626847719117},{"_id":"public/images/cc-by-nc-nd.png","hash":"f7839bdd799c452a4e807a2365849acc0748b3fd","modified":1626847719117},{"_id":"public/images/apple-touch-icon-next.webp","hash":"a67fcf955e00f160cf687335673a8cbdc587d456","modified":1626847719117},{"_id":"public/images/cc-by-nc-sa.webp","hash":"5fde7a2f79adc7d200cac995df45a84d64b2494c","modified":1626847719117},{"_id":"public/images/cc-by-nc.webp","hash":"5c8a54299712f843d290fed413925a2c3c3318c4","modified":1626847719117},{"_id":"public/images/card-avatar2.webp","hash":"f4641971faa9e8059e3181abee3fed52736e2ca0","modified":1626847719117},{"_id":"public/images/card-avatar.webp","hash":"980ebd262b2c68baa784a58be7afaa55edd60f28","modified":1626847719117},{"_id":"public/images/cc-by-nd.png","hash":"6420f0e99cb3e90d3c37e0e8513d16ada14fed37","modified":1626847719117},{"_id":"public/images/cc-by-nc.png","hash":"eaf656bdd1ff61c345a7d42b94ac6f25435f5c42","modified":1626847719117},{"_id":"public/images/cc-by-sa.png","hash":"d62ae0fd7204bf889b3f2cbe89eae5865a71c056","modified":1626847719117},{"_id":"public/images/cc-zero.png","hash":"fd4ce5a5851ef47c3b525652cc3ae8128d405c8f","modified":1626847719117},{"_id":"public/images/cc-by.png","hash":"63f01c43cb5d03cb83d3c867c5ecb768cd89d9df","modified":1626847719117},{"_id":"public/images/cc-by-nd.webp","hash":"2a5cc8580f7aadb947e558360bda5dd663eeecc1","modified":1626847719117},{"_id":"public/images/cc-by-sa.webp","hash":"9afcad8c2cb3f4170b2a8bb5fd6fcc4c34616c19","modified":1626847719117},{"_id":"public/images/cc-by-nc-nd.webp","hash":"a9da48b761a7586f899f826170bc86d26c2ec08a","modified":1626847719117},{"_id":"public/images/cc-zero.webp","hash":"bbe5c624b52986f383c0bc0aed4e4c93b1f3b680","modified":1626847719117},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1625103584694},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1625103584694},{"_id":"public/images/favicon.ico","hash":"51cfa2cab8ae30b79cd7360dba747e705ad93bb4","modified":1625103584694},{"_id":"public/images/cc-by.webp","hash":"9a364fca486147d5fe120487edbcc5617d4a1759","modified":1626847719117},{"_id":"public/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1625103584694},{"_id":"public/images/cursor.ico","hash":"cd8349fb9cef6c217fc364cf35eae6819cebf5d6","modified":1626847719117},{"_id":"public/images/footer.webp","hash":"d5b03e8d76bcfc4f966ea3408bdc0b90874ca0e8","modified":1626847719117},{"_id":"public/images/footer.png","hash":"5f27807ccb8beeed9a909571783797901c52c3b7","modified":1626847719117},{"_id":"public/images/header-darling.webp","hash":"84ea4042c5e4a57e9b1832fdf4db536aa9d2e040","modified":1626847719117},{"_id":"public/images/header-darling.jpg","hash":"428d430fd9086c207a4a18d6c55308a74441bfe5","modified":1626847719117},{"_id":"public/images/header-gyx-s.webp","hash":"d16a445dadc05c1976ffbf3ab88de618d1db360a","modified":1626847719117},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1626847719117},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1626847719117},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1626847719117},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1626847719117},{"_id":"public/images/header-sagiri.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1626847719117},{"_id":"public/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1626847719117},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1626847719117},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1626847719117},{"_id":"public/images/searchicon.webp","hash":"4dc91243df4ec53a3a98fd0ec9a4abaa15606dd3","modified":1626847719117},{"_id":"public/images/scroll.webp","hash":"f5e9b67b639f03e0a1ccf171b17d1b5ee811765d","modified":1626847719117},{"_id":"public/images/wechatpay.webp","hash":"d69056969d3e7101ebb9f4d3a382722093fff86c","modified":1626847719117},{"_id":"public/images/wechatpay.png","hash":"0c730f3963f3042d0dfcc78837d9a4cf2f05f8fc","modified":1626847719117},{"_id":"public/images/header.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1626847719117},{"_id":"public/js/sagiri.min.js.LICENSE.txt","hash":"0fb9313bdafca45073c08270d1df087eedbef9c4","modified":1626847719117},{"_id":"public/lib/social-share.js/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1626847719117},{"_id":"public/lib/social-share.js/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1626847719117},{"_id":"public/lib/social-share.js/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1626847719117},{"_id":"public/lib/social-share.js/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1626847719117},{"_id":"public/images/20210508015248.jpg","hash":"4a9c0c031d718fbe16e4688850b559f2f627f53b","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1626847719117},{"_id":"public/images/card-avatar2.jpeg","hash":"0c26051e7302dcde32d546da24cc24de9f1ad23c","modified":1626847719117},{"_id":"public/images/header-darling2.webp","hash":"9f283b3656471833c7f768e97852140dfe12742f","modified":1626847719117},{"_id":"public/images/header-sagiri.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1626847719117},{"_id":"public/images/header.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1626847719117},{"_id":"public/images/live2d/33/33.2048/texture_00.webp","hash":"ea15326bcbb692a272dbd793163e55c030fedda8","modified":1626847719117},{"_id":"public/images/live2d/22/22.2048/texture_00.webp","hash":"e5dafe1d0eb1859c5be3643fc0723e4d0b10f7f8","modified":1626847719117},{"_id":"public/css/main.css","hash":"a01c7e5bf97dc65321ef6f5e9dc4421098835fc0","modified":1626847719117},{"_id":"public/images/header-darling2.jpg","hash":"e2ae6c5df17411838955d231e9a76321b2001c5c","modified":1626847719117},{"_id":"public/images/header-gyx.webp","hash":"194c54813297f72538dd2ae62ae538ce9ba4245d","modified":1626847719117},{"_id":"public/images/header-mai.webp","hash":"a5aa4f650bf5a998fd792d035b76171e908d9c32","modified":1626847719117},{"_id":"public/images/live2d/22/22.moc","hash":"63a7992de8c4658ee432822b5710565481610f0e","modified":1626847719117},{"_id":"public/images/live2d/33/33.moc","hash":"80a030342ac1b6a7cd8acb441bcb207d8803b76b","modified":1626847719117},{"_id":"public/images/live2d/22/22.2048/texture_00.png","hash":"b002297b31421137a64fad594f7593133cea3cbf","modified":1626847719117},{"_id":"public/images/image-20210508020412096-0411479.png","hash":"c85ec3b6551e70ca4c0b61e3509019759e8bf785","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg","hash":"8a5ea329b1054ae64a60a6e6856ab4c582496fd8","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD.jpg","hash":"8a5ea329b1054ae64a60a6e6856ab4c582496fd8","modified":1626847719117},{"_id":"public/lib/velocity-animate/LICENSE.html","hash":"516383f7a076681d4d3a0e8e67e09c76059a75b8","modified":1626847719117},{"_id":"public/lib/velocity-animate/package.json","hash":"9bc53f857417d3e025f784f408a6472065c4d139","modified":1626847719117},{"_id":"public/lib/velocity-animate/README.html","hash":"e06a59498dab29f89a37c399b36a26658a2c3ce3","modified":1626847719117},{"_id":"public/images/live2d/22/22.model.json","hash":"c16b957438809a40df4c187ac285aaee0671e816","modified":1626847719117},{"_id":"public/images/live2d/33/33.model.json","hash":"1927910d9b88eff5d6ab1c6a604374efe8aed88e","modified":1626847719117},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1626847719117},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"ee1ffc6d2703dd2c591e2f4d4ed55ff82cba64f1","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1626847719117},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1626847719117},{"_id":"public/lib/sw-toolbox/sw-toolbox.js","hash":"7e2fd42a8ddb17450970c30a9bc5274f720e602c","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1626847719117},{"_id":"public/lib/velocity-animate/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1626847719117},{"_id":"public/lib/social-share.js/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1626847719117},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1626847719117},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1626847719117},{"_id":"public/images/header-gyx-s.png","hash":"2b6b2f9904f0bbd35715adae276e7d8fc20572f2","modified":1626847719117},{"_id":"public/images/header-mai.jpg","hash":"b9890a3d76f62437462475a2c51c6b8442898379","modified":1626847719117},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1626847719117},{"_id":"public/lib/velocity-animate/velocity.ui.js","hash":"7731c1bc444855b9b18bfb265cd1c4a169e6be37","modified":1626847719117},{"_id":"public/lib/social-share.js/js/jquery.share.min.js","hash":"7d3a7135cee30a5ccc38e2818a5bf8c03f7028a0","modified":1626847719117},{"_id":"public/lib/social-share.js/js/social-share.min.js","hash":"4798c0fe6c75506eebbbb3cab8cf01dcb7f59908","modified":1626847719117},{"_id":"public/images/image-20210507231725024.png","hash":"394e54f109af2bc2110f8303aded993782ff1800","modified":1626847719117},{"_id":"public/images/header-darlings.webp","hash":"0d3e794a5a402d615ec4a36fb525fedc3487a026","modified":1626847719117},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"e88e1996b1efe8de6be95e38679b3afae1985017","modified":1626847719117},{"_id":"public/lib/velocity-animate/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1626847719117},{"_id":"public/images/header-darlings.jpg","hash":"20156313f1e9b02f28da3f5ca7b7ac607c6ea4f0","modified":1626847719117},{"_id":"public/images/header-darling4.webp","hash":"cd9c479ef8c5d0e1d5d6d77259ca5e1522db9b8f","modified":1626847719117},{"_id":"public/images/header-darling3.webp","hash":"d8cdee7124b0a0e21fa9cc82bbb64134d3778061","modified":1626847719117},{"_id":"public/images/header-darling3.jpg","hash":"da8965efff676a86af6ed61451c3c13fe8a30bf3","modified":1626847719117},{"_id":"public/images/header-leg.webp","hash":"fd1692cd000bc739cc478785f2fbb2daa759ca5f","modified":1626847719117},{"_id":"public/images/live2d/33/33.2048/texture_00.png","hash":"6d710da6056de69bfe0c33ac1b9e837b327b2f7b","modified":1626847719117},{"_id":"public/images/header-leg.jpg","hash":"426445281820258e0859b78e3b5e8279546dc3f5","modified":1626847719117},{"_id":"public/images/header-darling4.jpg","hash":"e64b1131d266f98e81d68ca36dcf5324cb901e50","modified":1626847719117},{"_id":"public/lib/velocity-animate/velocity.js","hash":"44ae2520aa8ad47cf56b67bdba64e18d542c8618","modified":1626847719117},{"_id":"public/images/header-gyx.png","hash":"c72a623d4407c90df6cfb6ca22b1337ded8d831f","modified":1626847719117},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1626847719117},{"_id":"public/js/sagiri.min.js.map","hash":"9cc42ca41c31e864166928e9cc685779143387d6","modified":1626847719117},{"_id":"public/js/sagiri.min.js","hash":"1b78494738ea55f3ffa3acaa9984c4fb4d1341e7","modified":1626847719117},{"_id":"source/_posts/python学习.md","hash":"849a44f4399db87357f02182ac7eee05753e4f75","modified":1626937256733},{"_id":"source/_posts/学习Maven之Maven-Surefire-Plugin-JUnit篇.md","hash":"7799317c497523215d91a52d098a320c79875bd3","modified":1626923730212},{"_id":"public/学习Maven之Maven-Surefire-Plugin-JUnit篇/index.html","hash":"4e20d2789ee06ec38cde3679f513c3373f670a28","modified":1629188738235},{"_id":"public/python学习/index.html","hash":"bc05d2b2cc7f066915525ff8a1176ff7e5cfc908","modified":1629188738235},{"_id":"public/archives/2021/07/index.html","hash":"11e7ed700ebc8512afbc828f195d2c5db92ae78f","modified":1629249578178},{"_id":"source/_posts/一文教你用Typora-Gitee-码云-PicGo-实现-云-markdown笔记.md","hash":"dd267370adf56806ecf0fc0379f6910231bf2dbf","modified":1629795322993},{"_id":"public/一文教你用Typora-Gitee-码云-PicGo-实现-云-markdown笔记/index.html","hash":"d5422fc4dabb4940b74ab9a2dc743483d1c94314","modified":1629188738235},{"_id":"public/tags/gitee-typora-picgo/index.html","hash":"1a93fa60b7033a9fa8fcf6a347a9b58f8e6f4f37","modified":1629185814895},{"_id":"source/_posts/go加速.md","hash":"d213da2154fcafc30f6b603465dbfdff5e90ed87","modified":1629679118711},{"_id":"source/_posts/windowsTerminal美化.md","hash":"21ab75d4fb9baeba393a603b9eb9b43200984324","modified":1629679118735},{"_id":"source/_posts/powershell7不识别最新path.md","hash":"f77babcf4b137e62eca6ba1830ea9cef48f7e717","modified":1629679118726},{"_id":"source/_posts/yarn设置淘宝镜像源.md","hash":"ab38d49ce1ad398040fb796303beab400dd995e7","modified":1629679118737},{"_id":"source/_posts/注解customParam在并发下问题.md","hash":"ea664519bc36162135834108f26529461cbe30c5","modified":1629679118751},{"_id":"source/_posts/用-Docker-每日自动化备份-MySQL-Postgres-或-MongoDB-并上传到-minio.md","hash":"447c06bde61805c4d258ccf2babfad695142c509","modified":1629679118752},{"_id":"source/_posts/记录-WSL-从-C-盘迁移至-D-盘.md","hash":"84afb3f7bdabf0b5b1700fe6e5dfe0a35e6f420c","modified":1629679118757},{"_id":"source/_posts/迁移数据.md","hash":"a0930240b87419002bfd4a65d48f8dabc725f11e","modified":1628133149897},{"_id":"source/_posts/gitea启动报错.md","hash":"89d915495ec5c57c2547913b1739bb559821329c","modified":1629679118709},{"_id":"public/gitea启动报错/index.html","hash":"f1e262663ff83af175027cfca0cb403efdc236ad","modified":1629188738235},{"_id":"public/记录-WSL-从-C-盘迁移至-D-盘/index.html","hash":"9243c2ea23cb560fe6771cc5642347d22e324c51","modified":1629188738235},{"_id":"public/迁移数据/index.html","hash":"036fc7f2f0cb3a9ec5c223ad2226aa05d2e37c82","modified":1629188738235},{"_id":"public/go加速/index.html","hash":"849c90f19c46e2949acfb873c890bf507be42e72","modified":1629188738235},{"_id":"public/yarn设置淘宝镜像源/index.html","hash":"84fcb1aa2ba573c4455c33c976ea92062f3ace8e","modified":1629188738235},{"_id":"public/powershell7不识别最新path/index.html","hash":"204728a2478c70b0a9687d6cc55d9ef3aef4520f","modified":1629188738235},{"_id":"public/注解customParam在并发下问题/index.html","hash":"1381119600988ba5da5367731c39eda590e1b6f8","modified":1629188738235},{"_id":"public/windowsTerminal美化/index.html","hash":"cb237ac6f94c49663f774d881f09af1fbc91500a","modified":1629188738235},{"_id":"public/用-Docker-每日自动化备份-MySQL-Postgres-或-MongoDB-并上传到-minio/index.html","hash":"5304db5a9bd10e0857612fdf2d5be7ef422b6170","modified":1629188738235},{"_id":"public/archives/2021/08/index.html","hash":"a4f355df5ec0b547c38125116779a1d3ec1db6f5","modified":1629249578178},{"_id":"public/tags/go/index.html","hash":"702e5683053b8a7f6b86c9e9b957c3970e0aaca6","modified":1629185814895},{"_id":"public/tags/windowsTerminal-powershell7/index.html","hash":"0419cab04f9483bb91559a1268218db4e60b575c","modified":1629185814895},{"_id":"public/tags/powershell7/index.html","hash":"bcf2adeadc9654a3f174dd6676368188921db1ff","modified":1629185814895},{"_id":"public/tags/yarn/index.html","hash":"c8b61d7f14616cde31ff3f776f17f39af0294634","modified":1629185814895},{"_id":"public/tags/注解-customParam/index.html","hash":"7899a4ac70ce651172e024aea04304a52880d779","modified":1629185814895},{"_id":"public/tags/docker-备份/index.html","hash":"571ccd1794a5b8907df264fa0070c4bb12f438f5","modified":1629185814895},{"_id":"public/page/3/index.html","hash":"ba2ceca8ef89c9e8e0469f9a4e67cd8903940c3c","modified":1629249578178},{"_id":"source/_posts/Hexo使用攻略-添加分类及标签.md","hash":"bc57ecc76c26b1de7727397d1a9901a2742303a4","modified":1629679118692},{"_id":"source/_posts/linux命令.md","hash":"01cf0e67af31bf31cffd9b54ba91d93d51ef7b0e","modified":1629679118720},{"_id":"source/_posts/Timeout-exceeded-try-increasing-it-by-passing-timeout-option.md","hash":"366bc69159947cd3ff1cf2598f6bfa286a715321","modified":1629679118702},{"_id":"source/_posts/ManjaroLinux搭建.md","hash":"2ea3e445d3b248cda48836f3ae06ab966eac4051","modified":1629679118694},{"_id":"source/categories/index.md","hash":"8899f02e79ffec326de2efd1d26e2c9c4048f38d","modified":1628817962319},{"_id":"source/_posts/postgresql-与PostgreSQL中的FOUND-ROWS-函数等效.md","hash":"2968b213ef735aa8c80ac55c3b38cf074b880df2","modified":1629679118725},{"_id":"source/_posts/请使用startship来进行命令行.md","hash":"3295a5d72de57a719c7a5f420b790d9a414930b9","modified":1629679118760},{"_id":"source/_posts/Mybatis-plus-SQL性能优化（分页数据获取.md","hash":"cefd68f0bc8e70261c940758886d8fa8668db3c8","modified":1629679118696},{"_id":"public/categories/index.html","hash":"cf857f75c58cb99cecdbec1b273541b24171076e","modified":1629249578178},{"_id":"public/linux命令/index.html","hash":"ded0a2a8c21140d1d801e133c0468af633fed7f3","modified":1629249578178},{"_id":"public/Timeout-exceeded-try-increasing-it-by-passing-timeout-option/index.html","hash":"fc0dadd428f8c950932321c0d595047b20f15e0b","modified":1629188738235},{"_id":"public/Hexo使用攻略-添加分类及标签/index.html","hash":"2b61605c2e0bd07c669ed1f2c863f64cc6af7949","modified":1629249578178},{"_id":"public/postgresql-与PostgreSQL中的FOUND-ROWS-函数等效/index.html","hash":"a1dba969d093d42c9849a1e1807e35207db215e0","modified":1629188738235},{"_id":"public/请使用startship来进行命令行/index.html","hash":"4a12a86b1fd53556148c75831568b8c119cce9cd","modified":1629188738235},{"_id":"public/Mybatis-plus-SQL性能优化（分页数据获取/index.html","hash":"8fa19299c0d718f23985d7f6a587724dcc1c62d8","modified":1629188738235},{"_id":"public/ManjaroLinux搭建/index.html","hash":"3f6c6cd799dcb8fcd56a20209e5310d0bf92377f","modified":1629188738235},{"_id":"public/categories/web前端/index.html","hash":"c15674580df58bfaec904588be210a4c35ee6bdf","modified":1629185814895},{"_id":"public/tags/mybatis-分页/index.html","hash":"9f82e1f3a31b47eb74795de23d7833445b842db0","modified":1629185814895},{"_id":"public/tags/linnux-manjarco/index.html","hash":"d9b11af0b6d15a8a143361694940793249dafdb9","modified":1629185814895},{"_id":"public/tags/golang/index.html","hash":"eb6af77c0a5f65e2264fa65db1f0357f66b02335","modified":1629185814895},{"_id":"public/tags/linux/index.html","hash":"0257cbe9bd4bd2cb11ce6bb4f8f6c2013664773c","modified":1629185814895},{"_id":"public/tags/postgres-mysql-found-rows/index.html","hash":"b1786571928d06cfbfb38f09d0d4f182d82603ed","modified":1629185814895},{"_id":"public/page/4/index.html","hash":"b93d3aff204b55e45352cb5ccd8edf5b9e76c988","modified":1629249578178},{"_id":"source/tags/index.md","hash":"156a250e6221578b6a851a1fb4ad0362579d8965","modified":1628818183898},{"_id":"public/tags/index.html","hash":"0a26d465c0d707fecc6afbd4645b1435741196bb","modified":1629249578178},{"_id":"public/tags/hexo/index.html","hash":"88663d68bd15db2479013ce019a72c0b1c29f36f","modified":1629185814895},{"_id":"public/tags/shell/index.html","hash":"f4b466c05dab4b9dac71229028f44652dfc6c3d0","modified":1629249578178},{"_id":"public/tags/表单验证/index.html","hash":"bc9c7ce1fe1adb22579008cd892be2290e7374b3","modified":1629185814895},{"_id":"source/_posts/Hadoop-CDH发行版-集群离线部署教程.md","hash":"283a3124f9ea85863a6e057b705e5dc16aa4b68b","modified":1629679118690},{"_id":"source/_posts/Postgresql数据库cpu使用率高排查和解决.md","hash":"4cfbab0ff0b8ec7af44ab92318b3917bb3c545b8","modified":1629679118699},{"_id":"source/_posts/Git-子模块.md","hash":"9d5a03ddf7bc297c16f5dfd21102fb9a394fdb47","modified":1629679118685},{"_id":"source/_posts/django报错Authentication-plugin-caching-sha2-password.md","hash":"d2763c19e389e725706ac2541a4abff8dee148a7","modified":1629679118705},{"_id":"source/_posts/idea-plugins开发.md","hash":"432aee344b4666861f463d15928f7c543e9a9c43","modified":1629679118717},{"_id":"source/_posts/gradle-解决error-unmappable-character-for-encoding-gbk.md","hash":"0404184cec91227577012dbf4db7034346370ce1","modified":1629679118712},{"_id":"source/_posts/开发人员必知的SQL优化技巧.md","hash":"40c3260ba1792174b2a101865942cd5a9c1788b9","modified":1629679118748},{"_id":"public/django报错Authentication-plugin-caching-sha2-password/index.html","hash":"8213b8895c1e3db030dcc1d852fba00e1ee3b021","modified":1629188738235},{"_id":"public/gradle-解决error-unmappable-character-for-encoding-gbk/index.html","hash":"8cb0a46d5c1bbd0931b31e1aa572b92d7e191a8e","modified":1629188738235},{"_id":"public/Git-子模块/index.html","hash":"f0c1bd6da2530455dd487021947a89f3b196e4e7","modified":1629249578178},{"_id":"public/Hadoop-CDH发行版-集群离线部署教程/index.html","hash":"fec40e6ac2bf504541c10c81b914d59026d30e97","modified":1629189383830},{"_id":"public/idea-plugins开发/index.html","hash":"368dac638a26d577a0b90907d5b7b2020b558796","modified":1629188738235},{"_id":"public/开发人员必知的SQL优化技巧/index.html","hash":"e7fd00ad1161e29c618316d714921a99a2b674f6","modified":1629188738235},{"_id":"public/Postgresql数据库cpu使用率高排查和解决/index.html","hash":"edba2c1a6f327444c37aa154bdca8b6634090fbd","modified":1629188738235},{"_id":"public/categories/tools/index.html","hash":"9ac6489c9e4cfd199eb935297c8d472a3ddb8d36","modified":1629185814895},{"_id":"public/categories/bigdata/index.html","hash":"869f4389f742ffa5009c2aad086aa8a844f94767","modified":1629185814895},{"_id":"public/categories/数据库/index.html","hash":"2457210c63c5df77cf388140e79fb4534ddbb026","modified":1629185814895},{"_id":"public/page/5/index.html","hash":"10873a4ade09b512e7a8869b86b98ed2d4fb5887","modified":1629249578178},{"_id":"public/tags/git/index.html","hash":"dc04b498660c7350f5083f17adc501c3fed89330","modified":1629185814895},{"_id":"public/tags/python/index.html","hash":"b1b6287e6eefafa0a021fca470c13b6827a21aab","modified":1629185814895},{"_id":"public/tags/postgres/index.html","hash":"9f298bc32b52dc974635b0b3ddf06e2577271b21","modified":1629185814895},{"_id":"public/tags/sql/index.html","hash":"29d1d556700a952fe884772b870e4cb446fd8efa","modified":1629185814895},{"_id":"public/tags/gradle/index.html","hash":"8bb71967c9602a310839ff9870f3de7145035338","modified":1629185814895},{"_id":"public/tags/java/index.html","hash":"4188afce19a65f52de6c357b44af8220a0049f3c","modified":1629185814895},{"_id":"source/_posts/cdh集成flink1-12.md","hash":"9b0dfe7592a1c6a66aafaa63e2b4b1e32199f870","modified":1629679118703},{"_id":"public/cdh集成flink1-12/index.html","hash":"fefec8ac4fd97aba44968f129d755c9d21be7a93","modified":1629249578178},{"_id":"public/categories/linux/index.html","hash":"a1276b784905320e73889a3cc44fefa9bdaa1d4a","modified":1629249578178},{"_id":"source/CNAME","hash":"0c2296970772de848541bd7c2e9cfbe9f74fb735","modified":1629679118680},{"_id":"source/browserconfig.xml","hash":"83699de65898612182974bc15e01756432fb5cf9","modified":1629679118773},{"_id":"source/android-chrome-256x256.png","hash":"f20d08929cb840cb5148227cdbe9c219b887d95f","modified":1629679118768},{"_id":"source/android-chrome-256x256.webp","hash":"1f05572eb58ddd35c0b3885f3e906c523c886df3","modified":1629679118769},{"_id":"source/android-chrome-192x192.webp","hash":"f61b1615c82acf52aacac07038ecc4fbf130fc9f","modified":1629679118767},{"_id":"source/apple-touch-icon.png","hash":"6e89a84032262cbf1ebe5aee23edccf29081d1f2","modified":1629679118770},{"_id":"source/favicon-16x16.webp","hash":"df3f7e40344a5b37e73e8783c6a9caa2d2c01acf","modified":1629679118780},{"_id":"source/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1629679118778},{"_id":"source/card.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1629679118774},{"_id":"source/apple-touch-icon.webp","hash":"ee326b691b0b2c7997d75cb7caa6487f6d2828bf","modified":1629679118772},{"_id":"source/favicon-16x16.png","hash":"20b70672bc4a70231e68fb24b9cf7a55b4e684a5","modified":1629679118779},{"_id":"source/manifest.json","hash":"aa402712cb9f85ace7ac61263c097046657bf03d","modified":1629679118878},{"_id":"source/favicon-32x32.png","hash":"c1d0ec90c13b3cacc1e75d71658111e0af178912","modified":1629679118781},{"_id":"source/favicon-32x32.webp","hash":"078619032ccb0894c9828659216e039b44d2c1de","modified":1629679118783},{"_id":"source/android-chrome-192x192.png","hash":"271e0371f46fbd5720d8761e1d68253a91fa1c95","modified":1629679118766},{"_id":"source/mstile-150x150.png","hash":"f632b2a90a15c0024db2fd912010e87f210b5669","modified":1629679118879},{"_id":"source/mstile-150x150.webp","hash":"81b89e1acbf4c35f220289bb507e13353a28d4de","modified":1629679118880},{"_id":"source/_posts/Node-js-依赖镜像加速.md","hash":"6b765375fbf3e7261706b466b2f1b345024fb3f8","modified":1629687353502},{"_id":"source/_posts/cdh集成es.md","hash":"43227d27f9340296211f094a33ab84c2215b8487","modified":1629702964241},{"_id":"source/_posts/drone升级到2-0.md","hash":"90424b74d35c1f37c15d2085c0100421c9cb7cf8","modified":1629795389476},{"_id":"source/_posts/flink-sql-streaming平台搭建记录.md","hash":"53ff81a484d7001f0c954c28562d1ebeb2d9e365","modified":1629679118706},{"_id":"source/sw.js","hash":"6859ffca19ca24df172441775cd3fc4145293eee","modified":1629679118882},{"_id":"source/_posts/flink1-12编译失败记录.md","hash":"4304c30d508aeaac96703852c3f2e6c4331f96d7","modified":1629679118708},{"_id":"source/_posts/git-commit规范化.md","hash":"7f49c56c83803ea916c7088d72eb2e7d4f53fc7b","modified":1629790815357},{"_id":"source/_posts/flinkx调研.md","hash":"885674c5614dc4676774a9f3572e6f847a241df0","modified":1629689006362},{"_id":"source/_posts/jdbc-自增id-原理-PostgreSQL数据库实现表字段的自增.md","hash":"cd22640576272e31493108312c024f27e82cdd2c","modified":1629852727977},{"_id":"source/_posts/mybatis异常问题的捕获.md","hash":"ef49dd9c571a2a4f85aba7a889c86668c43c90c6","modified":1629790712523},{"_id":"source/_posts/mybatis配置-返回date类型丢失时间.md","hash":"61b79d8eb4f2a292644bd81f60b0b6bc297498b1","modified":1629789756752},{"_id":"source/_posts/redis-cluster搭建.md","hash":"b8b5338daef70b1a71e214dbbdfa5538fa520e42","modified":1629679118729},{"_id":"source/safari-pinned-tab.svg","hash":"7b1a41c816227fabedd525f65714451a56e3870a","modified":1629679118881},{"_id":"source/_posts/spacevim来管理vim.md","hash":"12669fb55e0490be107bd24c4613e70db694a164","modified":1629794475655},{"_id":"source/_posts/一次成功的FlinkSQL功能测试及实战演练.md","hash":"1b45c2eb7465a9f752f9cf089964d6bf810b4915","modified":1629709761777},{"_id":"source/_posts/使用容器方式编译无功能限制的-Drone-CI.md","hash":"0fbf1f5e63c4e94034e003f597859d62623168eb","modified":1629874113670},{"_id":"source/_posts/使用-SSH-config-文件.md","hash":"f07b756e4a38dc38f038583ea470f69b6b05d3f8","modified":1629679118742},{"_id":"source/_posts/如何让-YARN-支持-CNPM-的完整加速.md","hash":"c2e41de7cbc13864750665013fdf7041c26c9b50","modified":1629679118745},{"_id":"source/_posts/限制wsl2占用过多内存.md","hash":"38c68984410277ab7380df230db834d8d45235ff","modified":1629878336359},{"_id":"source/favicon.ico","hash":"2d7ec086b029d8a224a4dae1a428c6a3f6209d92","modified":1629679118784}],"Category":[{"name":"web前端","_id":"cks9o6oc500030pv9dbbxenp0"},{"name":"tools","_id":"cksfr6gz30002iqv9bk1d84bw"},{"name":"bigdata","_id":"cksfr6gzg0005iqv9e4wv4vvj"},{"name":"数据库","_id":"cksfr6gzl000diqv941eg6s8t"},{"name":"linux","_id":"cksgt5aic0001adv9b6xl3szg"},{"name":"nodejs","_id":"cksr8n6o90005cmv9efqceezd"},{"name":"devops","_id":"cksr8n6oi000gcmv9e6ie7mco"},{"name":"database","_id":"cksr8n6ot000xcmv972q23q1p"},{"name":"mybatis","_id":"cksr8n6ov0011cmv9fgjbbar6"},{"name":"前端","_id":"cksr8n6p4001jcmv93nnxglkh"}],"Data":[],"Page":[{"title":"About me","date":"2020-12-22T13:57:51.000Z","_content":"","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2020-12-22 21:57:51\n---\n","updated":"2021-06-07T03:01:29.878Z","path":"about/me.html","comments":1,"layout":"page","_id":"ckpp6ut4w0000dgv9c1nv3q9d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-08-13T01:22:29.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-08-13 09:22:29\ntype: \"categories\"\n---\n","updated":"2021-08-13T01:26:02.319Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cks9o6oc300010pv9hdqw7eo6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-08-13T01:28:50.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-08-13 09:28:50\ntype: \"tags\"\n---\n","updated":"2021-08-13T01:29:43.898Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cks9oczwz0000plv9hzj356ak","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"{\"name\":\"Hi, HXF\",\"short_name\":\"Hi, HXF\",\"icons\":[{\"src\":\"/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"/android-chrome-256x256.png\",\"sizes\":\"256x256\",\"type\":\"image/png\"}],\"theme_color\":\"#fff\",\"background_color\":\"#fff\",\"display\":\"standalone\",\"start_url\":\"/\"}","source":"manifest.json","raw":"{\"name\":\"Hi, HXF\",\"short_name\":\"Hi, HXF\",\"icons\":[{\"src\":\"/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"/android-chrome-256x256.png\",\"sizes\":\"256x256\",\"type\":\"image/png\"}],\"theme_color\":\"#fff\",\"background_color\":\"#fff\",\"display\":\"standalone\",\"start_url\":\"/\"}","date":"2021-08-23T00:38:38.878Z","updated":"2021-08-23T00:38:38.878Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"cksr8n6lq0000cmv92dmka8z7","content":"{\"name\":\"Hi, HXF\",\"short_name\":\"Hi, HXF\",\"icons\":[{\"src\":\"/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"/android-chrome-256x256.png\",\"sizes\":\"256x256\",\"type\":\"image/png\"}],\"theme_color\":\"#fff\",\"background_color\":\"#fff\",\"display\":\"standalone\",\"start_url\":\"/\"}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"Hi, HXF\",\"short_name\":\"Hi, HXF\",\"icons\":[{\"src\":\"/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"/android-chrome-256x256.png\",\"sizes\":\"256x256\",\"type\":\"image/png\"}],\"theme_color\":\"#fff\",\"background_color\":\"#fff\",\"display\":\"standalone\",\"start_url\":\"/\"}"},{"_content":"importScripts('https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/workbox-sw.js');\n\nworkbox.setConfig({\n    modulePathPrefix: 'https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/'\n});\n\nconst { core, precaching, routing, strategies, expiration, cacheableResponse, backgroundSync } = workbox;\nconst { CacheFirst, NetworkFirst, NetworkOnly, StaleWhileRevalidate } = strategies;\nconst { ExpirationPlugin } = expiration;\nconst { CacheableResponsePlugin } = cacheableResponse;\n\nconst cacheSuffixVersion = '-200629',\n    // precacheCacheName = core.cacheNames.precache,\n    // runtimeCacheName = core.cacheNames.runtime,\n    maxEntries = 100;\n\nself.addEventListener('activate', (event) => {\n    event.waitUntil(\n        caches.keys().then((keys) => {\n            return Promise.all(keys.map((key) => {\n                if (!key.includes(cacheSuffixVersion)) return caches.delete(key);\n            }));\n        })\n    );\n});\n\n\ncore.setCacheNameDetails({\n    prefix: 'hidiygod',\n    suffix: cacheSuffixVersion\n});\n\ncore.skipWaiting();\ncore.clientsClaim();\nprecaching.cleanupOutdatedCaches();\n\n/*\n * Precache\n * - Static Assets\n */\nprecaching.precacheAndRoute(\n    [\n        { url: 'https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js', revision: null },\n    ],\n);\n\n/*\n * Cache File From jsDelivr\n * cdn.jsdelivr.net | shadow.elemecdn.com\n *\n * Method: CacheFirst\n * cacheName: static-immutable\n * cacheTime: 30d\n */\n\n// cdn.jsdelivr.net - cors enabled\nrouting.registerRoute(\n    /.*cdn\\.jsdelivr\\.net/,\n    new CacheFirst({\n        cacheName: 'static-immutable' + cacheSuffixVersion,\n        fetchOptions: {\n            mode: 'cors',\n            credentials: 'omit'\n        },\n        plugins: [\n            new ExpirationPlugin({\n                maxAgeSeconds: 30 * 24 * 60 * 60,\n                purgeOnQuotaError: true\n            })\n        ]\n    })\n);\n\n/*\n * Google Analytics Async - No Cache\n *\n * Mathod: networkOnly\n */\n\nrouting.registerRoute(\n    /.*\\.google-analytics\\.com/,\n    new NetworkOnly({\n        plugins: [\n            new backgroundSync.BackgroundSyncPlugin('Optical_Collect', {\n                maxRetentionTime: 12 * 60 // Retry for max of 12 Hours (specified in minutes)\n            }),\n        ]\n    })\n);\n\n\n/*\n * API - No Cache\n *\n * Method: networkOnly\n */\nrouting.registerRoute(\n    new RegExp('https://api\\.i-meto\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://ip\\.diygod\\.me'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://hrddibvw\\.api\\.lncldglobal\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://disqus\\.diygod\\.me'),\n    new NetworkFirst({\n        cacheName: 'api' + cacheSuffixVersion,\n        fetchOptions: {\n            mode: 'cors',\n            credentials: 'omit'\n        },\n        networkTimeoutSeconds: 3\n    })\n);\n\n/*\n * Disqus Related - No cache\n * disqus.com\n * *.disquscdn.com\n *\n * Method: NetworkOnly\n */\nrouting.registerRoute(\n    new RegExp('^https://(.*)disqus\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('^https://(.*)disquscdn\\.com(.*)'),\n    new NetworkOnly()\n);\n\n/*\n * Others img\n * Method: staleWhileRevalidate\n * cacheName: img-cache\n */\nrouting.registerRoute(\n    // Cache image files\n    /.*\\.(?:png|jpg|jpeg|svg|gif|webp)/,\n    new StaleWhileRevalidate()\n);\n\n/*\n * Static Assets\n * Method: staleWhileRevalidate\n * cacheName: static-assets-cache\n */\nrouting.registerRoute(\n    // Cache CSS files\n    /.*\\.(css|js)/,\n    // Use cache but update in the background ASAP\n    new StaleWhileRevalidate()\n);\n\n/*\n * sw.js - Revalidate every time\n * staleWhileRevalidate\n */\nrouting.registerRoute(\n    '/js/sw.js',\n    new StaleWhileRevalidate()\n);\n\n/*\n * Default - Serve as it is\n * networkFirst\n */\nrouting.setDefaultHandler(\n    new NetworkFirst({\n        networkTimeoutSeconds: 3\n    })\n);\n","source":"sw.js","raw":"importScripts('https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/workbox-sw.js');\n\nworkbox.setConfig({\n    modulePathPrefix: 'https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/'\n});\n\nconst { core, precaching, routing, strategies, expiration, cacheableResponse, backgroundSync } = workbox;\nconst { CacheFirst, NetworkFirst, NetworkOnly, StaleWhileRevalidate } = strategies;\nconst { ExpirationPlugin } = expiration;\nconst { CacheableResponsePlugin } = cacheableResponse;\n\nconst cacheSuffixVersion = '-200629',\n    // precacheCacheName = core.cacheNames.precache,\n    // runtimeCacheName = core.cacheNames.runtime,\n    maxEntries = 100;\n\nself.addEventListener('activate', (event) => {\n    event.waitUntil(\n        caches.keys().then((keys) => {\n            return Promise.all(keys.map((key) => {\n                if (!key.includes(cacheSuffixVersion)) return caches.delete(key);\n            }));\n        })\n    );\n});\n\n\ncore.setCacheNameDetails({\n    prefix: 'hidiygod',\n    suffix: cacheSuffixVersion\n});\n\ncore.skipWaiting();\ncore.clientsClaim();\nprecaching.cleanupOutdatedCaches();\n\n/*\n * Precache\n * - Static Assets\n */\nprecaching.precacheAndRoute(\n    [\n        { url: 'https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js', revision: null },\n    ],\n);\n\n/*\n * Cache File From jsDelivr\n * cdn.jsdelivr.net | shadow.elemecdn.com\n *\n * Method: CacheFirst\n * cacheName: static-immutable\n * cacheTime: 30d\n */\n\n// cdn.jsdelivr.net - cors enabled\nrouting.registerRoute(\n    /.*cdn\\.jsdelivr\\.net/,\n    new CacheFirst({\n        cacheName: 'static-immutable' + cacheSuffixVersion,\n        fetchOptions: {\n            mode: 'cors',\n            credentials: 'omit'\n        },\n        plugins: [\n            new ExpirationPlugin({\n                maxAgeSeconds: 30 * 24 * 60 * 60,\n                purgeOnQuotaError: true\n            })\n        ]\n    })\n);\n\n/*\n * Google Analytics Async - No Cache\n *\n * Mathod: networkOnly\n */\n\nrouting.registerRoute(\n    /.*\\.google-analytics\\.com/,\n    new NetworkOnly({\n        plugins: [\n            new backgroundSync.BackgroundSyncPlugin('Optical_Collect', {\n                maxRetentionTime: 12 * 60 // Retry for max of 12 Hours (specified in minutes)\n            }),\n        ]\n    })\n);\n\n\n/*\n * API - No Cache\n *\n * Method: networkOnly\n */\nrouting.registerRoute(\n    new RegExp('https://api\\.i-meto\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://ip\\.diygod\\.me'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://hrddibvw\\.api\\.lncldglobal\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://disqus\\.diygod\\.me'),\n    new NetworkFirst({\n        cacheName: 'api' + cacheSuffixVersion,\n        fetchOptions: {\n            mode: 'cors',\n            credentials: 'omit'\n        },\n        networkTimeoutSeconds: 3\n    })\n);\n\n/*\n * Disqus Related - No cache\n * disqus.com\n * *.disquscdn.com\n *\n * Method: NetworkOnly\n */\nrouting.registerRoute(\n    new RegExp('^https://(.*)disqus\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('^https://(.*)disquscdn\\.com(.*)'),\n    new NetworkOnly()\n);\n\n/*\n * Others img\n * Method: staleWhileRevalidate\n * cacheName: img-cache\n */\nrouting.registerRoute(\n    // Cache image files\n    /.*\\.(?:png|jpg|jpeg|svg|gif|webp)/,\n    new StaleWhileRevalidate()\n);\n\n/*\n * Static Assets\n * Method: staleWhileRevalidate\n * cacheName: static-assets-cache\n */\nrouting.registerRoute(\n    // Cache CSS files\n    /.*\\.(css|js)/,\n    // Use cache but update in the background ASAP\n    new StaleWhileRevalidate()\n);\n\n/*\n * sw.js - Revalidate every time\n * staleWhileRevalidate\n */\nrouting.registerRoute(\n    '/js/sw.js',\n    new StaleWhileRevalidate()\n);\n\n/*\n * Default - Serve as it is\n * networkFirst\n */\nrouting.setDefaultHandler(\n    new NetworkFirst({\n        networkTimeoutSeconds: 3\n    })\n);\n","date":"2021-08-23T00:38:38.882Z","updated":"2021-08-23T00:38:38.882Z","path":"sw.js","layout":"false","title":"","comments":1,"_id":"cksr8n6mb0001cmv9h5tn1qy8","content":"importScripts('https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/workbox-sw.js');\n\nworkbox.setConfig({\n    modulePathPrefix: 'https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/'\n});\n\nconst { core, precaching, routing, strategies, expiration, cacheableResponse, backgroundSync } = workbox;\nconst { CacheFirst, NetworkFirst, NetworkOnly, StaleWhileRevalidate } = strategies;\nconst { ExpirationPlugin } = expiration;\nconst { CacheableResponsePlugin } = cacheableResponse;\n\nconst cacheSuffixVersion = '-200629',\n    // precacheCacheName = core.cacheNames.precache,\n    // runtimeCacheName = core.cacheNames.runtime,\n    maxEntries = 100;\n\nself.addEventListener('activate', (event) => {\n    event.waitUntil(\n        caches.keys().then((keys) => {\n            return Promise.all(keys.map((key) => {\n                if (!key.includes(cacheSuffixVersion)) return caches.delete(key);\n            }));\n        })\n    );\n});\n\n\ncore.setCacheNameDetails({\n    prefix: 'hidiygod',\n    suffix: cacheSuffixVersion\n});\n\ncore.skipWaiting();\ncore.clientsClaim();\nprecaching.cleanupOutdatedCaches();\n\n/*\n * Precache\n * - Static Assets\n */\nprecaching.precacheAndRoute(\n    [\n        { url: 'https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js', revision: null },\n    ],\n);\n\n/*\n * Cache File From jsDelivr\n * cdn.jsdelivr.net | shadow.elemecdn.com\n *\n * Method: CacheFirst\n * cacheName: static-immutable\n * cacheTime: 30d\n */\n\n// cdn.jsdelivr.net - cors enabled\nrouting.registerRoute(\n    /.*cdn\\.jsdelivr\\.net/,\n    new CacheFirst({\n        cacheName: 'static-immutable' + cacheSuffixVersion,\n        fetchOptions: {\n            mode: 'cors',\n            credentials: 'omit'\n        },\n        plugins: [\n            new ExpirationPlugin({\n                maxAgeSeconds: 30 * 24 * 60 * 60,\n                purgeOnQuotaError: true\n            })\n        ]\n    })\n);\n\n/*\n * Google Analytics Async - No Cache\n *\n * Mathod: networkOnly\n */\n\nrouting.registerRoute(\n    /.*\\.google-analytics\\.com/,\n    new NetworkOnly({\n        plugins: [\n            new backgroundSync.BackgroundSyncPlugin('Optical_Collect', {\n                maxRetentionTime: 12 * 60 // Retry for max of 12 Hours (specified in minutes)\n            }),\n        ]\n    })\n);\n\n\n/*\n * API - No Cache\n *\n * Method: networkOnly\n */\nrouting.registerRoute(\n    new RegExp('https://api\\.i-meto\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://ip\\.diygod\\.me'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://hrddibvw\\.api\\.lncldglobal\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://disqus\\.diygod\\.me'),\n    new NetworkFirst({\n        cacheName: 'api' + cacheSuffixVersion,\n        fetchOptions: {\n            mode: 'cors',\n            credentials: 'omit'\n        },\n        networkTimeoutSeconds: 3\n    })\n);\n\n/*\n * Disqus Related - No cache\n * disqus.com\n * *.disquscdn.com\n *\n * Method: NetworkOnly\n */\nrouting.registerRoute(\n    new RegExp('^https://(.*)disqus\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('^https://(.*)disquscdn\\.com(.*)'),\n    new NetworkOnly()\n);\n\n/*\n * Others img\n * Method: staleWhileRevalidate\n * cacheName: img-cache\n */\nrouting.registerRoute(\n    // Cache image files\n    /.*\\.(?:png|jpg|jpeg|svg|gif|webp)/,\n    new StaleWhileRevalidate()\n);\n\n/*\n * Static Assets\n * Method: staleWhileRevalidate\n * cacheName: static-assets-cache\n */\nrouting.registerRoute(\n    // Cache CSS files\n    /.*\\.(css|js)/,\n    // Use cache but update in the background ASAP\n    new StaleWhileRevalidate()\n);\n\n/*\n * sw.js - Revalidate every time\n * staleWhileRevalidate\n */\nrouting.registerRoute(\n    '/js/sw.js',\n    new StaleWhileRevalidate()\n);\n\n/*\n * Default - Serve as it is\n * networkFirst\n */\nrouting.setDefaultHandler(\n    new NetworkFirst({\n        networkTimeoutSeconds: 3\n    })\n);\n","site":{"data":{}},"excerpt":"","more":"importScripts('https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/workbox-sw.js');\n\nworkbox.setConfig({\n    modulePathPrefix: 'https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/'\n});\n\nconst { core, precaching, routing, strategies, expiration, cacheableResponse, backgroundSync } = workbox;\nconst { CacheFirst, NetworkFirst, NetworkOnly, StaleWhileRevalidate } = strategies;\nconst { ExpirationPlugin } = expiration;\nconst { CacheableResponsePlugin } = cacheableResponse;\n\nconst cacheSuffixVersion = '-200629',\n    // precacheCacheName = core.cacheNames.precache,\n    // runtimeCacheName = core.cacheNames.runtime,\n    maxEntries = 100;\n\nself.addEventListener('activate', (event) => {\n    event.waitUntil(\n        caches.keys().then((keys) => {\n            return Promise.all(keys.map((key) => {\n                if (!key.includes(cacheSuffixVersion)) return caches.delete(key);\n            }));\n        })\n    );\n});\n\n\ncore.setCacheNameDetails({\n    prefix: 'hidiygod',\n    suffix: cacheSuffixVersion\n});\n\ncore.skipWaiting();\ncore.clientsClaim();\nprecaching.cleanupOutdatedCaches();\n\n/*\n * Precache\n * - Static Assets\n */\nprecaching.precacheAndRoute(\n    [\n        { url: 'https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js', revision: null },\n    ],\n);\n\n/*\n * Cache File From jsDelivr\n * cdn.jsdelivr.net | shadow.elemecdn.com\n *\n * Method: CacheFirst\n * cacheName: static-immutable\n * cacheTime: 30d\n */\n\n// cdn.jsdelivr.net - cors enabled\nrouting.registerRoute(\n    /.*cdn\\.jsdelivr\\.net/,\n    new CacheFirst({\n        cacheName: 'static-immutable' + cacheSuffixVersion,\n        fetchOptions: {\n            mode: 'cors',\n            credentials: 'omit'\n        },\n        plugins: [\n            new ExpirationPlugin({\n                maxAgeSeconds: 30 * 24 * 60 * 60,\n                purgeOnQuotaError: true\n            })\n        ]\n    })\n);\n\n/*\n * Google Analytics Async - No Cache\n *\n * Mathod: networkOnly\n */\n\nrouting.registerRoute(\n    /.*\\.google-analytics\\.com/,\n    new NetworkOnly({\n        plugins: [\n            new backgroundSync.BackgroundSyncPlugin('Optical_Collect', {\n                maxRetentionTime: 12 * 60 // Retry for max of 12 Hours (specified in minutes)\n            }),\n        ]\n    })\n);\n\n\n/*\n * API - No Cache\n *\n * Method: networkOnly\n */\nrouting.registerRoute(\n    new RegExp('https://api\\.i-meto\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://ip\\.diygod\\.me'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://hrddibvw\\.api\\.lncldglobal\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('https://disqus\\.diygod\\.me'),\n    new NetworkFirst({\n        cacheName: 'api' + cacheSuffixVersion,\n        fetchOptions: {\n            mode: 'cors',\n            credentials: 'omit'\n        },\n        networkTimeoutSeconds: 3\n    })\n);\n\n/*\n * Disqus Related - No cache\n * disqus.com\n * *.disquscdn.com\n *\n * Method: NetworkOnly\n */\nrouting.registerRoute(\n    new RegExp('^https://(.*)disqus\\.com'),\n    new NetworkOnly()\n);\n\nrouting.registerRoute(\n    new RegExp('^https://(.*)disquscdn\\.com(.*)'),\n    new NetworkOnly()\n);\n\n/*\n * Others img\n * Method: staleWhileRevalidate\n * cacheName: img-cache\n */\nrouting.registerRoute(\n    // Cache image files\n    /.*\\.(?:png|jpg|jpeg|svg|gif|webp)/,\n    new StaleWhileRevalidate()\n);\n\n/*\n * Static Assets\n * Method: staleWhileRevalidate\n * cacheName: static-assets-cache\n */\nrouting.registerRoute(\n    // Cache CSS files\n    /.*\\.(css|js)/,\n    // Use cache but update in the background ASAP\n    new StaleWhileRevalidate()\n);\n\n/*\n * sw.js - Revalidate every time\n * staleWhileRevalidate\n */\nrouting.registerRoute(\n    '/js/sw.js',\n    new StaleWhileRevalidate()\n);\n\n/*\n * Default - Serve as it is\n * networkFirst\n */\nrouting.setDefaultHandler(\n    new NetworkFirst({\n        networkTimeoutSeconds: 3\n    })\n);\n"}],"Post":[{"title":"20201223","date":"2020-12-23T07:04:53.000Z","_content":"\n<u>中台数据完成部署：</u>\n\n**datax-web中k8s镜像部署**\n\n增量时间使用\n\nhttps://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md","source":"_posts/20201223.md","raw":"---\ntitle: 20201223\ndate: 2020-12-23 15:04:53\ntags:\n---\n\n<u>中台数据完成部署：</u>\n\n**datax-web中k8s镜像部署**\n\n增量时间使用\n\nhttps://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md","slug":"20201223","published":1,"updated":"2021-06-07T03:01:29.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpp6ut550001dgv9dhoyekhf","content":"<p><u>中台数据完成部署：</u></p>\n<p><strong>datax-web中k8s镜像部署</strong></p>\n<p>增量时间使用</p>\n<p><a href=\"https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md\">https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><u>中台数据完成部署：</u></p>\n<p><strong>datax-web中k8s镜像部署</strong></p>\n<p>增量时间使用</p>\n<p><a href=\"https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md\">https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md</a></p>\n"},{"title":"gradle配置","date":"2021-05-10T03:32:41.000Z","_content":"\ngrade配置：\n\n在~/.gradle/目录下新建 init.gradle文件\n<!--more-->\n\n```\nallprojects{\n\trepositories {\n\t\tdef REPOSITORY_URL = 'http://mvnrepo.alibaba-inc.com/mvn/repository/'\n\t\tall { ArtifactRepository repo ->\n\t\t\tif(repo instanceof MavenArtifactRepository){\n\t\t\t\tdef url = repo.url.toString()\n\t\t\t\tif (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {\n\t\t\t\t\tproject.logger.lifecycle \"Repository ${repo.url} replaced by $REPOSITORY_URL.\"\n\t\t\t\t\tremove repo\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmaven {\n\t\t //允许url改变\n\t\t allowInsecureProtocol = true\n\t\t\turl REPOSITORY_URL\n\t\t}\n\t}\n}\n```\n\n- `./gradlew idea`来初始化项目,打出以下信息说明maven地址已经修改成功了\n\n- 牛刀小试一下\n\n- ```\n  `git clone https://github.com/elastic/elasticsearch.git`\n  ```\n\n  ./gradlew idea\n\n","source":"_posts/gradle配置.md","raw":"---\ntitle: gradle配置\ndate: 2021-05-10 11:32:41\ntags:\n---\n\ngrade配置：\n\n在~/.gradle/目录下新建 init.gradle文件\n<!--more-->\n\n```\nallprojects{\n\trepositories {\n\t\tdef REPOSITORY_URL = 'http://mvnrepo.alibaba-inc.com/mvn/repository/'\n\t\tall { ArtifactRepository repo ->\n\t\t\tif(repo instanceof MavenArtifactRepository){\n\t\t\t\tdef url = repo.url.toString()\n\t\t\t\tif (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {\n\t\t\t\t\tproject.logger.lifecycle \"Repository ${repo.url} replaced by $REPOSITORY_URL.\"\n\t\t\t\t\tremove repo\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmaven {\n\t\t //允许url改变\n\t\t allowInsecureProtocol = true\n\t\t\turl REPOSITORY_URL\n\t\t}\n\t}\n}\n```\n\n- `./gradlew idea`来初始化项目,打出以下信息说明maven地址已经修改成功了\n\n- 牛刀小试一下\n\n- ```\n  `git clone https://github.com/elastic/elasticsearch.git`\n  ```\n\n  ./gradlew idea\n\n","slug":"gradle配置","published":1,"updated":"2021-08-23T00:38:38.714Z","_id":"ckpp6ut580003dgv9egdm93a2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>grade配置：</p>\n<p>在~/.gradle/目录下新建 init.gradle文件</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects&#123;</span><br><span class=\"line\">\trepositories &#123;</span><br><span class=\"line\">\t\tdef REPOSITORY_URL = &#x27;http://mvnrepo.alibaba-inc.com/mvn/repository/&#x27;</span><br><span class=\"line\">\t\tall &#123; ArtifactRepository repo -&gt;</span><br><span class=\"line\">\t\t\tif(repo instanceof MavenArtifactRepository)&#123;</span><br><span class=\"line\">\t\t\t\tdef url = repo.url.toString()</span><br><span class=\"line\">\t\t\t\tif (url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;) || url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t\t\tproject.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span><br><span class=\"line\">\t\t\t\t\tremove repo</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmaven &#123;</span><br><span class=\"line\">\t\t //允许url改变</span><br><span class=\"line\">\t\t allowInsecureProtocol = true</span><br><span class=\"line\">\t\t\turl REPOSITORY_URL</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>./gradlew idea</code>来初始化项目,打出以下信息说明maven地址已经修改成功了</p>\n</li>\n<li><p>牛刀小试一下</p>\n</li>\n<li><pre><code>`git clone https://github.com/elastic/elasticsearch.git`\n</code></pre>\n<p>./gradlew idea</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>grade配置：</p>\n<p>在~/.gradle/目录下新建 init.gradle文件</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects&#123;</span><br><span class=\"line\">\trepositories &#123;</span><br><span class=\"line\">\t\tdef REPOSITORY_URL = &#x27;http://mvnrepo.alibaba-inc.com/mvn/repository/&#x27;</span><br><span class=\"line\">\t\tall &#123; ArtifactRepository repo -&gt;</span><br><span class=\"line\">\t\t\tif(repo instanceof MavenArtifactRepository)&#123;</span><br><span class=\"line\">\t\t\t\tdef url = repo.url.toString()</span><br><span class=\"line\">\t\t\t\tif (url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;) || url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t\t\tproject.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span><br><span class=\"line\">\t\t\t\t\tremove repo</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmaven &#123;</span><br><span class=\"line\">\t\t //允许url改变</span><br><span class=\"line\">\t\t allowInsecureProtocol = true</span><br><span class=\"line\">\t\t\turl REPOSITORY_URL</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>./gradlew idea</code>来初始化项目,打出以下信息说明maven地址已经修改成功了</p>\n</li>\n<li><p>牛刀小试一下</p>\n</li>\n<li><pre><code>`git clone https://github.com/elastic/elasticsearch.git`\n</code></pre>\n<p>./gradlew idea</p>\n</li>\n</ul>"},{"title":"Pulsar 入门及介绍","date":"2021-05-08T08:16:08.000Z","_content":"\n# Pulsar 入门及介绍\n\n![pulsar-start.md---008eGmZEly1gpmzjhe824j31400u0wni.jpg](../images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg)(#背景 \"背景\")背景\n\n我们最近在做新业务的技术选型，其中涉及到了对消息中间件的选择；结合我们的实际情况希望它能满足以下几个要求：\n<!-- more -->\n* 友好的云原生支持：因为现在的主力语言是 `Go`，同时在运维上能够足够简单。\n* 官方支持多种语言的 `SDK`：还有一些 `Python`、`Java` 相关的代码需要维护。\n* 最好是有一些方便好用的特性，比如：延时消息、死信队列、多租户等。\n<!--more-->\n\n当然还有一些水平扩容、吞吐量、低延迟这些特性就不用多说了，几乎所有成熟的消息中间件都能满足这些要求。\n\n基于以上的筛选条件，`Pulsar` 进入了我们的视野。\n\n作为 `Apache` 下的顶级项目，以上特性都能很好的支持。\n\n下面我们来它有什么过人之处。\n\n# [](#架构 \"架构\")架构\n\n![w5yoNzm1lCPQtgZ](../images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg)\n\n从官方的架构图中可以看出 `Pulsar` 主要有以下组件组成：\n\n1.  `Broker` 无状态组件，可以水平扩展，主要用于生产者、消费者连接；与 Kafka 的 broker 类似，但没有数据存储功能，因此扩展更加轻松。\n2.  `BookKeeper` 集群：主要用于数据的持久化存储。\n3.  `Zookeeper` 用于存储 `broker` 与 `BookKeeper` 的元数据。\n\n整体一看似乎比 Kafka 所依赖的组件还多，这样确实会提供系统的复杂性；但同样的好处也很明显。\n\n`Pulsar` 的存储于计算是分离的，当需要扩容时会非常简单，直接新增 `broker` 即可，没有其他的心智负担。\n\n当存储成为瓶颈时也只需要扩容 `BookKeeper`，不需要人为的做重平衡，`BookKeeper` 会自动负载。\n\n同样的操作，`Kafka` 就要复杂的多了。\n\n## [](#特性 \"特性\")特性\n\n### [](#多租户 \"多租户\")多租户\n\n多租户也是一个刚需功能，可以在同一个集群中对不同业务、团队的数据进行隔离。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">persistent://core/order/create-order</div></pre></td></tr></tbody></table>\n\n以这个 topic 名称为例，在 `core` 这个租户下有一个 `order` 的 `namespace`，最终才是 `create-order` 的 `topic` 名称。\n\n在实际使用中租户一般是按照业务团队进行划分，`namespace` 则是当前团队下的不同业务；这样便可以很清晰的对 topic 进行管理。\n\n通常有对比才会有伤害，在没有多租户的消息中间件中是如何处理这类问题的呢：\n\n1.  干脆不分这么细，所有业务线混着用，当团队较小时可能问题不大；一旦业务增加，管理起来会非常麻烦。\n2.  自己在 topic 之前做一层抽象，但其实本质上也是在实现多租户。\n3.  各个业务团队各自维护自己的集群，这样当然也能解决问题，但运维复杂度自然也就提高了。\n\n以上就很直观的看出多租户的重要性了。\n\n### [](#Function-函数计算 \"Function 函数计算\")Function 函数计算\n\n`Pulsar` 还支持轻量级的函数计算，例如需要对某些消息进行数据清洗、转换，然后再发布到另一个 topic 中。\n\n这类需求就可以编写一个简单的函数，`Pulsar` 提供了 `SDK` 可以方便的对数据进行处理，最后使用官方工具发布到 `broker` 中。\n\n在这之前这类简单的需求可能也需要自己处理流处理引擎。\n\n## [](#应用 \"应用\")应用\n\n除此之外的上层应用，比如生产者、消费者这类概念与使用大家都差不多。\n\n比如 `Pulsar` 支持四种消费模式：\n\n* `Exclusive`：独占模式，同时只有一个消费者可以启动并消费数据；通过 `SubscriptionName` 标明是同一个消费者），适用范围较小。\n* `Failover` 故障转移模式：在独占模式基础之上可以同时启动多个 `consumer`，一旦一个 `consumer` 挂掉之后其余的可以快速顶上，但也只有一个 `consumer` 可以消费；部分场景可用。\n* `Shared` 共享模式：可以有 N 个消费者同时运行，消息按照 `round-robin` 轮询投递到每个 `consumer` 中；当某个 `consumer` 宕机没有 `ack` 时，该消息将会被投递给其他消费者。这种消费模式可以提高消费能力，但消息无法做到有序。\n* `KeyShared` 共享模式：基于共享模式；相当于对同一个`topic`中的消息进行分组，同一分组内的消息只能被同一个消费者有序消费。\n\n第三种共享消费模式应该是使用最多的，当对消息有顺序要求时可以使用 `KeyShared` 模式。\n\n## [](#SDK \"SDK\")SDK\n\n\n\n![y4XQL2kOSgxojRT](../images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg)官方支持的 `SDK` 非常丰富；我也在官方的 `SDK` 的基础之上封装了一个内部使用的 `SDK`。\n\n因为我们使用了 [dig](https://pkg.go.dev/go.uber.org/dig) 这样的轻量级依赖注入库，所以使用起来大概是这个样子：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">SetUpPulsar(lookupURL)</div><div class=\"line\">container := dig.New()</div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">\t\tTopic:            <span class=\"string\">\"persistent://core/order/create-order\"</span>,</div><div class=\"line\">\t\tSubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">\t\tType:             pulsar.Shared,</div><div class=\"line\">\t\tName:             <span class=\"string\">\"consumer01\"</span>,</div><div class=\"line\">\t}, ConsumerOrder)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">\t\tTopic:            <span class=\"string\">\"persistent://core/order/update-order\"</span>,</div><div class=\"line\">\t\tSubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">\t\tType:             pulsar.Shared,</div><div class=\"line\">\t\tName:             <span class=\"string\">\"consumer02\"</span>,</div><div class=\"line\">\t}, ConsumerInvoice)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Invoke(StartConsumer)</div></pre></td></tr></tbody></table>\n\n其中的两个 `container.Provide()` 函数用于注入 `consumer` 对象。\n\n`container.Invoke(StartConsumer)` 会从容器中取出所有的 `consumer` 对象，同时开始消费。\n\n这时以我有限的 `Go` 开发经验也在思考一个问题，在 `Go` 中是否需要依赖注入？\n\n先来看看使用 `Dig` 这类库所带来的好处：\n\n* 对象交由容器管理，很方便的实现单例。\n* 当各个对象之前依赖关系复杂时，可以减少许多创建、获取对象的代码，依赖关系更清晰。\n\n同样的坏处也有：\n\n* 跟踪阅读代码时没有那么直观，不能一眼看出某个依赖对象是如何创建的。\n* 与 Go 所推崇的简洁之道不符。\n\n对于使用过 `Spring` 的 `Java` 开发者来说肯定直呼真香，毕竟还是熟悉的味道；但对于完全没有接触过类似需求的 `Gopher` 来说貌似也不是刚需。\n\n目前市面上各式各样的 Go 依赖注入库层出不穷，也不乏许多大厂出品，可见还是很有市场的。\n\n我相信有很多 `Gopher` 非常反感将 `Java` 中的一些复杂概念引入到 `Go`，但我觉得依赖注入本身是不受语言限制，各种语言也都有自己的实现，只是 Java 中的 Spring 不仅仅只是一个依赖注入框架，还有许多复杂功能，让许多开发者望而生畏。\n\n如果只是依赖注入这个细分需求，实现起来并不复杂，并不会给带来太多复杂度。如果花时间去看源码，在理解概念的基础上很快就能掌握。\n\n回到 `SDK` 本身来说，`Go` 的 `SDK` 现阶段要比 `Java` 版本的功能少（准确来说只有 `Java` 版的功能最丰富），但核心的都有了，并不影响日常使用。\n\n# [](#总结 \"总结\")总结\n\n本文介绍了 `Pulsar` 的一些基本概念与优点，同时顺便讨论一下 `Go` 的依赖注入；如果大家和我们一样在做技术选型，不妨考虑一下 `Pulsar`。\n\n后续会继续分享 Pulsar 的相关内容，有相关经验的朋友也可以在评论区留下自己的见解。\n\n[![crossoverJie wechat](/uploads/weixinfooter1.jpg)](/uploads/weixinfooter1.jpg)\n\n我很有眼光！\n\n请我吃🍗\n\n赏\n\n[![crossoverJie WeChat Pay](/weixin-reward-image.jpg)](/weixin-reward-image.jpg)\n\n微信打赏\n\n[![crossoverJie Alipay](/alipay-reward-image.jpg)](/alipay-reward-image.jpg)\n\n支付宝打赏\n\n[#Go](/tags/Go/) [#消息队列](/tags/消息队列/)\n\n[利用 GitHub Action 自动发布 Docker](/2021/03/26/go/github-actions/ \"利用 GitHub Action 自动发布 Docker\")","source":"_posts/Pulsar-入门及介绍.md","raw":"---\ntitle: Pulsar 入门及介绍\ndate: 2021-05-08 16:16:08\ntags:\n---\n\n# Pulsar 入门及介绍\n\n![pulsar-start.md---008eGmZEly1gpmzjhe824j31400u0wni.jpg](../images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg)(#背景 \"背景\")背景\n\n我们最近在做新业务的技术选型，其中涉及到了对消息中间件的选择；结合我们的实际情况希望它能满足以下几个要求：\n<!-- more -->\n* 友好的云原生支持：因为现在的主力语言是 `Go`，同时在运维上能够足够简单。\n* 官方支持多种语言的 `SDK`：还有一些 `Python`、`Java` 相关的代码需要维护。\n* 最好是有一些方便好用的特性，比如：延时消息、死信队列、多租户等。\n<!--more-->\n\n当然还有一些水平扩容、吞吐量、低延迟这些特性就不用多说了，几乎所有成熟的消息中间件都能满足这些要求。\n\n基于以上的筛选条件，`Pulsar` 进入了我们的视野。\n\n作为 `Apache` 下的顶级项目，以上特性都能很好的支持。\n\n下面我们来它有什么过人之处。\n\n# [](#架构 \"架构\")架构\n\n![w5yoNzm1lCPQtgZ](../images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg)\n\n从官方的架构图中可以看出 `Pulsar` 主要有以下组件组成：\n\n1.  `Broker` 无状态组件，可以水平扩展，主要用于生产者、消费者连接；与 Kafka 的 broker 类似，但没有数据存储功能，因此扩展更加轻松。\n2.  `BookKeeper` 集群：主要用于数据的持久化存储。\n3.  `Zookeeper` 用于存储 `broker` 与 `BookKeeper` 的元数据。\n\n整体一看似乎比 Kafka 所依赖的组件还多，这样确实会提供系统的复杂性；但同样的好处也很明显。\n\n`Pulsar` 的存储于计算是分离的，当需要扩容时会非常简单，直接新增 `broker` 即可，没有其他的心智负担。\n\n当存储成为瓶颈时也只需要扩容 `BookKeeper`，不需要人为的做重平衡，`BookKeeper` 会自动负载。\n\n同样的操作，`Kafka` 就要复杂的多了。\n\n## [](#特性 \"特性\")特性\n\n### [](#多租户 \"多租户\")多租户\n\n多租户也是一个刚需功能，可以在同一个集群中对不同业务、团队的数据进行隔离。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">persistent://core/order/create-order</div></pre></td></tr></tbody></table>\n\n以这个 topic 名称为例，在 `core` 这个租户下有一个 `order` 的 `namespace`，最终才是 `create-order` 的 `topic` 名称。\n\n在实际使用中租户一般是按照业务团队进行划分，`namespace` 则是当前团队下的不同业务；这样便可以很清晰的对 topic 进行管理。\n\n通常有对比才会有伤害，在没有多租户的消息中间件中是如何处理这类问题的呢：\n\n1.  干脆不分这么细，所有业务线混着用，当团队较小时可能问题不大；一旦业务增加，管理起来会非常麻烦。\n2.  自己在 topic 之前做一层抽象，但其实本质上也是在实现多租户。\n3.  各个业务团队各自维护自己的集群，这样当然也能解决问题，但运维复杂度自然也就提高了。\n\n以上就很直观的看出多租户的重要性了。\n\n### [](#Function-函数计算 \"Function 函数计算\")Function 函数计算\n\n`Pulsar` 还支持轻量级的函数计算，例如需要对某些消息进行数据清洗、转换，然后再发布到另一个 topic 中。\n\n这类需求就可以编写一个简单的函数，`Pulsar` 提供了 `SDK` 可以方便的对数据进行处理，最后使用官方工具发布到 `broker` 中。\n\n在这之前这类简单的需求可能也需要自己处理流处理引擎。\n\n## [](#应用 \"应用\")应用\n\n除此之外的上层应用，比如生产者、消费者这类概念与使用大家都差不多。\n\n比如 `Pulsar` 支持四种消费模式：\n\n* `Exclusive`：独占模式，同时只有一个消费者可以启动并消费数据；通过 `SubscriptionName` 标明是同一个消费者），适用范围较小。\n* `Failover` 故障转移模式：在独占模式基础之上可以同时启动多个 `consumer`，一旦一个 `consumer` 挂掉之后其余的可以快速顶上，但也只有一个 `consumer` 可以消费；部分场景可用。\n* `Shared` 共享模式：可以有 N 个消费者同时运行，消息按照 `round-robin` 轮询投递到每个 `consumer` 中；当某个 `consumer` 宕机没有 `ack` 时，该消息将会被投递给其他消费者。这种消费模式可以提高消费能力，但消息无法做到有序。\n* `KeyShared` 共享模式：基于共享模式；相当于对同一个`topic`中的消息进行分组，同一分组内的消息只能被同一个消费者有序消费。\n\n第三种共享消费模式应该是使用最多的，当对消息有顺序要求时可以使用 `KeyShared` 模式。\n\n## [](#SDK \"SDK\")SDK\n\n\n\n![y4XQL2kOSgxojRT](../images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg)官方支持的 `SDK` 非常丰富；我也在官方的 `SDK` 的基础之上封装了一个内部使用的 `SDK`。\n\n因为我们使用了 [dig](https://pkg.go.dev/go.uber.org/dig) 这样的轻量级依赖注入库，所以使用起来大概是这个样子：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">SetUpPulsar(lookupURL)</div><div class=\"line\">container := dig.New()</div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">\t\tTopic:            <span class=\"string\">\"persistent://core/order/create-order\"</span>,</div><div class=\"line\">\t\tSubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">\t\tType:             pulsar.Shared,</div><div class=\"line\">\t\tName:             <span class=\"string\">\"consumer01\"</span>,</div><div class=\"line\">\t}, ConsumerOrder)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">\t\tTopic:            <span class=\"string\">\"persistent://core/order/update-order\"</span>,</div><div class=\"line\">\t\tSubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">\t\tType:             pulsar.Shared,</div><div class=\"line\">\t\tName:             <span class=\"string\">\"consumer02\"</span>,</div><div class=\"line\">\t}, ConsumerInvoice)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Invoke(StartConsumer)</div></pre></td></tr></tbody></table>\n\n其中的两个 `container.Provide()` 函数用于注入 `consumer` 对象。\n\n`container.Invoke(StartConsumer)` 会从容器中取出所有的 `consumer` 对象，同时开始消费。\n\n这时以我有限的 `Go` 开发经验也在思考一个问题，在 `Go` 中是否需要依赖注入？\n\n先来看看使用 `Dig` 这类库所带来的好处：\n\n* 对象交由容器管理，很方便的实现单例。\n* 当各个对象之前依赖关系复杂时，可以减少许多创建、获取对象的代码，依赖关系更清晰。\n\n同样的坏处也有：\n\n* 跟踪阅读代码时没有那么直观，不能一眼看出某个依赖对象是如何创建的。\n* 与 Go 所推崇的简洁之道不符。\n\n对于使用过 `Spring` 的 `Java` 开发者来说肯定直呼真香，毕竟还是熟悉的味道；但对于完全没有接触过类似需求的 `Gopher` 来说貌似也不是刚需。\n\n目前市面上各式各样的 Go 依赖注入库层出不穷，也不乏许多大厂出品，可见还是很有市场的。\n\n我相信有很多 `Gopher` 非常反感将 `Java` 中的一些复杂概念引入到 `Go`，但我觉得依赖注入本身是不受语言限制，各种语言也都有自己的实现，只是 Java 中的 Spring 不仅仅只是一个依赖注入框架，还有许多复杂功能，让许多开发者望而生畏。\n\n如果只是依赖注入这个细分需求，实现起来并不复杂，并不会给带来太多复杂度。如果花时间去看源码，在理解概念的基础上很快就能掌握。\n\n回到 `SDK` 本身来说，`Go` 的 `SDK` 现阶段要比 `Java` 版本的功能少（准确来说只有 `Java` 版的功能最丰富），但核心的都有了，并不影响日常使用。\n\n# [](#总结 \"总结\")总结\n\n本文介绍了 `Pulsar` 的一些基本概念与优点，同时顺便讨论一下 `Go` 的依赖注入；如果大家和我们一样在做技术选型，不妨考虑一下 `Pulsar`。\n\n后续会继续分享 Pulsar 的相关内容，有相关经验的朋友也可以在评论区留下自己的见解。\n\n[![crossoverJie wechat](/uploads/weixinfooter1.jpg)](/uploads/weixinfooter1.jpg)\n\n我很有眼光！\n\n请我吃🍗\n\n赏\n\n[![crossoverJie WeChat Pay](/weixin-reward-image.jpg)](/weixin-reward-image.jpg)\n\n微信打赏\n\n[![crossoverJie Alipay](/alipay-reward-image.jpg)](/alipay-reward-image.jpg)\n\n支付宝打赏\n\n[#Go](/tags/Go/) [#消息队列](/tags/消息队列/)\n\n[利用 GitHub Action 自动发布 Docker](/2021/03/26/go/github-actions/ \"利用 GitHub Action 自动发布 Docker\")","slug":"Pulsar-入门及介绍","published":1,"updated":"2021-08-23T00:38:38.700Z","_id":"ckpp6ut590004dgv9hs7e2bm5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Pulsar-入门及介绍\"><a href=\"#Pulsar-入门及介绍\" class=\"headerlink\" title=\"Pulsar 入门及介绍\"></a>Pulsar 入门及介绍</h1><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/u6VKbdFmzW4P8vD-0462488.jpg\" alt=\"pulsar-start.md---008eGmZEly1gpmzjhe824j31400u0wni.jpg\">(#背景 “背景”)背景</p>\n<p>我们最近在做新业务的技术选型，其中涉及到了对消息中间件的选择；结合我们的实际情况希望它能满足以下几个要求：</p>\n<span id=\"more\"></span>\n<ul>\n<li>友好的云原生支持：因为现在的主力语言是 <code>Go</code>，同时在运维上能够足够简单。</li>\n<li>官方支持多种语言的 <code>SDK</code>：还有一些 <code>Python</code>、<code>Java</code> 相关的代码需要维护。</li>\n<li>最好是有一些方便好用的特性，比如：延时消息、死信队列、多租户等。<!--more--></li>\n</ul>\n<p>当然还有一些水平扩容、吞吐量、低延迟这些特性就不用多说了，几乎所有成熟的消息中间件都能满足这些要求。</p>\n<p>基于以上的筛选条件，<code>Pulsar</code> 进入了我们的视野。</p>\n<p>作为 <code>Apache</code> 下的顶级项目，以上特性都能很好的支持。</p>\n<p>下面我们来它有什么过人之处。</p>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a><a href=\"#%E6%9E%B6%E6%9E%84\" title=\"架构\"></a>架构</h1><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg\" alt=\"w5yoNzm1lCPQtgZ\"></p>\n<p>从官方的架构图中可以看出 <code>Pulsar</code> 主要有以下组件组成：</p>\n<ol>\n<li> <code>Broker</code> 无状态组件，可以水平扩展，主要用于生产者、消费者连接；与 Kafka 的 broker 类似，但没有数据存储功能，因此扩展更加轻松。</li>\n<li> <code>BookKeeper</code> 集群：主要用于数据的持久化存储。</li>\n<li> <code>Zookeeper</code> 用于存储 <code>broker</code> 与 <code>BookKeeper</code> 的元数据。</li>\n</ol>\n<p>整体一看似乎比 Kafka 所依赖的组件还多，这样确实会提供系统的复杂性；但同样的好处也很明显。</p>\n<p><code>Pulsar</code> 的存储于计算是分离的，当需要扩容时会非常简单，直接新增 <code>broker</code> 即可，没有其他的心智负担。</p>\n<p>当存储成为瓶颈时也只需要扩容 <code>BookKeeper</code>，不需要人为的做重平衡，<code>BookKeeper</code> 会自动负载。</p>\n<p>同样的操作，<code>Kafka</code> 就要复杂的多了。</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a><a href=\"#%E7%89%B9%E6%80%A7\" title=\"特性\"></a>特性</h2><h3 id=\"多租户\"><a href=\"#多租户\" class=\"headerlink\" title=\"多租户\"></a><a href=\"#%E5%A4%9A%E7%A7%9F%E6%88%B7\" title=\"多租户\"></a>多租户</h3><p>多租户也是一个刚需功能，可以在同一个集群中对不同业务、团队的数据进行隔离。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">persistent://core/order/create-order</div></pre></td></tr></tbody></table>\n\n<p>以这个 topic 名称为例，在 <code>core</code> 这个租户下有一个 <code>order</code> 的 <code>namespace</code>，最终才是 <code>create-order</code> 的 <code>topic</code> 名称。</p>\n<p>在实际使用中租户一般是按照业务团队进行划分，<code>namespace</code> 则是当前团队下的不同业务；这样便可以很清晰的对 topic 进行管理。</p>\n<p>通常有对比才会有伤害，在没有多租户的消息中间件中是如何处理这类问题的呢：</p>\n<ol>\n<li> 干脆不分这么细，所有业务线混着用，当团队较小时可能问题不大；一旦业务增加，管理起来会非常麻烦。</li>\n<li> 自己在 topic 之前做一层抽象，但其实本质上也是在实现多租户。</li>\n<li> 各个业务团队各自维护自己的集群，这样当然也能解决问题，但运维复杂度自然也就提高了。</li>\n</ol>\n<p>以上就很直观的看出多租户的重要性了。</p>\n<h3 id=\"Function-函数计算\"><a href=\"#Function-函数计算\" class=\"headerlink\" title=\"Function 函数计算\"></a><a href=\"#Function-%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97\" title=\"Function 函数计算\"></a>Function 函数计算</h3><p><code>Pulsar</code> 还支持轻量级的函数计算，例如需要对某些消息进行数据清洗、转换，然后再发布到另一个 topic 中。</p>\n<p>这类需求就可以编写一个简单的函数，<code>Pulsar</code> 提供了 <code>SDK</code> 可以方便的对数据进行处理，最后使用官方工具发布到 <code>broker</code> 中。</p>\n<p>在这之前这类简单的需求可能也需要自己处理流处理引擎。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a><a href=\"#%E5%BA%94%E7%94%A8\" title=\"应用\"></a>应用</h2><p>除此之外的上层应用，比如生产者、消费者这类概念与使用大家都差不多。</p>\n<p>比如 <code>Pulsar</code> 支持四种消费模式：</p>\n<ul>\n<li><code>Exclusive</code>：独占模式，同时只有一个消费者可以启动并消费数据；通过 <code>SubscriptionName</code> 标明是同一个消费者），适用范围较小。</li>\n<li><code>Failover</code> 故障转移模式：在独占模式基础之上可以同时启动多个 <code>consumer</code>，一旦一个 <code>consumer</code> 挂掉之后其余的可以快速顶上，但也只有一个 <code>consumer</code> 可以消费；部分场景可用。</li>\n<li><code>Shared</code> 共享模式：可以有 N 个消费者同时运行，消息按照 <code>round-robin</code> 轮询投递到每个 <code>consumer</code> 中；当某个 <code>consumer</code> 宕机没有 <code>ack</code> 时，该消息将会被投递给其他消费者。这种消费模式可以提高消费能力，但消息无法做到有序。</li>\n<li><code>KeyShared</code> 共享模式：基于共享模式；相当于对同一个<code>topic</code>中的消息进行分组，同一分组内的消息只能被同一个消费者有序消费。</li>\n</ul>\n<p>第三种共享消费模式应该是使用最多的，当对消息有顺序要求时可以使用 <code>KeyShared</code> 模式。</p>\n<h2 id=\"SDK\"><a href=\"#SDK\" class=\"headerlink\" title=\"SDK\"></a><a href=\"#SDK\" title=\"SDK\"></a>SDK</h2><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/y4XQL2kOSgxojRT-0463341.jpg\" alt=\"y4XQL2kOSgxojRT\">官方支持的 <code>SDK</code> 非常丰富；我也在官方的 <code>SDK</code> 的基础之上封装了一个内部使用的 <code>SDK</code>。</p>\n<p>因为我们使用了 <a href=\"https://pkg.go.dev/go.uber.org/dig\">dig</a> 这样的轻量级依赖注入库，所以使用起来大概是这个样子：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">SetUpPulsar(lookupURL)</div><div class=\"line\">container := dig.New()</div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">        Topic:            <span class=\"string\">\"persistent://core/order/create-order\"</span>,</div><div class=\"line\">        SubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">        Type:             pulsar.Shared,</div><div class=\"line\">        Name:             <span class=\"string\">\"consumer01\"</span>,</div><div class=\"line\">    }, ConsumerOrder)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">        Topic:            <span class=\"string\">\"persistent://core/order/update-order\"</span>,</div><div class=\"line\">        SubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">        Type:             pulsar.Shared,</div><div class=\"line\">        Name:             <span class=\"string\">\"consumer02\"</span>,</div><div class=\"line\">    }, ConsumerInvoice)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Invoke(StartConsumer)</div></pre></td></tr></tbody></table>\n\n<p>其中的两个 <code>container.Provide()</code> 函数用于注入 <code>consumer</code> 对象。</p>\n<p><code>container.Invoke(StartConsumer)</code> 会从容器中取出所有的 <code>consumer</code> 对象，同时开始消费。</p>\n<p>这时以我有限的 <code>Go</code> 开发经验也在思考一个问题，在 <code>Go</code> 中是否需要依赖注入？</p>\n<p>先来看看使用 <code>Dig</code> 这类库所带来的好处：</p>\n<ul>\n<li>对象交由容器管理，很方便的实现单例。</li>\n<li>当各个对象之前依赖关系复杂时，可以减少许多创建、获取对象的代码，依赖关系更清晰。</li>\n</ul>\n<p>同样的坏处也有：</p>\n<ul>\n<li>跟踪阅读代码时没有那么直观，不能一眼看出某个依赖对象是如何创建的。</li>\n<li>与 Go 所推崇的简洁之道不符。</li>\n</ul>\n<p>对于使用过 <code>Spring</code> 的 <code>Java</code> 开发者来说肯定直呼真香，毕竟还是熟悉的味道；但对于完全没有接触过类似需求的 <code>Gopher</code> 来说貌似也不是刚需。</p>\n<p>目前市面上各式各样的 Go 依赖注入库层出不穷，也不乏许多大厂出品，可见还是很有市场的。</p>\n<p>我相信有很多 <code>Gopher</code> 非常反感将 <code>Java</code> 中的一些复杂概念引入到 <code>Go</code>，但我觉得依赖注入本身是不受语言限制，各种语言也都有自己的实现，只是 Java 中的 Spring 不仅仅只是一个依赖注入框架，还有许多复杂功能，让许多开发者望而生畏。</p>\n<p>如果只是依赖注入这个细分需求，实现起来并不复杂，并不会给带来太多复杂度。如果花时间去看源码，在理解概念的基础上很快就能掌握。</p>\n<p>回到 <code>SDK</code> 本身来说，<code>Go</code> 的 <code>SDK</code> 现阶段要比 <code>Java</code> 版本的功能少（准确来说只有 <code>Java</code> 版的功能最丰富），但核心的都有了，并不影响日常使用。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"></a>总结</h1><p>本文介绍了 <code>Pulsar</code> 的一些基本概念与优点，同时顺便讨论一下 <code>Go</code> 的依赖注入；如果大家和我们一样在做技术选型，不妨考虑一下 <code>Pulsar</code>。</p>\n<p>后续会继续分享 Pulsar 的相关内容，有相关经验的朋友也可以在评论区留下自己的见解。</p>\n<p><a href=\"/uploads/weixinfooter1.jpg\"><img src=\"/uploads/weixinfooter1.jpg\" alt=\"crossoverJie wechat\"></a></p>\n<p>我很有眼光！</p>\n<p>请我吃🍗</p>\n<p>赏</p>\n<p><a href=\"/weixin-reward-image.jpg\"><img src=\"/weixin-reward-image.jpg\" alt=\"crossoverJie WeChat Pay\"></a></p>\n<p>微信打赏</p>\n<p><a href=\"/alipay-reward-image.jpg\"><img src=\"/alipay-reward-image.jpg\" alt=\"crossoverJie Alipay\"></a></p>\n<p>支付宝打赏</p>\n<p><a href=\"/tags/Go/\">#Go</a> <a href=\"/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/\">#消息队列</a></p>\n<p><a href=\"/2021/03/26/go/github-actions/\" title=\"利用 GitHub Action 自动发布 Docker\">利用 GitHub Action 自动发布 Docker</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Pulsar-入门及介绍\"><a href=\"#Pulsar-入门及介绍\" class=\"headerlink\" title=\"Pulsar 入门及介绍\"></a>Pulsar 入门及介绍</h1><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/u6VKbdFmzW4P8vD-0462488.jpg\" alt=\"pulsar-start.md---008eGmZEly1gpmzjhe824j31400u0wni.jpg\">(#背景 “背景”)背景</p>\n<p>我们最近在做新业务的技术选型，其中涉及到了对消息中间件的选择；结合我们的实际情况希望它能满足以下几个要求：</p>","more":"<ul>\n<li>友好的云原生支持：因为现在的主力语言是 <code>Go</code>，同时在运维上能够足够简单。</li>\n<li>官方支持多种语言的 <code>SDK</code>：还有一些 <code>Python</code>、<code>Java</code> 相关的代码需要维护。</li>\n<li>最好是有一些方便好用的特性，比如：延时消息、死信队列、多租户等。<!--more--></li>\n</ul>\n<p>当然还有一些水平扩容、吞吐量、低延迟这些特性就不用多说了，几乎所有成熟的消息中间件都能满足这些要求。</p>\n<p>基于以上的筛选条件，<code>Pulsar</code> 进入了我们的视野。</p>\n<p>作为 <code>Apache</code> 下的顶级项目，以上特性都能很好的支持。</p>\n<p>下面我们来它有什么过人之处。</p>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a><a href=\"#%E6%9E%B6%E6%9E%84\" title=\"架构\"></a>架构</h1><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg\" alt=\"w5yoNzm1lCPQtgZ\"></p>\n<p>从官方的架构图中可以看出 <code>Pulsar</code> 主要有以下组件组成：</p>\n<ol>\n<li> <code>Broker</code> 无状态组件，可以水平扩展，主要用于生产者、消费者连接；与 Kafka 的 broker 类似，但没有数据存储功能，因此扩展更加轻松。</li>\n<li> <code>BookKeeper</code> 集群：主要用于数据的持久化存储。</li>\n<li> <code>Zookeeper</code> 用于存储 <code>broker</code> 与 <code>BookKeeper</code> 的元数据。</li>\n</ol>\n<p>整体一看似乎比 Kafka 所依赖的组件还多，这样确实会提供系统的复杂性；但同样的好处也很明显。</p>\n<p><code>Pulsar</code> 的存储于计算是分离的，当需要扩容时会非常简单，直接新增 <code>broker</code> 即可，没有其他的心智负担。</p>\n<p>当存储成为瓶颈时也只需要扩容 <code>BookKeeper</code>，不需要人为的做重平衡，<code>BookKeeper</code> 会自动负载。</p>\n<p>同样的操作，<code>Kafka</code> 就要复杂的多了。</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a><a href=\"#%E7%89%B9%E6%80%A7\" title=\"特性\"></a>特性</h2><h3 id=\"多租户\"><a href=\"#多租户\" class=\"headerlink\" title=\"多租户\"></a><a href=\"#%E5%A4%9A%E7%A7%9F%E6%88%B7\" title=\"多租户\"></a>多租户</h3><p>多租户也是一个刚需功能，可以在同一个集群中对不同业务、团队的数据进行隔离。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">persistent://core/order/create-order</div></pre></td></tr></tbody></table>\n\n<p>以这个 topic 名称为例，在 <code>core</code> 这个租户下有一个 <code>order</code> 的 <code>namespace</code>，最终才是 <code>create-order</code> 的 <code>topic</code> 名称。</p>\n<p>在实际使用中租户一般是按照业务团队进行划分，<code>namespace</code> 则是当前团队下的不同业务；这样便可以很清晰的对 topic 进行管理。</p>\n<p>通常有对比才会有伤害，在没有多租户的消息中间件中是如何处理这类问题的呢：</p>\n<ol>\n<li> 干脆不分这么细，所有业务线混着用，当团队较小时可能问题不大；一旦业务增加，管理起来会非常麻烦。</li>\n<li> 自己在 topic 之前做一层抽象，但其实本质上也是在实现多租户。</li>\n<li> 各个业务团队各自维护自己的集群，这样当然也能解决问题，但运维复杂度自然也就提高了。</li>\n</ol>\n<p>以上就很直观的看出多租户的重要性了。</p>\n<h3 id=\"Function-函数计算\"><a href=\"#Function-函数计算\" class=\"headerlink\" title=\"Function 函数计算\"></a><a href=\"#Function-%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97\" title=\"Function 函数计算\"></a>Function 函数计算</h3><p><code>Pulsar</code> 还支持轻量级的函数计算，例如需要对某些消息进行数据清洗、转换，然后再发布到另一个 topic 中。</p>\n<p>这类需求就可以编写一个简单的函数，<code>Pulsar</code> 提供了 <code>SDK</code> 可以方便的对数据进行处理，最后使用官方工具发布到 <code>broker</code> 中。</p>\n<p>在这之前这类简单的需求可能也需要自己处理流处理引擎。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a><a href=\"#%E5%BA%94%E7%94%A8\" title=\"应用\"></a>应用</h2><p>除此之外的上层应用，比如生产者、消费者这类概念与使用大家都差不多。</p>\n<p>比如 <code>Pulsar</code> 支持四种消费模式：</p>\n<ul>\n<li><code>Exclusive</code>：独占模式，同时只有一个消费者可以启动并消费数据；通过 <code>SubscriptionName</code> 标明是同一个消费者），适用范围较小。</li>\n<li><code>Failover</code> 故障转移模式：在独占模式基础之上可以同时启动多个 <code>consumer</code>，一旦一个 <code>consumer</code> 挂掉之后其余的可以快速顶上，但也只有一个 <code>consumer</code> 可以消费；部分场景可用。</li>\n<li><code>Shared</code> 共享模式：可以有 N 个消费者同时运行，消息按照 <code>round-robin</code> 轮询投递到每个 <code>consumer</code> 中；当某个 <code>consumer</code> 宕机没有 <code>ack</code> 时，该消息将会被投递给其他消费者。这种消费模式可以提高消费能力，但消息无法做到有序。</li>\n<li><code>KeyShared</code> 共享模式：基于共享模式；相当于对同一个<code>topic</code>中的消息进行分组，同一分组内的消息只能被同一个消费者有序消费。</li>\n</ul>\n<p>第三种共享消费模式应该是使用最多的，当对消息有顺序要求时可以使用 <code>KeyShared</code> 模式。</p>\n<h2 id=\"SDK\"><a href=\"#SDK\" class=\"headerlink\" title=\"SDK\"></a><a href=\"#SDK\" title=\"SDK\"></a>SDK</h2><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/y4XQL2kOSgxojRT-0463341.jpg\" alt=\"y4XQL2kOSgxojRT\">官方支持的 <code>SDK</code> 非常丰富；我也在官方的 <code>SDK</code> 的基础之上封装了一个内部使用的 <code>SDK</code>。</p>\n<p>因为我们使用了 <a href=\"https://pkg.go.dev/go.uber.org/dig\">dig</a> 这样的轻量级依赖注入库，所以使用起来大概是这个样子：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">SetUpPulsar(lookupURL)</div><div class=\"line\">container := dig.New()</div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">        Topic:            <span class=\"string\">\"persistent://core/order/create-order\"</span>,</div><div class=\"line\">        SubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">        Type:             pulsar.Shared,</div><div class=\"line\">        Name:             <span class=\"string\">\"consumer01\"</span>,</div><div class=\"line\">    }, ConsumerOrder)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">        Topic:            <span class=\"string\">\"persistent://core/order/update-order\"</span>,</div><div class=\"line\">        SubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">        Type:             pulsar.Shared,</div><div class=\"line\">        Name:             <span class=\"string\">\"consumer02\"</span>,</div><div class=\"line\">    }, ConsumerInvoice)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Invoke(StartConsumer)</div></pre></td></tr></tbody></table>\n\n<p>其中的两个 <code>container.Provide()</code> 函数用于注入 <code>consumer</code> 对象。</p>\n<p><code>container.Invoke(StartConsumer)</code> 会从容器中取出所有的 <code>consumer</code> 对象，同时开始消费。</p>\n<p>这时以我有限的 <code>Go</code> 开发经验也在思考一个问题，在 <code>Go</code> 中是否需要依赖注入？</p>\n<p>先来看看使用 <code>Dig</code> 这类库所带来的好处：</p>\n<ul>\n<li>对象交由容器管理，很方便的实现单例。</li>\n<li>当各个对象之前依赖关系复杂时，可以减少许多创建、获取对象的代码，依赖关系更清晰。</li>\n</ul>\n<p>同样的坏处也有：</p>\n<ul>\n<li>跟踪阅读代码时没有那么直观，不能一眼看出某个依赖对象是如何创建的。</li>\n<li>与 Go 所推崇的简洁之道不符。</li>\n</ul>\n<p>对于使用过 <code>Spring</code> 的 <code>Java</code> 开发者来说肯定直呼真香，毕竟还是熟悉的味道；但对于完全没有接触过类似需求的 <code>Gopher</code> 来说貌似也不是刚需。</p>\n<p>目前市面上各式各样的 Go 依赖注入库层出不穷，也不乏许多大厂出品，可见还是很有市场的。</p>\n<p>我相信有很多 <code>Gopher</code> 非常反感将 <code>Java</code> 中的一些复杂概念引入到 <code>Go</code>，但我觉得依赖注入本身是不受语言限制，各种语言也都有自己的实现，只是 Java 中的 Spring 不仅仅只是一个依赖注入框架，还有许多复杂功能，让许多开发者望而生畏。</p>\n<p>如果只是依赖注入这个细分需求，实现起来并不复杂，并不会给带来太多复杂度。如果花时间去看源码，在理解概念的基础上很快就能掌握。</p>\n<p>回到 <code>SDK</code> 本身来说，<code>Go</code> 的 <code>SDK</code> 现阶段要比 <code>Java</code> 版本的功能少（准确来说只有 <code>Java</code> 版的功能最丰富），但核心的都有了，并不影响日常使用。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"></a>总结</h1><p>本文介绍了 <code>Pulsar</code> 的一些基本概念与优点，同时顺便讨论一下 <code>Go</code> 的依赖注入；如果大家和我们一样在做技术选型，不妨考虑一下 <code>Pulsar</code>。</p>\n<p>后续会继续分享 Pulsar 的相关内容，有相关经验的朋友也可以在评论区留下自己的见解。</p>\n<p><a href=\"/uploads/weixinfooter1.jpg\"><img src=\"/uploads/weixinfooter1.jpg\" alt=\"crossoverJie wechat\"></a></p>\n<p>我很有眼光！</p>\n<p>请我吃🍗</p>\n<p>赏</p>\n<p><a href=\"/weixin-reward-image.jpg\"><img src=\"/weixin-reward-image.jpg\" alt=\"crossoverJie WeChat Pay\"></a></p>\n<p>微信打赏</p>\n<p><a href=\"/alipay-reward-image.jpg\"><img src=\"/alipay-reward-image.jpg\" alt=\"crossoverJie Alipay\"></a></p>\n<p>支付宝打赏</p>\n<p><a href=\"/tags/Go/\">#Go</a> <a href=\"/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/\">#消息队列</a></p>\n<p><a href=\"/2021/03/26/go/github-actions/\" title=\"利用 GitHub Action 自动发布 Docker\">利用 GitHub Action 自动发布 Docker</a></p>"},{"title":"iceberg-flink设置","date":"2021-04-29T05:00:10.000Z","_content":"\n1.下载flink\n\n`wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.11.3/flink-1.11.3-bin-scala_2.12.tgz`\n\n2.修改start-cluster.sh\n<!-- more -->\n添加如下内容\n\n`export HADOOP_CLASSPATH=$HADOOP_HOME/bin/hadoop classpath`\n<!--more-->\n\n```\n./bin/start-cluster.sh\n```\n\nwget https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar\n\nwget https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar\n\n启动shell\n\n```\n./bin/sql-client.sh embedded \\\n    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/iceberg-flink-runtime-0.10.0.jar \\\n    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n    shell\n```\n\n创建hive catalog\n\n`CREATE CATALOG hive_catalog WITH (`\n  `'type'='iceberg',`\n  `'catalog-type'='hive',`\n  `'uri'='thrift://localhost:9083',`\n  `'clients'='5',`\n  `'property-version'='1',`\n  `'warehouse'='hdfs://nn:8020/warehouse/path'`\n`);`\n\n\n\nHdfs 启动\n\nssh免密\n\nvim authorized_keys \n\n第一步格式hdfs\n\nhadoop namenode -format\n\n`start-dfs.sh` \n\n启动hive-metastore\n\nVI hive-site.xml\n\n```xml\n<property>\n          <name>hive.metastore.uris</name>\n          <value>thrift://localhost:9083</value>\n   </property>\n```\n\nHive 数据库初始化：\n\nhdfs dfs -mkdir -p /tmp/hive\n\n hdfs dfs -mkdir -p /hive/warehouse\n\n hdfs dfs -chmod -R g+w,o+w /tmp \n\nhdfs dfs -chmod -R g+w,o+w /hive \n\n```shell\nschematool -dbType mysql -initSchema\n```\n\n```shell\nhive --service metastore\n```\n\nflink-hive\n\n要配置环境变量\n\n```\nexport HIVE_CONF_DIR=${HIVE_HOME}/conf\n```\n\nCREATE CATALOG hive_catalog WITH (\n  'type'='iceberg',\n  'catalog-type'='hive',\n  'uri'='thrift://localhost:9083',\n  'clients'='5',\n  'property-version'='1',\n  'warehouse'='hdfs://localhost:9000/hive/warehouse'\n);\n\nCREATE CATALOG my_catalog WITH (\n  'type'='iceberg',\n  'catalog-impl'='com.my.custom.CatalogImpl',\n  'my-additional-catalog-config'='my-value'\n);\n\nSql-client-default.yaml配置：\n\ncatalogs: # empty list\n  - name: gmall\n    type: hive\n    hive-conf-dir: /opt/module/hive/conf/\n    hive-version: 1.2.1\n    default-database: gmallFlink SQL> CREATE TABLE gmall.gmall.sample (\n\n    >     `id BIGINT COMMENT 'unique id',`\n    >     `data STRING`\n    >     `);`\n    >     `[INFO] Table has been created.`\n\n```\nCREATE TABLE  gmall.gmall.sample_like LIKE gmall.gmall.sample;\n```\n\n```\nALTER TABLE gmall.gmall.sample SET ('write.format.default'='avro')\n```\n\n```\nALTER TABLE gmall.gmall.sample RENAME TO gmall.gmall.new_sample;\nDROP TABLE gmall.gmall.sample;\n\n```\n\nCREATE CATALOG hive_catalog WITH (\n  'type'='iceberg',\n  'catalog-type'='hive',\n  'uri'='thrift://localhost:9083',\n  'clients'='5',\n  'property-version'='1',\n  'warehouse'='hdfs://localhost:8020/hive/warehouse'\n);\n\nCREATE TABLE sample (\n    id BIGINT COMMENT 'unique id',\n    data STRING\n);\n\n","source":"_posts/iceberg-flink设置.md","raw":"---\ntitle: iceberg-flink设置\ndate: 2021-04-29 13:00:10\ntags:\n---\n\n1.下载flink\n\n`wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.11.3/flink-1.11.3-bin-scala_2.12.tgz`\n\n2.修改start-cluster.sh\n<!-- more -->\n添加如下内容\n\n`export HADOOP_CLASSPATH=$HADOOP_HOME/bin/hadoop classpath`\n<!--more-->\n\n```\n./bin/start-cluster.sh\n```\n\nwget https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar\n\nwget https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar\n\n启动shell\n\n```\n./bin/sql-client.sh embedded \\\n    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/iceberg-flink-runtime-0.10.0.jar \\\n    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n    shell\n```\n\n创建hive catalog\n\n`CREATE CATALOG hive_catalog WITH (`\n  `'type'='iceberg',`\n  `'catalog-type'='hive',`\n  `'uri'='thrift://localhost:9083',`\n  `'clients'='5',`\n  `'property-version'='1',`\n  `'warehouse'='hdfs://nn:8020/warehouse/path'`\n`);`\n\n\n\nHdfs 启动\n\nssh免密\n\nvim authorized_keys \n\n第一步格式hdfs\n\nhadoop namenode -format\n\n`start-dfs.sh` \n\n启动hive-metastore\n\nVI hive-site.xml\n\n```xml\n<property>\n          <name>hive.metastore.uris</name>\n          <value>thrift://localhost:9083</value>\n   </property>\n```\n\nHive 数据库初始化：\n\nhdfs dfs -mkdir -p /tmp/hive\n\n hdfs dfs -mkdir -p /hive/warehouse\n\n hdfs dfs -chmod -R g+w,o+w /tmp \n\nhdfs dfs -chmod -R g+w,o+w /hive \n\n```shell\nschematool -dbType mysql -initSchema\n```\n\n```shell\nhive --service metastore\n```\n\nflink-hive\n\n要配置环境变量\n\n```\nexport HIVE_CONF_DIR=${HIVE_HOME}/conf\n```\n\nCREATE CATALOG hive_catalog WITH (\n  'type'='iceberg',\n  'catalog-type'='hive',\n  'uri'='thrift://localhost:9083',\n  'clients'='5',\n  'property-version'='1',\n  'warehouse'='hdfs://localhost:9000/hive/warehouse'\n);\n\nCREATE CATALOG my_catalog WITH (\n  'type'='iceberg',\n  'catalog-impl'='com.my.custom.CatalogImpl',\n  'my-additional-catalog-config'='my-value'\n);\n\nSql-client-default.yaml配置：\n\ncatalogs: # empty list\n  - name: gmall\n    type: hive\n    hive-conf-dir: /opt/module/hive/conf/\n    hive-version: 1.2.1\n    default-database: gmallFlink SQL> CREATE TABLE gmall.gmall.sample (\n\n    >     `id BIGINT COMMENT 'unique id',`\n    >     `data STRING`\n    >     `);`\n    >     `[INFO] Table has been created.`\n\n```\nCREATE TABLE  gmall.gmall.sample_like LIKE gmall.gmall.sample;\n```\n\n```\nALTER TABLE gmall.gmall.sample SET ('write.format.default'='avro')\n```\n\n```\nALTER TABLE gmall.gmall.sample RENAME TO gmall.gmall.new_sample;\nDROP TABLE gmall.gmall.sample;\n\n```\n\nCREATE CATALOG hive_catalog WITH (\n  'type'='iceberg',\n  'catalog-type'='hive',\n  'uri'='thrift://localhost:9083',\n  'clients'='5',\n  'property-version'='1',\n  'warehouse'='hdfs://localhost:8020/hive/warehouse'\n);\n\nCREATE TABLE sample (\n    id BIGINT COMMENT 'unique id',\n    data STRING\n);\n\n","slug":"iceberg-flink设置","published":1,"updated":"2021-08-23T00:38:38.715Z","_id":"ckpp6ut5a0006dgv95xgzh3zx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.下载flink</p>\n<p><code>wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.11.3/flink-1.11.3-bin-scala_2.12.tgz</code></p>\n<p>2.修改start-cluster.sh</p>\n<span id=\"more\"></span>\n<p>添加如下内容</p>\n<p><code>export HADOOP_CLASSPATH=$HADOOP_HOME/bin/hadoop classpath</code></p>\n<!--more-->\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/start-cluster.sh</span><br></pre></td></tr></table></figure>\n\n<p>wget <a href=\"https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar\">https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar</a></p>\n<p>wget <a href=\"https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar\">https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar</a></p>\n<p>启动shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/sql-client.sh embedded \\</span><br><span class=\"line\">    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/iceberg-flink-runtime-0.10.0.jar \\</span><br><span class=\"line\">    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\</span><br><span class=\"line\">    shell</span><br></pre></td></tr></table></figure>\n\n<p>创建hive catalog</p>\n<p><code>CREATE CATALOG hive_catalog WITH (</code><br>  <code>&#39;type&#39;=&#39;iceberg&#39;,</code><br>  <code>&#39;catalog-type&#39;=&#39;hive&#39;,</code><br>  <code>&#39;uri&#39;=&#39;thrift://localhost:9083&#39;,</code><br>  <code>&#39;clients&#39;=&#39;5&#39;,</code><br>  <code>&#39;property-version&#39;=&#39;1&#39;,</code><br>  <code>&#39;warehouse&#39;=&#39;hdfs://nn:8020/warehouse/path&#39;</code><br><code>);</code></p>\n<p>Hdfs 启动</p>\n<p>ssh免密</p>\n<p>vim authorized_keys </p>\n<p>第一步格式hdfs</p>\n<p>hadoop namenode -format</p>\n<p><code>start-dfs.sh</code> </p>\n<p>启动hive-metastore</p>\n<p>VI hive-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.uris<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>thrift://localhost:9083<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Hive 数据库初始化：</p>\n<p>hdfs dfs -mkdir -p /tmp/hive</p>\n<p> hdfs dfs -mkdir -p /hive/warehouse</p>\n<p> hdfs dfs -chmod -R g+w,o+w /tmp </p>\n<p>hdfs dfs -chmod -R g+w,o+w /hive </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive --service metastore</span><br></pre></td></tr></table></figure>\n\n<p>flink-hive</p>\n<p>要配置环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HIVE_CONF_DIR=$&#123;HIVE_HOME&#125;/conf</span><br></pre></td></tr></table></figure>\n\n<p>CREATE CATALOG hive_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-type’=’hive’,<br>  ‘uri’=’thrift://localhost:9083’,<br>  ‘clients’=’5’,<br>  ‘property-version’=’1’,<br>  ‘warehouse’=’hdfs://localhost:9000/hive/warehouse’<br>);</p>\n<p>CREATE CATALOG my_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-impl’=’com.my.custom.CatalogImpl’,<br>  ‘my-additional-catalog-config’=’my-value’<br>);</p>\n<p>Sql-client-default.yaml配置：</p>\n<p>catalogs: # empty list</p>\n<ul>\n<li><p>name: gmall<br>type: hive<br>hive-conf-dir: /opt/module/hive/conf/<br>hive-version: 1.2.1<br>default-database: gmallFlink SQL&gt; CREATE TABLE gmall.gmall.sample (</p>\n<blockquote>\n<pre><code>`id BIGINT COMMENT &#39;unique id&#39;,`\n`data STRING`\n`);`\n`[INFO] Table has been created.`\n</code></pre>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE  gmall.gmall.sample_like LIKE gmall.gmall.sample;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE gmall.gmall.sample SET (&#x27;write.format.default&#x27;=&#x27;avro&#x27;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE gmall.gmall.sample RENAME TO gmall.gmall.new_sample;</span><br><span class=\"line\">DROP TABLE gmall.gmall.sample;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>CREATE CATALOG hive_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-type’=’hive’,<br>  ‘uri’=’thrift://localhost:9083’,<br>  ‘clients’=’5’,<br>  ‘property-version’=’1’,<br>  ‘warehouse’=’hdfs://localhost:8020/hive/warehouse’<br>);</p>\n<p>CREATE TABLE sample (<br>    id BIGINT COMMENT ‘unique id’,<br>    data STRING<br>);</p>\n","site":{"data":{}},"excerpt":"<p>1.下载flink</p>\n<p><code>wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.11.3/flink-1.11.3-bin-scala_2.12.tgz</code></p>\n<p>2.修改start-cluster.sh</p>","more":"<p>添加如下内容</p>\n<p><code>export HADOOP_CLASSPATH=$HADOOP_HOME/bin/hadoop classpath</code></p>\n<!--more-->\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/start-cluster.sh</span><br></pre></td></tr></table></figure>\n\n<p>wget <a href=\"https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar\">https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar</a></p>\n<p>wget <a href=\"https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar\">https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar</a></p>\n<p>启动shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/sql-client.sh embedded \\</span><br><span class=\"line\">    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/iceberg-flink-runtime-0.10.0.jar \\</span><br><span class=\"line\">    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\</span><br><span class=\"line\">    shell</span><br></pre></td></tr></table></figure>\n\n<p>创建hive catalog</p>\n<p><code>CREATE CATALOG hive_catalog WITH (</code><br>  <code>&#39;type&#39;=&#39;iceberg&#39;,</code><br>  <code>&#39;catalog-type&#39;=&#39;hive&#39;,</code><br>  <code>&#39;uri&#39;=&#39;thrift://localhost:9083&#39;,</code><br>  <code>&#39;clients&#39;=&#39;5&#39;,</code><br>  <code>&#39;property-version&#39;=&#39;1&#39;,</code><br>  <code>&#39;warehouse&#39;=&#39;hdfs://nn:8020/warehouse/path&#39;</code><br><code>);</code></p>\n<p>Hdfs 启动</p>\n<p>ssh免密</p>\n<p>vim authorized_keys </p>\n<p>第一步格式hdfs</p>\n<p>hadoop namenode -format</p>\n<p><code>start-dfs.sh</code> </p>\n<p>启动hive-metastore</p>\n<p>VI hive-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.uris<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>thrift://localhost:9083<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Hive 数据库初始化：</p>\n<p>hdfs dfs -mkdir -p /tmp/hive</p>\n<p> hdfs dfs -mkdir -p /hive/warehouse</p>\n<p> hdfs dfs -chmod -R g+w,o+w /tmp </p>\n<p>hdfs dfs -chmod -R g+w,o+w /hive </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive --service metastore</span><br></pre></td></tr></table></figure>\n\n<p>flink-hive</p>\n<p>要配置环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HIVE_CONF_DIR=$&#123;HIVE_HOME&#125;/conf</span><br></pre></td></tr></table></figure>\n\n<p>CREATE CATALOG hive_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-type’=’hive’,<br>  ‘uri’=’thrift://localhost:9083’,<br>  ‘clients’=’5’,<br>  ‘property-version’=’1’,<br>  ‘warehouse’=’hdfs://localhost:9000/hive/warehouse’<br>);</p>\n<p>CREATE CATALOG my_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-impl’=’com.my.custom.CatalogImpl’,<br>  ‘my-additional-catalog-config’=’my-value’<br>);</p>\n<p>Sql-client-default.yaml配置：</p>\n<p>catalogs: # empty list</p>\n<ul>\n<li><p>name: gmall<br>type: hive<br>hive-conf-dir: /opt/module/hive/conf/<br>hive-version: 1.2.1<br>default-database: gmallFlink SQL&gt; CREATE TABLE gmall.gmall.sample (</p>\n<blockquote>\n<pre><code>`id BIGINT COMMENT &#39;unique id&#39;,`\n`data STRING`\n`);`\n`[INFO] Table has been created.`\n</code></pre>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE  gmall.gmall.sample_like LIKE gmall.gmall.sample;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE gmall.gmall.sample SET (&#x27;write.format.default&#x27;=&#x27;avro&#x27;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE gmall.gmall.sample RENAME TO gmall.gmall.new_sample;</span><br><span class=\"line\">DROP TABLE gmall.gmall.sample;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>CREATE CATALOG hive_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-type’=’hive’,<br>  ‘uri’=’thrift://localhost:9083’,<br>  ‘clients’=’5’,<br>  ‘property-version’=’1’,<br>  ‘warehouse’=’hdfs://localhost:8020/hive/warehouse’<br>);</p>\n<p>CREATE TABLE sample (<br>    id BIGINT COMMENT ‘unique id’,<br>    data STRING<br>);</p>"},{"title":"macos设置","date":"2021-04-28T07:49:27.000Z","_content":"\n### 必要姿势: 允许安装任何来源程序\n\n打开终端 -> `sudo spctl --master-disable` . 滴滴答答,输入你的管理员密码就解开了\n\n当提示资源已损坏，请移入回收站，请用以下方式\n\n**`运行“终端”，然后复制这段代码“- [ ] sudo xattr -r -d com.apple.quarantine”，然后上“访达”找到“应用程序”里有问题的那个软件，把它拖到“终端”这段代码的页面，然后输入本机密码（密码不显示，输入完回车就可以），接下来就是见证奇迹的时刻了~`**\n\n## 工作流(花样姿势)\n\n<!-- more -->\n\n> 有了基础的包管理和服务管理,我们才能耍的更好\n<!--more-->\n\n\n\n### 必要姿势: 允许安装任何来源程序\n\n\n\n在 macos 10.12+开始,这个允许安装任何来源的应用功能就给安全机制(官方说为了安全,你信么!!)给屏蔽了...\n\n\n\n但是有木有法子解开呢...我列出来肯定有了啦..姿势如下!\n\n\n\n打开终端 -> `sudo spctl --master-disable` . 滴滴答答,输入你的管理员密码就解开了\n\n\n\n### 姿势1: 快速预览\n\n\n\n快速预览是 Macos内置的一个功能,就是你选中一个文件的时候,直接空格键(`space`)可以看到一些信息.\n\n比如图片,文档!\n\n\n\n但是内置的往往不够强大..万能的基友的社区就有人做了这么些插件来丰富快速预览;\n\n\n\n传送门: [quick-look-plugins](https://github.com/sindresorhus/quick-look-plugins);\n\n\n\n装了这个可预览的功能起码丰富了一倍不止. 代码高亮,Markdown生成预览,excel,zip 包等等...\n\n\n\n### 姿势2: 终端强化\n\n\n\n内置的`terminal`说实在的,真不够友好...所以社区就造就了一个`iterm2`\n\n\n\n传送门 :[ iterm2 : 提供了多套内置主题,可定制的东西多了](https://www.iterm2.com/).\n\n\n\n你觉得我在推崇这个? 不不不,作为一个伪前端,有什么比用前端搞的终端更来的贴心....\n\n\n\n这个,大佬们我推崇的是这个,看下面\n\n\n\n传送门:[**Hyper**: 基于 electron搞得,高度自定义,配置就是一个 js(热更新),插件都是 npm 包,各种花样 style](https://hyper.is/)\n\n\n\n1.x系列还有一些中文输入的 bug ,但是2.x 简直好用!!可以花时间去折腾下.用过都说好!\n\n\n\n**好吧,丰富的定制化只是外在的..那么内在呢?** \n\n\n\n我推崇的是这个(`ZSH`),有人说 `fishshell`!萝卜青菜各有所爱哈!\n\n\n\n传送门: [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh);\n\n\n\n**zsh推荐启用的几个插件(没有的都可以用 brew 安装)**:[**插件列表及介绍**](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins)\n\n\n\n打开`.zshrc`,找到 plugins 启用,名字就是插件,插件之间空格隔开\n\n\n\n```\n#必备的两个插件\nbrew install zsh-autosuggestions\nbrew install zsh-completions\n```\n\n\n\n```\nplugins=(git autojump node npm brew osx extract redis-cli autopep8 history last-working-dir\n\n pip python sudo web-search)\n```\n\n\n\n前几个属于必备的:\n\n\n\n1. git : 提供了丰富的 git `alias`\n2. autojump : 还在一直 `cd xxx`? 只要访问过的(会索引缓存路径),一键直达:`j(autojump) xxx`\n3. node : 打开 node api 文档\n4. npm : npm 智能提示\n5. brew: brew 的智能提示和补全\n\n\n\n后面一些看着装了.有 python 和 redis,也有访问目录的,也有直接打开搜索引擎的\n\n\n\n### 姿势3: 你喜欢 vim?\n\n\n\n但又发现去配置一个成型的 vim 工作量太大,找各种各样的插件...\n\n\n\n那么你可以试试这个...基于 `neovim(自命是 vim 与时俱进的继承者)` 基础上的傻瓜包\n\n\n\n传送门: [spacevim : 社区驱动的 vim 工作环境](https://github.com/SpaceVim/SpaceVim)\n\n\n\n### 姿势4: Alfred\n\n\n\n> 肯定会有人说系统内置的`Spotlight`不够用么? 能索引快速跳转的地方也很多\n\n\n\n但是Alfred 的强大不仅仅文件的索引...而是可拓展性`workflows`;\n\n\n\n传送门:[workflows](https://www.alfredapp.com/workflows/);\n\n\n\n这货让`Alfred`的使用效率大大的提高;\n\n\n\n这里我就推荐几个;\n\n\n\n- Dash : 快速索引跳转到 dash 手册的\n- CalireSearch : 索引 calibre 里面的书籍进行跳转\n- Github repos : 快速跳转到自己的一些 github 仓(需要配置 token)\n- NpmSearch : 快速搜索 npmjs.org 上的某个包,直接浏览器打开\n- StackOverflow: .so + question 筛选出问题列表,浏览器打开\n- Colors: 颜色处理\n\n\n\n之前掘金还有人写了个搜索知乎的... 你动手能力够强也可以自己写一个工作流.\n\n\n\n### 姿势5: 编辑器?IDE?\n\n\n\n- 首推:[`VSCode`(开源免费)](https://code.visualstudio.com/download) : 非常强大的编辑器\n- 其次[`Sublime Text 3`(付费,但可免费使用)](https://www.sublimetext.com/) 或者 [`Atom`(开源免费)](https://atom.io/)\n- 最后[`Webstorm`(付费)](https://www.jetbrains.com/webstorm/download/#section=mac)\n\n\n\n若是兼顾混合开发,**安卓开发**首选`Android Studio`, **IOS开发**首选`XCode`。\n\n\n\n具体可以参考[Flutter for MacOS](https://flutter.io/docs/get-started/install/macos)\n\n\n\n### 姿势6: 想看个本地视频,有什么播放器推荐!\n\n\n\n足够强大,格式也丰富,功能比 `appstore` 一些付费的还多,除了稳定性还有待完善,其他完美了\n\n\n\n传送门: [IINA](https://github.com/lhc70000/iina) , 可以用`brew cask`安装`brew cask install iina`\n\n\n\n### 姿势7: 修改 hosts?\n\n\n\n会命令行的直接粗暴;\n\n\n\n- `sudo vim /etc/hosts` : 然后保存就行\n\n\n\n那么有木有可视化工具管理!!有的..\n\n\n\n传送门:[SwitchHosts](https://github.com/oldj/SwitchHosts)\n\n\n\n### 姿势8: 快捷键有点多,有没有方便记忆的工具\n\n\n\n有的,[**CheatSheet**](https://www.mediaatelier.com/CheatSheet/): 长按 Command 键即可调出应用程序的部分快捷键表(为什么是局部!因为有些 APP 的快捷键它读取不到)\n\n\n\n### 姿势9: 如何远程控制协助!Mac QQ 木有这功能!\n\n\n\n有时候遇到困难要抱好心大佬的大腿,怎么办!!\n\n\n\n亦或者有时候看到一些菜鸟,心血来潮想\"指点江山\",怎么破!\n\n\n\n这时候就需要这个闻名已久的软件了;\n\n\n\n[teamviewer](https://www.teamviewer.com/zhCN/): 全平台的远程会议或协助软件,非商用免费!!!!!!(你懂的)\n\n\n\n`mac`与`mac`之间可以通过内置的远程控制来协助\n\n\n\n### 姿势10: 让 MAC 更像 GNU ,命令行更加丰富\n\n\n\n> Coreutils - GNU core utilities\n>\n> The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.\n>\n> These are the core utilities which are expected to exist on every operating system.\n\n\n\n```\nbrew install coreutils\n```\n\n\n\n### 姿势11: `exa`:更现代化的`ls`命令,用`Rust`写的`\n\n\n\n> A modern version of ‘ls’. https://the.exa.website/\n\n\n\n```\nbrew install exa\n```\n\n\n\n### 姿势12: 免费好用的系统维护工具\n\n\n\n> 很多人去找什么`clean`的付费版,其实国内的鹅厂还是挺良心的\n\n\n\n-[Tencent Lemon Cleaner](https://mac.gj.qq.com/) : 监控和清除垃圾,省了两个`app`的钱\n\n\n\n## 软件推荐\n\n\n\n> 可以用 `brew cask` 用 `#` , 付费用 `$` 表示 , 免费则没有任何符号, `$$`代表付费服务\n\n\n\n- [motrix](https://github.com/agalwood/Motrix) : 全平台的下载工具,底层用的`aria`,速度贼快\n- [KeepingYouAwake](https://github.com/newmarcel/KeepingYouAwake): 很赞的一个小工具,让你的本本不被睡眠(时间可控)\n- [VS Code - #](https://code.visualstudio.com/Download): 非常棒的代码编辑器\n- [MindNode2 - $](https://mindnode.com/): 思维导图软件,很简洁,官方计划年末升级到5\n- [VMware Fusion- $/#](https://www.vmware.com/products/fusion/fusion-evaluation.html): 非常好用的虚拟机软件\n- [FileZilla - #](https://filezilla-project.org/): 开源免费好用的 FTP 软件(全平台)\n- [DBeaver -$/#](https://dbeaver.io/download/) : 非常实用的GUI数据库管理,支持多种数据库\n- [VirtualBox - #](https://www.virtualbox.org/wiki/Downloads) : 开源全平台的虚拟机\n- [Camtasia - $](https://www.techsmith.com/video-editor.html): 知名的屏幕录制工具,用来做视频教程妥妥的\n- [Magnet - $](http://magnet.crowdcafe.com/):窗口快速排版工具\n- [eagle - $](https://eagle.cool/macOS): 设计师必备,素材管理工具,很强大\n- [Navicat permium - $](https://www.navicat.com/en/download/navicat-premium): 全平台的多数据库管理工具(很强大)\n- [SourceTree](https://www.sourcetreeapp.com/): 全平台的 GUI git 管理客户端\n- [智图](https://zhitu.isux.us/) : 腾讯出品的图片压缩平台,有客户端!!\n- [Robo 3T](https://robomongo.org/): MongoDB数据库的本地管理工具\n- [微信开发者工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html):基于`nw.js` 的,但是只打包了 win 和 mac 端!!不解\n- [Trello - #/$$](https://trello.com/) : 办公协助软件,用过都说好..我单纯用来做个人列表清单规划(个人免费),有客户端\n- [Dr.Unarchive](https://www.drcleaner.com/dr-unarchiver/): 解压缩软件,类似 win 上的好压,就是不知道有没有后x(appstore 有)\n- [wiznote - $$](https://www.wiz.cn/):全平台的笔记软件,十多年的国产老牌..值得信赖\n- [Calibre - #](https://calibre-ebook.com/): 很强大的图书管理(全平台),可以用来建立一个本地图书库\n- [Gifox](https://gifox.io/ - $): 很喜欢这个 GIF 录制工具,小巧美观,也很便宜\n- [Dash - $$](https://kapeli.com/dash) : 很全面的手册汇总\n- [charles - $$](https://www.charlesproxy.com/) : http 的抓包分析\n\n\n\n对于**PS 全家桶**和**ms office 全家桶**这些就看人下载了.网上也有和谐的姿势(你懂的!)\n\n\n\n像**QQ,优酷,腾讯视频,有道词典,QQ音乐,网易云音乐**这些,\n\n\n\n在`App store`也有(部分应用可以直接`brew cask`),\n\n\n\n但是啊,这里的版本可能不如他们推送的快.还有会有部分的功能限制(商店的限制比较多).\n\n\n\n官网自家提供的有些需要用到**管理员**特权或者一些系统级的服务!!!\n\n\n\n**macos 也可以编译安装一些软件的**!!!!\n\n\n\n**Q: 也有可能想说 `markdown`这些的工具呢?**\n\n\n\n`VSCode` 或者 `Atom`结合插件来写 markdown 我感觉已经很不错了,\n\n\n\n可以做到各种高亮,快捷键补全,导出 PDF 等.\n\n\n\n有人说我喜欢做事有安排!有没有清单类的应用!有挺多的,但是感觉毫无卵用.\n\n内置的待办事项(适合当天)+邮件里面的日程安排(重复,未来,整天的行程安排)已经完美了..\n\n\n\n## 总结\n\n\n\n哦,对了,有人可能也想知道 `Linux`或者 `unix` 的命令能不能直接在 `macos` 使用;\n\n早期的 mac 是基于 bsd 搞的,所以有一定的 unix 血统...\n\n虽有部分命令相同,但是还有一些参数上的差异.\n\n\n\n还有一些需要额外去安装,比如 `wget`,`htop`这些\n\n\n\n双方都有的命令(`mv`,`cp`,`history`,`file`,`more`....)这些,\n\n功能大同小异(更多的是参数上的区别!!!)\n\n\n\n软件不在多,够用就好...\n\n有一些比较敏感的就不推荐了(世界那么大,你不想看看!知识怎么学习的快!)\n\n倘若盲目的去找工具,装那么一大坨很少用或者基本不会用到.纯属浪费生命和电脑磁盘空间\n\n软件推荐：\n\ngit-fork\n\n命令推荐：\n\nkafkacat\n\n安装命令\n\n`brew install kafkacat`\n\n# 查看过滤出来的文件\n$ find . -name '.DS_Store'\n# 删除\n$ find . -name '.DS_Store' -type f -exec rm -f {} \\;\n# 再次检查\n$ find . -name '.DS_Store'\n\nmaven 4个线程执行\n\n```\nmvn -T 4 clean install\n```","source":"_posts/macos设置.md","raw":"---\ntitle: macos设置\ndate: 2021-04-28 15:49:27\ntags:\n---\n\n### 必要姿势: 允许安装任何来源程序\n\n打开终端 -> `sudo spctl --master-disable` . 滴滴答答,输入你的管理员密码就解开了\n\n当提示资源已损坏，请移入回收站，请用以下方式\n\n**`运行“终端”，然后复制这段代码“- [ ] sudo xattr -r -d com.apple.quarantine”，然后上“访达”找到“应用程序”里有问题的那个软件，把它拖到“终端”这段代码的页面，然后输入本机密码（密码不显示，输入完回车就可以），接下来就是见证奇迹的时刻了~`**\n\n## 工作流(花样姿势)\n\n<!-- more -->\n\n> 有了基础的包管理和服务管理,我们才能耍的更好\n<!--more-->\n\n\n\n### 必要姿势: 允许安装任何来源程序\n\n\n\n在 macos 10.12+开始,这个允许安装任何来源的应用功能就给安全机制(官方说为了安全,你信么!!)给屏蔽了...\n\n\n\n但是有木有法子解开呢...我列出来肯定有了啦..姿势如下!\n\n\n\n打开终端 -> `sudo spctl --master-disable` . 滴滴答答,输入你的管理员密码就解开了\n\n\n\n### 姿势1: 快速预览\n\n\n\n快速预览是 Macos内置的一个功能,就是你选中一个文件的时候,直接空格键(`space`)可以看到一些信息.\n\n比如图片,文档!\n\n\n\n但是内置的往往不够强大..万能的基友的社区就有人做了这么些插件来丰富快速预览;\n\n\n\n传送门: [quick-look-plugins](https://github.com/sindresorhus/quick-look-plugins);\n\n\n\n装了这个可预览的功能起码丰富了一倍不止. 代码高亮,Markdown生成预览,excel,zip 包等等...\n\n\n\n### 姿势2: 终端强化\n\n\n\n内置的`terminal`说实在的,真不够友好...所以社区就造就了一个`iterm2`\n\n\n\n传送门 :[ iterm2 : 提供了多套内置主题,可定制的东西多了](https://www.iterm2.com/).\n\n\n\n你觉得我在推崇这个? 不不不,作为一个伪前端,有什么比用前端搞的终端更来的贴心....\n\n\n\n这个,大佬们我推崇的是这个,看下面\n\n\n\n传送门:[**Hyper**: 基于 electron搞得,高度自定义,配置就是一个 js(热更新),插件都是 npm 包,各种花样 style](https://hyper.is/)\n\n\n\n1.x系列还有一些中文输入的 bug ,但是2.x 简直好用!!可以花时间去折腾下.用过都说好!\n\n\n\n**好吧,丰富的定制化只是外在的..那么内在呢?** \n\n\n\n我推崇的是这个(`ZSH`),有人说 `fishshell`!萝卜青菜各有所爱哈!\n\n\n\n传送门: [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh);\n\n\n\n**zsh推荐启用的几个插件(没有的都可以用 brew 安装)**:[**插件列表及介绍**](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins)\n\n\n\n打开`.zshrc`,找到 plugins 启用,名字就是插件,插件之间空格隔开\n\n\n\n```\n#必备的两个插件\nbrew install zsh-autosuggestions\nbrew install zsh-completions\n```\n\n\n\n```\nplugins=(git autojump node npm brew osx extract redis-cli autopep8 history last-working-dir\n\n pip python sudo web-search)\n```\n\n\n\n前几个属于必备的:\n\n\n\n1. git : 提供了丰富的 git `alias`\n2. autojump : 还在一直 `cd xxx`? 只要访问过的(会索引缓存路径),一键直达:`j(autojump) xxx`\n3. node : 打开 node api 文档\n4. npm : npm 智能提示\n5. brew: brew 的智能提示和补全\n\n\n\n后面一些看着装了.有 python 和 redis,也有访问目录的,也有直接打开搜索引擎的\n\n\n\n### 姿势3: 你喜欢 vim?\n\n\n\n但又发现去配置一个成型的 vim 工作量太大,找各种各样的插件...\n\n\n\n那么你可以试试这个...基于 `neovim(自命是 vim 与时俱进的继承者)` 基础上的傻瓜包\n\n\n\n传送门: [spacevim : 社区驱动的 vim 工作环境](https://github.com/SpaceVim/SpaceVim)\n\n\n\n### 姿势4: Alfred\n\n\n\n> 肯定会有人说系统内置的`Spotlight`不够用么? 能索引快速跳转的地方也很多\n\n\n\n但是Alfred 的强大不仅仅文件的索引...而是可拓展性`workflows`;\n\n\n\n传送门:[workflows](https://www.alfredapp.com/workflows/);\n\n\n\n这货让`Alfred`的使用效率大大的提高;\n\n\n\n这里我就推荐几个;\n\n\n\n- Dash : 快速索引跳转到 dash 手册的\n- CalireSearch : 索引 calibre 里面的书籍进行跳转\n- Github repos : 快速跳转到自己的一些 github 仓(需要配置 token)\n- NpmSearch : 快速搜索 npmjs.org 上的某个包,直接浏览器打开\n- StackOverflow: .so + question 筛选出问题列表,浏览器打开\n- Colors: 颜色处理\n\n\n\n之前掘金还有人写了个搜索知乎的... 你动手能力够强也可以自己写一个工作流.\n\n\n\n### 姿势5: 编辑器?IDE?\n\n\n\n- 首推:[`VSCode`(开源免费)](https://code.visualstudio.com/download) : 非常强大的编辑器\n- 其次[`Sublime Text 3`(付费,但可免费使用)](https://www.sublimetext.com/) 或者 [`Atom`(开源免费)](https://atom.io/)\n- 最后[`Webstorm`(付费)](https://www.jetbrains.com/webstorm/download/#section=mac)\n\n\n\n若是兼顾混合开发,**安卓开发**首选`Android Studio`, **IOS开发**首选`XCode`。\n\n\n\n具体可以参考[Flutter for MacOS](https://flutter.io/docs/get-started/install/macos)\n\n\n\n### 姿势6: 想看个本地视频,有什么播放器推荐!\n\n\n\n足够强大,格式也丰富,功能比 `appstore` 一些付费的还多,除了稳定性还有待完善,其他完美了\n\n\n\n传送门: [IINA](https://github.com/lhc70000/iina) , 可以用`brew cask`安装`brew cask install iina`\n\n\n\n### 姿势7: 修改 hosts?\n\n\n\n会命令行的直接粗暴;\n\n\n\n- `sudo vim /etc/hosts` : 然后保存就行\n\n\n\n那么有木有可视化工具管理!!有的..\n\n\n\n传送门:[SwitchHosts](https://github.com/oldj/SwitchHosts)\n\n\n\n### 姿势8: 快捷键有点多,有没有方便记忆的工具\n\n\n\n有的,[**CheatSheet**](https://www.mediaatelier.com/CheatSheet/): 长按 Command 键即可调出应用程序的部分快捷键表(为什么是局部!因为有些 APP 的快捷键它读取不到)\n\n\n\n### 姿势9: 如何远程控制协助!Mac QQ 木有这功能!\n\n\n\n有时候遇到困难要抱好心大佬的大腿,怎么办!!\n\n\n\n亦或者有时候看到一些菜鸟,心血来潮想\"指点江山\",怎么破!\n\n\n\n这时候就需要这个闻名已久的软件了;\n\n\n\n[teamviewer](https://www.teamviewer.com/zhCN/): 全平台的远程会议或协助软件,非商用免费!!!!!!(你懂的)\n\n\n\n`mac`与`mac`之间可以通过内置的远程控制来协助\n\n\n\n### 姿势10: 让 MAC 更像 GNU ,命令行更加丰富\n\n\n\n> Coreutils - GNU core utilities\n>\n> The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.\n>\n> These are the core utilities which are expected to exist on every operating system.\n\n\n\n```\nbrew install coreutils\n```\n\n\n\n### 姿势11: `exa`:更现代化的`ls`命令,用`Rust`写的`\n\n\n\n> A modern version of ‘ls’. https://the.exa.website/\n\n\n\n```\nbrew install exa\n```\n\n\n\n### 姿势12: 免费好用的系统维护工具\n\n\n\n> 很多人去找什么`clean`的付费版,其实国内的鹅厂还是挺良心的\n\n\n\n-[Tencent Lemon Cleaner](https://mac.gj.qq.com/) : 监控和清除垃圾,省了两个`app`的钱\n\n\n\n## 软件推荐\n\n\n\n> 可以用 `brew cask` 用 `#` , 付费用 `$` 表示 , 免费则没有任何符号, `$$`代表付费服务\n\n\n\n- [motrix](https://github.com/agalwood/Motrix) : 全平台的下载工具,底层用的`aria`,速度贼快\n- [KeepingYouAwake](https://github.com/newmarcel/KeepingYouAwake): 很赞的一个小工具,让你的本本不被睡眠(时间可控)\n- [VS Code - #](https://code.visualstudio.com/Download): 非常棒的代码编辑器\n- [MindNode2 - $](https://mindnode.com/): 思维导图软件,很简洁,官方计划年末升级到5\n- [VMware Fusion- $/#](https://www.vmware.com/products/fusion/fusion-evaluation.html): 非常好用的虚拟机软件\n- [FileZilla - #](https://filezilla-project.org/): 开源免费好用的 FTP 软件(全平台)\n- [DBeaver -$/#](https://dbeaver.io/download/) : 非常实用的GUI数据库管理,支持多种数据库\n- [VirtualBox - #](https://www.virtualbox.org/wiki/Downloads) : 开源全平台的虚拟机\n- [Camtasia - $](https://www.techsmith.com/video-editor.html): 知名的屏幕录制工具,用来做视频教程妥妥的\n- [Magnet - $](http://magnet.crowdcafe.com/):窗口快速排版工具\n- [eagle - $](https://eagle.cool/macOS): 设计师必备,素材管理工具,很强大\n- [Navicat permium - $](https://www.navicat.com/en/download/navicat-premium): 全平台的多数据库管理工具(很强大)\n- [SourceTree](https://www.sourcetreeapp.com/): 全平台的 GUI git 管理客户端\n- [智图](https://zhitu.isux.us/) : 腾讯出品的图片压缩平台,有客户端!!\n- [Robo 3T](https://robomongo.org/): MongoDB数据库的本地管理工具\n- [微信开发者工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html):基于`nw.js` 的,但是只打包了 win 和 mac 端!!不解\n- [Trello - #/$$](https://trello.com/) : 办公协助软件,用过都说好..我单纯用来做个人列表清单规划(个人免费),有客户端\n- [Dr.Unarchive](https://www.drcleaner.com/dr-unarchiver/): 解压缩软件,类似 win 上的好压,就是不知道有没有后x(appstore 有)\n- [wiznote - $$](https://www.wiz.cn/):全平台的笔记软件,十多年的国产老牌..值得信赖\n- [Calibre - #](https://calibre-ebook.com/): 很强大的图书管理(全平台),可以用来建立一个本地图书库\n- [Gifox](https://gifox.io/ - $): 很喜欢这个 GIF 录制工具,小巧美观,也很便宜\n- [Dash - $$](https://kapeli.com/dash) : 很全面的手册汇总\n- [charles - $$](https://www.charlesproxy.com/) : http 的抓包分析\n\n\n\n对于**PS 全家桶**和**ms office 全家桶**这些就看人下载了.网上也有和谐的姿势(你懂的!)\n\n\n\n像**QQ,优酷,腾讯视频,有道词典,QQ音乐,网易云音乐**这些,\n\n\n\n在`App store`也有(部分应用可以直接`brew cask`),\n\n\n\n但是啊,这里的版本可能不如他们推送的快.还有会有部分的功能限制(商店的限制比较多).\n\n\n\n官网自家提供的有些需要用到**管理员**特权或者一些系统级的服务!!!\n\n\n\n**macos 也可以编译安装一些软件的**!!!!\n\n\n\n**Q: 也有可能想说 `markdown`这些的工具呢?**\n\n\n\n`VSCode` 或者 `Atom`结合插件来写 markdown 我感觉已经很不错了,\n\n\n\n可以做到各种高亮,快捷键补全,导出 PDF 等.\n\n\n\n有人说我喜欢做事有安排!有没有清单类的应用!有挺多的,但是感觉毫无卵用.\n\n内置的待办事项(适合当天)+邮件里面的日程安排(重复,未来,整天的行程安排)已经完美了..\n\n\n\n## 总结\n\n\n\n哦,对了,有人可能也想知道 `Linux`或者 `unix` 的命令能不能直接在 `macos` 使用;\n\n早期的 mac 是基于 bsd 搞的,所以有一定的 unix 血统...\n\n虽有部分命令相同,但是还有一些参数上的差异.\n\n\n\n还有一些需要额外去安装,比如 `wget`,`htop`这些\n\n\n\n双方都有的命令(`mv`,`cp`,`history`,`file`,`more`....)这些,\n\n功能大同小异(更多的是参数上的区别!!!)\n\n\n\n软件不在多,够用就好...\n\n有一些比较敏感的就不推荐了(世界那么大,你不想看看!知识怎么学习的快!)\n\n倘若盲目的去找工具,装那么一大坨很少用或者基本不会用到.纯属浪费生命和电脑磁盘空间\n\n软件推荐：\n\ngit-fork\n\n命令推荐：\n\nkafkacat\n\n安装命令\n\n`brew install kafkacat`\n\n# 查看过滤出来的文件\n$ find . -name '.DS_Store'\n# 删除\n$ find . -name '.DS_Store' -type f -exec rm -f {} \\;\n# 再次检查\n$ find . -name '.DS_Store'\n\nmaven 4个线程执行\n\n```\nmvn -T 4 clean install\n```","slug":"macos设置","published":1,"updated":"2021-08-23T00:38:38.722Z","_id":"ckpp6ut5b0007dgv99yhp12jm","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"必要姿势-允许安装任何来源程序\"><a href=\"#必要姿势-允许安装任何来源程序\" class=\"headerlink\" title=\"必要姿势: 允许安装任何来源程序\"></a>必要姿势: 允许安装任何来源程序</h3><p>打开终端 -&gt; <code>sudo spctl --master-disable</code> . 滴滴答答,输入你的管理员密码就解开了</p>\n<p>当提示资源已损坏，请移入回收站，请用以下方式</p>\n<p><strong><code>运行“终端”，然后复制这段代码“- [ ] sudo xattr -r -d com.apple.quarantine”，然后上“访达”找到“应用程序”里有问题的那个软件，把它拖到“终端”这段代码的页面，然后输入本机密码（密码不显示，输入完回车就可以），接下来就是见证奇迹的时刻了~</code></strong></p>\n<h2 id=\"工作流-花样姿势\"><a href=\"#工作流-花样姿势\" class=\"headerlink\" title=\"工作流(花样姿势)\"></a>工作流(花样姿势)</h2><span id=\"more\"></span>\n\n<blockquote>\n<p>有了基础的包管理和服务管理,我们才能耍的更好</p>\n</blockquote>\n<!--more-->\n\n\n\n<h3 id=\"必要姿势-允许安装任何来源程序-1\"><a href=\"#必要姿势-允许安装任何来源程序-1\" class=\"headerlink\" title=\"必要姿势: 允许安装任何来源程序\"></a>必要姿势: 允许安装任何来源程序</h3><p>在 macos 10.12+开始,这个允许安装任何来源的应用功能就给安全机制(官方说为了安全,你信么!!)给屏蔽了…</p>\n<p>但是有木有法子解开呢…我列出来肯定有了啦..姿势如下!</p>\n<p>打开终端 -&gt; <code>sudo spctl --master-disable</code> . 滴滴答答,输入你的管理员密码就解开了</p>\n<h3 id=\"姿势1-快速预览\"><a href=\"#姿势1-快速预览\" class=\"headerlink\" title=\"姿势1: 快速预览\"></a>姿势1: 快速预览</h3><p>快速预览是 Macos内置的一个功能,就是你选中一个文件的时候,直接空格键(<code>space</code>)可以看到一些信息.</p>\n<p>比如图片,文档!</p>\n<p>但是内置的往往不够强大..万能的基友的社区就有人做了这么些插件来丰富快速预览;</p>\n<p>传送门: <a href=\"https://github.com/sindresorhus/quick-look-plugins\">quick-look-plugins</a>;</p>\n<p>装了这个可预览的功能起码丰富了一倍不止. 代码高亮,Markdown生成预览,excel,zip 包等等…</p>\n<h3 id=\"姿势2-终端强化\"><a href=\"#姿势2-终端强化\" class=\"headerlink\" title=\"姿势2: 终端强化\"></a>姿势2: 终端强化</h3><p>内置的<code>terminal</code>说实在的,真不够友好…所以社区就造就了一个<code>iterm2</code></p>\n<p>传送门 :<a href=\"https://www.iterm2.com/\"> iterm2 : 提供了多套内置主题,可定制的东西多了</a>.</p>\n<p>你觉得我在推崇这个? 不不不,作为一个伪前端,有什么比用前端搞的终端更来的贴心….</p>\n<p>这个,大佬们我推崇的是这个,看下面</p>\n<p>传送门:<a href=\"https://hyper.is/\"><strong>Hyper</strong>: 基于 electron搞得,高度自定义,配置就是一个 js(热更新),插件都是 npm 包,各种花样 style</a></p>\n<p>1.x系列还有一些中文输入的 bug ,但是2.x 简直好用!!可以花时间去折腾下.用过都说好!</p>\n<p><strong>好吧,丰富的定制化只是外在的..那么内在呢?</strong> </p>\n<p>我推崇的是这个(<code>ZSH</code>),有人说 <code>fishshell</code>!萝卜青菜各有所爱哈!</p>\n<p>传送门: <a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a>;</p>\n<p><strong>zsh推荐启用的几个插件(没有的都可以用 brew 安装)</strong>:<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\"><strong>插件列表及介绍</strong></a></p>\n<p>打开<code>.zshrc</code>,找到 plugins 启用,名字就是插件,插件之间空格隔开</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#必备的两个插件</span><br><span class=\"line\">brew install zsh-autosuggestions</span><br><span class=\"line\">brew install zsh-completions</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(git autojump node npm brew osx extract redis-cli autopep8 history last-working-dir</span><br><span class=\"line\"></span><br><span class=\"line\"> pip python sudo web-search)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>前几个属于必备的:</p>\n<ol>\n<li>git : 提供了丰富的 git <code>alias</code></li>\n<li>autojump : 还在一直 <code>cd xxx</code>? 只要访问过的(会索引缓存路径),一键直达:<code>j(autojump) xxx</code></li>\n<li>node : 打开 node api 文档</li>\n<li>npm : npm 智能提示</li>\n<li>brew: brew 的智能提示和补全</li>\n</ol>\n<p>后面一些看着装了.有 python 和 redis,也有访问目录的,也有直接打开搜索引擎的</p>\n<h3 id=\"姿势3-你喜欢-vim\"><a href=\"#姿势3-你喜欢-vim\" class=\"headerlink\" title=\"姿势3: 你喜欢 vim?\"></a>姿势3: 你喜欢 vim?</h3><p>但又发现去配置一个成型的 vim 工作量太大,找各种各样的插件…</p>\n<p>那么你可以试试这个…基于 <code>neovim(自命是 vim 与时俱进的继承者)</code> 基础上的傻瓜包</p>\n<p>传送门: <a href=\"https://github.com/SpaceVim/SpaceVim\">spacevim : 社区驱动的 vim 工作环境</a></p>\n<h3 id=\"姿势4-Alfred\"><a href=\"#姿势4-Alfred\" class=\"headerlink\" title=\"姿势4: Alfred\"></a>姿势4: Alfred</h3><blockquote>\n<p>肯定会有人说系统内置的<code>Spotlight</code>不够用么? 能索引快速跳转的地方也很多</p>\n</blockquote>\n<p>但是Alfred 的强大不仅仅文件的索引…而是可拓展性<code>workflows</code>;</p>\n<p>传送门:<a href=\"https://www.alfredapp.com/workflows/\">workflows</a>;</p>\n<p>这货让<code>Alfred</code>的使用效率大大的提高;</p>\n<p>这里我就推荐几个;</p>\n<ul>\n<li>Dash : 快速索引跳转到 dash 手册的</li>\n<li>CalireSearch : 索引 calibre 里面的书籍进行跳转</li>\n<li>Github repos : 快速跳转到自己的一些 github 仓(需要配置 token)</li>\n<li>NpmSearch : 快速搜索 npmjs.org 上的某个包,直接浏览器打开</li>\n<li>StackOverflow: .so + question 筛选出问题列表,浏览器打开</li>\n<li>Colors: 颜色处理</li>\n</ul>\n<p>之前掘金还有人写了个搜索知乎的… 你动手能力够强也可以自己写一个工作流.</p>\n<h3 id=\"姿势5-编辑器-IDE\"><a href=\"#姿势5-编辑器-IDE\" class=\"headerlink\" title=\"姿势5: 编辑器?IDE?\"></a>姿势5: 编辑器?IDE?</h3><ul>\n<li>首推:<a href=\"https://code.visualstudio.com/download\"><code>VSCode</code>(开源免费)</a> : 非常强大的编辑器</li>\n<li>其次<a href=\"https://www.sublimetext.com/\"><code>Sublime Text 3</code>(付费,但可免费使用)</a> 或者 <a href=\"https://atom.io/\"><code>Atom</code>(开源免费)</a></li>\n<li>最后<a href=\"https://www.jetbrains.com/webstorm/download/#section=mac\"><code>Webstorm</code>(付费)</a></li>\n</ul>\n<p>若是兼顾混合开发,<strong>安卓开发</strong>首选<code>Android Studio</code>, <strong>IOS开发</strong>首选<code>XCode</code>。</p>\n<p>具体可以参考<a href=\"https://flutter.io/docs/get-started/install/macos\">Flutter for MacOS</a></p>\n<h3 id=\"姿势6-想看个本地视频-有什么播放器推荐\"><a href=\"#姿势6-想看个本地视频-有什么播放器推荐\" class=\"headerlink\" title=\"姿势6: 想看个本地视频,有什么播放器推荐!\"></a>姿势6: 想看个本地视频,有什么播放器推荐!</h3><p>足够强大,格式也丰富,功能比 <code>appstore</code> 一些付费的还多,除了稳定性还有待完善,其他完美了</p>\n<p>传送门: <a href=\"https://github.com/lhc70000/iina\">IINA</a> , 可以用<code>brew cask</code>安装<code>brew cask install iina</code></p>\n<h3 id=\"姿势7-修改-hosts\"><a href=\"#姿势7-修改-hosts\" class=\"headerlink\" title=\"姿势7: 修改 hosts?\"></a>姿势7: 修改 hosts?</h3><p>会命令行的直接粗暴;</p>\n<ul>\n<li><code>sudo vim /etc/hosts</code> : 然后保存就行</li>\n</ul>\n<p>那么有木有可视化工具管理!!有的..</p>\n<p>传送门:<a href=\"https://github.com/oldj/SwitchHosts\">SwitchHosts</a></p>\n<h3 id=\"姿势8-快捷键有点多-有没有方便记忆的工具\"><a href=\"#姿势8-快捷键有点多-有没有方便记忆的工具\" class=\"headerlink\" title=\"姿势8: 快捷键有点多,有没有方便记忆的工具\"></a>姿势8: 快捷键有点多,有没有方便记忆的工具</h3><p>有的,<a href=\"https://www.mediaatelier.com/CheatSheet/\"><strong>CheatSheet</strong></a>: 长按 Command 键即可调出应用程序的部分快捷键表(为什么是局部!因为有些 APP 的快捷键它读取不到)</p>\n<h3 id=\"姿势9-如何远程控制协助-Mac-QQ-木有这功能\"><a href=\"#姿势9-如何远程控制协助-Mac-QQ-木有这功能\" class=\"headerlink\" title=\"姿势9: 如何远程控制协助!Mac QQ 木有这功能!\"></a>姿势9: 如何远程控制协助!Mac QQ 木有这功能!</h3><p>有时候遇到困难要抱好心大佬的大腿,怎么办!!</p>\n<p>亦或者有时候看到一些菜鸟,心血来潮想”指点江山”,怎么破!</p>\n<p>这时候就需要这个闻名已久的软件了;</p>\n<p><a href=\"https://www.teamviewer.com/zhCN/\">teamviewer</a>: 全平台的远程会议或协助软件,非商用免费!!!!!!(你懂的)</p>\n<p><code>mac</code>与<code>mac</code>之间可以通过内置的远程控制来协助</p>\n<h3 id=\"姿势10-让-MAC-更像-GNU-命令行更加丰富\"><a href=\"#姿势10-让-MAC-更像-GNU-命令行更加丰富\" class=\"headerlink\" title=\"姿势10: 让 MAC 更像 GNU ,命令行更加丰富\"></a>姿势10: 让 MAC 更像 GNU ,命令行更加丰富</h3><blockquote>\n<p>Coreutils - GNU core utilities</p>\n<p>The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.</p>\n<p>These are the core utilities which are expected to exist on every operating system.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install coreutils</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"姿势11-exa-更现代化的ls命令-用Rust写的\"><a href=\"#姿势11-exa-更现代化的ls命令-用Rust写的\" class=\"headerlink\" title=\"姿势11: exa:更现代化的ls命令,用Rust写的`\"></a>姿势11: <code>exa</code>:更现代化的<code>ls</code>命令,用<code>Rust</code>写的`</h3><blockquote>\n<p>A modern version of ‘ls’. <a href=\"https://the.exa.website/\">https://the.exa.website/</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install exa</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"姿势12-免费好用的系统维护工具\"><a href=\"#姿势12-免费好用的系统维护工具\" class=\"headerlink\" title=\"姿势12: 免费好用的系统维护工具\"></a>姿势12: 免费好用的系统维护工具</h3><blockquote>\n<p>很多人去找什么<code>clean</code>的付费版,其实国内的鹅厂还是挺良心的</p>\n</blockquote>\n<p>-<a href=\"https://mac.gj.qq.com/\">Tencent Lemon Cleaner</a> : 监控和清除垃圾,省了两个<code>app</code>的钱</p>\n<h2 id=\"软件推荐\"><a href=\"#软件推荐\" class=\"headerlink\" title=\"软件推荐\"></a>软件推荐</h2><blockquote>\n<p>可以用 <code>brew cask</code> 用 <code>#</code> , 付费用 <code>$</code> 表示 , 免费则没有任何符号, <code>$$</code>代表付费服务</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/agalwood/Motrix\">motrix</a> : 全平台的下载工具,底层用的<code>aria</code>,速度贼快</li>\n<li><a href=\"https://github.com/newmarcel/KeepingYouAwake\">KeepingYouAwake</a>: 很赞的一个小工具,让你的本本不被睡眠(时间可控)</li>\n<li><a href=\"https://code.visualstudio.com/Download\">VS Code - #</a>: 非常棒的代码编辑器</li>\n<li><a href=\"https://mindnode.com/\">MindNode2 - $</a>: 思维导图软件,很简洁,官方计划年末升级到5</li>\n<li><a href=\"https://www.vmware.com/products/fusion/fusion-evaluation.html\">VMware Fusion- $/#</a>: 非常好用的虚拟机软件</li>\n<li><a href=\"https://filezilla-project.org/\">FileZilla - #</a>: 开源免费好用的 FTP 软件(全平台)</li>\n<li><a href=\"https://dbeaver.io/download/\">DBeaver -$/#</a> : 非常实用的GUI数据库管理,支持多种数据库</li>\n<li><a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox - #</a> : 开源全平台的虚拟机</li>\n<li><a href=\"https://www.techsmith.com/video-editor.html\">Camtasia - $</a>: 知名的屏幕录制工具,用来做视频教程妥妥的</li>\n<li><a href=\"http://magnet.crowdcafe.com/\">Magnet - $</a>:窗口快速排版工具</li>\n<li><a href=\"https://eagle.cool/macOS\">eagle - $</a>: 设计师必备,素材管理工具,很强大</li>\n<li><a href=\"https://www.navicat.com/en/download/navicat-premium\">Navicat permium - $</a>: 全平台的多数据库管理工具(很强大)</li>\n<li><a href=\"https://www.sourcetreeapp.com/\">SourceTree</a>: 全平台的 GUI git 管理客户端</li>\n<li><a href=\"https://zhitu.isux.us/\">智图</a> : 腾讯出品的图片压缩平台,有客户端!!</li>\n<li><a href=\"https://robomongo.org/\">Robo 3T</a>: MongoDB数据库的本地管理工具</li>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\">微信开发者工具</a>:基于<code>nw.js</code> 的,但是只打包了 win 和 mac 端!!不解</li>\n<li><a href=\"https://trello.com/\">Trello - #/$$</a> : 办公协助软件,用过都说好..我单纯用来做个人列表清单规划(个人免费),有客户端</li>\n<li><a href=\"https://www.drcleaner.com/dr-unarchiver/\">Dr.Unarchive</a>: 解压缩软件,类似 win 上的好压,就是不知道有没有后x(appstore 有)</li>\n<li><a href=\"https://www.wiz.cn/\">wiznote - $$</a>:全平台的笔记软件,十多年的国产老牌..值得信赖</li>\n<li><a href=\"https://calibre-ebook.com/\">Calibre - #</a>: 很强大的图书管理(全平台),可以用来建立一个本地图书库</li>\n<li>[Gifox](<a href=\"https://gifox.io/\">https://gifox.io/</a> - $): 很喜欢这个 GIF 录制工具,小巧美观,也很便宜</li>\n<li><a href=\"https://kapeli.com/dash\">Dash - $$</a> : 很全面的手册汇总</li>\n<li><a href=\"https://www.charlesproxy.com/\">charles - $$</a> : http 的抓包分析</li>\n</ul>\n<p>对于<strong>PS 全家桶</strong>和<strong>ms office 全家桶</strong>这些就看人下载了.网上也有和谐的姿势(你懂的!)</p>\n<p>像<strong>QQ,优酷,腾讯视频,有道词典,QQ音乐,网易云音乐</strong>这些,</p>\n<p>在<code>App store</code>也有(部分应用可以直接<code>brew cask</code>),</p>\n<p>但是啊,这里的版本可能不如他们推送的快.还有会有部分的功能限制(商店的限制比较多).</p>\n<p>官网自家提供的有些需要用到<strong>管理员</strong>特权或者一些系统级的服务!!!</p>\n<p><strong>macos 也可以编译安装一些软件的</strong>!!!!</p>\n<p><strong>Q: 也有可能想说 <code>markdown</code>这些的工具呢?</strong></p>\n<p><code>VSCode</code> 或者 <code>Atom</code>结合插件来写 markdown 我感觉已经很不错了,</p>\n<p>可以做到各种高亮,快捷键补全,导出 PDF 等.</p>\n<p>有人说我喜欢做事有安排!有没有清单类的应用!有挺多的,但是感觉毫无卵用.</p>\n<p>内置的待办事项(适合当天)+邮件里面的日程安排(重复,未来,整天的行程安排)已经完美了..</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>哦,对了,有人可能也想知道 <code>Linux</code>或者 <code>unix</code> 的命令能不能直接在 <code>macos</code> 使用;</p>\n<p>早期的 mac 是基于 bsd 搞的,所以有一定的 unix 血统…</p>\n<p>虽有部分命令相同,但是还有一些参数上的差异.</p>\n<p>还有一些需要额外去安装,比如 <code>wget</code>,<code>htop</code>这些</p>\n<p>双方都有的命令(<code>mv</code>,<code>cp</code>,<code>history</code>,<code>file</code>,<code>more</code>….)这些,</p>\n<p>功能大同小异(更多的是参数上的区别!!!)</p>\n<p>软件不在多,够用就好…</p>\n<p>有一些比较敏感的就不推荐了(世界那么大,你不想看看!知识怎么学习的快!)</p>\n<p>倘若盲目的去找工具,装那么一大坨很少用或者基本不会用到.纯属浪费生命和电脑磁盘空间</p>\n<p>软件推荐：</p>\n<p>git-fork</p>\n<p>命令推荐：</p>\n<p>kafkacat</p>\n<p>安装命令</p>\n<p><code>brew install kafkacat</code></p>\n<h1 id=\"查看过滤出来的文件\"><a href=\"#查看过滤出来的文件\" class=\"headerlink\" title=\"查看过滤出来的文件\"></a>查看过滤出来的文件</h1><p>$ find . -name ‘.DS_Store’</p>\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><p>$ find . -name ‘.DS_Store’ -type f -exec rm -f {} ;</p>\n<h1 id=\"再次检查\"><a href=\"#再次检查\" class=\"headerlink\" title=\"再次检查\"></a>再次检查</h1><p>$ find . -name ‘.DS_Store’</p>\n<p>maven 4个线程执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -T 4 clean install</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"必要姿势-允许安装任何来源程序\"><a href=\"#必要姿势-允许安装任何来源程序\" class=\"headerlink\" title=\"必要姿势: 允许安装任何来源程序\"></a>必要姿势: 允许安装任何来源程序</h3><p>打开终端 -&gt; <code>sudo spctl --master-disable</code> . 滴滴答答,输入你的管理员密码就解开了</p>\n<p>当提示资源已损坏，请移入回收站，请用以下方式</p>\n<p><strong><code>运行“终端”，然后复制这段代码“- [ ] sudo xattr -r -d com.apple.quarantine”，然后上“访达”找到“应用程序”里有问题的那个软件，把它拖到“终端”这段代码的页面，然后输入本机密码（密码不显示，输入完回车就可以），接下来就是见证奇迹的时刻了~</code></strong></p>\n<h2 id=\"工作流-花样姿势\"><a href=\"#工作流-花样姿势\" class=\"headerlink\" title=\"工作流(花样姿势)\"></a>工作流(花样姿势)</h2>","more":"<blockquote>\n<p>有了基础的包管理和服务管理,我们才能耍的更好</p>\n</blockquote>\n<!--more-->\n\n\n\n<h3 id=\"必要姿势-允许安装任何来源程序-1\"><a href=\"#必要姿势-允许安装任何来源程序-1\" class=\"headerlink\" title=\"必要姿势: 允许安装任何来源程序\"></a>必要姿势: 允许安装任何来源程序</h3><p>在 macos 10.12+开始,这个允许安装任何来源的应用功能就给安全机制(官方说为了安全,你信么!!)给屏蔽了…</p>\n<p>但是有木有法子解开呢…我列出来肯定有了啦..姿势如下!</p>\n<p>打开终端 -&gt; <code>sudo spctl --master-disable</code> . 滴滴答答,输入你的管理员密码就解开了</p>\n<h3 id=\"姿势1-快速预览\"><a href=\"#姿势1-快速预览\" class=\"headerlink\" title=\"姿势1: 快速预览\"></a>姿势1: 快速预览</h3><p>快速预览是 Macos内置的一个功能,就是你选中一个文件的时候,直接空格键(<code>space</code>)可以看到一些信息.</p>\n<p>比如图片,文档!</p>\n<p>但是内置的往往不够强大..万能的基友的社区就有人做了这么些插件来丰富快速预览;</p>\n<p>传送门: <a href=\"https://github.com/sindresorhus/quick-look-plugins\">quick-look-plugins</a>;</p>\n<p>装了这个可预览的功能起码丰富了一倍不止. 代码高亮,Markdown生成预览,excel,zip 包等等…</p>\n<h3 id=\"姿势2-终端强化\"><a href=\"#姿势2-终端强化\" class=\"headerlink\" title=\"姿势2: 终端强化\"></a>姿势2: 终端强化</h3><p>内置的<code>terminal</code>说实在的,真不够友好…所以社区就造就了一个<code>iterm2</code></p>\n<p>传送门 :<a href=\"https://www.iterm2.com/\"> iterm2 : 提供了多套内置主题,可定制的东西多了</a>.</p>\n<p>你觉得我在推崇这个? 不不不,作为一个伪前端,有什么比用前端搞的终端更来的贴心….</p>\n<p>这个,大佬们我推崇的是这个,看下面</p>\n<p>传送门:<a href=\"https://hyper.is/\"><strong>Hyper</strong>: 基于 electron搞得,高度自定义,配置就是一个 js(热更新),插件都是 npm 包,各种花样 style</a></p>\n<p>1.x系列还有一些中文输入的 bug ,但是2.x 简直好用!!可以花时间去折腾下.用过都说好!</p>\n<p><strong>好吧,丰富的定制化只是外在的..那么内在呢?</strong> </p>\n<p>我推崇的是这个(<code>ZSH</code>),有人说 <code>fishshell</code>!萝卜青菜各有所爱哈!</p>\n<p>传送门: <a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a>;</p>\n<p><strong>zsh推荐启用的几个插件(没有的都可以用 brew 安装)</strong>:<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\"><strong>插件列表及介绍</strong></a></p>\n<p>打开<code>.zshrc</code>,找到 plugins 启用,名字就是插件,插件之间空格隔开</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#必备的两个插件</span><br><span class=\"line\">brew install zsh-autosuggestions</span><br><span class=\"line\">brew install zsh-completions</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(git autojump node npm brew osx extract redis-cli autopep8 history last-working-dir</span><br><span class=\"line\"></span><br><span class=\"line\"> pip python sudo web-search)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>前几个属于必备的:</p>\n<ol>\n<li>git : 提供了丰富的 git <code>alias</code></li>\n<li>autojump : 还在一直 <code>cd xxx</code>? 只要访问过的(会索引缓存路径),一键直达:<code>j(autojump) xxx</code></li>\n<li>node : 打开 node api 文档</li>\n<li>npm : npm 智能提示</li>\n<li>brew: brew 的智能提示和补全</li>\n</ol>\n<p>后面一些看着装了.有 python 和 redis,也有访问目录的,也有直接打开搜索引擎的</p>\n<h3 id=\"姿势3-你喜欢-vim\"><a href=\"#姿势3-你喜欢-vim\" class=\"headerlink\" title=\"姿势3: 你喜欢 vim?\"></a>姿势3: 你喜欢 vim?</h3><p>但又发现去配置一个成型的 vim 工作量太大,找各种各样的插件…</p>\n<p>那么你可以试试这个…基于 <code>neovim(自命是 vim 与时俱进的继承者)</code> 基础上的傻瓜包</p>\n<p>传送门: <a href=\"https://github.com/SpaceVim/SpaceVim\">spacevim : 社区驱动的 vim 工作环境</a></p>\n<h3 id=\"姿势4-Alfred\"><a href=\"#姿势4-Alfred\" class=\"headerlink\" title=\"姿势4: Alfred\"></a>姿势4: Alfred</h3><blockquote>\n<p>肯定会有人说系统内置的<code>Spotlight</code>不够用么? 能索引快速跳转的地方也很多</p>\n</blockquote>\n<p>但是Alfred 的强大不仅仅文件的索引…而是可拓展性<code>workflows</code>;</p>\n<p>传送门:<a href=\"https://www.alfredapp.com/workflows/\">workflows</a>;</p>\n<p>这货让<code>Alfred</code>的使用效率大大的提高;</p>\n<p>这里我就推荐几个;</p>\n<ul>\n<li>Dash : 快速索引跳转到 dash 手册的</li>\n<li>CalireSearch : 索引 calibre 里面的书籍进行跳转</li>\n<li>Github repos : 快速跳转到自己的一些 github 仓(需要配置 token)</li>\n<li>NpmSearch : 快速搜索 npmjs.org 上的某个包,直接浏览器打开</li>\n<li>StackOverflow: .so + question 筛选出问题列表,浏览器打开</li>\n<li>Colors: 颜色处理</li>\n</ul>\n<p>之前掘金还有人写了个搜索知乎的… 你动手能力够强也可以自己写一个工作流.</p>\n<h3 id=\"姿势5-编辑器-IDE\"><a href=\"#姿势5-编辑器-IDE\" class=\"headerlink\" title=\"姿势5: 编辑器?IDE?\"></a>姿势5: 编辑器?IDE?</h3><ul>\n<li>首推:<a href=\"https://code.visualstudio.com/download\"><code>VSCode</code>(开源免费)</a> : 非常强大的编辑器</li>\n<li>其次<a href=\"https://www.sublimetext.com/\"><code>Sublime Text 3</code>(付费,但可免费使用)</a> 或者 <a href=\"https://atom.io/\"><code>Atom</code>(开源免费)</a></li>\n<li>最后<a href=\"https://www.jetbrains.com/webstorm/download/#section=mac\"><code>Webstorm</code>(付费)</a></li>\n</ul>\n<p>若是兼顾混合开发,<strong>安卓开发</strong>首选<code>Android Studio</code>, <strong>IOS开发</strong>首选<code>XCode</code>。</p>\n<p>具体可以参考<a href=\"https://flutter.io/docs/get-started/install/macos\">Flutter for MacOS</a></p>\n<h3 id=\"姿势6-想看个本地视频-有什么播放器推荐\"><a href=\"#姿势6-想看个本地视频-有什么播放器推荐\" class=\"headerlink\" title=\"姿势6: 想看个本地视频,有什么播放器推荐!\"></a>姿势6: 想看个本地视频,有什么播放器推荐!</h3><p>足够强大,格式也丰富,功能比 <code>appstore</code> 一些付费的还多,除了稳定性还有待完善,其他完美了</p>\n<p>传送门: <a href=\"https://github.com/lhc70000/iina\">IINA</a> , 可以用<code>brew cask</code>安装<code>brew cask install iina</code></p>\n<h3 id=\"姿势7-修改-hosts\"><a href=\"#姿势7-修改-hosts\" class=\"headerlink\" title=\"姿势7: 修改 hosts?\"></a>姿势7: 修改 hosts?</h3><p>会命令行的直接粗暴;</p>\n<ul>\n<li><code>sudo vim /etc/hosts</code> : 然后保存就行</li>\n</ul>\n<p>那么有木有可视化工具管理!!有的..</p>\n<p>传送门:<a href=\"https://github.com/oldj/SwitchHosts\">SwitchHosts</a></p>\n<h3 id=\"姿势8-快捷键有点多-有没有方便记忆的工具\"><a href=\"#姿势8-快捷键有点多-有没有方便记忆的工具\" class=\"headerlink\" title=\"姿势8: 快捷键有点多,有没有方便记忆的工具\"></a>姿势8: 快捷键有点多,有没有方便记忆的工具</h3><p>有的,<a href=\"https://www.mediaatelier.com/CheatSheet/\"><strong>CheatSheet</strong></a>: 长按 Command 键即可调出应用程序的部分快捷键表(为什么是局部!因为有些 APP 的快捷键它读取不到)</p>\n<h3 id=\"姿势9-如何远程控制协助-Mac-QQ-木有这功能\"><a href=\"#姿势9-如何远程控制协助-Mac-QQ-木有这功能\" class=\"headerlink\" title=\"姿势9: 如何远程控制协助!Mac QQ 木有这功能!\"></a>姿势9: 如何远程控制协助!Mac QQ 木有这功能!</h3><p>有时候遇到困难要抱好心大佬的大腿,怎么办!!</p>\n<p>亦或者有时候看到一些菜鸟,心血来潮想”指点江山”,怎么破!</p>\n<p>这时候就需要这个闻名已久的软件了;</p>\n<p><a href=\"https://www.teamviewer.com/zhCN/\">teamviewer</a>: 全平台的远程会议或协助软件,非商用免费!!!!!!(你懂的)</p>\n<p><code>mac</code>与<code>mac</code>之间可以通过内置的远程控制来协助</p>\n<h3 id=\"姿势10-让-MAC-更像-GNU-命令行更加丰富\"><a href=\"#姿势10-让-MAC-更像-GNU-命令行更加丰富\" class=\"headerlink\" title=\"姿势10: 让 MAC 更像 GNU ,命令行更加丰富\"></a>姿势10: 让 MAC 更像 GNU ,命令行更加丰富</h3><blockquote>\n<p>Coreutils - GNU core utilities</p>\n<p>The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.</p>\n<p>These are the core utilities which are expected to exist on every operating system.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install coreutils</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"姿势11-exa-更现代化的ls命令-用Rust写的\"><a href=\"#姿势11-exa-更现代化的ls命令-用Rust写的\" class=\"headerlink\" title=\"姿势11: exa:更现代化的ls命令,用Rust写的`\"></a>姿势11: <code>exa</code>:更现代化的<code>ls</code>命令,用<code>Rust</code>写的`</h3><blockquote>\n<p>A modern version of ‘ls’. <a href=\"https://the.exa.website/\">https://the.exa.website/</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install exa</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"姿势12-免费好用的系统维护工具\"><a href=\"#姿势12-免费好用的系统维护工具\" class=\"headerlink\" title=\"姿势12: 免费好用的系统维护工具\"></a>姿势12: 免费好用的系统维护工具</h3><blockquote>\n<p>很多人去找什么<code>clean</code>的付费版,其实国内的鹅厂还是挺良心的</p>\n</blockquote>\n<p>-<a href=\"https://mac.gj.qq.com/\">Tencent Lemon Cleaner</a> : 监控和清除垃圾,省了两个<code>app</code>的钱</p>\n<h2 id=\"软件推荐\"><a href=\"#软件推荐\" class=\"headerlink\" title=\"软件推荐\"></a>软件推荐</h2><blockquote>\n<p>可以用 <code>brew cask</code> 用 <code>#</code> , 付费用 <code>$</code> 表示 , 免费则没有任何符号, <code>$$</code>代表付费服务</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/agalwood/Motrix\">motrix</a> : 全平台的下载工具,底层用的<code>aria</code>,速度贼快</li>\n<li><a href=\"https://github.com/newmarcel/KeepingYouAwake\">KeepingYouAwake</a>: 很赞的一个小工具,让你的本本不被睡眠(时间可控)</li>\n<li><a href=\"https://code.visualstudio.com/Download\">VS Code - #</a>: 非常棒的代码编辑器</li>\n<li><a href=\"https://mindnode.com/\">MindNode2 - $</a>: 思维导图软件,很简洁,官方计划年末升级到5</li>\n<li><a href=\"https://www.vmware.com/products/fusion/fusion-evaluation.html\">VMware Fusion- $/#</a>: 非常好用的虚拟机软件</li>\n<li><a href=\"https://filezilla-project.org/\">FileZilla - #</a>: 开源免费好用的 FTP 软件(全平台)</li>\n<li><a href=\"https://dbeaver.io/download/\">DBeaver -$/#</a> : 非常实用的GUI数据库管理,支持多种数据库</li>\n<li><a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox - #</a> : 开源全平台的虚拟机</li>\n<li><a href=\"https://www.techsmith.com/video-editor.html\">Camtasia - $</a>: 知名的屏幕录制工具,用来做视频教程妥妥的</li>\n<li><a href=\"http://magnet.crowdcafe.com/\">Magnet - $</a>:窗口快速排版工具</li>\n<li><a href=\"https://eagle.cool/macOS\">eagle - $</a>: 设计师必备,素材管理工具,很强大</li>\n<li><a href=\"https://www.navicat.com/en/download/navicat-premium\">Navicat permium - $</a>: 全平台的多数据库管理工具(很强大)</li>\n<li><a href=\"https://www.sourcetreeapp.com/\">SourceTree</a>: 全平台的 GUI git 管理客户端</li>\n<li><a href=\"https://zhitu.isux.us/\">智图</a> : 腾讯出品的图片压缩平台,有客户端!!</li>\n<li><a href=\"https://robomongo.org/\">Robo 3T</a>: MongoDB数据库的本地管理工具</li>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\">微信开发者工具</a>:基于<code>nw.js</code> 的,但是只打包了 win 和 mac 端!!不解</li>\n<li><a href=\"https://trello.com/\">Trello - #/$$</a> : 办公协助软件,用过都说好..我单纯用来做个人列表清单规划(个人免费),有客户端</li>\n<li><a href=\"https://www.drcleaner.com/dr-unarchiver/\">Dr.Unarchive</a>: 解压缩软件,类似 win 上的好压,就是不知道有没有后x(appstore 有)</li>\n<li><a href=\"https://www.wiz.cn/\">wiznote - $$</a>:全平台的笔记软件,十多年的国产老牌..值得信赖</li>\n<li><a href=\"https://calibre-ebook.com/\">Calibre - #</a>: 很强大的图书管理(全平台),可以用来建立一个本地图书库</li>\n<li>[Gifox](<a href=\"https://gifox.io/\">https://gifox.io/</a> - $): 很喜欢这个 GIF 录制工具,小巧美观,也很便宜</li>\n<li><a href=\"https://kapeli.com/dash\">Dash - $$</a> : 很全面的手册汇总</li>\n<li><a href=\"https://www.charlesproxy.com/\">charles - $$</a> : http 的抓包分析</li>\n</ul>\n<p>对于<strong>PS 全家桶</strong>和<strong>ms office 全家桶</strong>这些就看人下载了.网上也有和谐的姿势(你懂的!)</p>\n<p>像<strong>QQ,优酷,腾讯视频,有道词典,QQ音乐,网易云音乐</strong>这些,</p>\n<p>在<code>App store</code>也有(部分应用可以直接<code>brew cask</code>),</p>\n<p>但是啊,这里的版本可能不如他们推送的快.还有会有部分的功能限制(商店的限制比较多).</p>\n<p>官网自家提供的有些需要用到<strong>管理员</strong>特权或者一些系统级的服务!!!</p>\n<p><strong>macos 也可以编译安装一些软件的</strong>!!!!</p>\n<p><strong>Q: 也有可能想说 <code>markdown</code>这些的工具呢?</strong></p>\n<p><code>VSCode</code> 或者 <code>Atom</code>结合插件来写 markdown 我感觉已经很不错了,</p>\n<p>可以做到各种高亮,快捷键补全,导出 PDF 等.</p>\n<p>有人说我喜欢做事有安排!有没有清单类的应用!有挺多的,但是感觉毫无卵用.</p>\n<p>内置的待办事项(适合当天)+邮件里面的日程安排(重复,未来,整天的行程安排)已经完美了..</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>哦,对了,有人可能也想知道 <code>Linux</code>或者 <code>unix</code> 的命令能不能直接在 <code>macos</code> 使用;</p>\n<p>早期的 mac 是基于 bsd 搞的,所以有一定的 unix 血统…</p>\n<p>虽有部分命令相同,但是还有一些参数上的差异.</p>\n<p>还有一些需要额外去安装,比如 <code>wget</code>,<code>htop</code>这些</p>\n<p>双方都有的命令(<code>mv</code>,<code>cp</code>,<code>history</code>,<code>file</code>,<code>more</code>….)这些,</p>\n<p>功能大同小异(更多的是参数上的区别!!!)</p>\n<p>软件不在多,够用就好…</p>\n<p>有一些比较敏感的就不推荐了(世界那么大,你不想看看!知识怎么学习的快!)</p>\n<p>倘若盲目的去找工具,装那么一大坨很少用或者基本不会用到.纯属浪费生命和电脑磁盘空间</p>\n<p>软件推荐：</p>\n<p>git-fork</p>\n<p>命令推荐：</p>\n<p>kafkacat</p>\n<p>安装命令</p>\n<p><code>brew install kafkacat</code></p>\n<h1 id=\"查看过滤出来的文件\"><a href=\"#查看过滤出来的文件\" class=\"headerlink\" title=\"查看过滤出来的文件\"></a>查看过滤出来的文件</h1><p>$ find . -name ‘.DS_Store’</p>\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><p>$ find . -name ‘.DS_Store’ -type f -exec rm -f {} ;</p>\n<h1 id=\"再次检查\"><a href=\"#再次检查\" class=\"headerlink\" title=\"再次检查\"></a>再次检查</h1><p>$ find . -name ‘.DS_Store’</p>\n<p>maven 4个线程执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -T 4 clean install</span><br></pre></td></tr></table></figure>"},{"title":"nginx设置","date":"2021-04-29T02:45:53.000Z","_content":"\nnginx相关命令\n<!--more-->\n\n `nginx -s reload`\n\nnginx安装\n<!-- more -->\n","source":"_posts/nginx设置.md","raw":"---\ntitle: nginx设置\ndate: 2021-04-29 10:45:53\ntags:\n---\n\nnginx相关命令\n<!--more-->\n\n `nginx -s reload`\n\nnginx安装\n<!-- more -->\n","slug":"nginx设置","published":1,"updated":"2021-08-23T00:38:38.723Z","_id":"ckpp6ut5c0008dgv9drxn3g2j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>nginx相关命令</p>\n<span id=\"more\"></span>\n\n<p> <code>nginx -s reload</code></p>\n<p>nginx安装</p>\n<!-- more -->\n","site":{"data":{}},"excerpt":"<p>nginx相关命令</p>","more":"<p> <code>nginx -s reload</code></p>\n<p>nginx安装</p>\n<!-- more -->"},{"title":"/usr/libexec/java_home奇葩境遇","date":"2021-05-10T09:36:05.000Z","_content":"\njava_home是oracle的java安装包带进来的，最好不用他安装程序，对系统破坏性极大，还不能删除掉。\n\n后面只能再次安装oracle 的java的安装包\n<!-- more -->\n该程序会造成java JAVA_HOME无效。","source":"_posts/usr-libexec-java-home奇葩境遇.md","raw":"---\ntitle: /usr/libexec/java_home奇葩境遇\ndate: 2021-05-10 17:36:05\ntags:\n---\n\njava_home是oracle的java安装包带进来的，最好不用他安装程序，对系统破坏性极大，还不能删除掉。\n\n后面只能再次安装oracle 的java的安装包\n<!-- more -->\n该程序会造成java JAVA_HOME无效。","slug":"usr-libexec-java-home奇葩境遇","published":1,"updated":"2021-07-22T07:01:07.794Z","_id":"ckpp6ut5c0009dgv9c6diha3x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>java_home是oracle的java安装包带进来的，最好不用他安装程序，对系统破坏性极大，还不能删除掉。</p>\n<p>后面只能再次安装oracle 的java的安装包</p>\n<span id=\"more\"></span>\n<p>该程序会造成java JAVA_HOME无效。</p>\n","site":{"data":{}},"excerpt":"<p>java_home是oracle的java安装包带进来的，最好不用他安装程序，对系统破坏性极大，还不能删除掉。</p>\n<p>后面只能再次安装oracle 的java的安装包</p>","more":"<p>该程序会造成java JAVA_HOME无效。</p>"},{"title":"webp图片踩坑","date":"2021-05-07T17:50:02.000Z","_content":"\n通过这个命令解决vendor报错\n< !--more-->\n`node node_modules/cwebp-bin/lib/install.js`\n\n![](../images/image-20210507231725024.png)\n\n<!-- more -->","source":"_posts/webp图片踩坑.md","raw":"---\ntitle: webp图片踩坑\ndate: 2021-05-08 01:50:02\ntags:\n---\n\n通过这个命令解决vendor报错\n< !--more-->\n`node node_modules/cwebp-bin/lib/install.js`\n\n![](../images/image-20210507231725024.png)\n\n<!-- more -->","slug":"webp图片踩坑","published":1,"updated":"2021-07-22T07:01:11.042Z","_id":"ckpp6ut5d000adgv9hzmcb4g5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>通过这个命令解决vendor报错<br>&lt; !–more–&gt;<br><code>node node_modules/cwebp-bin/lib/install.js</code></p>\n<p><img src=\"../images/image-20210507231725024.png\"></p>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p>通过这个命令解决vendor报错<br>&lt; !–more–&gt;<br><code>node node_modules/cwebp-bin/lib/install.js</code></p>\n<p><img src=\"../images/image-20210507231725024.png\"></p>","more":""},{"title":"利用 GitHub Action 自动发布 Docker","date":"2021-05-08T08:45:54.000Z","_content":"\n[![](https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg)](https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg)\n\n# [](#前言 \"前言\")前言\n\n最近公司内部项目的发布流程接入了 `GitHub Actions`，整个体验过程还是比较美好的；本文主要目的是对于没有还接触过 `GitHub Actions`的新手，能够利用它快速构建自动测试及打包推送 `Docker` 镜像等自动化流程。\n<!--more-->\n\n# [](#创建项目 \"创建项目\")创建项目\n<!-- more -->\n本文主要以 `Go` 语言为例，当然其他语言也是类似的，与语言本身关系不大。\n\n这里我们首先在 `GitHub` 上创建一个项目，编写了几段简单的代码 `main.go`：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"string\">\"0.0.1\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetVersion</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> version</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</div><div class=\"line\">\tfmt.Println(GetVersion())</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n内容非常简单，只是打印了了版本号；同时配套了一个单元测试 `main_test.go`：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetVersion1</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">\ttests := []<span class=\"keyword\">struct</span> {</div><div class=\"line\">\t\tname <span class=\"keyword\">string</span></div><div class=\"line\">\t\twant <span class=\"keyword\">string</span></div><div class=\"line\">\t}{</div><div class=\"line\">\t\t{name: <span class=\"string\">\"test1\"</span>, want: <span class=\"string\">\"0.0.1\"</span>},</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests {</div><div class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := GetVersion(); got != tt.want {</div><div class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"GetVersion() = %v, want %v\"</span>, got, tt.want)</div><div class=\"line\">\t\t\t}</div><div class=\"line\">\t\t})</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n我们可以执行 `go test` 运行该单元测试。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go <span class=\"built_in\">test</span>                          </div><div class=\"line\">PASS</div><div class=\"line\">ok      <a class=\"vglnk\" href=\"http://github.com/crossoverJie/go-docker\" rel=\"nofollow\"><span>github</span><span>.</span><span>com</span><span>/</span><span>crossoverJie</span><span>/</span><span>go</span><span>-</span><span>docker</span></a>       1.729s</div></pre></td></tr></tbody></table>\n\n## [](#自动测试 \"自动测试\")自动测试\n\n当然以上流程完全可以利用 `Actions` 自动化搞定。\n\n首选我们需要在项目根路径创建一个 _\\`.github/workflows/_.yml\\`\\* 的配置文件，新增如下内容：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">name:</span> go-docker</div><div class=\"line\"><span class=\"attr\">on:</span> push</div><div class=\"line\"><span class=\"attr\">jobs:</span></div><div class=\"line\"><span class=\"attr\">  test:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    if:</span> github.ref == <span class=\"string\">'refs/heads/main'</span> || startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - uses:</span> actions/checkout@v2</div><div class=\"line\"><span class=\"attr\">      - name:</span> Run Unit Tests</div><div class=\"line\"><span class=\"attr\">        run:</span> go test</div></pre></td></tr></tbody></table>\n\n简单解释下：\n\n* `name` 不必多说，是为当前工作流创建一个名词。\n* `on` 指在什么事件下触发，这里指代码发生 `push` 时触发，更多事件定义可以参考官方文档：\n\n[Events that trigger workflows](https://docs.github.com/en/actions/reference/events-that-trigger-workflows)\n\n* `jobs` 则是定义任务，这里只有一个名为 `test` 的任务。\n\n该任务是运行在 `ubuntu-latest` 的环境下，只有在 `main` 分支有推送或是有 `tag` 推送时运行。\n\n运行时会使用 `actions/checkout@v2` 这个由他人封装好的 `Action`，当然这里使用的是由官方提供的拉取代码 `Action`。\n\n* 基于这个逻辑，我们可以灵活的分享和使用他人的 `Action` 来简化流程，这点也是 `GitHub Action`扩展性非常强的地方。\n\n最后的 `run` 则是运行自己命令，这里自然就是触发单元测试了。\n\n* 如果是 Java 便可改为 `mvn test`.\n\n之后一旦我们在 `main` 分支上推送代码，或者有其他分支的代码合并过来时都会自动运行单元测试，非常方便。\n\n[![](https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg)](https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg)\n\n[![](https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg)](https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg)\n\n与我们本地运行效果一致。\n\n## [](#自动发布 \"自动发布\")自动发布\n\n接下来考虑自动打包 `Docker` 镜像，同时上传到 `Docker Hub`；为此首先创建 `Dockerfile` ：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.15</span> AS builder</div><div class=\"line\">ARG VERSION=<span class=\"number\">0.0</span>.<span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /go/src/app</span></div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> main.go .</span></div><div class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go build -o main -ldflags=<span class=\"string\">\"-X 'main.version=<span class=\"variable\">${VERSION}</span>'\"</span> main.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">FROM</span> debian:stable-slim</div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=builder /go/src/app/main /go/bin/main</span></div><div class=\"line\"><span class=\"keyword\">ENV</span> PATH=<span class=\"string\">\"/go/bin:${PATH}\"</span></div><div class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"main\"</span>]</span></div></pre></td></tr></tbody></table>\n\n这里利用 `ldflags` 可在编译期间将一些参数传递进打包程序中，比如打包时间、go 版本、git 版本等。\n\n这里只是将 `VERSION` 传入了 `main.version` 变量中，这样在运行时就便能取到了。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t go-docker:last .</div><div class=\"line\">docker run --rm go-docker:0.0.10</div><div class=\"line\">0.0.10</div></pre></td></tr></tbody></table>\n\n接着继续编写 `docker.yml` 新增自动打包 `Docker` 以及推送到 `docker hub` 中。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    needs:</span> test</div><div class=\"line\"><span class=\"attr\">    if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - name:</span> Extract Version</div><div class=\"line\"><span class=\"attr\">        id:</span> version_step</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo \"##[set-output name=version;]VERSION=${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up QEMU</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-qemu-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up Docker Buildx</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-buildx-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Login to DockerHub</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/login-action@v1</div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          username:</span> ${{ secrets.DOCKER_USER_NAME }}</div><div class=\"line\"><span class=\"attr\">          password:</span> ${{ secrets.DOCKER_ACCESS_TOKEN }}</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> PrepareReg Names</div><div class=\"line\"><span class=\"attr\">        id:</span> read-docker-image-identifiers</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo VERSION_TAG=$(echo $<span class=\"template-variable\">{{ steps.version_step.outputs.version_tag }}</span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\">          echo LASTEST_TAG=$(echo $<span class=\"template-variable\">{{ steps.version_step.outputs.latest_tag  }}</span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Build and push Docker images</div><div class=\"line\"><span class=\"attr\">        id:</span> docker_build</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/build-push-action@v2<span class=\"number\">.3</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          push:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          tags:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\">{{env.VERSION_TAG}}</span></div><div class=\"line\">            $<span class=\"template-variable\">{{env.LASTEST_TAG}}</span></div><div class=\"line\"><span class=\"attr\">          build-args:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\">{{steps.version_step.outputs.version}}</span></div></pre></td></tr></tbody></table>\n\n新增了一个 `deploy` 的 job。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">needs:</span> test</div><div class=\"line\"><span class=\"attr\">if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div></pre></td></tr></tbody></table>\n\n运行的条件是上一步的单测流程跑通，同时有新的 `tag` 生成时才会触发后续的 `steps`。\n\n`name: Login to DockerHub`\n\n在这一步中我们需要登录到 `DockerHub`，所以首先需要在 GitHub 项目中配置 hub 的 `user_name` 以及 `access_token`.\n\n[![](https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg)](https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg)\n\n[![](https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg)](https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg)\n\n配置好后便能在 action 中使用该变量了。\n\n[![](https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg)](https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg)\n\n这里使用的是由 docker 官方提供的登录 action\\(`docker/login-action`\\)。\n\n有一点要非常注意，我们需要将镜像名称改为小写，不然会上传失败，比如我的名称中 `J` 字母是大写的，直接上传时就会报错。\n\n[![](https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg)](https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg)\n\n所以在上传之前先要执行该步骤转换为小写。\n\n[![](https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg)](https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg)\n\n最后再用这两个变量上传到 Docker Hub。\n\n[![](https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg)](https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg)\n\n今后只要我们打上 `tag` 时，`Action` 就会自动执行单测、构建、上传的流程。\n\n# [](#总结 \"总结\")总结\n\n`GitHub Actions` 非常灵活，你所需要的大部分功能都能在 `marketplace` 找到现成的直接使用，\n\n比如可以利用 `ssh` 登录自己的服务器，执行一些命令或脚本，这样想象空间就很大了。\n\n使用起来就像是搭积木一样，可以很灵活的完成自己的需求。\n\n参考链接：\n\n[How to Build a CI/CD Pipeline with Go, GitHub Actions and Docker](https://tonyuk.medium.com/how-to-build-a-ci-cd-pipeline-with-go-github-actions-and-docker-3c69e50b6043)","source":"_posts/利用-GitHub-Action-自动发布-Docker.md","raw":"---\ntitle: 利用 GitHub Action 自动发布 Docker\ndate: 2021-05-08 16:45:54\ntags:\n---\n\n[![](https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg)](https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg)\n\n# [](#前言 \"前言\")前言\n\n最近公司内部项目的发布流程接入了 `GitHub Actions`，整个体验过程还是比较美好的；本文主要目的是对于没有还接触过 `GitHub Actions`的新手，能够利用它快速构建自动测试及打包推送 `Docker` 镜像等自动化流程。\n<!--more-->\n\n# [](#创建项目 \"创建项目\")创建项目\n<!-- more -->\n本文主要以 `Go` 语言为例，当然其他语言也是类似的，与语言本身关系不大。\n\n这里我们首先在 `GitHub` 上创建一个项目，编写了几段简单的代码 `main.go`：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"string\">\"0.0.1\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetVersion</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> version</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</div><div class=\"line\">\tfmt.Println(GetVersion())</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n内容非常简单，只是打印了了版本号；同时配套了一个单元测试 `main_test.go`：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetVersion1</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">\ttests := []<span class=\"keyword\">struct</span> {</div><div class=\"line\">\t\tname <span class=\"keyword\">string</span></div><div class=\"line\">\t\twant <span class=\"keyword\">string</span></div><div class=\"line\">\t}{</div><div class=\"line\">\t\t{name: <span class=\"string\">\"test1\"</span>, want: <span class=\"string\">\"0.0.1\"</span>},</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests {</div><div class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := GetVersion(); got != tt.want {</div><div class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"GetVersion() = %v, want %v\"</span>, got, tt.want)</div><div class=\"line\">\t\t\t}</div><div class=\"line\">\t\t})</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n我们可以执行 `go test` 运行该单元测试。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go <span class=\"built_in\">test</span>                          </div><div class=\"line\">PASS</div><div class=\"line\">ok      <a class=\"vglnk\" href=\"http://github.com/crossoverJie/go-docker\" rel=\"nofollow\"><span>github</span><span>.</span><span>com</span><span>/</span><span>crossoverJie</span><span>/</span><span>go</span><span>-</span><span>docker</span></a>       1.729s</div></pre></td></tr></tbody></table>\n\n## [](#自动测试 \"自动测试\")自动测试\n\n当然以上流程完全可以利用 `Actions` 自动化搞定。\n\n首选我们需要在项目根路径创建一个 _\\`.github/workflows/_.yml\\`\\* 的配置文件，新增如下内容：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">name:</span> go-docker</div><div class=\"line\"><span class=\"attr\">on:</span> push</div><div class=\"line\"><span class=\"attr\">jobs:</span></div><div class=\"line\"><span class=\"attr\">  test:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    if:</span> github.ref == <span class=\"string\">'refs/heads/main'</span> || startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - uses:</span> actions/checkout@v2</div><div class=\"line\"><span class=\"attr\">      - name:</span> Run Unit Tests</div><div class=\"line\"><span class=\"attr\">        run:</span> go test</div></pre></td></tr></tbody></table>\n\n简单解释下：\n\n* `name` 不必多说，是为当前工作流创建一个名词。\n* `on` 指在什么事件下触发，这里指代码发生 `push` 时触发，更多事件定义可以参考官方文档：\n\n[Events that trigger workflows](https://docs.github.com/en/actions/reference/events-that-trigger-workflows)\n\n* `jobs` 则是定义任务，这里只有一个名为 `test` 的任务。\n\n该任务是运行在 `ubuntu-latest` 的环境下，只有在 `main` 分支有推送或是有 `tag` 推送时运行。\n\n运行时会使用 `actions/checkout@v2` 这个由他人封装好的 `Action`，当然这里使用的是由官方提供的拉取代码 `Action`。\n\n* 基于这个逻辑，我们可以灵活的分享和使用他人的 `Action` 来简化流程，这点也是 `GitHub Action`扩展性非常强的地方。\n\n最后的 `run` 则是运行自己命令，这里自然就是触发单元测试了。\n\n* 如果是 Java 便可改为 `mvn test`.\n\n之后一旦我们在 `main` 分支上推送代码，或者有其他分支的代码合并过来时都会自动运行单元测试，非常方便。\n\n[![](https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg)](https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg)\n\n[![](https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg)](https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg)\n\n与我们本地运行效果一致。\n\n## [](#自动发布 \"自动发布\")自动发布\n\n接下来考虑自动打包 `Docker` 镜像，同时上传到 `Docker Hub`；为此首先创建 `Dockerfile` ：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.15</span> AS builder</div><div class=\"line\">ARG VERSION=<span class=\"number\">0.0</span>.<span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /go/src/app</span></div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> main.go .</span></div><div class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go build -o main -ldflags=<span class=\"string\">\"-X 'main.version=<span class=\"variable\">${VERSION}</span>'\"</span> main.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">FROM</span> debian:stable-slim</div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=builder /go/src/app/main /go/bin/main</span></div><div class=\"line\"><span class=\"keyword\">ENV</span> PATH=<span class=\"string\">\"/go/bin:${PATH}\"</span></div><div class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"main\"</span>]</span></div></pre></td></tr></tbody></table>\n\n这里利用 `ldflags` 可在编译期间将一些参数传递进打包程序中，比如打包时间、go 版本、git 版本等。\n\n这里只是将 `VERSION` 传入了 `main.version` 变量中，这样在运行时就便能取到了。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t go-docker:last .</div><div class=\"line\">docker run --rm go-docker:0.0.10</div><div class=\"line\">0.0.10</div></pre></td></tr></tbody></table>\n\n接着继续编写 `docker.yml` 新增自动打包 `Docker` 以及推送到 `docker hub` 中。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    needs:</span> test</div><div class=\"line\"><span class=\"attr\">    if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - name:</span> Extract Version</div><div class=\"line\"><span class=\"attr\">        id:</span> version_step</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo \"##[set-output name=version;]VERSION=${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up QEMU</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-qemu-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up Docker Buildx</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-buildx-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Login to DockerHub</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/login-action@v1</div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          username:</span> ${{ secrets.DOCKER_USER_NAME }}</div><div class=\"line\"><span class=\"attr\">          password:</span> ${{ secrets.DOCKER_ACCESS_TOKEN }}</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> PrepareReg Names</div><div class=\"line\"><span class=\"attr\">        id:</span> read-docker-image-identifiers</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo VERSION_TAG=$(echo $<span class=\"template-variable\">{{ steps.version_step.outputs.version_tag }}</span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\">          echo LASTEST_TAG=$(echo $<span class=\"template-variable\">{{ steps.version_step.outputs.latest_tag  }}</span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Build and push Docker images</div><div class=\"line\"><span class=\"attr\">        id:</span> docker_build</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/build-push-action@v2<span class=\"number\">.3</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          push:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          tags:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\">{{env.VERSION_TAG}}</span></div><div class=\"line\">            $<span class=\"template-variable\">{{env.LASTEST_TAG}}</span></div><div class=\"line\"><span class=\"attr\">          build-args:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\">{{steps.version_step.outputs.version}}</span></div></pre></td></tr></tbody></table>\n\n新增了一个 `deploy` 的 job。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">needs:</span> test</div><div class=\"line\"><span class=\"attr\">if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div></pre></td></tr></tbody></table>\n\n运行的条件是上一步的单测流程跑通，同时有新的 `tag` 生成时才会触发后续的 `steps`。\n\n`name: Login to DockerHub`\n\n在这一步中我们需要登录到 `DockerHub`，所以首先需要在 GitHub 项目中配置 hub 的 `user_name` 以及 `access_token`.\n\n[![](https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg)](https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg)\n\n[![](https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg)](https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg)\n\n配置好后便能在 action 中使用该变量了。\n\n[![](https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg)](https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg)\n\n这里使用的是由 docker 官方提供的登录 action\\(`docker/login-action`\\)。\n\n有一点要非常注意，我们需要将镜像名称改为小写，不然会上传失败，比如我的名称中 `J` 字母是大写的，直接上传时就会报错。\n\n[![](https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg)](https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg)\n\n所以在上传之前先要执行该步骤转换为小写。\n\n[![](https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg)](https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg)\n\n最后再用这两个变量上传到 Docker Hub。\n\n[![](https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg)](https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg)\n\n今后只要我们打上 `tag` 时，`Action` 就会自动执行单测、构建、上传的流程。\n\n# [](#总结 \"总结\")总结\n\n`GitHub Actions` 非常灵活，你所需要的大部分功能都能在 `marketplace` 找到现成的直接使用，\n\n比如可以利用 `ssh` 登录自己的服务器，执行一些命令或脚本，这样想象空间就很大了。\n\n使用起来就像是搭积木一样，可以很灵活的完成自己的需求。\n\n参考链接：\n\n[How to Build a CI/CD Pipeline with Go, GitHub Actions and Docker](https://tonyuk.medium.com/how-to-build-a-ci-cd-pipeline-with-go-github-actions-and-docker-3c69e50b6043)","slug":"利用-GitHub-Action-自动发布-Docker","published":1,"updated":"2021-08-23T00:38:38.743Z","_id":"ckpp6ut5e000bdgv9cguze59h","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg\"><img src=\"https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg\"></a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a href=\"#%E5%89%8D%E8%A8%80\" title=\"前言\"></a>前言</h1><p>最近公司内部项目的发布流程接入了 <code>GitHub Actions</code>，整个体验过程还是比较美好的；本文主要目的是对于没有还接触过 <code>GitHub Actions</code>的新手，能够利用它快速构建自动测试及打包推送 <code>Docker</code> 镜像等自动化流程。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a><a href=\"#%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\" title=\"创建项目\"></a>创建项目</h1><!-- more -->\n<p>本文主要以 <code>Go</code> 语言为例，当然其他语言也是类似的，与语言本身关系不大。</p>\n<p>这里我们首先在 <code>GitHub</code> 上创建一个项目，编写了几段简单的代码 <code>main.go</code>：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"string\">\"0.0.1\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetVersion</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> version</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</div><div class=\"line\">    fmt.Println(GetVersion())</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n<p>内容非常简单，只是打印了了版本号；同时配套了一个单元测试 <code>main_test.go</code>：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetVersion1</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">    tests := []<span class=\"keyword\">struct</span> {</div><div class=\"line\">        name <span class=\"keyword\">string</span></div><div class=\"line\">        want <span class=\"keyword\">string</span></div><div class=\"line\">    }{</div><div class=\"line\">        {name: <span class=\"string\">\"test1\"</span>, want: <span class=\"string\">\"0.0.1\"</span>},</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests {</div><div class=\"line\">        t.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">            <span class=\"keyword\">if</span> got := GetVersion(); got != tt.want {</div><div class=\"line\">                t.Errorf(<span class=\"string\">\"GetVersion() = %v, want %v\"</span>, got, tt.want)</div><div class=\"line\">            }</div><div class=\"line\">        })</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n<p>我们可以执行 <code>go test</code> 运行该单元测试。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go <span class=\"built_in\">test</span>                          </div><div class=\"line\">PASS</div><div class=\"line\">ok      <a class=\"vglnk\" href=\"http://github.com/crossoverJie/go-docker\" rel=\"nofollow\"><span>github</span><span>.</span><span>com</span><span>/</span><span>crossoverJie</span><span>/</span><span>go</span><span>-</span><span>docker</span></a>       1.729s</div></pre></td></tr></tbody></table>\n\n<h2 id=\"自动测试\"><a href=\"#自动测试\" class=\"headerlink\" title=\"自动测试\"></a><a href=\"#%E8%87%AA%E5%8A%A8%E6%B5%8B%E8%AF%95\" title=\"自动测试\"></a>自动测试</h2><p>当然以上流程完全可以利用 <code>Actions</code> 自动化搞定。</p>\n<p>首选我们需要在项目根路径创建一个 _`.github/workflows/_.yml`* 的配置文件，新增如下内容：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">name:</span> go-docker</div><div class=\"line\"><span class=\"attr\">on:</span> push</div><div class=\"line\"><span class=\"attr\">jobs:</span></div><div class=\"line\"><span class=\"attr\">  test:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    if:</span> github.ref == <span class=\"string\">'refs/heads/main'</span> || startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - uses:</span> actions/checkout@v2</div><div class=\"line\"><span class=\"attr\">      - name:</span> Run Unit Tests</div><div class=\"line\"><span class=\"attr\">        run:</span> go test</div></pre></td></tr></tbody></table>\n\n<p>简单解释下：</p>\n<ul>\n<li><code>name</code> 不必多说，是为当前工作流创建一个名词。</li>\n<li><code>on</code> 指在什么事件下触发，这里指代码发生 <code>push</code> 时触发，更多事件定义可以参考官方文档：</li>\n</ul>\n<p><a href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows\">Events that trigger workflows</a></p>\n<ul>\n<li><code>jobs</code> 则是定义任务，这里只有一个名为 <code>test</code> 的任务。</li>\n</ul>\n<p>该任务是运行在 <code>ubuntu-latest</code> 的环境下，只有在 <code>main</code> 分支有推送或是有 <code>tag</code> 推送时运行。</p>\n<p>运行时会使用 <code>actions/checkout@v2</code> 这个由他人封装好的 <code>Action</code>，当然这里使用的是由官方提供的拉取代码 <code>Action</code>。</p>\n<ul>\n<li>基于这个逻辑，我们可以灵活的分享和使用他人的 <code>Action</code> 来简化流程，这点也是 <code>GitHub Action</code>扩展性非常强的地方。</li>\n</ul>\n<p>最后的 <code>run</code> 则是运行自己命令，这里自然就是触发单元测试了。</p>\n<ul>\n<li>如果是 Java 便可改为 <code>mvn test</code>.</li>\n</ul>\n<p>之后一旦我们在 <code>main</code> 分支上推送代码，或者有其他分支的代码合并过来时都会自动运行单元测试，非常方便。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg\"><img src=\"https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg\"></a></p>\n<p><a href=\"https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg\"><img src=\"https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg\"></a></p>\n<p>与我们本地运行效果一致。</p>\n<h2 id=\"自动发布\"><a href=\"#自动发布\" class=\"headerlink\" title=\"自动发布\"></a><a href=\"#%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83\" title=\"自动发布\"></a>自动发布</h2><p>接下来考虑自动打包 <code>Docker</code> 镜像，同时上传到 <code>Docker Hub</code>；为此首先创建 <code>Dockerfile</code> ：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.15</span> AS builder</div><div class=\"line\">ARG VERSION=<span class=\"number\">0.0</span>.<span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /go/src/app</span></div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> main.go .</span></div><div class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go build -o main -ldflags=<span class=\"string\">\"-X 'main.version=<span class=\"variable\">${VERSION}</span>'\"</span> main.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">FROM</span> debian:stable-slim</div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=builder /go/src/app/main /go/bin/main</span></div><div class=\"line\"><span class=\"keyword\">ENV</span> PATH=<span class=\"string\">\"/go/bin:${PATH}\"</span></div><div class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"main\"</span>]</span></div></pre></td></tr></tbody></table>\n\n<p>这里利用 <code>ldflags</code> 可在编译期间将一些参数传递进打包程序中，比如打包时间、go 版本、git 版本等。</p>\n<p>这里只是将 <code>VERSION</code> 传入了 <code>main.version</code> 变量中，这样在运行时就便能取到了。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t go-docker:last .</div><div class=\"line\">docker run --rm go-docker:0.0.10</div><div class=\"line\">0.0.10</div></pre></td></tr></tbody></table>\n\n<p>接着继续编写 <code>docker.yml</code> 新增自动打包 <code>Docker</code> 以及推送到 <code>docker hub</code> 中。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    needs:</span> test</div><div class=\"line\"><span class=\"attr\">    if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - name:</span> Extract Version</div><div class=\"line\"><span class=\"attr\">        id:</span> version_step</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo \"##[set-output name=version;]VERSION=${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up QEMU</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-qemu-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up Docker Buildx</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-buildx-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Login to DockerHub</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/login-action@v1</div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          username:</span> $</div><div class=\"line\"><span class=\"attr\">          password:</span> $</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> PrepareReg Names</div><div class=\"line\"><span class=\"attr\">        id:</span> read-docker-image-identifiers</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo VERSION_TAG=$(echo $<span class=\"template-variable\"></span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\">          echo LASTEST_TAG=$(echo $<span class=\"template-variable\"></span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Build and push Docker images</div><div class=\"line\"><span class=\"attr\">        id:</span> docker_build</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/build-push-action@v2<span class=\"number\">.3</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          push:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          tags:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div><div class=\"line\"><span class=\"attr\">          build-args:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div></pre></td></tr></tbody></table>\n\n<p>新增了一个 <code>deploy</code> 的 job。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">needs:</span> test</div><div class=\"line\"><span class=\"attr\">if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div></pre></td></tr></tbody></table>\n\n<p>运行的条件是上一步的单测流程跑通，同时有新的 <code>tag</code> 生成时才会触发后续的 <code>steps</code>。</p>\n<p><code>name: Login to DockerHub</code></p>\n<p>在这一步中我们需要登录到 <code>DockerHub</code>，所以首先需要在 GitHub 项目中配置 hub 的 <code>user_name</code> 以及 <code>access_token</code>.</p>\n<p><a href=\"https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg\"><img src=\"https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg\"></a></p>\n<p><a href=\"https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg\"><img src=\"https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg\"></a></p>\n<p>配置好后便能在 action 中使用该变量了。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg\"><img src=\"https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg\"></a></p>\n<p>这里使用的是由 docker 官方提供的登录 action(<code>docker/login-action</code>)。</p>\n<p>有一点要非常注意，我们需要将镜像名称改为小写，不然会上传失败，比如我的名称中 <code>J</code> 字母是大写的，直接上传时就会报错。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg\"><img src=\"https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg\"></a></p>\n<p>所以在上传之前先要执行该步骤转换为小写。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg\"><img src=\"https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg\"></a></p>\n<p>最后再用这两个变量上传到 Docker Hub。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg\"><img src=\"https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg\"></a></p>\n<p>今后只要我们打上 <code>tag</code> 时，<code>Action</code> 就会自动执行单测、构建、上传的流程。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"></a>总结</h1><p><code>GitHub Actions</code> 非常灵活，你所需要的大部分功能都能在 <code>marketplace</code> 找到现成的直接使用，</p>\n<p>比如可以利用 <code>ssh</code> 登录自己的服务器，执行一些命令或脚本，这样想象空间就很大了。</p>\n<p>使用起来就像是搭积木一样，可以很灵活的完成自己的需求。</p>\n<p>参考链接：</p>\n<p><a href=\"https://tonyuk.medium.com/how-to-build-a-ci-cd-pipeline-with-go-github-actions-and-docker-3c69e50b6043\">How to Build a CI/CD Pipeline with Go, GitHub Actions and Docker</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg\"><img src=\"https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg\"></a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a href=\"#%E5%89%8D%E8%A8%80\" title=\"前言\"></a>前言</h1><p>最近公司内部项目的发布流程接入了 <code>GitHub Actions</code>，整个体验过程还是比较美好的；本文主要目的是对于没有还接触过 <code>GitHub Actions</code>的新手，能够利用它快速构建自动测试及打包推送 <code>Docker</code> 镜像等自动化流程。</p>","more":"<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a><a href=\"#%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\" title=\"创建项目\"></a>创建项目</h1><!-- more -->\n<p>本文主要以 <code>Go</code> 语言为例，当然其他语言也是类似的，与语言本身关系不大。</p>\n<p>这里我们首先在 <code>GitHub</code> 上创建一个项目，编写了几段简单的代码 <code>main.go</code>：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"string\">\"0.0.1\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetVersion</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> version</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</div><div class=\"line\">    fmt.Println(GetVersion())</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n<p>内容非常简单，只是打印了了版本号；同时配套了一个单元测试 <code>main_test.go</code>：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetVersion1</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">    tests := []<span class=\"keyword\">struct</span> {</div><div class=\"line\">        name <span class=\"keyword\">string</span></div><div class=\"line\">        want <span class=\"keyword\">string</span></div><div class=\"line\">    }{</div><div class=\"line\">        {name: <span class=\"string\">\"test1\"</span>, want: <span class=\"string\">\"0.0.1\"</span>},</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests {</div><div class=\"line\">        t.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">            <span class=\"keyword\">if</span> got := GetVersion(); got != tt.want {</div><div class=\"line\">                t.Errorf(<span class=\"string\">\"GetVersion() = %v, want %v\"</span>, got, tt.want)</div><div class=\"line\">            }</div><div class=\"line\">        })</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n<p>我们可以执行 <code>go test</code> 运行该单元测试。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go <span class=\"built_in\">test</span>                          </div><div class=\"line\">PASS</div><div class=\"line\">ok      <a class=\"vglnk\" href=\"http://github.com/crossoverJie/go-docker\" rel=\"nofollow\"><span>github</span><span>.</span><span>com</span><span>/</span><span>crossoverJie</span><span>/</span><span>go</span><span>-</span><span>docker</span></a>       1.729s</div></pre></td></tr></tbody></table>\n\n<h2 id=\"自动测试\"><a href=\"#自动测试\" class=\"headerlink\" title=\"自动测试\"></a><a href=\"#%E8%87%AA%E5%8A%A8%E6%B5%8B%E8%AF%95\" title=\"自动测试\"></a>自动测试</h2><p>当然以上流程完全可以利用 <code>Actions</code> 自动化搞定。</p>\n<p>首选我们需要在项目根路径创建一个 _`.github/workflows/_.yml`* 的配置文件，新增如下内容：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">name:</span> go-docker</div><div class=\"line\"><span class=\"attr\">on:</span> push</div><div class=\"line\"><span class=\"attr\">jobs:</span></div><div class=\"line\"><span class=\"attr\">  test:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    if:</span> github.ref == <span class=\"string\">'refs/heads/main'</span> || startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - uses:</span> actions/checkout@v2</div><div class=\"line\"><span class=\"attr\">      - name:</span> Run Unit Tests</div><div class=\"line\"><span class=\"attr\">        run:</span> go test</div></pre></td></tr></tbody></table>\n\n<p>简单解释下：</p>\n<ul>\n<li><code>name</code> 不必多说，是为当前工作流创建一个名词。</li>\n<li><code>on</code> 指在什么事件下触发，这里指代码发生 <code>push</code> 时触发，更多事件定义可以参考官方文档：</li>\n</ul>\n<p><a href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows\">Events that trigger workflows</a></p>\n<ul>\n<li><code>jobs</code> 则是定义任务，这里只有一个名为 <code>test</code> 的任务。</li>\n</ul>\n<p>该任务是运行在 <code>ubuntu-latest</code> 的环境下，只有在 <code>main</code> 分支有推送或是有 <code>tag</code> 推送时运行。</p>\n<p>运行时会使用 <code>actions/checkout@v2</code> 这个由他人封装好的 <code>Action</code>，当然这里使用的是由官方提供的拉取代码 <code>Action</code>。</p>\n<ul>\n<li>基于这个逻辑，我们可以灵活的分享和使用他人的 <code>Action</code> 来简化流程，这点也是 <code>GitHub Action</code>扩展性非常强的地方。</li>\n</ul>\n<p>最后的 <code>run</code> 则是运行自己命令，这里自然就是触发单元测试了。</p>\n<ul>\n<li>如果是 Java 便可改为 <code>mvn test</code>.</li>\n</ul>\n<p>之后一旦我们在 <code>main</code> 分支上推送代码，或者有其他分支的代码合并过来时都会自动运行单元测试，非常方便。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg\"><img src=\"https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg\"></a></p>\n<p><a href=\"https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg\"><img src=\"https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg\"></a></p>\n<p>与我们本地运行效果一致。</p>\n<h2 id=\"自动发布\"><a href=\"#自动发布\" class=\"headerlink\" title=\"自动发布\"></a><a href=\"#%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83\" title=\"自动发布\"></a>自动发布</h2><p>接下来考虑自动打包 <code>Docker</code> 镜像，同时上传到 <code>Docker Hub</code>；为此首先创建 <code>Dockerfile</code> ：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.15</span> AS builder</div><div class=\"line\">ARG VERSION=<span class=\"number\">0.0</span>.<span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /go/src/app</span></div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> main.go .</span></div><div class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go build -o main -ldflags=<span class=\"string\">\"-X 'main.version=<span class=\"variable\">${VERSION}</span>'\"</span> main.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">FROM</span> debian:stable-slim</div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=builder /go/src/app/main /go/bin/main</span></div><div class=\"line\"><span class=\"keyword\">ENV</span> PATH=<span class=\"string\">\"/go/bin:${PATH}\"</span></div><div class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"main\"</span>]</span></div></pre></td></tr></tbody></table>\n\n<p>这里利用 <code>ldflags</code> 可在编译期间将一些参数传递进打包程序中，比如打包时间、go 版本、git 版本等。</p>\n<p>这里只是将 <code>VERSION</code> 传入了 <code>main.version</code> 变量中，这样在运行时就便能取到了。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t go-docker:last .</div><div class=\"line\">docker run --rm go-docker:0.0.10</div><div class=\"line\">0.0.10</div></pre></td></tr></tbody></table>\n\n<p>接着继续编写 <code>docker.yml</code> 新增自动打包 <code>Docker</code> 以及推送到 <code>docker hub</code> 中。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    needs:</span> test</div><div class=\"line\"><span class=\"attr\">    if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - name:</span> Extract Version</div><div class=\"line\"><span class=\"attr\">        id:</span> version_step</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo \"##[set-output name=version;]VERSION=${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up QEMU</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-qemu-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up Docker Buildx</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-buildx-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Login to DockerHub</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/login-action@v1</div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          username:</span> $</div><div class=\"line\"><span class=\"attr\">          password:</span> $</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> PrepareReg Names</div><div class=\"line\"><span class=\"attr\">        id:</span> read-docker-image-identifiers</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo VERSION_TAG=$(echo $<span class=\"template-variable\"></span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\">          echo LASTEST_TAG=$(echo $<span class=\"template-variable\"></span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Build and push Docker images</div><div class=\"line\"><span class=\"attr\">        id:</span> docker_build</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/build-push-action@v2<span class=\"number\">.3</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          push:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          tags:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div><div class=\"line\"><span class=\"attr\">          build-args:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div></pre></td></tr></tbody></table>\n\n<p>新增了一个 <code>deploy</code> 的 job。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">needs:</span> test</div><div class=\"line\"><span class=\"attr\">if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div></pre></td></tr></tbody></table>\n\n<p>运行的条件是上一步的单测流程跑通，同时有新的 <code>tag</code> 生成时才会触发后续的 <code>steps</code>。</p>\n<p><code>name: Login to DockerHub</code></p>\n<p>在这一步中我们需要登录到 <code>DockerHub</code>，所以首先需要在 GitHub 项目中配置 hub 的 <code>user_name</code> 以及 <code>access_token</code>.</p>\n<p><a href=\"https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg\"><img src=\"https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg\"></a></p>\n<p><a href=\"https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg\"><img src=\"https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg\"></a></p>\n<p>配置好后便能在 action 中使用该变量了。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg\"><img src=\"https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg\"></a></p>\n<p>这里使用的是由 docker 官方提供的登录 action(<code>docker/login-action</code>)。</p>\n<p>有一点要非常注意，我们需要将镜像名称改为小写，不然会上传失败，比如我的名称中 <code>J</code> 字母是大写的，直接上传时就会报错。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg\"><img src=\"https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg\"></a></p>\n<p>所以在上传之前先要执行该步骤转换为小写。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg\"><img src=\"https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg\"></a></p>\n<p>最后再用这两个变量上传到 Docker Hub。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg\"><img src=\"https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg\"></a></p>\n<p>今后只要我们打上 <code>tag</code> 时，<code>Action</code> 就会自动执行单测、构建、上传的流程。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"></a>总结</h1><p><code>GitHub Actions</code> 非常灵活，你所需要的大部分功能都能在 <code>marketplace</code> 找到现成的直接使用，</p>\n<p>比如可以利用 <code>ssh</code> 登录自己的服务器，执行一些命令或脚本，这样想象空间就很大了。</p>\n<p>使用起来就像是搭积木一样，可以很灵活的完成自己的需求。</p>\n<p>参考链接：</p>\n<p><a href=\"https://tonyuk.medium.com/how-to-build-a-ci-cd-pipeline-with-go-github-actions-and-docker-3c69e50b6043\">How to Build a CI/CD Pipeline with Go, GitHub Actions and Docker</a></p>"},{"title":"时间轮算法","date":"2021-04-25T10:42:31.000Z","_content":"\n参考nettey源码HashedWheelTimer\n<!-- more -->","source":"_posts/时间轮算法.md","raw":"---\ntitle: 时间轮算法\ndate: 2021-04-25 18:42:31\ntags:\n---\n\n参考nettey源码HashedWheelTimer\n<!-- more -->","slug":"时间轮算法","published":1,"updated":"2021-07-22T07:01:21.451Z","_id":"ckpp6ut5f000ddgv91s8q760i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考nettey源码HashedWheelTimer</p>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p>参考nettey源码HashedWheelTimer</p>","more":""},{"title":"用pm2后台运行hexo","date":"2021-05-07T09:40:19.000Z","_content":"\n**安装pm2**\n\n```shell\nnpm  install -g pm2\n```\n<!-- more -->\n在博客根目录下面创建一个**hexo_run.js**\n\n```javascript\n//run\nconst { exec } = require('child_process')\nexec('hexo server',(error, stdout, stderr) => {\n        if(error){\n                console.log('exec error: ${error}')\n                return\n        }\n        console.log('stdout: ${stdout}');\n        console.log('stderr: ${stderr}');\n})\n```\n\n在根目录下\n\n```shell\npm2 start hexo_run.js\n```\n\n结果如下图\n![image-20210508020412096](../images/image-20210508020412096-0411479.png)\n","source":"_posts/用pm2后台运行hexo.md","raw":"---\ntitle: 用pm2后台运行hexo\ndate: 2021-05-07 17:40:19\ntags:\n---\n\n**安装pm2**\n\n```shell\nnpm  install -g pm2\n```\n<!-- more -->\n在博客根目录下面创建一个**hexo_run.js**\n\n```javascript\n//run\nconst { exec } = require('child_process')\nexec('hexo server',(error, stdout, stderr) => {\n        if(error){\n                console.log('exec error: ${error}')\n                return\n        }\n        console.log('stdout: ${stdout}');\n        console.log('stderr: ${stderr}');\n})\n```\n\n在根目录下\n\n```shell\npm2 start hexo_run.js\n```\n\n结果如下图\n![image-20210508020412096](../images/image-20210508020412096-0411479.png)\n","slug":"用pm2后台运行hexo","published":1,"updated":"2021-07-22T07:01:24.327Z","_id":"ckpp6ut5x000edgv99cyv2fkl","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>安装pm2</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm  install -g pm2</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>在博客根目录下面创建一个<strong>hexo_run.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//run</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; exec &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\">exec(<span class=\"string\">&#x27;hexo server&#x27;</span>,<span class=\"function\">(<span class=\"params\">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;exec error: $&#123;error&#125;&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在根目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start hexo_run.js</span><br></pre></td></tr></table></figure>\n\n<p>结果如下图<br><img src=\"../images/image-20210508020412096-0411479.png\" alt=\"image-20210508020412096\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>安装pm2</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm  install -g pm2</span><br></pre></td></tr></table></figure>","more":"<p>在博客根目录下面创建一个<strong>hexo_run.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//run</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; exec &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\">exec(<span class=\"string\">&#x27;hexo server&#x27;</span>,<span class=\"function\">(<span class=\"params\">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;exec error: $&#123;error&#125;&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在根目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start hexo_run.js</span><br></pre></td></tr></table></figure>\n\n<p>结果如下图<br><img src=\"../images/image-20210508020412096-0411479.png\" alt=\"image-20210508020412096\"></p>"},{"title":"用sdk建设环境信息","date":"2021-05-10T03:15:32.000Z","_content":"\n安装命令：\n\ncurl -s https://get.sdkman.io | bash\n\nsdk生效\n\n​    source \"/Users/Terminus/.sdkman/bin/sdkman-init.sh\"\n\nsdk 安装gradle\n\nsdk install gradle\n<!-- more -->\n","source":"_posts/用sdk建设环境信息.md","raw":"---\ntitle: 用sdk建设环境信息\ndate: 2021-05-10 11:15:32\ntags:\n---\n\n安装命令：\n\ncurl -s https://get.sdkman.io | bash\n\nsdk生效\n\n​    source \"/Users/Terminus/.sdkman/bin/sdkman-init.sh\"\n\nsdk 安装gradle\n\nsdk install gradle\n<!-- more -->\n","slug":"用sdk建设环境信息","published":1,"updated":"2021-07-22T07:01:27.913Z","_id":"ckpp6ut5y000fdgv9hbkrd75g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>安装命令：</p>\n<p>curl -s <a href=\"https://get.sdkman.io/\">https://get.sdkman.io</a> | bash</p>\n<p>sdk生效</p>\n<p>​    source “/Users/Terminus/.sdkman/bin/sdkman-init.sh”</p>\n<p>sdk 安装gradle</p>\n<p>sdk install gradle</p>\n<span id=\"more\"></span>\n","site":{"data":{}},"excerpt":"<p>安装命令：</p>\n<p>curl -s <a href=\"https://get.sdkman.io/\">https://get.sdkman.io</a> | bash</p>\n<p>sdk生效</p>\n<p>​    source “/Users/Terminus/.sdkman/bin/sdkman-init.sh”</p>\n<p>sdk 安装gradle</p>\n<p>sdk install gradle</p>","more":""},{"title":"设计模式","date":"2020-12-28T10:02:30.000Z","_content":"```plantuml\n@startmindmap\n* 设计模式\n** 面向对象\n** 工厂模式\n** 适配器模式\n@endmindmap\n```\n<!-- more -->","source":"_posts/设计模式.md","raw":"---\ntitle: 设计模式\ndate: 2020-12-28 18:02:30\ntags:\n---\n```plantuml\n@startmindmap\n* 设计模式\n** 面向对象\n** 工厂模式\n** 适配器模式\n@endmindmap\n```\n<!-- more -->","slug":"设计模式","published":1,"updated":"2021-07-22T07:01:33.932Z","_id":"ckpp6ut5z000gdgv90d1y7bv2","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startmindmap</span><br><span class=\"line\">* 设计模式</span><br><span class=\"line\">** 面向对象</span><br><span class=\"line\">** 工厂模式</span><br><span class=\"line\">** 适配器模式</span><br><span class=\"line\">@endmindmap</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startmindmap</span><br><span class=\"line\">* 设计模式</span><br><span class=\"line\">** 面向对象</span><br><span class=\"line\">** 工厂模式</span><br><span class=\"line\">** 适配器模式</span><br><span class=\"line\">@endmindmap</span><br></pre></td></tr></table></figure>","more":""},{"title":"GraphQL及元数据驱动架构在后端BFF中的实践","date":"2021-05-08T03:14:25.000Z","_content":"\n \n\n> GraphQL是Facebook提出的一种数据查询语言，核心特性是数据聚合和按需索取，目前被广泛应用于前后端之间，解决客户端灵活使用数据问题。本文介绍的是GraphQL的另一种实践，我们将GraphQL下沉至后端BFF（Backend For Frontend）层之下，结合元数据技术，实现数据和加工逻辑的按需查询和执行。这样不仅解决了后端BFF层灵活使用数据的问题，这些字段加工逻辑还可以直接复用，大幅度提升了研发的效率。\n>\n> 本文介绍的实践方案已经在美团部分业务场景中落地，并取得不错效果，希望这些经验能够对大家有帮助。\n> BFF一词来自Sam Newman的一篇博文《[Pattern:Backends For Frontends](https://samnewman.io/patterns/architectural/bff/)》，指的是服务于前端的后端。BFF是解决什么问题的呢？据原文描述，随着移动互联网的兴起，原适应于桌面Web的服务端功能希望同时提供给移动App使用，而在这个过程中存在这样的问题：\n> 移动App和桌面Web在UI部分存在差异。\n>\n> > <!--more-->\n>\n\n* 移动App涉及不同的端，不仅有iOS、还有Android，这些不同端的UI之间存在差异。\n\n* 原有后端功能和桌面Web UI之间已经存在了较大的耦合。\n\n因为端的差异性存在，服务端的功能要针对端的差异进行适配和裁剪，而服务端的业务功能本身是相对单一的，这就产生了一个矛盾——服务端的单一业务功能和端的差异性诉求之间的矛盾。那么这个问题怎么解决呢？这也是文章的副标题所描述的\"Single-purpose Edge Services for UIs and external parties\"，引入BFF，由BFF来针对多端差异做适配，这也是目前业界广泛使用的一种模式。\n\n![](https://img-blog.csdnimg.cn/img_convert/f95ef4461eb139612078136232f13a5a.png)\n\n图1 BFF示意图\n\n在实际业务的实践中，导致这种端差异性的原因有很多，有技术的原因，也有业务的原因。比如，用户的客户端是Android还是iOS，是大屏还是小屏，是什么版本。再比如，业务属于哪个行业，产品形态是什么，功能投放在什么场景，面向的用户群体是谁等等。这些因素都会带来面向端的功能逻辑的差异性。\n\n在这个问题上，笔者所在团队负责的商品展示业务有一定的发言权，同样的商品业务，在C端的展示功能逻辑，深刻受到商品类型、所在行业、交易形态、投放场所、面向群体等因素的影响。同时，面向消费者端的功能频繁迭代的属性，更是加剧并深化了这种矛盾，使其演化成了一种服务端单一稳定与端的差异灵活之间的矛盾，这也是商品展示（商品展示BFF）业务系统存在的必然性原因。本文主要在美团到店商品展示场景的背景下，介绍面临的一些问题及解决思路。\n\n## 2 BFF背景下的核心矛盾\n\nBFF这层的引入是解决服务端单一稳定与端的差异灵活诉求之间的矛盾，这个矛盾并不是不存在，而是转移了。由原来后端和前端之间的矛盾转移成了BFF和前端之间的矛盾。笔者所在团队的主要工作，就是和这种矛盾作斗争。下面以具体的业务场景为例，结合当前的业务特点，说明在BFF的生产模式下，我们所面临的具体问题。下图是两个不同行业的团购货架展示模块，这两个模块我们认为是两个商品的展示场景，它们是两套独立定义的产品逻辑，并且会各自迭代。\n\n![](https://img-blog.csdnimg.cn/img_convert/1aa3a779c43374c8038fada6b5c78290.png)\n\n图2 展示场景\n\n在业务发展初期，这样的场景不多。BFF层系统“烟囱式”建设，功能快速开发上线满足业务的诉求，在这样的情况下，这种矛盾表现的不明显。而随着业务发展，行业的开拓，形成了许许多多这样的商品展示功能，矛盾逐渐加剧，主要表现在以下两个方面：\n\n* **业务支撑效率**：随着商品展示场景变得越来越多，API呈爆炸趋势，业务支撑效率和人力成线性关系，系统能力难以支撑业务场景的规模化拓展。\n\n* **系统复杂度高**：核心功能持续迭代，内部逻辑充斥着`if…else…`，代码过程式编写，系统复杂度较高，难以修改和维护。\n\n那么这些问题是怎么产生的呢？这要结合“烟囱式”系统建设的背景和商品展示场景所面临的业务，以及系统特点来进行理解。\n\n**特点一：外部依赖多、场景间取数存在差异、用户体验要求高**\n\n图例展示了两个不同行业的团购货架模块，这样一个看似不大的模块，后端在BFF层要调用20个以上的下游服务才能把数据拿全，这是其一。在上面两个不同的场景中，需要的数据源集合存在差异，而且这种差异普遍存在，这是其二，比如足疗团购货架需要的某个数据源，在丽人团购货架上不需要，丽人团购货架需要的某个数据源，足疗团购货架不需要。尽管依赖下游服务多，同时还要保证C端的用户体验，这是其三。\n\n这几个特点给技术带来了不小的难题：1）聚合大小难控制，聚合功能是分场景建设？还是统一建设？如果分场景建设，必然存在不同场景重复编写类似聚合逻辑的问题。如果统一建设，那么一个大而全的数据聚合中必然会存在无效的调用。2）聚合逻辑的复杂性控制问题，在这么多的数据源的情况下，不仅要考虑业务逻辑怎么写，还要考虑异步调用的编排，在代码复杂度未能良好控制的情况下，后续聚合的变更修改将会是一个难题。\n\n**特点二：展示逻辑多、场景之间存在差异，共性个性逻辑耦合**\n\n我们可以明显地识别某一类场景的逻辑是存在共性的，比如团单相关的展示场景。直观可以看出基本上都是展示团单维度的信息，但这只是表象。实际上在模块的生成过程中存在诸多的差异，比如以下两种差异：\n\n* **字段拼接逻辑差异**：比如以上图中两个团购货架的团购标题为例，同样是标题，在丽人团购货架中的展示规则是：**\\[类型\\] + 团购标题**，而在足疗团购货架的展示规则是：**团购标题**。\n\n* **排序过滤逻辑差异**：比如同样是团单列表，A场景按照销量倒排序，B场景按照价格排序，不同场景的排序逻辑不同。\n\n诸如此类的**展示逻辑**的差异性还有很多。类似的场景实际上在内部存在很多差异的逻辑，后端如何应对这种差异性是一个难题，下面是最常见的一种写法，通过读取具体的条件字段来做判断实现逻辑路由，如下所示：\n\n```go\nif(category == \"丽人\") {  title = \"[\" + category + \"]\" + productTitle;} else if (category == \"足疗\") {  title = productTitle；}\n```\n\n这种方案在功能实现方面没有问题，也能够复用共同的逻辑。但是实际上在场景非常多的情况下，将会有非常多的差异性判断逻辑叠加在一起，功能一直会被持续迭代的情况下，可以想象，系统将会变得越来越复杂，越来越难以修改和维护。\n\n**总结**：在BFF这层，不同商品展示场景存在差异。在业务发展初期，系统通过独立建设的方式支持业务快速试错，在这种情况下，业务差异性带来的问题不明显。而随着业务的不断发展，需要搭建及运营的场景越来越多，呈规模化趋势。此时，业务对技术效率提出了更高的要求。**在这种场景多、场景间存在差异的背景下，如何满足场景拓展效率同时能够控制系统的复杂性，就是我们业务场景中面临的核心问题**。\n\n## 3 BFF应用模式分析\n\n目前，业界针对此类的解决方案主要有两种模式，一种是后端BFF模式；另一种是前端BFF模式。\n\n### 3.1 后端BFF模式\n\n后端BFF模式指的是BFF由后端同学负责，这种模式目前最广泛的实践是基于GraphQL搭建的后端BFF方案，具体是：后端将展示字段封装成展示服务，通过GraphQL编排之后暴露给前端使用。如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/9186b94e756d77bc0b098a1807e44e5a.png)\n\n图3 后端BFF模式\n\n这种模式最大的特性和优势是，当展示字段已经存在的情况下，后端不需要关心前端差异性需求，按需查询的能力由GraphQL支持。这个特性可以很好地应对不同场景存在展示字段差异性这个问题，前端直接基于GraphQL按需查询数据即可，后端不需要变更。同时，借助GraphQL的编排和聚合查询能力，后端可以将逻辑分解在不同的展示服务中，因此在一定程度上能够化解BFF这层的复杂性。\n\n但是基于这种模式，仍然存在几个问题：展示服务颗粒度问题、数据图划分问题以及字段扩散问题，下图是基于当前模式的具体案例：\n\n![](https://img-blog.csdnimg.cn/img_convert/8dd8ffdccae5273f1c723e7bba3e4e5a.png)\n\n图4 后端BFF模式（案例）\n\n**1）展示服务颗粒度设计问题**\n\n这种方案要求展示逻辑和取数逻辑封装在一个模块中，形成一个展示服务（Presentation Service），如上图所示。而实际上展示逻辑和取数逻辑是多对多的关系，还是以前文提到的例子说明：\n\n> **背景**：有两个展示服务，分别封装了商品标题和商品标签的查询能力。\n>\n> **情景**：此时PM提了一个需求，希望商品在某个场景的标题以“\\[类型\\]+商品标题”的形式展示，此时商品标题的拼接依赖类型数据，而此时类型数据商品标签展示服务中已经调用了。\n>\n> **问题**：商品标题展示服务自己调用类型数据还是将两个展示服务合并到一起？\n\n以上描述的问题的是展示服务颗粒度把控的问题，我们可以怀疑上述的示例是不是因为展示服务的颗粒度过小？那么反过来看一看，如果将两个服务合并到一起，那么势必又会存在冗余。这是展示服务设计的难点，**核心原因在于，展示逻辑和取数逻辑本身是多对多的关系，结果却被设计放在了一起**。\n\n**2）数据图划分问题**\n\n通过GraphQL将多个展示服务的数据聚合到一张图（GraphQL Schema）中，形成一个数据视图，需要数据的时候只要数据在图中，就可以基于Query按需查询。那么问题来了，这个图应该怎么组织？是一张图还是多张图？图过大的话，势必带来复杂的数据关系维护问题，图过小则将会降低方案本身的价值。\n\n**3）展示服务内部复杂性 + 模型扩散问题**\n\n上文提到过一个商品标题的展示存在不同拼接逻辑的情况，在商品展示场景，这种逻辑特别普遍。比如同样是价格，A行业展示优惠后价格，B行业展示优惠前价格；同样是标签位置，C行业展示服务时长，而D行业展示商品特性等。\n\n那么问题来了，展示模型如何设计？以标题字段为例，是在展示模型上放个`title`字段就可以，还是分别放个`title`和`titleWithCategory`？如果是前者那么服务内部必然会存在`if…else…`这种逻辑，用于区分`title`的拼接方式，这同样会导致展示服务内部的复杂性。如果是多个字段，那么可以想象，展示服务的模型字段也将会不断扩散。\n\n**总结**：后端BFF模式能够在一定程度上化解后端逻辑的复杂性，同时提供一个展示字段的复用机制。但是仍然存在未决问题，如展示服务的颗粒度设计问题，数据图的划分问题，以及展示服务内部的复杂性和字段扩散问题。目前这种模式实践的代表有Facebook、爱彼迎、eBay、爱奇艺、携程、去哪儿等等。\n\n### 3.2 前端BFF模式\n\n前端BFF模式在Sam Newman的文章中的\"And Autonomy\"部分有特别的介绍，指的是BFF本身由前端团队自己负责，如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/94d1b0ff6f68b252711f342b3b0fd0ae.png)\n\n图5 前端BFF模式\n\n这种模式的理念是，本来能一个团队交付的需求，没必要拆成两个团队，两个团队本身带来较大的沟通协作成本。本质上，也是一种将“敌我矛盾”转化为“人民内部矛盾”的思路。前端完全接手BFF的开发工作，实现数据查询的自给自足，大大减少了前后端的协作成本。但是这种模式没有提到我们关心的一些核心问题，如：复杂性如何应对、差异性如何应对、展示模型如何设计等等问题。除此之外，这种模式也存在一些前提条件及弊端，比如较为完备的前端基础设施；前端不仅仅需要关心渲染、还需要了解业务逻辑等。\n\n**总结**：前端BFF模式通过前端自主查询和使用数据，从而达到降低跨团队协作的成本，提升BFF研发效率的效果。目前这种模式的实践代表是阿里巴巴。\n\n## 4 基于GraphQL及元数据的信息聚合架构设计\n\n### 4.1 整体思路\n\n通过对后端BFF和前端BFF两种模式的分析，我们最终选择后端BFF模式，前端BFF这个方案对目前的研发模式影响较大，不仅需要大量的前端资源，而且需要建设完善的前端基础设施，方案实施成本比较高昂。\n\n前文提到的后端GraphQL BFF模式代入我们的具体场景虽然存在一些问题，但是总体有非常大的参考价值，比如展示字段的复用思路、数据的按需查询思路等等。在商品展示场景中，**有80\\%的工作集中在数据的聚合和集成部分**，并且这部分具有很强的复用价值，因此信息的查询和聚合是我们面临的主要矛盾。因此，我们的思路是：**基于GraphQL+后端BFF方案改进，实现取数逻辑和展示逻辑的可沉淀、可组合、可复用**，整体架构如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/21ffacbebfc1c0c59f6a6f1f421e55ac.png)\n\n图6 基于GraphQL BFF的改进思路\n\n从上图可看出，与传统GraphQL BFF方案最大的差别在于我们将GraphQL下放至数据聚合部分，由于数据来源于商品领域，领域是相对稳定的，因此数据图规模可控且相对稳定。除此之外，整体架构的核心设计还包括以下三个方面：1）取数展示分离；2）查询模型归一；3）元数据驱动架构。\n\n我们通过取数展示分离解决展示服务颗粒度问题，同时使得展示逻辑和取数逻辑可沉淀、可复用；通过查询模型归一化设计解决展示字段扩散的问题；通过元数据驱动架构实现能力的可视化，业务组件编排执行的自动化，这能够让业务开发同学聚焦于业务逻辑的本身。下面将针对这三个部分逐一展开介绍。\n\n### 4.2 核心设计\n\n4.2.1 取数展示分离\n\n上文提到，在商品展示场景中，展示逻辑和取数逻辑是多对多的关系，而传统的基于GraphQL的后端BFF实践方案把它们封装在一起，这是导致展示服务颗粒度难以设计的根本原因。思考一下取数逻辑和展示逻辑的关注点是什么？取数逻辑关注怎么查询和聚合数据，而展示逻辑关注怎么加工生成需要的展示字段，它们的关注点不一样，放在一起也会增加展示服务的复杂性。因此，我们的思路是将取数逻辑和展示逻辑分离开来，单独封装成逻辑单元，分别叫取数单元和展示单元。在取数展示分离之后，GraphQL也随之下沉，用于实现数据的按需聚合，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/eeb60decd04420062983c3711804700e.png)\n\n图7 取数展示分离+元数据描述\n\n那么取数和展示逻辑的封装颗粒度是怎么样的呢？不能太小也不能太大，在颗粒度的设计上，我们有两个核心考量：1）**复用**，展示逻辑和取数逻辑在商品展示场景中，都是可以被复用的资产，我们希望它们能沉淀下来，被单独按需使用；2）**简单**，保持简单，这样容易修改和维护。基于这两点考虑，颗粒度的定义如下：\n\n* **取数单元**：尽量只封装1个外部数据源，同时负责对外部数据源返回的模型进行简化，这部分生成的模型我们称之为取数模型。\n\n* **展示单元**：尽量只封装1个展示字段的加工逻辑。\n\n分开的好处是简单且可被组合使用，那么具体如何实现组合使用呢？我们的思路是通过元数据来描述它们之间的关系，基于元数据由统一的执行框架来关联运行，具体设计下文会展开介绍。通过取数和展示的分离，元数据的关联和运行时的组合调用，可以保持逻辑单元的简单，同时又满足复用诉求，这也很好地解决了传统方案中存在的**展示服务的颗粒度问题**。\n\n4.2.2 查询模型归一\n\n展示单元的加工结果通过什么样的接口透出呢？接下来，我们介绍一下查询接口设计的问题。\n\n**1）查询接口设计的难点**\n\n常见查询接口的设计模式有以下两种：\n\n* **强类型模式**：强类型模式指的是查询接口返回的是POJO对象，每一个查询结果对应POJO中的一个明确的具有特定业务含义的字段。\n\n* **弱类型模式**：弱类型模式指的是查询结果以K-V或JSON模式返回，没有明确的静态字段。\n\n以上两种模式在业界都有广泛应用，且它们都有明确的优缺点。强类型模式对开发者友好，但是业务是不断迭代的，与此同时，系统沉淀的展示单元会不断丰富，在这样的情况下，接口返回的DTO中的字段将会愈来愈多，每次新功能的支持，都要伴随着接口查询模型的修改，JAR版本的升级。而JAR的升级涉及数据提供方和数据消费两方，存在明显效率问题。另外，可以想象，查询模型的不断迭代，最终将会包括成百上千个字段，难以维护。\n\n而弱类型模式恰好可以弥补这一缺点，但是弱类型模式对于开发者来说非常不友好，接口查询模型中有哪些查询结果对于开发者来说在开发的过程中完全没有感觉，但是程序员的天性就是喜欢通过代码去理解逻辑，而非配置和文档。其实，这两种接口设计模式都存在着一个共性问题——缺少抽象，下面两节，我们将介绍在接口返回的查询模型设计方面的抽象思路及框架能力支持。\n\n**2）查询模型归一化设计**\n\n回到商品展示场景中，一个展示字段有多种不同的实现，如商品标题的两种不同实现方式：1）商品标题；2）\\[类目\\]+商品标题。商品标题和这两种展示逻辑的关系本质上是一种抽象-具体的关系。识别这个关键点，思路就明了了，我们的思路是对查询模型做抽象。查询模型上都是抽象的展示字段，一个展示字段对应多个展示单元，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/d6223539b474bfdd2a7673c39752bcee.png)\n\n图8 查询模型归一化 + 元数据描述\n\n在实现层面，同样基于元数据描述展示字段和展示单元之间的关系，基于以上的设计思路，可以在一定程度上减缓模型的扩散，但是还不能避免扩展。比如除了价格、库存、销量等每个商品都有的标准属性之外，不同的商品类型一般还会有这个商品特有的属性。比如密室主题拼场商品才有“几人拼”这样的描述属性，这种字段本身抽象的意义不大，且放在商品查询模型中作为一个单独的字段会导致模型扩张，针对这类问题，我们的解决思路是引入扩展属性，扩展属性专门承载这类非标准的字段。通过标准字段 + 扩展属性的方式建立查询模型，能够较好地解决**字段扩散**的问题。\n\n4.2.3 元数据驱动架构\n\n到目前为止，我们定义了如何分解**业务逻辑单元**以及如何设计**查询模型**，并提到用元数据描述它们之间的关系。基于以上定义实现的业务逻辑及模型，都具备很强的复用价值，可以作为业务资产沉淀下来。那么，为什么用元数据描述业务功能及模型之间的关系呢？\n\n我们引入元数据描述主要有两个目的：1）代码逻辑的自动编排，通过元数据描述业务逻辑之间的关联关系，运行时可以自动基于元数据实现逻辑之间的关联执行，从而可以消除大量的人工逻辑编排代码；2）业务功能的可视化，元数据本身描述了业务逻辑所提供的功能，如下面两个示例：\n\n> 团单基础售价字符串展示，例：30元。 \n>\n> 团单市场价展示字段，例：100元。\n\n这些元数据上报到系统中，可以用于展示当前系统所提供的功能。通过元数据描述组件及组件之间关联关系，通过框架解析元数据自动进行业务组件的调用执行，形成了如下的元数据架构：\n\n![](https://img-blog.csdnimg.cn/img_convert/2acb91a2cdbee4b5eccf5309f5a295e1.png)\n\n图9 元数据驱动架构\n\n整体架构由三个核心部分组成：\n\n* **业务能力**：标准的业务逻辑单元，包括取数单元、展示单元和查询模型，这些都是关键的可复用资产。\n\n* **元数据**：描述业务功能（如：展示单元、取数单元）以及业务功能之间的关联关系，比如展示单元依赖的数据，展示单元映射的展示字段等。\n\n* **执行引擎**：负责消费元数据，并基于元数据对业务逻辑进行调度和执行。\n\n通过以上三个部分有机的组合在一起，形成了一个元数据驱动风格的架构。\n\n## 5 针对GraphQL的优化实践\n\n### 5.1 使用简化\n\n**1）GraphQL直接使用问题**\n\n引入GraphQL，会引入一些额外的复杂性，比如会涉及到GraphQL带来的一些概念如：Schema、RuntimeWiring，下面是基于GraphQL原生Java框架的开发过程：\n\n![](https://img-blog.csdnimg.cn/img_convert/1897c77958b24b0253e5968bb06dd147.png)\n\n图10 原生GraphQL使用流程\n\n这些概念对于未接触过GraphQL的同学来说，增加了学习和理解的成本，而这些概念和业务领域通常没有什么关系。而我们仅仅希望使用GraphQL的按需查询特性，却被GraphQL本身拖累了，业务开发同学的关注点应该聚焦在业务逻辑本身才对，这个问题如何解决呢？\n\n著名计算机科学家David Wheeler说了一句名言，\"All problems in computer science can be solved by another level of indirection\"。没有加一层解决不了的问题，本质上是需要有人来对这事负责，因此我们在原生GraphQL之上增加了一层执行引擎层来解决这些问题，目标是屏蔽GraphQL的复杂性，让开发人员只需要关注业务逻辑。\n\n**2）取数接口标准化**\n\n首先要简化数据的接入，原生的`DataFetcher`和`DataLoader`都是处在一个比较高的抽象层次，缺少业务语义，而在查询场景，我们能够归纳出，所有的查询都属于以下三种模式：\n\n* **1查1**：根据一个条件查询一个结果。\n\n* **1查N**：根据一个条件查询多个结果。\n\n* **N查N**：一查一或一查多的批量版本。\n\n由此，我们对查询接口进行了标准化，业务开发同学基于场景判断是那种，按需选择使用即可，取数接口标准化设计如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/71923ee77268f32e6ce9789d1b8dfc9f.png)\n\n图11 查询接口标准化\n\n业务开发同学按需选择所需要使用的取数器，通过泛型指定结果类型，1查1和1查N比较简单，N查N我们对其定义为批量查询接口，用于满足\"N+1\"的场景，其中`batchSize`字段用于指定分片大小，`batchKey`用于指定查询Key，业务开发只需要指定参数，其他的框架会自动处理。除此之外，我们还约束了返回结果必须是`CompleteFuture`，用于满足聚合查询的全链路异步化。\n\n**3）聚合编排自动化**\n\n取数接口标准化使得数据源的语义更清晰，开发过程按需选择即可，简化了业务的开发。但是此时业务开发同学写好`Fetcher`之后，还需要去另一个地方去写`Schema`，而且写完`Schema`还要再写`Schema`和`Fetcher`的映射关系，业务开发更享受写代码的过程，不太愿意写完代码还要去另外一个地方取配置，并且同时维护代码和对应配置也提高了出错的可能性，能否将这些冗杂的步骤移除掉？\n\n`Schema`和`RuntimeWiring`本质上是想描述某些信息，如果这些信息换一种方式描述是不是也可以。我们的优化思路是，在业务开发过程中标记注解，通过注解标注的元数据描述这些信息，其他的事情交给框架来做。解决思路示意图如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/a1adc237e833aad26cf198c0c5dd6bc2.png)\n\n图12 注解元数据描述Schema和RuntimeWiring\n\n### 5.2 性能优化\n\n5.2.1 GraphQL性能问题\n\n虽然GraphQL已经开源了，但是Facebook只开源了相关标准，并没有给出解决方案。GraphQL-Java框架是由社区贡献的，基于开源的GraphQL-Java作为按需查询引擎的方案，我们发现了GraphQL应用方面的一些问题，这些问题有部分是由于使用姿势不当所导致的，也有部分是GraphQL本身实现的问题，比如我们遇到的几个典型的问题：\n\n* 耗CPU的查询解析，包括`Schema`的解析和`Query`的解析。\n\n* 当查询模型比较复杂特别是存在大列表时候的延时问题。\n\n* 基于反射的模型转换CPU消耗问题。\n\n* `DataLoader`的层级调度问题。\n\n于是，我们对使用方式和框架做了一些优化与改造，以解决上面列举的问题。本章着重介绍我们在GraphQL-Java方面的优化和改造思路。\n\n5.2.2 GraphQL编译优化\n\n**1）GraphQL语言原理概述**\n\nGraphQL是一种查询语言，目的是基于直观和灵活的语法构建客户端应用程序，用于描述其数据需求和交互。GraphQL属于一种领域特定语言（DSL），而我们所使用的GraphQL-Java客户端在语言编译层面是基于ANTLR 4实现的，ANTLR 4是一种基于Java编写的语言定义和识别工具，Antlr是一种元语言（Meta-Language），它们的关系如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/780967a52c449d978d352760694363ae.png)\n\n图13 GraphQL语言基本原理示意图\n\nGraphQL执行引擎所接受的`Schema`及`Query`都是基于GraphQL定义的语言所表达的内容，GraphQL执行引擎不能直接理解GraphQL，在执行之前必须由GraphQL编译器翻译成GraphQL执行引擎可理解的文档对象。而GraphQL编译器是基于Java的，经验表明在大流量场景实时解释的情况下，这部分代码将会成为CPU热点，而且还占用响应延迟，`Schema`或`Query`越复杂，性能损耗越明显。\n\n**2）Schema及Query编译缓存**\n\n`Schema`表达的是数据视图和取数模型同构，相对稳定，个数也不多，在我们的业务场景一个服务也就一个。因此，我们的做法是在启动的时候就将基于`Schema`构造的GraphQL执行引擎构造好，作为单例缓存下来。对于`Query`来说，每个场景的`Query`有些差异，因此`Query`的解析结果不能作为单例，我们的做法是实现`PreparsedDocumentProvider`接口，基于`Query`作为Key将`Query`编译结果缓存下来。如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/ddbeff75483900054a0216acf3a52f2d.png)\n\n图14 Query缓存实现示意图\n\n5.2.3 GraphQL执行引擎优化\n\n**1）GraphQL执行机制及问题**\n\n我们先一起了解一下GraphQL-Java执行引擎的运行机制是怎么样的。假设在执行策略上我们选取的是`AsyncExecutionStrategy`，来看看GraphQL执行引擎的执行过程：\n\n![](https://img-blog.csdnimg.cn/img_convert/d792881807f277fcc7d02794f645a8b0.png)\n\n图15 GraphQL执行引擎执行过程\n\n以上时序图做了些简化，去除了一些与重点无关的信息，`AsyncExecutionStrategy`的`execute`方法是对象执行策略的异步化模式实现，是查询执行的起点，也是根节点查询的入口，`AsyncExecutionStrategy`对对象的多个字段的查询逻辑，采取的是循环+异步化的实现方式，我们从`AsyncExecutionStrategy`的`execute`方法触发，理解GraphQL查询过程如下：\n\n1.  调用当前字段所绑定的`DataFetcher`的`get`方法，如果字段没有绑定`DataFetcher`，则通过默认的`PropertyDataFetcher`查询字段，`PropertyDataFetcher`的实现是基于反射从源对象中读取查询字段。\n\n2.  将从`DataFetcher`查询得到结果包装成`CompletableFuture`，如果结果本身是`CompletableFuture`，那么不会包装。\n\n3.  结果`CompletableFuture`完成之后，调用`completeValue`，基于结果类型分别处理。\n\n* 如果查询结果是列表类型，那么会对列表类型进行遍历，针对每个元素在递归执行`completeValue`。\n\n* 如果结果类型是对象类型，那么会对对象执行`execute`，又回到了起点，也就是`AsyncExecutionStrategy的execute`。\n\n以上是GraphQL的执行过程，这个过程有什么问题呢？下面基于图上的标记顺序一起看看GraphQL在我们的业务场景中应用和实践所遇到的问题，这些问题不代表在其他场景也是问题，仅供参考：\n\n**问题1**：`PropertyDataFetcher`CPU热点问题，`PropertyDataFetcher`在整个查询过程中属于热点代码，而其本身的实现也有一些优化空间，在运行时`PropertyDataFetcher`的执行会成为CPU热点。（具体问题可参考GitHub上的commit和Conversion：<https://github.com/graphql-java/graphql-java/pull/1815>）\n\n![](https://img-blog.csdnimg.cn/img_convert/c3a377dc5b480b403a67a2f8cb5cd0aa.png)图16 PropertyDataFetcher成为CPU热点\n\n**问题2**：列表的计算耗时问题，列表计算是循环的，对于查询结果中存在大列表的场景，此时循环会造成整体查询明显的延迟。我们举个具体的例子，假设查询结果中存在一个列表大小是1000，每个元素的处理是0.01ms，那么总体耗时就是10ms，基于GraphQL的查机制，这个10ms会阻塞整个链路。\n\n**2）类型转换优化**\n\n通过GraphQL查询引擎拿到的GraphQL模型，和业务实现的`DataFetcher`返回的取数模型是同构，但是所有字段的类型都会被转换成GraphQL内部类型。`PropertyDataFetcher`之所以会成为CPU热点，问题就在于这个模型转换过程，业务定义的模型到GraphQL类型模型转换过程示意图如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/eda15725d57060f766fa2800784e4c3f.png)\n\n图17 业务模型到GraphQL模型转换示意图\n\n当查询结果模型中的字段非常多的时候，比如上万个，意味着每次查询有上万次的`PropertyDataFetcher`操作，实际就反映到了CPU热点问题上，这个问题我们的解决思路是保持原有业务模型不变，将非`PropertyDataFetcher`查询的结果反过来填充到业务模型上。如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/00312b3068556d24deb0f880e5c2103a.png)\n\n图18 查询结果模型反向填充示意图\n\n基于这个思路，我们通过GraphQL执行引擎拿到的结果就是业务`Fetcher`返回的对象模型，这样不仅仅解决了因字段反射转换带来的CPU热点问题，同时对于业务开发来说增加了友好性。因为GraphQL模型类似JSON模型，这种模型是缺少业务类型的，业务开发直接使用起来非常麻烦。以上优化在一个场景上试点测试，结果显示该场景的平均响应时间缩短1.457ms，平均99线缩短5.82ms，平均CPU利用率降低约12\\%。\n\n**3）列表计算优化**\n\n当列表元素比较多的时候，默认的单线程遍历列表元素计算的方式所带来的延迟消耗非常明显，对于响应时间比较敏感的场景这个延迟优化很有必要。针对这个问题我们的解决思路是充分利用CPU多核心计算的能力，将列表拆分成任务，通过多线程并行执行，实现机制如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/0858f511ea09ad5454793bd7ec11760e.png)\n\n图19 列表遍历多核计算思路\n\n5.2.4 GraphQL-DataLoader调度优化\n\n**1）DataLoader基本原理**\n\n先简单介绍一下DataLoader的基本原理，DataLoader有两个方法，一个是`load`，一个是`dispatch`，在解决N+1问题的场景中，DataLoader是这么用的：\n\n![](https://img-blog.csdnimg.cn/img_convert/a41035acc9fa1a6bcafc9ebf069b1071.png)\n\n图20 DataLoader基本原理\n\n整体分为2个阶段，第一个阶段调用`load`，调用N次，第二个阶段调用`dispatch`，调用`dispatch`的时候会真正的执行数据查询，从而达到批量查询+分片的效果。\n\n**2）DataLoader调度问题**\n\nGraphQL-Java对DataLoader的集成支持的实现在`FieldLevelTrackingApproach`中，`FieldLevelTrackingApproach`的实现会存在怎样的问题呢？下面基于一张图表达原生DataLoader调度机制所产生的问题：\n\n![](https://img-blog.csdnimg.cn/img_convert/7b544ddbe308313dfbb784d2cb3d4e50.png)\n\n图21 GraphQL-Java对DataLoader调度存在的问题\n\n问题很明显，基于`FieldLevelTrackingApproach`的实现，下一层级的`DataLoader`的`dispatch`是需要等到本层级的结果都回来之后才发出。基于这样的实现，查询总耗时的计算公式等于：TOTAL = MAX（Level  1 Latency）+ MAX（Level 2 Latency）+ MAX（Level 3 Latency）+ … ，**总查询耗时等于每层耗时最大的值加起来，而实际上如果链路编排由业务开发同学自己来写的话，理论上的效果是总耗时等于所有链路最长的那个链路所耗的时间**，这个才是合理的。而`FieldLevelTrackingApproach`的实现所表现出来的结果是反常识的，至于为什么这么实现，目前我们理解可能是设计者基于简单和通用方面的考虑。\n\n问题在于以上的实现在有些业务场景下是不能接受的，比如我们的列表场景的响应时间约束一共也就不到100ms，其中几十ms是因为这个原因搭进去的。针对这个问题的解决思路，一种方式是对于响应时间要求特别高的场景独立编排，不采用GraphQL；另一种方式是在GraphQL层面解决这个问题，保持架构的统一性。接下来，介绍一下我们是如何扩展GraphQL-Java执行引擎来解决这个问题的。\n\n**3）DataLoader调度优化**\n\n针对DataLoader调度的性能问题，**我们的解决思路是在最后一次调用某个****`DataLoader`的`load`之后，立即调用`dispatch`方法发出查询请求**，问题是我们怎么知道哪一次的load是最后一次load呢？这个问题也是解决DataLoader调度问题的难点，以下举个例子来解释我们的解决思路：\n\n![](https://img-blog.csdnimg.cn/img_convert/bd9ac368a374d5463c9c5ea6e41bd720.png)\n\n图22 查询对象结果示意图\n\n假设我们查询到的模型结构如下：根节点是`Query`下的字段，字段名叫`subjects`，`subject`引用的是个列表，`subject`下有两个元素，都是`ModelA`的对象实例，`ModelA`有两个字段，`fieldA`和`fieldB`，`subjects[0]`的`fieldA`关联是`ModelB`的一个实例，`subjects[0]`的`fieldB`关联多个`ModelC`实例。\n\n为了方便理解，我们定义一些概念，字段、字段实例、字段实例执行完、字段实例值大小等等：\n\n* **字段**：具有唯一路径，是静态的，和运行时对象大小没有关系，如：`subjects`和`subjects/fieldA`。\n\n* **字段实例**：字段的实例，具有唯一路径，是动态的，跟运行时对象大小有关系，如：`subjects[0]/fieldA`和`subjects[1]/fieldA`是字段`subjects/fieldA`的实例。\n\n* **字段实例执行完**：字段实例关联的对象实例都被GraphQL执行完了。\n\n* **字段实例值大小**：字段实例引用对象实例的个数，如以上示例，`subjects[0]/fieldA`字段实例值大小是1，`subjects[0]/fieldB`字段实例值大小是3。\n\n除了以上定义之外，我们的业务场景还满足以下条件：\n\n* 只有1个根节点，且根节点是列表。\n\n* `DataLoader`一定属于某个字段，某个字段下的`DataLoader`应该被执行次数等于其下的对象实例个数。\n\n基于以上信息，我们可以得出以下问题分析：\n\n* 在执行字段实例的时候，我们可以知道当前字段实例的大小，字段实例的大小等于字段关联`DataLoader`在当前实例下需要执行`load`的次数，因此在执行`load`之后，我们可以知道当前对象实例是否是其所在字段实例的最后一个对象。\n\n* 一个对象的实例可能会挂在不同的字段实例下，所以仅当当前对象实例是其所在字段实例的最后一个对象实例的时候，不代表当前对象实例是所有对象实例中的最后一个，当且仅当对象实例所在节点实例是节点的最后一个实例的时候才成立。\n\n* 我们可从字段实例大小推算字段实例的个数，比如我们知道`subjects`的大小是2，那么就知道`subjects`字段有两个字段实例`subjects[0]`和`subjects[1]`，也就知道字段`subjects/fieldA`有两个实例，`subjects[0]/fieldA`和`subjects[1]/fieldA`，因此我们从根节点可以往下推断出某个字段实例是否执行完。\n\n通过以上分析，我们可以得出，一个对象执行完的条件是其所在的字段实例以及其所在的字段所有的父亲字段实例都执行完，且当前执行的对象实例是其所在字段实例的最后一个对象实例的时候。\n\n基于这个判断逻辑，我们的实现方案是在每次调用完`DataFetcher`的时候，判断是否需要发起`dispatch`，如果是则发起。另外，以上时机和条件存在漏发`dispatch`的问题，有个特殊情况，当当前对象实例不是最后一个，但是剩下的对象大小都为0的时候，那么就永远不会触发当前对象关联的`DataLoader`的`load`了，所以在对象大小为0的时候，需要额外再判断一次。\n\n根据以上的逻辑分析，我们实现了`DataLoader`调用链路的最优化，达到理论最优的效果。\n\n## 6 新架构对研发模式的影响\n\n生产力决定生产关系，元数据驱动信息聚合架构是展示场景搭建的核心生产力，而业务开发模式和过程是生产关系，因此也会随之改变。下面我们将会从开发模式和流程两个角度来介绍新架构对研发带来的影响。\n\n### 6.1 聚焦业务的开发模式\n\n新架构提供了一套基于业务抽象出的标准化代码分解约束。以前开发同学对系统的理解很可能就是“查一查服务，把数据粘在一起”，而现在，研发同学对于业务的理解及代码分解思路将会是一致的。比如展示单元代表的是展示逻辑，取数单元代表的是取数逻辑。同时，很多冗杂且容易出错的逻辑已经被框架屏蔽掉了，研发同学能够有更多的精力聚焦于业务逻辑本身，比如：业务数据的理解和封装，展示逻辑的理解和编写，以及查询模型的抽象和建设。如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/ef9c7ad70499f66a090c1a53e358176d.png)\n\n图23 业务开发聚焦业务本身\n\n### 6.2 研发流程升级\n\n新架构不仅仅影响了研发的代码编写，同时也影响着研发流程的改进，基于元数据架构实现的可视化及配置化能力，现有研发流程和之前研发流程相比有了明显的区别，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/3b542c0413452e6b5f48505faa1c2d4f.png)\n\n图24 基于开发框架搭建展示场景前后研发流程对比\n\n以前是“一杆子捅到底”的开发模式，每个展示场景的搭建需要经历过从接口的沟通到API的开发整个过程，基于新架构之后，系统自动具备多层复用及可视化、配置化能力。\n\n**情况一**：这是最好的情况，此时取数功能和展示功能都已经被沉淀下来，研发同学需要做的只是创建查询方案，基于运营平台按需选择需要的展示单元，拿着查询方案ID基于查询接口就可以查到需要的展示信息了，可视化、配置化界面如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/8472176f0fbaaa163b4534eed899f7d8.png)\n\n图25 可视化及文案按需选用\n\n**情况二**：此时可能没有展示功能，但是通过运营平台查看到，数据源已经接入过，那么也不难，只需要基于现有的数据源编写一段加工逻辑即可，这段加工逻辑是非常爽的一段纯逻辑的编写，数据源列表如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/cdcff0b999c17ac971ebd80e2842e42a.png)\n\n图26 数据源列表可视化\n\n**情况三**：最坏的情况是此时系统不能满足当前的查询能力，这种情况比较少见，因为后端服务是比较稳定的，那么也无需惊慌，只需要按照标准规范将数据源接入进来，然后编写加工逻辑片段即可，之后这些能力是可以被持续复用的。\n\n## 7 总结\n\n商品展示场景的复杂性体现在：场景多、依赖多、逻辑多，以及不同场景之间存在差异。在这样的背景下，如果是业务初期，怎么快怎么来，采用“烟囱式”个性化建设的方式不必有过多的质疑。但是随着业务的不断发展，功能的不断迭代，以及场景的规模化趋势，“烟囱式”个性化建设的弊端会慢慢凸显出来，包括代码复杂度高、缺少能力沉淀等问题。\n\n本文以基于对美团到店商品展示场景所面临的核心矛盾分析，介绍了：\n\n* 业界不同的BFF应用模式，以及不同模式的优势和缺点。\n\n* 基于GraphQL BFF模式改进的元数据驱动的架构方案设计。\n\n* 我们在GraphQL实践过程中遇到的问题及解决思路。\n\n* 新架构对研发模式产生的影响呈现。\n\n目前，笔者所在团队负责的核心商品展示场景都已迁入新架构，基于新的研发模式，我们实现了50\\%以上的展示逻辑复用以及1倍以上的效率提升。希望本文对大家能够有所帮助。\n\n## 8 参考文献\n\n\\[1\\]<https://samnewman.io/patterns/architectural/bff/>\n\n\\[2\\]<https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation>\n\n\\[3\\][了解电商后台系统，看这篇就够了](http://www.woshipm.com/pd/3712746.html)\n\n\\[4\\][框架定义-百度百科](https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6/1212667?fr=aladdin)\n\n\\[5\\][高效研发-闲鱼在数据聚合上的探索与实践](https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA%3D%3D&chksm=fd54d63aca235f2c5abf8f65b3a0f235b55723d014aa4c7c75c48fcb5ce5c32b14fb43e5b40b&idx=1&mid=2247483947&mpshare=1&scene=21&sn=d1b600e57cca8c7304cca77a693c0b32&srcid=0404dHE42TNCAGO7clq9K2ep#wechat_redirect)\n\n\\[6\\] 《系统架构-复杂系统的产品设计与开发》\n\n**阅读更多**\n\n\\---\n\n[前端](https://t.1yb.co/jo7r)** |**[ ](https://t.1yb.co/jo7v)[算法](https://t.1yb.co/jsdG)** |** [后端](https://t.1yb.co/jsWK)** | **[数据](https://t.1yb.co/jqRZ)\n\n[安全](https://t.1yb.co/jo7v)** | **[Android](https://t.1yb.co/jui4)** |** [iOS](https://t.1yb.co/jtXE) ** |** [运维](https://t.1yb.co/jo7K)** | **[测试](https://t.1yb.co/jtsX)\n\n\\----------  END  \\----------\n\n**招聘信息**\n\n美团到店综合研发中心长期招聘前端、后端、数据仓库、机器学习/数据挖掘算法工程师，坐标上海，欢迎感兴趣的同学发送简历至：tech\\@meituan.com（邮件标题注明：美团到店综合研发中心—上海）。\n\n**也许你还想看**\n\n**  | **[移动端UI一致性解决方案](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd124aae8a65c3b888df80cc15d2f6dbd25c7e7094f3dc665c8e9079963b709043ac6fe865a7&idx=1&mid=2651755491&scene=21&sn=4ac719deb5781e9060b4d023bc75691f#wechat_redirect)\n\n**  |** [外卖客户端容器化架构的演进](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd1252888a65db9e9aac10fb930f5ad6a2f62b47b6df868c7cb975ebf613650ad3c4b8ade51e&idx=1&mid=2651753413&scene=21&sn=e987b6a105d65952de35c86e5f19ba03#wechat_redirect)\n\n**  |** [美团外卖iOS多端复用的推动、支撑与思考](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd12aeee8a6527f8a297d0dc797b81492837019c821898ae21c3e158831aaa7a383d5155ec9b&idx=1&mid=2651748259&scene=21&sn=a7ef0d515e94631c8d86bdbbf81da143#wechat_redirect)\n\n![](https://img-blog.csdnimg.cn/img_convert/0ff5c1ae9c5bc0135299c86b4d6026a6.png)","source":"_posts/GraphQL及元数据驱动架构在后端BFF中的实践.md","raw":"---\ntitle: GraphQL及元数据驱动架构在后端BFF中的实践\ndate: 2021-05-08 11:14:25\ntags:\n- git\ncategories: \n- tools\n---\n\n \n\n> GraphQL是Facebook提出的一种数据查询语言，核心特性是数据聚合和按需索取，目前被广泛应用于前后端之间，解决客户端灵活使用数据问题。本文介绍的是GraphQL的另一种实践，我们将GraphQL下沉至后端BFF（Backend For Frontend）层之下，结合元数据技术，实现数据和加工逻辑的按需查询和执行。这样不仅解决了后端BFF层灵活使用数据的问题，这些字段加工逻辑还可以直接复用，大幅度提升了研发的效率。\n>\n> 本文介绍的实践方案已经在美团部分业务场景中落地，并取得不错效果，希望这些经验能够对大家有帮助。\n> BFF一词来自Sam Newman的一篇博文《[Pattern:Backends For Frontends](https://samnewman.io/patterns/architectural/bff/)》，指的是服务于前端的后端。BFF是解决什么问题的呢？据原文描述，随着移动互联网的兴起，原适应于桌面Web的服务端功能希望同时提供给移动App使用，而在这个过程中存在这样的问题：\n> 移动App和桌面Web在UI部分存在差异。\n>\n> > <!--more-->\n>\n\n* 移动App涉及不同的端，不仅有iOS、还有Android，这些不同端的UI之间存在差异。\n\n* 原有后端功能和桌面Web UI之间已经存在了较大的耦合。\n\n因为端的差异性存在，服务端的功能要针对端的差异进行适配和裁剪，而服务端的业务功能本身是相对单一的，这就产生了一个矛盾——服务端的单一业务功能和端的差异性诉求之间的矛盾。那么这个问题怎么解决呢？这也是文章的副标题所描述的\"Single-purpose Edge Services for UIs and external parties\"，引入BFF，由BFF来针对多端差异做适配，这也是目前业界广泛使用的一种模式。\n\n![](https://img-blog.csdnimg.cn/img_convert/f95ef4461eb139612078136232f13a5a.png)\n\n图1 BFF示意图\n\n在实际业务的实践中，导致这种端差异性的原因有很多，有技术的原因，也有业务的原因。比如，用户的客户端是Android还是iOS，是大屏还是小屏，是什么版本。再比如，业务属于哪个行业，产品形态是什么，功能投放在什么场景，面向的用户群体是谁等等。这些因素都会带来面向端的功能逻辑的差异性。\n\n在这个问题上，笔者所在团队负责的商品展示业务有一定的发言权，同样的商品业务，在C端的展示功能逻辑，深刻受到商品类型、所在行业、交易形态、投放场所、面向群体等因素的影响。同时，面向消费者端的功能频繁迭代的属性，更是加剧并深化了这种矛盾，使其演化成了一种服务端单一稳定与端的差异灵活之间的矛盾，这也是商品展示（商品展示BFF）业务系统存在的必然性原因。本文主要在美团到店商品展示场景的背景下，介绍面临的一些问题及解决思路。\n\n## 2 BFF背景下的核心矛盾\n\nBFF这层的引入是解决服务端单一稳定与端的差异灵活诉求之间的矛盾，这个矛盾并不是不存在，而是转移了。由原来后端和前端之间的矛盾转移成了BFF和前端之间的矛盾。笔者所在团队的主要工作，就是和这种矛盾作斗争。下面以具体的业务场景为例，结合当前的业务特点，说明在BFF的生产模式下，我们所面临的具体问题。下图是两个不同行业的团购货架展示模块，这两个模块我们认为是两个商品的展示场景，它们是两套独立定义的产品逻辑，并且会各自迭代。\n\n![](https://img-blog.csdnimg.cn/img_convert/1aa3a779c43374c8038fada6b5c78290.png)\n\n图2 展示场景\n\n在业务发展初期，这样的场景不多。BFF层系统“烟囱式”建设，功能快速开发上线满足业务的诉求，在这样的情况下，这种矛盾表现的不明显。而随着业务发展，行业的开拓，形成了许许多多这样的商品展示功能，矛盾逐渐加剧，主要表现在以下两个方面：\n\n* **业务支撑效率**：随着商品展示场景变得越来越多，API呈爆炸趋势，业务支撑效率和人力成线性关系，系统能力难以支撑业务场景的规模化拓展。\n\n* **系统复杂度高**：核心功能持续迭代，内部逻辑充斥着`if…else…`，代码过程式编写，系统复杂度较高，难以修改和维护。\n\n那么这些问题是怎么产生的呢？这要结合“烟囱式”系统建设的背景和商品展示场景所面临的业务，以及系统特点来进行理解。\n\n**特点一：外部依赖多、场景间取数存在差异、用户体验要求高**\n\n图例展示了两个不同行业的团购货架模块，这样一个看似不大的模块，后端在BFF层要调用20个以上的下游服务才能把数据拿全，这是其一。在上面两个不同的场景中，需要的数据源集合存在差异，而且这种差异普遍存在，这是其二，比如足疗团购货架需要的某个数据源，在丽人团购货架上不需要，丽人团购货架需要的某个数据源，足疗团购货架不需要。尽管依赖下游服务多，同时还要保证C端的用户体验，这是其三。\n\n这几个特点给技术带来了不小的难题：1）聚合大小难控制，聚合功能是分场景建设？还是统一建设？如果分场景建设，必然存在不同场景重复编写类似聚合逻辑的问题。如果统一建设，那么一个大而全的数据聚合中必然会存在无效的调用。2）聚合逻辑的复杂性控制问题，在这么多的数据源的情况下，不仅要考虑业务逻辑怎么写，还要考虑异步调用的编排，在代码复杂度未能良好控制的情况下，后续聚合的变更修改将会是一个难题。\n\n**特点二：展示逻辑多、场景之间存在差异，共性个性逻辑耦合**\n\n我们可以明显地识别某一类场景的逻辑是存在共性的，比如团单相关的展示场景。直观可以看出基本上都是展示团单维度的信息，但这只是表象。实际上在模块的生成过程中存在诸多的差异，比如以下两种差异：\n\n* **字段拼接逻辑差异**：比如以上图中两个团购货架的团购标题为例，同样是标题，在丽人团购货架中的展示规则是：**\\[类型\\] + 团购标题**，而在足疗团购货架的展示规则是：**团购标题**。\n\n* **排序过滤逻辑差异**：比如同样是团单列表，A场景按照销量倒排序，B场景按照价格排序，不同场景的排序逻辑不同。\n\n诸如此类的**展示逻辑**的差异性还有很多。类似的场景实际上在内部存在很多差异的逻辑，后端如何应对这种差异性是一个难题，下面是最常见的一种写法，通过读取具体的条件字段来做判断实现逻辑路由，如下所示：\n\n```go\nif(category == \"丽人\") {  title = \"[\" + category + \"]\" + productTitle;} else if (category == \"足疗\") {  title = productTitle；}\n```\n\n这种方案在功能实现方面没有问题，也能够复用共同的逻辑。但是实际上在场景非常多的情况下，将会有非常多的差异性判断逻辑叠加在一起，功能一直会被持续迭代的情况下，可以想象，系统将会变得越来越复杂，越来越难以修改和维护。\n\n**总结**：在BFF这层，不同商品展示场景存在差异。在业务发展初期，系统通过独立建设的方式支持业务快速试错，在这种情况下，业务差异性带来的问题不明显。而随着业务的不断发展，需要搭建及运营的场景越来越多，呈规模化趋势。此时，业务对技术效率提出了更高的要求。**在这种场景多、场景间存在差异的背景下，如何满足场景拓展效率同时能够控制系统的复杂性，就是我们业务场景中面临的核心问题**。\n\n## 3 BFF应用模式分析\n\n目前，业界针对此类的解决方案主要有两种模式，一种是后端BFF模式；另一种是前端BFF模式。\n\n### 3.1 后端BFF模式\n\n后端BFF模式指的是BFF由后端同学负责，这种模式目前最广泛的实践是基于GraphQL搭建的后端BFF方案，具体是：后端将展示字段封装成展示服务，通过GraphQL编排之后暴露给前端使用。如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/9186b94e756d77bc0b098a1807e44e5a.png)\n\n图3 后端BFF模式\n\n这种模式最大的特性和优势是，当展示字段已经存在的情况下，后端不需要关心前端差异性需求，按需查询的能力由GraphQL支持。这个特性可以很好地应对不同场景存在展示字段差异性这个问题，前端直接基于GraphQL按需查询数据即可，后端不需要变更。同时，借助GraphQL的编排和聚合查询能力，后端可以将逻辑分解在不同的展示服务中，因此在一定程度上能够化解BFF这层的复杂性。\n\n但是基于这种模式，仍然存在几个问题：展示服务颗粒度问题、数据图划分问题以及字段扩散问题，下图是基于当前模式的具体案例：\n\n![](https://img-blog.csdnimg.cn/img_convert/8dd8ffdccae5273f1c723e7bba3e4e5a.png)\n\n图4 后端BFF模式（案例）\n\n**1）展示服务颗粒度设计问题**\n\n这种方案要求展示逻辑和取数逻辑封装在一个模块中，形成一个展示服务（Presentation Service），如上图所示。而实际上展示逻辑和取数逻辑是多对多的关系，还是以前文提到的例子说明：\n\n> **背景**：有两个展示服务，分别封装了商品标题和商品标签的查询能力。\n>\n> **情景**：此时PM提了一个需求，希望商品在某个场景的标题以“\\[类型\\]+商品标题”的形式展示，此时商品标题的拼接依赖类型数据，而此时类型数据商品标签展示服务中已经调用了。\n>\n> **问题**：商品标题展示服务自己调用类型数据还是将两个展示服务合并到一起？\n\n以上描述的问题的是展示服务颗粒度把控的问题，我们可以怀疑上述的示例是不是因为展示服务的颗粒度过小？那么反过来看一看，如果将两个服务合并到一起，那么势必又会存在冗余。这是展示服务设计的难点，**核心原因在于，展示逻辑和取数逻辑本身是多对多的关系，结果却被设计放在了一起**。\n\n**2）数据图划分问题**\n\n通过GraphQL将多个展示服务的数据聚合到一张图（GraphQL Schema）中，形成一个数据视图，需要数据的时候只要数据在图中，就可以基于Query按需查询。那么问题来了，这个图应该怎么组织？是一张图还是多张图？图过大的话，势必带来复杂的数据关系维护问题，图过小则将会降低方案本身的价值。\n\n**3）展示服务内部复杂性 + 模型扩散问题**\n\n上文提到过一个商品标题的展示存在不同拼接逻辑的情况，在商品展示场景，这种逻辑特别普遍。比如同样是价格，A行业展示优惠后价格，B行业展示优惠前价格；同样是标签位置，C行业展示服务时长，而D行业展示商品特性等。\n\n那么问题来了，展示模型如何设计？以标题字段为例，是在展示模型上放个`title`字段就可以，还是分别放个`title`和`titleWithCategory`？如果是前者那么服务内部必然会存在`if…else…`这种逻辑，用于区分`title`的拼接方式，这同样会导致展示服务内部的复杂性。如果是多个字段，那么可以想象，展示服务的模型字段也将会不断扩散。\n\n**总结**：后端BFF模式能够在一定程度上化解后端逻辑的复杂性，同时提供一个展示字段的复用机制。但是仍然存在未决问题，如展示服务的颗粒度设计问题，数据图的划分问题，以及展示服务内部的复杂性和字段扩散问题。目前这种模式实践的代表有Facebook、爱彼迎、eBay、爱奇艺、携程、去哪儿等等。\n\n### 3.2 前端BFF模式\n\n前端BFF模式在Sam Newman的文章中的\"And Autonomy\"部分有特别的介绍，指的是BFF本身由前端团队自己负责，如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/94d1b0ff6f68b252711f342b3b0fd0ae.png)\n\n图5 前端BFF模式\n\n这种模式的理念是，本来能一个团队交付的需求，没必要拆成两个团队，两个团队本身带来较大的沟通协作成本。本质上，也是一种将“敌我矛盾”转化为“人民内部矛盾”的思路。前端完全接手BFF的开发工作，实现数据查询的自给自足，大大减少了前后端的协作成本。但是这种模式没有提到我们关心的一些核心问题，如：复杂性如何应对、差异性如何应对、展示模型如何设计等等问题。除此之外，这种模式也存在一些前提条件及弊端，比如较为完备的前端基础设施；前端不仅仅需要关心渲染、还需要了解业务逻辑等。\n\n**总结**：前端BFF模式通过前端自主查询和使用数据，从而达到降低跨团队协作的成本，提升BFF研发效率的效果。目前这种模式的实践代表是阿里巴巴。\n\n## 4 基于GraphQL及元数据的信息聚合架构设计\n\n### 4.1 整体思路\n\n通过对后端BFF和前端BFF两种模式的分析，我们最终选择后端BFF模式，前端BFF这个方案对目前的研发模式影响较大，不仅需要大量的前端资源，而且需要建设完善的前端基础设施，方案实施成本比较高昂。\n\n前文提到的后端GraphQL BFF模式代入我们的具体场景虽然存在一些问题，但是总体有非常大的参考价值，比如展示字段的复用思路、数据的按需查询思路等等。在商品展示场景中，**有80\\%的工作集中在数据的聚合和集成部分**，并且这部分具有很强的复用价值，因此信息的查询和聚合是我们面临的主要矛盾。因此，我们的思路是：**基于GraphQL+后端BFF方案改进，实现取数逻辑和展示逻辑的可沉淀、可组合、可复用**，整体架构如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/21ffacbebfc1c0c59f6a6f1f421e55ac.png)\n\n图6 基于GraphQL BFF的改进思路\n\n从上图可看出，与传统GraphQL BFF方案最大的差别在于我们将GraphQL下放至数据聚合部分，由于数据来源于商品领域，领域是相对稳定的，因此数据图规模可控且相对稳定。除此之外，整体架构的核心设计还包括以下三个方面：1）取数展示分离；2）查询模型归一；3）元数据驱动架构。\n\n我们通过取数展示分离解决展示服务颗粒度问题，同时使得展示逻辑和取数逻辑可沉淀、可复用；通过查询模型归一化设计解决展示字段扩散的问题；通过元数据驱动架构实现能力的可视化，业务组件编排执行的自动化，这能够让业务开发同学聚焦于业务逻辑的本身。下面将针对这三个部分逐一展开介绍。\n\n### 4.2 核心设计\n\n4.2.1 取数展示分离\n\n上文提到，在商品展示场景中，展示逻辑和取数逻辑是多对多的关系，而传统的基于GraphQL的后端BFF实践方案把它们封装在一起，这是导致展示服务颗粒度难以设计的根本原因。思考一下取数逻辑和展示逻辑的关注点是什么？取数逻辑关注怎么查询和聚合数据，而展示逻辑关注怎么加工生成需要的展示字段，它们的关注点不一样，放在一起也会增加展示服务的复杂性。因此，我们的思路是将取数逻辑和展示逻辑分离开来，单独封装成逻辑单元，分别叫取数单元和展示单元。在取数展示分离之后，GraphQL也随之下沉，用于实现数据的按需聚合，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/eeb60decd04420062983c3711804700e.png)\n\n图7 取数展示分离+元数据描述\n\n那么取数和展示逻辑的封装颗粒度是怎么样的呢？不能太小也不能太大，在颗粒度的设计上，我们有两个核心考量：1）**复用**，展示逻辑和取数逻辑在商品展示场景中，都是可以被复用的资产，我们希望它们能沉淀下来，被单独按需使用；2）**简单**，保持简单，这样容易修改和维护。基于这两点考虑，颗粒度的定义如下：\n\n* **取数单元**：尽量只封装1个外部数据源，同时负责对外部数据源返回的模型进行简化，这部分生成的模型我们称之为取数模型。\n\n* **展示单元**：尽量只封装1个展示字段的加工逻辑。\n\n分开的好处是简单且可被组合使用，那么具体如何实现组合使用呢？我们的思路是通过元数据来描述它们之间的关系，基于元数据由统一的执行框架来关联运行，具体设计下文会展开介绍。通过取数和展示的分离，元数据的关联和运行时的组合调用，可以保持逻辑单元的简单，同时又满足复用诉求，这也很好地解决了传统方案中存在的**展示服务的颗粒度问题**。\n\n4.2.2 查询模型归一\n\n展示单元的加工结果通过什么样的接口透出呢？接下来，我们介绍一下查询接口设计的问题。\n\n**1）查询接口设计的难点**\n\n常见查询接口的设计模式有以下两种：\n\n* **强类型模式**：强类型模式指的是查询接口返回的是POJO对象，每一个查询结果对应POJO中的一个明确的具有特定业务含义的字段。\n\n* **弱类型模式**：弱类型模式指的是查询结果以K-V或JSON模式返回，没有明确的静态字段。\n\n以上两种模式在业界都有广泛应用，且它们都有明确的优缺点。强类型模式对开发者友好，但是业务是不断迭代的，与此同时，系统沉淀的展示单元会不断丰富，在这样的情况下，接口返回的DTO中的字段将会愈来愈多，每次新功能的支持，都要伴随着接口查询模型的修改，JAR版本的升级。而JAR的升级涉及数据提供方和数据消费两方，存在明显效率问题。另外，可以想象，查询模型的不断迭代，最终将会包括成百上千个字段，难以维护。\n\n而弱类型模式恰好可以弥补这一缺点，但是弱类型模式对于开发者来说非常不友好，接口查询模型中有哪些查询结果对于开发者来说在开发的过程中完全没有感觉，但是程序员的天性就是喜欢通过代码去理解逻辑，而非配置和文档。其实，这两种接口设计模式都存在着一个共性问题——缺少抽象，下面两节，我们将介绍在接口返回的查询模型设计方面的抽象思路及框架能力支持。\n\n**2）查询模型归一化设计**\n\n回到商品展示场景中，一个展示字段有多种不同的实现，如商品标题的两种不同实现方式：1）商品标题；2）\\[类目\\]+商品标题。商品标题和这两种展示逻辑的关系本质上是一种抽象-具体的关系。识别这个关键点，思路就明了了，我们的思路是对查询模型做抽象。查询模型上都是抽象的展示字段，一个展示字段对应多个展示单元，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/d6223539b474bfdd2a7673c39752bcee.png)\n\n图8 查询模型归一化 + 元数据描述\n\n在实现层面，同样基于元数据描述展示字段和展示单元之间的关系，基于以上的设计思路，可以在一定程度上减缓模型的扩散，但是还不能避免扩展。比如除了价格、库存、销量等每个商品都有的标准属性之外，不同的商品类型一般还会有这个商品特有的属性。比如密室主题拼场商品才有“几人拼”这样的描述属性，这种字段本身抽象的意义不大，且放在商品查询模型中作为一个单独的字段会导致模型扩张，针对这类问题，我们的解决思路是引入扩展属性，扩展属性专门承载这类非标准的字段。通过标准字段 + 扩展属性的方式建立查询模型，能够较好地解决**字段扩散**的问题。\n\n4.2.3 元数据驱动架构\n\n到目前为止，我们定义了如何分解**业务逻辑单元**以及如何设计**查询模型**，并提到用元数据描述它们之间的关系。基于以上定义实现的业务逻辑及模型，都具备很强的复用价值，可以作为业务资产沉淀下来。那么，为什么用元数据描述业务功能及模型之间的关系呢？\n\n我们引入元数据描述主要有两个目的：1）代码逻辑的自动编排，通过元数据描述业务逻辑之间的关联关系，运行时可以自动基于元数据实现逻辑之间的关联执行，从而可以消除大量的人工逻辑编排代码；2）业务功能的可视化，元数据本身描述了业务逻辑所提供的功能，如下面两个示例：\n\n> 团单基础售价字符串展示，例：30元。 \n>\n> 团单市场价展示字段，例：100元。\n\n这些元数据上报到系统中，可以用于展示当前系统所提供的功能。通过元数据描述组件及组件之间关联关系，通过框架解析元数据自动进行业务组件的调用执行，形成了如下的元数据架构：\n\n![](https://img-blog.csdnimg.cn/img_convert/2acb91a2cdbee4b5eccf5309f5a295e1.png)\n\n图9 元数据驱动架构\n\n整体架构由三个核心部分组成：\n\n* **业务能力**：标准的业务逻辑单元，包括取数单元、展示单元和查询模型，这些都是关键的可复用资产。\n\n* **元数据**：描述业务功能（如：展示单元、取数单元）以及业务功能之间的关联关系，比如展示单元依赖的数据，展示单元映射的展示字段等。\n\n* **执行引擎**：负责消费元数据，并基于元数据对业务逻辑进行调度和执行。\n\n通过以上三个部分有机的组合在一起，形成了一个元数据驱动风格的架构。\n\n## 5 针对GraphQL的优化实践\n\n### 5.1 使用简化\n\n**1）GraphQL直接使用问题**\n\n引入GraphQL，会引入一些额外的复杂性，比如会涉及到GraphQL带来的一些概念如：Schema、RuntimeWiring，下面是基于GraphQL原生Java框架的开发过程：\n\n![](https://img-blog.csdnimg.cn/img_convert/1897c77958b24b0253e5968bb06dd147.png)\n\n图10 原生GraphQL使用流程\n\n这些概念对于未接触过GraphQL的同学来说，增加了学习和理解的成本，而这些概念和业务领域通常没有什么关系。而我们仅仅希望使用GraphQL的按需查询特性，却被GraphQL本身拖累了，业务开发同学的关注点应该聚焦在业务逻辑本身才对，这个问题如何解决呢？\n\n著名计算机科学家David Wheeler说了一句名言，\"All problems in computer science can be solved by another level of indirection\"。没有加一层解决不了的问题，本质上是需要有人来对这事负责，因此我们在原生GraphQL之上增加了一层执行引擎层来解决这些问题，目标是屏蔽GraphQL的复杂性，让开发人员只需要关注业务逻辑。\n\n**2）取数接口标准化**\n\n首先要简化数据的接入，原生的`DataFetcher`和`DataLoader`都是处在一个比较高的抽象层次，缺少业务语义，而在查询场景，我们能够归纳出，所有的查询都属于以下三种模式：\n\n* **1查1**：根据一个条件查询一个结果。\n\n* **1查N**：根据一个条件查询多个结果。\n\n* **N查N**：一查一或一查多的批量版本。\n\n由此，我们对查询接口进行了标准化，业务开发同学基于场景判断是那种，按需选择使用即可，取数接口标准化设计如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/71923ee77268f32e6ce9789d1b8dfc9f.png)\n\n图11 查询接口标准化\n\n业务开发同学按需选择所需要使用的取数器，通过泛型指定结果类型，1查1和1查N比较简单，N查N我们对其定义为批量查询接口，用于满足\"N+1\"的场景，其中`batchSize`字段用于指定分片大小，`batchKey`用于指定查询Key，业务开发只需要指定参数，其他的框架会自动处理。除此之外，我们还约束了返回结果必须是`CompleteFuture`，用于满足聚合查询的全链路异步化。\n\n**3）聚合编排自动化**\n\n取数接口标准化使得数据源的语义更清晰，开发过程按需选择即可，简化了业务的开发。但是此时业务开发同学写好`Fetcher`之后，还需要去另一个地方去写`Schema`，而且写完`Schema`还要再写`Schema`和`Fetcher`的映射关系，业务开发更享受写代码的过程，不太愿意写完代码还要去另外一个地方取配置，并且同时维护代码和对应配置也提高了出错的可能性，能否将这些冗杂的步骤移除掉？\n\n`Schema`和`RuntimeWiring`本质上是想描述某些信息，如果这些信息换一种方式描述是不是也可以。我们的优化思路是，在业务开发过程中标记注解，通过注解标注的元数据描述这些信息，其他的事情交给框架来做。解决思路示意图如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/a1adc237e833aad26cf198c0c5dd6bc2.png)\n\n图12 注解元数据描述Schema和RuntimeWiring\n\n### 5.2 性能优化\n\n5.2.1 GraphQL性能问题\n\n虽然GraphQL已经开源了，但是Facebook只开源了相关标准，并没有给出解决方案。GraphQL-Java框架是由社区贡献的，基于开源的GraphQL-Java作为按需查询引擎的方案，我们发现了GraphQL应用方面的一些问题，这些问题有部分是由于使用姿势不当所导致的，也有部分是GraphQL本身实现的问题，比如我们遇到的几个典型的问题：\n\n* 耗CPU的查询解析，包括`Schema`的解析和`Query`的解析。\n\n* 当查询模型比较复杂特别是存在大列表时候的延时问题。\n\n* 基于反射的模型转换CPU消耗问题。\n\n* `DataLoader`的层级调度问题。\n\n于是，我们对使用方式和框架做了一些优化与改造，以解决上面列举的问题。本章着重介绍我们在GraphQL-Java方面的优化和改造思路。\n\n5.2.2 GraphQL编译优化\n\n**1）GraphQL语言原理概述**\n\nGraphQL是一种查询语言，目的是基于直观和灵活的语法构建客户端应用程序，用于描述其数据需求和交互。GraphQL属于一种领域特定语言（DSL），而我们所使用的GraphQL-Java客户端在语言编译层面是基于ANTLR 4实现的，ANTLR 4是一种基于Java编写的语言定义和识别工具，Antlr是一种元语言（Meta-Language），它们的关系如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/780967a52c449d978d352760694363ae.png)\n\n图13 GraphQL语言基本原理示意图\n\nGraphQL执行引擎所接受的`Schema`及`Query`都是基于GraphQL定义的语言所表达的内容，GraphQL执行引擎不能直接理解GraphQL，在执行之前必须由GraphQL编译器翻译成GraphQL执行引擎可理解的文档对象。而GraphQL编译器是基于Java的，经验表明在大流量场景实时解释的情况下，这部分代码将会成为CPU热点，而且还占用响应延迟，`Schema`或`Query`越复杂，性能损耗越明显。\n\n**2）Schema及Query编译缓存**\n\n`Schema`表达的是数据视图和取数模型同构，相对稳定，个数也不多，在我们的业务场景一个服务也就一个。因此，我们的做法是在启动的时候就将基于`Schema`构造的GraphQL执行引擎构造好，作为单例缓存下来。对于`Query`来说，每个场景的`Query`有些差异，因此`Query`的解析结果不能作为单例，我们的做法是实现`PreparsedDocumentProvider`接口，基于`Query`作为Key将`Query`编译结果缓存下来。如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/ddbeff75483900054a0216acf3a52f2d.png)\n\n图14 Query缓存实现示意图\n\n5.2.3 GraphQL执行引擎优化\n\n**1）GraphQL执行机制及问题**\n\n我们先一起了解一下GraphQL-Java执行引擎的运行机制是怎么样的。假设在执行策略上我们选取的是`AsyncExecutionStrategy`，来看看GraphQL执行引擎的执行过程：\n\n![](https://img-blog.csdnimg.cn/img_convert/d792881807f277fcc7d02794f645a8b0.png)\n\n图15 GraphQL执行引擎执行过程\n\n以上时序图做了些简化，去除了一些与重点无关的信息，`AsyncExecutionStrategy`的`execute`方法是对象执行策略的异步化模式实现，是查询执行的起点，也是根节点查询的入口，`AsyncExecutionStrategy`对对象的多个字段的查询逻辑，采取的是循环+异步化的实现方式，我们从`AsyncExecutionStrategy`的`execute`方法触发，理解GraphQL查询过程如下：\n\n1.  调用当前字段所绑定的`DataFetcher`的`get`方法，如果字段没有绑定`DataFetcher`，则通过默认的`PropertyDataFetcher`查询字段，`PropertyDataFetcher`的实现是基于反射从源对象中读取查询字段。\n\n2.  将从`DataFetcher`查询得到结果包装成`CompletableFuture`，如果结果本身是`CompletableFuture`，那么不会包装。\n\n3.  结果`CompletableFuture`完成之后，调用`completeValue`，基于结果类型分别处理。\n\n* 如果查询结果是列表类型，那么会对列表类型进行遍历，针对每个元素在递归执行`completeValue`。\n\n* 如果结果类型是对象类型，那么会对对象执行`execute`，又回到了起点，也就是`AsyncExecutionStrategy的execute`。\n\n以上是GraphQL的执行过程，这个过程有什么问题呢？下面基于图上的标记顺序一起看看GraphQL在我们的业务场景中应用和实践所遇到的问题，这些问题不代表在其他场景也是问题，仅供参考：\n\n**问题1**：`PropertyDataFetcher`CPU热点问题，`PropertyDataFetcher`在整个查询过程中属于热点代码，而其本身的实现也有一些优化空间，在运行时`PropertyDataFetcher`的执行会成为CPU热点。（具体问题可参考GitHub上的commit和Conversion：<https://github.com/graphql-java/graphql-java/pull/1815>）\n\n![](https://img-blog.csdnimg.cn/img_convert/c3a377dc5b480b403a67a2f8cb5cd0aa.png)图16 PropertyDataFetcher成为CPU热点\n\n**问题2**：列表的计算耗时问题，列表计算是循环的，对于查询结果中存在大列表的场景，此时循环会造成整体查询明显的延迟。我们举个具体的例子，假设查询结果中存在一个列表大小是1000，每个元素的处理是0.01ms，那么总体耗时就是10ms，基于GraphQL的查机制，这个10ms会阻塞整个链路。\n\n**2）类型转换优化**\n\n通过GraphQL查询引擎拿到的GraphQL模型，和业务实现的`DataFetcher`返回的取数模型是同构，但是所有字段的类型都会被转换成GraphQL内部类型。`PropertyDataFetcher`之所以会成为CPU热点，问题就在于这个模型转换过程，业务定义的模型到GraphQL类型模型转换过程示意图如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/eda15725d57060f766fa2800784e4c3f.png)\n\n图17 业务模型到GraphQL模型转换示意图\n\n当查询结果模型中的字段非常多的时候，比如上万个，意味着每次查询有上万次的`PropertyDataFetcher`操作，实际就反映到了CPU热点问题上，这个问题我们的解决思路是保持原有业务模型不变，将非`PropertyDataFetcher`查询的结果反过来填充到业务模型上。如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/00312b3068556d24deb0f880e5c2103a.png)\n\n图18 查询结果模型反向填充示意图\n\n基于这个思路，我们通过GraphQL执行引擎拿到的结果就是业务`Fetcher`返回的对象模型，这样不仅仅解决了因字段反射转换带来的CPU热点问题，同时对于业务开发来说增加了友好性。因为GraphQL模型类似JSON模型，这种模型是缺少业务类型的，业务开发直接使用起来非常麻烦。以上优化在一个场景上试点测试，结果显示该场景的平均响应时间缩短1.457ms，平均99线缩短5.82ms，平均CPU利用率降低约12\\%。\n\n**3）列表计算优化**\n\n当列表元素比较多的时候，默认的单线程遍历列表元素计算的方式所带来的延迟消耗非常明显，对于响应时间比较敏感的场景这个延迟优化很有必要。针对这个问题我们的解决思路是充分利用CPU多核心计算的能力，将列表拆分成任务，通过多线程并行执行，实现机制如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/0858f511ea09ad5454793bd7ec11760e.png)\n\n图19 列表遍历多核计算思路\n\n5.2.4 GraphQL-DataLoader调度优化\n\n**1）DataLoader基本原理**\n\n先简单介绍一下DataLoader的基本原理，DataLoader有两个方法，一个是`load`，一个是`dispatch`，在解决N+1问题的场景中，DataLoader是这么用的：\n\n![](https://img-blog.csdnimg.cn/img_convert/a41035acc9fa1a6bcafc9ebf069b1071.png)\n\n图20 DataLoader基本原理\n\n整体分为2个阶段，第一个阶段调用`load`，调用N次，第二个阶段调用`dispatch`，调用`dispatch`的时候会真正的执行数据查询，从而达到批量查询+分片的效果。\n\n**2）DataLoader调度问题**\n\nGraphQL-Java对DataLoader的集成支持的实现在`FieldLevelTrackingApproach`中，`FieldLevelTrackingApproach`的实现会存在怎样的问题呢？下面基于一张图表达原生DataLoader调度机制所产生的问题：\n\n![](https://img-blog.csdnimg.cn/img_convert/7b544ddbe308313dfbb784d2cb3d4e50.png)\n\n图21 GraphQL-Java对DataLoader调度存在的问题\n\n问题很明显，基于`FieldLevelTrackingApproach`的实现，下一层级的`DataLoader`的`dispatch`是需要等到本层级的结果都回来之后才发出。基于这样的实现，查询总耗时的计算公式等于：TOTAL = MAX（Level  1 Latency）+ MAX（Level 2 Latency）+ MAX（Level 3 Latency）+ … ，**总查询耗时等于每层耗时最大的值加起来，而实际上如果链路编排由业务开发同学自己来写的话，理论上的效果是总耗时等于所有链路最长的那个链路所耗的时间**，这个才是合理的。而`FieldLevelTrackingApproach`的实现所表现出来的结果是反常识的，至于为什么这么实现，目前我们理解可能是设计者基于简单和通用方面的考虑。\n\n问题在于以上的实现在有些业务场景下是不能接受的，比如我们的列表场景的响应时间约束一共也就不到100ms，其中几十ms是因为这个原因搭进去的。针对这个问题的解决思路，一种方式是对于响应时间要求特别高的场景独立编排，不采用GraphQL；另一种方式是在GraphQL层面解决这个问题，保持架构的统一性。接下来，介绍一下我们是如何扩展GraphQL-Java执行引擎来解决这个问题的。\n\n**3）DataLoader调度优化**\n\n针对DataLoader调度的性能问题，**我们的解决思路是在最后一次调用某个****`DataLoader`的`load`之后，立即调用`dispatch`方法发出查询请求**，问题是我们怎么知道哪一次的load是最后一次load呢？这个问题也是解决DataLoader调度问题的难点，以下举个例子来解释我们的解决思路：\n\n![](https://img-blog.csdnimg.cn/img_convert/bd9ac368a374d5463c9c5ea6e41bd720.png)\n\n图22 查询对象结果示意图\n\n假设我们查询到的模型结构如下：根节点是`Query`下的字段，字段名叫`subjects`，`subject`引用的是个列表，`subject`下有两个元素，都是`ModelA`的对象实例，`ModelA`有两个字段，`fieldA`和`fieldB`，`subjects[0]`的`fieldA`关联是`ModelB`的一个实例，`subjects[0]`的`fieldB`关联多个`ModelC`实例。\n\n为了方便理解，我们定义一些概念，字段、字段实例、字段实例执行完、字段实例值大小等等：\n\n* **字段**：具有唯一路径，是静态的，和运行时对象大小没有关系，如：`subjects`和`subjects/fieldA`。\n\n* **字段实例**：字段的实例，具有唯一路径，是动态的，跟运行时对象大小有关系，如：`subjects[0]/fieldA`和`subjects[1]/fieldA`是字段`subjects/fieldA`的实例。\n\n* **字段实例执行完**：字段实例关联的对象实例都被GraphQL执行完了。\n\n* **字段实例值大小**：字段实例引用对象实例的个数，如以上示例，`subjects[0]/fieldA`字段实例值大小是1，`subjects[0]/fieldB`字段实例值大小是3。\n\n除了以上定义之外，我们的业务场景还满足以下条件：\n\n* 只有1个根节点，且根节点是列表。\n\n* `DataLoader`一定属于某个字段，某个字段下的`DataLoader`应该被执行次数等于其下的对象实例个数。\n\n基于以上信息，我们可以得出以下问题分析：\n\n* 在执行字段实例的时候，我们可以知道当前字段实例的大小，字段实例的大小等于字段关联`DataLoader`在当前实例下需要执行`load`的次数，因此在执行`load`之后，我们可以知道当前对象实例是否是其所在字段实例的最后一个对象。\n\n* 一个对象的实例可能会挂在不同的字段实例下，所以仅当当前对象实例是其所在字段实例的最后一个对象实例的时候，不代表当前对象实例是所有对象实例中的最后一个，当且仅当对象实例所在节点实例是节点的最后一个实例的时候才成立。\n\n* 我们可从字段实例大小推算字段实例的个数，比如我们知道`subjects`的大小是2，那么就知道`subjects`字段有两个字段实例`subjects[0]`和`subjects[1]`，也就知道字段`subjects/fieldA`有两个实例，`subjects[0]/fieldA`和`subjects[1]/fieldA`，因此我们从根节点可以往下推断出某个字段实例是否执行完。\n\n通过以上分析，我们可以得出，一个对象执行完的条件是其所在的字段实例以及其所在的字段所有的父亲字段实例都执行完，且当前执行的对象实例是其所在字段实例的最后一个对象实例的时候。\n\n基于这个判断逻辑，我们的实现方案是在每次调用完`DataFetcher`的时候，判断是否需要发起`dispatch`，如果是则发起。另外，以上时机和条件存在漏发`dispatch`的问题，有个特殊情况，当当前对象实例不是最后一个，但是剩下的对象大小都为0的时候，那么就永远不会触发当前对象关联的`DataLoader`的`load`了，所以在对象大小为0的时候，需要额外再判断一次。\n\n根据以上的逻辑分析，我们实现了`DataLoader`调用链路的最优化，达到理论最优的效果。\n\n## 6 新架构对研发模式的影响\n\n生产力决定生产关系，元数据驱动信息聚合架构是展示场景搭建的核心生产力，而业务开发模式和过程是生产关系，因此也会随之改变。下面我们将会从开发模式和流程两个角度来介绍新架构对研发带来的影响。\n\n### 6.1 聚焦业务的开发模式\n\n新架构提供了一套基于业务抽象出的标准化代码分解约束。以前开发同学对系统的理解很可能就是“查一查服务，把数据粘在一起”，而现在，研发同学对于业务的理解及代码分解思路将会是一致的。比如展示单元代表的是展示逻辑，取数单元代表的是取数逻辑。同时，很多冗杂且容易出错的逻辑已经被框架屏蔽掉了，研发同学能够有更多的精力聚焦于业务逻辑本身，比如：业务数据的理解和封装，展示逻辑的理解和编写，以及查询模型的抽象和建设。如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/ef9c7ad70499f66a090c1a53e358176d.png)\n\n图23 业务开发聚焦业务本身\n\n### 6.2 研发流程升级\n\n新架构不仅仅影响了研发的代码编写，同时也影响着研发流程的改进，基于元数据架构实现的可视化及配置化能力，现有研发流程和之前研发流程相比有了明显的区别，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/3b542c0413452e6b5f48505faa1c2d4f.png)\n\n图24 基于开发框架搭建展示场景前后研发流程对比\n\n以前是“一杆子捅到底”的开发模式，每个展示场景的搭建需要经历过从接口的沟通到API的开发整个过程，基于新架构之后，系统自动具备多层复用及可视化、配置化能力。\n\n**情况一**：这是最好的情况，此时取数功能和展示功能都已经被沉淀下来，研发同学需要做的只是创建查询方案，基于运营平台按需选择需要的展示单元，拿着查询方案ID基于查询接口就可以查到需要的展示信息了，可视化、配置化界面如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/8472176f0fbaaa163b4534eed899f7d8.png)\n\n图25 可视化及文案按需选用\n\n**情况二**：此时可能没有展示功能，但是通过运营平台查看到，数据源已经接入过，那么也不难，只需要基于现有的数据源编写一段加工逻辑即可，这段加工逻辑是非常爽的一段纯逻辑的编写，数据源列表如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/cdcff0b999c17ac971ebd80e2842e42a.png)\n\n图26 数据源列表可视化\n\n**情况三**：最坏的情况是此时系统不能满足当前的查询能力，这种情况比较少见，因为后端服务是比较稳定的，那么也无需惊慌，只需要按照标准规范将数据源接入进来，然后编写加工逻辑片段即可，之后这些能力是可以被持续复用的。\n\n## 7 总结\n\n商品展示场景的复杂性体现在：场景多、依赖多、逻辑多，以及不同场景之间存在差异。在这样的背景下，如果是业务初期，怎么快怎么来，采用“烟囱式”个性化建设的方式不必有过多的质疑。但是随着业务的不断发展，功能的不断迭代，以及场景的规模化趋势，“烟囱式”个性化建设的弊端会慢慢凸显出来，包括代码复杂度高、缺少能力沉淀等问题。\n\n本文以基于对美团到店商品展示场景所面临的核心矛盾分析，介绍了：\n\n* 业界不同的BFF应用模式，以及不同模式的优势和缺点。\n\n* 基于GraphQL BFF模式改进的元数据驱动的架构方案设计。\n\n* 我们在GraphQL实践过程中遇到的问题及解决思路。\n\n* 新架构对研发模式产生的影响呈现。\n\n目前，笔者所在团队负责的核心商品展示场景都已迁入新架构，基于新的研发模式，我们实现了50\\%以上的展示逻辑复用以及1倍以上的效率提升。希望本文对大家能够有所帮助。\n\n## 8 参考文献\n\n\\[1\\]<https://samnewman.io/patterns/architectural/bff/>\n\n\\[2\\]<https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation>\n\n\\[3\\][了解电商后台系统，看这篇就够了](http://www.woshipm.com/pd/3712746.html)\n\n\\[4\\][框架定义-百度百科](https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6/1212667?fr=aladdin)\n\n\\[5\\][高效研发-闲鱼在数据聚合上的探索与实践](https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA%3D%3D&chksm=fd54d63aca235f2c5abf8f65b3a0f235b55723d014aa4c7c75c48fcb5ce5c32b14fb43e5b40b&idx=1&mid=2247483947&mpshare=1&scene=21&sn=d1b600e57cca8c7304cca77a693c0b32&srcid=0404dHE42TNCAGO7clq9K2ep#wechat_redirect)\n\n\\[6\\] 《系统架构-复杂系统的产品设计与开发》\n\n**阅读更多**\n\n\\---\n\n[前端](https://t.1yb.co/jo7r)** |**[ ](https://t.1yb.co/jo7v)[算法](https://t.1yb.co/jsdG)** |** [后端](https://t.1yb.co/jsWK)** | **[数据](https://t.1yb.co/jqRZ)\n\n[安全](https://t.1yb.co/jo7v)** | **[Android](https://t.1yb.co/jui4)** |** [iOS](https://t.1yb.co/jtXE) ** |** [运维](https://t.1yb.co/jo7K)** | **[测试](https://t.1yb.co/jtsX)\n\n\\----------  END  \\----------\n\n**招聘信息**\n\n美团到店综合研发中心长期招聘前端、后端、数据仓库、机器学习/数据挖掘算法工程师，坐标上海，欢迎感兴趣的同学发送简历至：tech\\@meituan.com（邮件标题注明：美团到店综合研发中心—上海）。\n\n**也许你还想看**\n\n**  | **[移动端UI一致性解决方案](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd124aae8a65c3b888df80cc15d2f6dbd25c7e7094f3dc665c8e9079963b709043ac6fe865a7&idx=1&mid=2651755491&scene=21&sn=4ac719deb5781e9060b4d023bc75691f#wechat_redirect)\n\n**  |** [外卖客户端容器化架构的演进](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd1252888a65db9e9aac10fb930f5ad6a2f62b47b6df868c7cb975ebf613650ad3c4b8ade51e&idx=1&mid=2651753413&scene=21&sn=e987b6a105d65952de35c86e5f19ba03#wechat_redirect)\n\n**  |** [美团外卖iOS多端复用的推动、支撑与思考](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd12aeee8a6527f8a297d0dc797b81492837019c821898ae21c3e158831aaa7a383d5155ec9b&idx=1&mid=2651748259&scene=21&sn=a7ef0d515e94631c8d86bdbbf81da143#wechat_redirect)\n\n![](https://img-blog.csdnimg.cn/img_convert/0ff5c1ae9c5bc0135299c86b4d6026a6.png)","slug":"GraphQL及元数据驱动架构在后端BFF中的实践","published":1,"updated":"2021-08-24T08:02:37.455Z","_id":"ckpp6ut6e000hdgv9dias5yhv","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>GraphQL是Facebook提出的一种数据查询语言，核心特性是数据聚合和按需索取，目前被广泛应用于前后端之间，解决客户端灵活使用数据问题。本文介绍的是GraphQL的另一种实践，我们将GraphQL下沉至后端BFF（Backend For Frontend）层之下，结合元数据技术，实现数据和加工逻辑的按需查询和执行。这样不仅解决了后端BFF层灵活使用数据的问题，这些字段加工逻辑还可以直接复用，大幅度提升了研发的效率。</p>\n<p>本文介绍的实践方案已经在美团部分业务场景中落地，并取得不错效果，希望这些经验能够对大家有帮助。<br>BFF一词来自Sam Newman的一篇博文《<a href=\"https://samnewman.io/patterns/architectural/bff/\">Pattern:Backends For Frontends</a>》，指的是服务于前端的后端。BFF是解决什么问题的呢？据原文描述，随着移动互联网的兴起，原适应于桌面Web的服务端功能希望同时提供给移动App使用，而在这个过程中存在这样的问题：<br>移动App和桌面Web在UI部分存在差异。</p>\n<blockquote>\n<span id=\"more\"></span>\n</blockquote>\n</blockquote>\n<ul>\n<li><p>移动App涉及不同的端，不仅有iOS、还有Android，这些不同端的UI之间存在差异。</p>\n</li>\n<li><p>原有后端功能和桌面Web UI之间已经存在了较大的耦合。</p>\n</li>\n</ul>\n<p>因为端的差异性存在，服务端的功能要针对端的差异进行适配和裁剪，而服务端的业务功能本身是相对单一的，这就产生了一个矛盾——服务端的单一业务功能和端的差异性诉求之间的矛盾。那么这个问题怎么解决呢？这也是文章的副标题所描述的”Single-purpose Edge Services for UIs and external parties”，引入BFF，由BFF来针对多端差异做适配，这也是目前业界广泛使用的一种模式。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f95ef4461eb139612078136232f13a5a.png\"></p>\n<p>图1 BFF示意图</p>\n<p>在实际业务的实践中，导致这种端差异性的原因有很多，有技术的原因，也有业务的原因。比如，用户的客户端是Android还是iOS，是大屏还是小屏，是什么版本。再比如，业务属于哪个行业，产品形态是什么，功能投放在什么场景，面向的用户群体是谁等等。这些因素都会带来面向端的功能逻辑的差异性。</p>\n<p>在这个问题上，笔者所在团队负责的商品展示业务有一定的发言权，同样的商品业务，在C端的展示功能逻辑，深刻受到商品类型、所在行业、交易形态、投放场所、面向群体等因素的影响。同时，面向消费者端的功能频繁迭代的属性，更是加剧并深化了这种矛盾，使其演化成了一种服务端单一稳定与端的差异灵活之间的矛盾，这也是商品展示（商品展示BFF）业务系统存在的必然性原因。本文主要在美团到店商品展示场景的背景下，介绍面临的一些问题及解决思路。</p>\n<h2 id=\"2-BFF背景下的核心矛盾\"><a href=\"#2-BFF背景下的核心矛盾\" class=\"headerlink\" title=\"2 BFF背景下的核心矛盾\"></a>2 BFF背景下的核心矛盾</h2><p>BFF这层的引入是解决服务端单一稳定与端的差异灵活诉求之间的矛盾，这个矛盾并不是不存在，而是转移了。由原来后端和前端之间的矛盾转移成了BFF和前端之间的矛盾。笔者所在团队的主要工作，就是和这种矛盾作斗争。下面以具体的业务场景为例，结合当前的业务特点，说明在BFF的生产模式下，我们所面临的具体问题。下图是两个不同行业的团购货架展示模块，这两个模块我们认为是两个商品的展示场景，它们是两套独立定义的产品逻辑，并且会各自迭代。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1aa3a779c43374c8038fada6b5c78290.png\"></p>\n<p>图2 展示场景</p>\n<p>在业务发展初期，这样的场景不多。BFF层系统“烟囱式”建设，功能快速开发上线满足业务的诉求，在这样的情况下，这种矛盾表现的不明显。而随着业务发展，行业的开拓，形成了许许多多这样的商品展示功能，矛盾逐渐加剧，主要表现在以下两个方面：</p>\n<ul>\n<li><p><strong>业务支撑效率</strong>：随着商品展示场景变得越来越多，API呈爆炸趋势，业务支撑效率和人力成线性关系，系统能力难以支撑业务场景的规模化拓展。</p>\n</li>\n<li><p><strong>系统复杂度高</strong>：核心功能持续迭代，内部逻辑充斥着<code>if…else…</code>，代码过程式编写，系统复杂度较高，难以修改和维护。</p>\n</li>\n</ul>\n<p>那么这些问题是怎么产生的呢？这要结合“烟囱式”系统建设的背景和商品展示场景所面临的业务，以及系统特点来进行理解。</p>\n<p><strong>特点一：外部依赖多、场景间取数存在差异、用户体验要求高</strong></p>\n<p>图例展示了两个不同行业的团购货架模块，这样一个看似不大的模块，后端在BFF层要调用20个以上的下游服务才能把数据拿全，这是其一。在上面两个不同的场景中，需要的数据源集合存在差异，而且这种差异普遍存在，这是其二，比如足疗团购货架需要的某个数据源，在丽人团购货架上不需要，丽人团购货架需要的某个数据源，足疗团购货架不需要。尽管依赖下游服务多，同时还要保证C端的用户体验，这是其三。</p>\n<p>这几个特点给技术带来了不小的难题：1）聚合大小难控制，聚合功能是分场景建设？还是统一建设？如果分场景建设，必然存在不同场景重复编写类似聚合逻辑的问题。如果统一建设，那么一个大而全的数据聚合中必然会存在无效的调用。2）聚合逻辑的复杂性控制问题，在这么多的数据源的情况下，不仅要考虑业务逻辑怎么写，还要考虑异步调用的编排，在代码复杂度未能良好控制的情况下，后续聚合的变更修改将会是一个难题。</p>\n<p><strong>特点二：展示逻辑多、场景之间存在差异，共性个性逻辑耦合</strong></p>\n<p>我们可以明显地识别某一类场景的逻辑是存在共性的，比如团单相关的展示场景。直观可以看出基本上都是展示团单维度的信息，但这只是表象。实际上在模块的生成过程中存在诸多的差异，比如以下两种差异：</p>\n<ul>\n<li><p><strong>字段拼接逻辑差异</strong>：比如以上图中两个团购货架的团购标题为例，同样是标题，在丽人团购货架中的展示规则是：<strong>[类型] + 团购标题</strong>，而在足疗团购货架的展示规则是：<strong>团购标题</strong>。</p>\n</li>\n<li><p><strong>排序过滤逻辑差异</strong>：比如同样是团单列表，A场景按照销量倒排序，B场景按照价格排序，不同场景的排序逻辑不同。</p>\n</li>\n</ul>\n<p>诸如此类的<strong>展示逻辑</strong>的差异性还有很多。类似的场景实际上在内部存在很多差异的逻辑，后端如何应对这种差异性是一个难题，下面是最常见的一种写法，通过读取具体的条件字段来做判断实现逻辑路由，如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(category == <span class=\"string\">&quot;丽人&quot;</span>) &#123;  title = <span class=\"string\">&quot;[&quot;</span> + category + <span class=\"string\">&quot;]&quot;</span> + productTitle;&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (category == <span class=\"string\">&quot;足疗&quot;</span>) &#123;  title = productTitle；&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方案在功能实现方面没有问题，也能够复用共同的逻辑。但是实际上在场景非常多的情况下，将会有非常多的差异性判断逻辑叠加在一起，功能一直会被持续迭代的情况下，可以想象，系统将会变得越来越复杂，越来越难以修改和维护。</p>\n<p><strong>总结</strong>：在BFF这层，不同商品展示场景存在差异。在业务发展初期，系统通过独立建设的方式支持业务快速试错，在这种情况下，业务差异性带来的问题不明显。而随着业务的不断发展，需要搭建及运营的场景越来越多，呈规模化趋势。此时，业务对技术效率提出了更高的要求。<strong>在这种场景多、场景间存在差异的背景下，如何满足场景拓展效率同时能够控制系统的复杂性，就是我们业务场景中面临的核心问题</strong>。</p>\n<h2 id=\"3-BFF应用模式分析\"><a href=\"#3-BFF应用模式分析\" class=\"headerlink\" title=\"3 BFF应用模式分析\"></a>3 BFF应用模式分析</h2><p>目前，业界针对此类的解决方案主要有两种模式，一种是后端BFF模式；另一种是前端BFF模式。</p>\n<h3 id=\"3-1-后端BFF模式\"><a href=\"#3-1-后端BFF模式\" class=\"headerlink\" title=\"3.1 后端BFF模式\"></a>3.1 后端BFF模式</h3><p>后端BFF模式指的是BFF由后端同学负责，这种模式目前最广泛的实践是基于GraphQL搭建的后端BFF方案，具体是：后端将展示字段封装成展示服务，通过GraphQL编排之后暴露给前端使用。如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9186b94e756d77bc0b098a1807e44e5a.png\"></p>\n<p>图3 后端BFF模式</p>\n<p>这种模式最大的特性和优势是，当展示字段已经存在的情况下，后端不需要关心前端差异性需求，按需查询的能力由GraphQL支持。这个特性可以很好地应对不同场景存在展示字段差异性这个问题，前端直接基于GraphQL按需查询数据即可，后端不需要变更。同时，借助GraphQL的编排和聚合查询能力，后端可以将逻辑分解在不同的展示服务中，因此在一定程度上能够化解BFF这层的复杂性。</p>\n<p>但是基于这种模式，仍然存在几个问题：展示服务颗粒度问题、数据图划分问题以及字段扩散问题，下图是基于当前模式的具体案例：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8dd8ffdccae5273f1c723e7bba3e4e5a.png\"></p>\n<p>图4 后端BFF模式（案例）</p>\n<p><strong>1）展示服务颗粒度设计问题</strong></p>\n<p>这种方案要求展示逻辑和取数逻辑封装在一个模块中，形成一个展示服务（Presentation Service），如上图所示。而实际上展示逻辑和取数逻辑是多对多的关系，还是以前文提到的例子说明：</p>\n<blockquote>\n<p><strong>背景</strong>：有两个展示服务，分别封装了商品标题和商品标签的查询能力。</p>\n<p><strong>情景</strong>：此时PM提了一个需求，希望商品在某个场景的标题以“[类型]+商品标题”的形式展示，此时商品标题的拼接依赖类型数据，而此时类型数据商品标签展示服务中已经调用了。</p>\n<p><strong>问题</strong>：商品标题展示服务自己调用类型数据还是将两个展示服务合并到一起？</p>\n</blockquote>\n<p>以上描述的问题的是展示服务颗粒度把控的问题，我们可以怀疑上述的示例是不是因为展示服务的颗粒度过小？那么反过来看一看，如果将两个服务合并到一起，那么势必又会存在冗余。这是展示服务设计的难点，<strong>核心原因在于，展示逻辑和取数逻辑本身是多对多的关系，结果却被设计放在了一起</strong>。</p>\n<p><strong>2）数据图划分问题</strong></p>\n<p>通过GraphQL将多个展示服务的数据聚合到一张图（GraphQL Schema）中，形成一个数据视图，需要数据的时候只要数据在图中，就可以基于Query按需查询。那么问题来了，这个图应该怎么组织？是一张图还是多张图？图过大的话，势必带来复杂的数据关系维护问题，图过小则将会降低方案本身的价值。</p>\n<p><strong>3）展示服务内部复杂性 + 模型扩散问题</strong></p>\n<p>上文提到过一个商品标题的展示存在不同拼接逻辑的情况，在商品展示场景，这种逻辑特别普遍。比如同样是价格，A行业展示优惠后价格，B行业展示优惠前价格；同样是标签位置，C行业展示服务时长，而D行业展示商品特性等。</p>\n<p>那么问题来了，展示模型如何设计？以标题字段为例，是在展示模型上放个<code>title</code>字段就可以，还是分别放个<code>title</code>和<code>titleWithCategory</code>？如果是前者那么服务内部必然会存在<code>if…else…</code>这种逻辑，用于区分<code>title</code>的拼接方式，这同样会导致展示服务内部的复杂性。如果是多个字段，那么可以想象，展示服务的模型字段也将会不断扩散。</p>\n<p><strong>总结</strong>：后端BFF模式能够在一定程度上化解后端逻辑的复杂性，同时提供一个展示字段的复用机制。但是仍然存在未决问题，如展示服务的颗粒度设计问题，数据图的划分问题，以及展示服务内部的复杂性和字段扩散问题。目前这种模式实践的代表有Facebook、爱彼迎、eBay、爱奇艺、携程、去哪儿等等。</p>\n<h3 id=\"3-2-前端BFF模式\"><a href=\"#3-2-前端BFF模式\" class=\"headerlink\" title=\"3.2 前端BFF模式\"></a>3.2 前端BFF模式</h3><p>前端BFF模式在Sam Newman的文章中的”And Autonomy”部分有特别的介绍，指的是BFF本身由前端团队自己负责，如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/94d1b0ff6f68b252711f342b3b0fd0ae.png\"></p>\n<p>图5 前端BFF模式</p>\n<p>这种模式的理念是，本来能一个团队交付的需求，没必要拆成两个团队，两个团队本身带来较大的沟通协作成本。本质上，也是一种将“敌我矛盾”转化为“人民内部矛盾”的思路。前端完全接手BFF的开发工作，实现数据查询的自给自足，大大减少了前后端的协作成本。但是这种模式没有提到我们关心的一些核心问题，如：复杂性如何应对、差异性如何应对、展示模型如何设计等等问题。除此之外，这种模式也存在一些前提条件及弊端，比如较为完备的前端基础设施；前端不仅仅需要关心渲染、还需要了解业务逻辑等。</p>\n<p><strong>总结</strong>：前端BFF模式通过前端自主查询和使用数据，从而达到降低跨团队协作的成本，提升BFF研发效率的效果。目前这种模式的实践代表是阿里巴巴。</p>\n<h2 id=\"4-基于GraphQL及元数据的信息聚合架构设计\"><a href=\"#4-基于GraphQL及元数据的信息聚合架构设计\" class=\"headerlink\" title=\"4 基于GraphQL及元数据的信息聚合架构设计\"></a>4 基于GraphQL及元数据的信息聚合架构设计</h2><h3 id=\"4-1-整体思路\"><a href=\"#4-1-整体思路\" class=\"headerlink\" title=\"4.1 整体思路\"></a>4.1 整体思路</h3><p>通过对后端BFF和前端BFF两种模式的分析，我们最终选择后端BFF模式，前端BFF这个方案对目前的研发模式影响较大，不仅需要大量的前端资源，而且需要建设完善的前端基础设施，方案实施成本比较高昂。</p>\n<p>前文提到的后端GraphQL BFF模式代入我们的具体场景虽然存在一些问题，但是总体有非常大的参考价值，比如展示字段的复用思路、数据的按需查询思路等等。在商品展示场景中，<strong>有80%的工作集中在数据的聚合和集成部分</strong>，并且这部分具有很强的复用价值，因此信息的查询和聚合是我们面临的主要矛盾。因此，我们的思路是：<strong>基于GraphQL+后端BFF方案改进，实现取数逻辑和展示逻辑的可沉淀、可组合、可复用</strong>，整体架构如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/21ffacbebfc1c0c59f6a6f1f421e55ac.png\"></p>\n<p>图6 基于GraphQL BFF的改进思路</p>\n<p>从上图可看出，与传统GraphQL BFF方案最大的差别在于我们将GraphQL下放至数据聚合部分，由于数据来源于商品领域，领域是相对稳定的，因此数据图规模可控且相对稳定。除此之外，整体架构的核心设计还包括以下三个方面：1）取数展示分离；2）查询模型归一；3）元数据驱动架构。</p>\n<p>我们通过取数展示分离解决展示服务颗粒度问题，同时使得展示逻辑和取数逻辑可沉淀、可复用；通过查询模型归一化设计解决展示字段扩散的问题；通过元数据驱动架构实现能力的可视化，业务组件编排执行的自动化，这能够让业务开发同学聚焦于业务逻辑的本身。下面将针对这三个部分逐一展开介绍。</p>\n<h3 id=\"4-2-核心设计\"><a href=\"#4-2-核心设计\" class=\"headerlink\" title=\"4.2 核心设计\"></a>4.2 核心设计</h3><p>4.2.1 取数展示分离</p>\n<p>上文提到，在商品展示场景中，展示逻辑和取数逻辑是多对多的关系，而传统的基于GraphQL的后端BFF实践方案把它们封装在一起，这是导致展示服务颗粒度难以设计的根本原因。思考一下取数逻辑和展示逻辑的关注点是什么？取数逻辑关注怎么查询和聚合数据，而展示逻辑关注怎么加工生成需要的展示字段，它们的关注点不一样，放在一起也会增加展示服务的复杂性。因此，我们的思路是将取数逻辑和展示逻辑分离开来，单独封装成逻辑单元，分别叫取数单元和展示单元。在取数展示分离之后，GraphQL也随之下沉，用于实现数据的按需聚合，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eeb60decd04420062983c3711804700e.png\"></p>\n<p>图7 取数展示分离+元数据描述</p>\n<p>那么取数和展示逻辑的封装颗粒度是怎么样的呢？不能太小也不能太大，在颗粒度的设计上，我们有两个核心考量：1）<strong>复用</strong>，展示逻辑和取数逻辑在商品展示场景中，都是可以被复用的资产，我们希望它们能沉淀下来，被单独按需使用；2）<strong>简单</strong>，保持简单，这样容易修改和维护。基于这两点考虑，颗粒度的定义如下：</p>\n<ul>\n<li><p><strong>取数单元</strong>：尽量只封装1个外部数据源，同时负责对外部数据源返回的模型进行简化，这部分生成的模型我们称之为取数模型。</p>\n</li>\n<li><p><strong>展示单元</strong>：尽量只封装1个展示字段的加工逻辑。</p>\n</li>\n</ul>\n<p>分开的好处是简单且可被组合使用，那么具体如何实现组合使用呢？我们的思路是通过元数据来描述它们之间的关系，基于元数据由统一的执行框架来关联运行，具体设计下文会展开介绍。通过取数和展示的分离，元数据的关联和运行时的组合调用，可以保持逻辑单元的简单，同时又满足复用诉求，这也很好地解决了传统方案中存在的<strong>展示服务的颗粒度问题</strong>。</p>\n<p>4.2.2 查询模型归一</p>\n<p>展示单元的加工结果通过什么样的接口透出呢？接下来，我们介绍一下查询接口设计的问题。</p>\n<p><strong>1）查询接口设计的难点</strong></p>\n<p>常见查询接口的设计模式有以下两种：</p>\n<ul>\n<li><p><strong>强类型模式</strong>：强类型模式指的是查询接口返回的是POJO对象，每一个查询结果对应POJO中的一个明确的具有特定业务含义的字段。</p>\n</li>\n<li><p><strong>弱类型模式</strong>：弱类型模式指的是查询结果以K-V或JSON模式返回，没有明确的静态字段。</p>\n</li>\n</ul>\n<p>以上两种模式在业界都有广泛应用，且它们都有明确的优缺点。强类型模式对开发者友好，但是业务是不断迭代的，与此同时，系统沉淀的展示单元会不断丰富，在这样的情况下，接口返回的DTO中的字段将会愈来愈多，每次新功能的支持，都要伴随着接口查询模型的修改，JAR版本的升级。而JAR的升级涉及数据提供方和数据消费两方，存在明显效率问题。另外，可以想象，查询模型的不断迭代，最终将会包括成百上千个字段，难以维护。</p>\n<p>而弱类型模式恰好可以弥补这一缺点，但是弱类型模式对于开发者来说非常不友好，接口查询模型中有哪些查询结果对于开发者来说在开发的过程中完全没有感觉，但是程序员的天性就是喜欢通过代码去理解逻辑，而非配置和文档。其实，这两种接口设计模式都存在着一个共性问题——缺少抽象，下面两节，我们将介绍在接口返回的查询模型设计方面的抽象思路及框架能力支持。</p>\n<p><strong>2）查询模型归一化设计</strong></p>\n<p>回到商品展示场景中，一个展示字段有多种不同的实现，如商品标题的两种不同实现方式：1）商品标题；2）[类目]+商品标题。商品标题和这两种展示逻辑的关系本质上是一种抽象-具体的关系。识别这个关键点，思路就明了了，我们的思路是对查询模型做抽象。查询模型上都是抽象的展示字段，一个展示字段对应多个展示单元，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d6223539b474bfdd2a7673c39752bcee.png\"></p>\n<p>图8 查询模型归一化 + 元数据描述</p>\n<p>在实现层面，同样基于元数据描述展示字段和展示单元之间的关系，基于以上的设计思路，可以在一定程度上减缓模型的扩散，但是还不能避免扩展。比如除了价格、库存、销量等每个商品都有的标准属性之外，不同的商品类型一般还会有这个商品特有的属性。比如密室主题拼场商品才有“几人拼”这样的描述属性，这种字段本身抽象的意义不大，且放在商品查询模型中作为一个单独的字段会导致模型扩张，针对这类问题，我们的解决思路是引入扩展属性，扩展属性专门承载这类非标准的字段。通过标准字段 + 扩展属性的方式建立查询模型，能够较好地解决<strong>字段扩散</strong>的问题。</p>\n<p>4.2.3 元数据驱动架构</p>\n<p>到目前为止，我们定义了如何分解<strong>业务逻辑单元</strong>以及如何设计<strong>查询模型</strong>，并提到用元数据描述它们之间的关系。基于以上定义实现的业务逻辑及模型，都具备很强的复用价值，可以作为业务资产沉淀下来。那么，为什么用元数据描述业务功能及模型之间的关系呢？</p>\n<p>我们引入元数据描述主要有两个目的：1）代码逻辑的自动编排，通过元数据描述业务逻辑之间的关联关系，运行时可以自动基于元数据实现逻辑之间的关联执行，从而可以消除大量的人工逻辑编排代码；2）业务功能的可视化，元数据本身描述了业务逻辑所提供的功能，如下面两个示例：</p>\n<blockquote>\n<p>团单基础售价字符串展示，例：30元。 </p>\n<p>团单市场价展示字段，例：100元。</p>\n</blockquote>\n<p>这些元数据上报到系统中，可以用于展示当前系统所提供的功能。通过元数据描述组件及组件之间关联关系，通过框架解析元数据自动进行业务组件的调用执行，形成了如下的元数据架构：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2acb91a2cdbee4b5eccf5309f5a295e1.png\"></p>\n<p>图9 元数据驱动架构</p>\n<p>整体架构由三个核心部分组成：</p>\n<ul>\n<li><p><strong>业务能力</strong>：标准的业务逻辑单元，包括取数单元、展示单元和查询模型，这些都是关键的可复用资产。</p>\n</li>\n<li><p><strong>元数据</strong>：描述业务功能（如：展示单元、取数单元）以及业务功能之间的关联关系，比如展示单元依赖的数据，展示单元映射的展示字段等。</p>\n</li>\n<li><p><strong>执行引擎</strong>：负责消费元数据，并基于元数据对业务逻辑进行调度和执行。</p>\n</li>\n</ul>\n<p>通过以上三个部分有机的组合在一起，形成了一个元数据驱动风格的架构。</p>\n<h2 id=\"5-针对GraphQL的优化实践\"><a href=\"#5-针对GraphQL的优化实践\" class=\"headerlink\" title=\"5 针对GraphQL的优化实践\"></a>5 针对GraphQL的优化实践</h2><h3 id=\"5-1-使用简化\"><a href=\"#5-1-使用简化\" class=\"headerlink\" title=\"5.1 使用简化\"></a>5.1 使用简化</h3><p><strong>1）GraphQL直接使用问题</strong></p>\n<p>引入GraphQL，会引入一些额外的复杂性，比如会涉及到GraphQL带来的一些概念如：Schema、RuntimeWiring，下面是基于GraphQL原生Java框架的开发过程：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1897c77958b24b0253e5968bb06dd147.png\"></p>\n<p>图10 原生GraphQL使用流程</p>\n<p>这些概念对于未接触过GraphQL的同学来说，增加了学习和理解的成本，而这些概念和业务领域通常没有什么关系。而我们仅仅希望使用GraphQL的按需查询特性，却被GraphQL本身拖累了，业务开发同学的关注点应该聚焦在业务逻辑本身才对，这个问题如何解决呢？</p>\n<p>著名计算机科学家David Wheeler说了一句名言，”All problems in computer science can be solved by another level of indirection”。没有加一层解决不了的问题，本质上是需要有人来对这事负责，因此我们在原生GraphQL之上增加了一层执行引擎层来解决这些问题，目标是屏蔽GraphQL的复杂性，让开发人员只需要关注业务逻辑。</p>\n<p><strong>2）取数接口标准化</strong></p>\n<p>首先要简化数据的接入，原生的<code>DataFetcher</code>和<code>DataLoader</code>都是处在一个比较高的抽象层次，缺少业务语义，而在查询场景，我们能够归纳出，所有的查询都属于以下三种模式：</p>\n<ul>\n<li><p><strong>1查1</strong>：根据一个条件查询一个结果。</p>\n</li>\n<li><p><strong>1查N</strong>：根据一个条件查询多个结果。</p>\n</li>\n<li><p><strong>N查N</strong>：一查一或一查多的批量版本。</p>\n</li>\n</ul>\n<p>由此，我们对查询接口进行了标准化，业务开发同学基于场景判断是那种，按需选择使用即可，取数接口标准化设计如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/71923ee77268f32e6ce9789d1b8dfc9f.png\"></p>\n<p>图11 查询接口标准化</p>\n<p>业务开发同学按需选择所需要使用的取数器，通过泛型指定结果类型，1查1和1查N比较简单，N查N我们对其定义为批量查询接口，用于满足”N+1”的场景，其中<code>batchSize</code>字段用于指定分片大小，<code>batchKey</code>用于指定查询Key，业务开发只需要指定参数，其他的框架会自动处理。除此之外，我们还约束了返回结果必须是<code>CompleteFuture</code>，用于满足聚合查询的全链路异步化。</p>\n<p><strong>3）聚合编排自动化</strong></p>\n<p>取数接口标准化使得数据源的语义更清晰，开发过程按需选择即可，简化了业务的开发。但是此时业务开发同学写好<code>Fetcher</code>之后，还需要去另一个地方去写<code>Schema</code>，而且写完<code>Schema</code>还要再写<code>Schema</code>和<code>Fetcher</code>的映射关系，业务开发更享受写代码的过程，不太愿意写完代码还要去另外一个地方取配置，并且同时维护代码和对应配置也提高了出错的可能性，能否将这些冗杂的步骤移除掉？</p>\n<p><code>Schema</code>和<code>RuntimeWiring</code>本质上是想描述某些信息，如果这些信息换一种方式描述是不是也可以。我们的优化思路是，在业务开发过程中标记注解，通过注解标注的元数据描述这些信息，其他的事情交给框架来做。解决思路示意图如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a1adc237e833aad26cf198c0c5dd6bc2.png\"></p>\n<p>图12 注解元数据描述Schema和RuntimeWiring</p>\n<h3 id=\"5-2-性能优化\"><a href=\"#5-2-性能优化\" class=\"headerlink\" title=\"5.2 性能优化\"></a>5.2 性能优化</h3><p>5.2.1 GraphQL性能问题</p>\n<p>虽然GraphQL已经开源了，但是Facebook只开源了相关标准，并没有给出解决方案。GraphQL-Java框架是由社区贡献的，基于开源的GraphQL-Java作为按需查询引擎的方案，我们发现了GraphQL应用方面的一些问题，这些问题有部分是由于使用姿势不当所导致的，也有部分是GraphQL本身实现的问题，比如我们遇到的几个典型的问题：</p>\n<ul>\n<li><p>耗CPU的查询解析，包括<code>Schema</code>的解析和<code>Query</code>的解析。</p>\n</li>\n<li><p>当查询模型比较复杂特别是存在大列表时候的延时问题。</p>\n</li>\n<li><p>基于反射的模型转换CPU消耗问题。</p>\n</li>\n<li><p><code>DataLoader</code>的层级调度问题。</p>\n</li>\n</ul>\n<p>于是，我们对使用方式和框架做了一些优化与改造，以解决上面列举的问题。本章着重介绍我们在GraphQL-Java方面的优化和改造思路。</p>\n<p>5.2.2 GraphQL编译优化</p>\n<p><strong>1）GraphQL语言原理概述</strong></p>\n<p>GraphQL是一种查询语言，目的是基于直观和灵活的语法构建客户端应用程序，用于描述其数据需求和交互。GraphQL属于一种领域特定语言（DSL），而我们所使用的GraphQL-Java客户端在语言编译层面是基于ANTLR 4实现的，ANTLR 4是一种基于Java编写的语言定义和识别工具，Antlr是一种元语言（Meta-Language），它们的关系如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/780967a52c449d978d352760694363ae.png\"></p>\n<p>图13 GraphQL语言基本原理示意图</p>\n<p>GraphQL执行引擎所接受的<code>Schema</code>及<code>Query</code>都是基于GraphQL定义的语言所表达的内容，GraphQL执行引擎不能直接理解GraphQL，在执行之前必须由GraphQL编译器翻译成GraphQL执行引擎可理解的文档对象。而GraphQL编译器是基于Java的，经验表明在大流量场景实时解释的情况下，这部分代码将会成为CPU热点，而且还占用响应延迟，<code>Schema</code>或<code>Query</code>越复杂，性能损耗越明显。</p>\n<p><strong>2）Schema及Query编译缓存</strong></p>\n<p><code>Schema</code>表达的是数据视图和取数模型同构，相对稳定，个数也不多，在我们的业务场景一个服务也就一个。因此，我们的做法是在启动的时候就将基于<code>Schema</code>构造的GraphQL执行引擎构造好，作为单例缓存下来。对于<code>Query</code>来说，每个场景的<code>Query</code>有些差异，因此<code>Query</code>的解析结果不能作为单例，我们的做法是实现<code>PreparsedDocumentProvider</code>接口，基于<code>Query</code>作为Key将<code>Query</code>编译结果缓存下来。如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ddbeff75483900054a0216acf3a52f2d.png\"></p>\n<p>图14 Query缓存实现示意图</p>\n<p>5.2.3 GraphQL执行引擎优化</p>\n<p><strong>1）GraphQL执行机制及问题</strong></p>\n<p>我们先一起了解一下GraphQL-Java执行引擎的运行机制是怎么样的。假设在执行策略上我们选取的是<code>AsyncExecutionStrategy</code>，来看看GraphQL执行引擎的执行过程：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d792881807f277fcc7d02794f645a8b0.png\"></p>\n<p>图15 GraphQL执行引擎执行过程</p>\n<p>以上时序图做了些简化，去除了一些与重点无关的信息，<code>AsyncExecutionStrategy</code>的<code>execute</code>方法是对象执行策略的异步化模式实现，是查询执行的起点，也是根节点查询的入口，<code>AsyncExecutionStrategy</code>对对象的多个字段的查询逻辑，采取的是循环+异步化的实现方式，我们从<code>AsyncExecutionStrategy</code>的<code>execute</code>方法触发，理解GraphQL查询过程如下：</p>\n<ol>\n<li><p> 调用当前字段所绑定的<code>DataFetcher</code>的<code>get</code>方法，如果字段没有绑定<code>DataFetcher</code>，则通过默认的<code>PropertyDataFetcher</code>查询字段，<code>PropertyDataFetcher</code>的实现是基于反射从源对象中读取查询字段。</p>\n</li>\n<li><p> 将从<code>DataFetcher</code>查询得到结果包装成<code>CompletableFuture</code>，如果结果本身是<code>CompletableFuture</code>，那么不会包装。</p>\n</li>\n<li><p> 结果<code>CompletableFuture</code>完成之后，调用<code>completeValue</code>，基于结果类型分别处理。</p>\n</li>\n</ol>\n<ul>\n<li><p>如果查询结果是列表类型，那么会对列表类型进行遍历，针对每个元素在递归执行<code>completeValue</code>。</p>\n</li>\n<li><p>如果结果类型是对象类型，那么会对对象执行<code>execute</code>，又回到了起点，也就是<code>AsyncExecutionStrategy的execute</code>。</p>\n</li>\n</ul>\n<p>以上是GraphQL的执行过程，这个过程有什么问题呢？下面基于图上的标记顺序一起看看GraphQL在我们的业务场景中应用和实践所遇到的问题，这些问题不代表在其他场景也是问题，仅供参考：</p>\n<p><strong>问题1</strong>：<code>PropertyDataFetcher</code>CPU热点问题，<code>PropertyDataFetcher</code>在整个查询过程中属于热点代码，而其本身的实现也有一些优化空间，在运行时<code>PropertyDataFetcher</code>的执行会成为CPU热点。（具体问题可参考GitHub上的commit和Conversion：<a href=\"https://github.com/graphql-java/graphql-java/pull/1815\">https://github.com/graphql-java/graphql-java/pull/1815</a>）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c3a377dc5b480b403a67a2f8cb5cd0aa.png\">图16 PropertyDataFetcher成为CPU热点</p>\n<p><strong>问题2</strong>：列表的计算耗时问题，列表计算是循环的，对于查询结果中存在大列表的场景，此时循环会造成整体查询明显的延迟。我们举个具体的例子，假设查询结果中存在一个列表大小是1000，每个元素的处理是0.01ms，那么总体耗时就是10ms，基于GraphQL的查机制，这个10ms会阻塞整个链路。</p>\n<p><strong>2）类型转换优化</strong></p>\n<p>通过GraphQL查询引擎拿到的GraphQL模型，和业务实现的<code>DataFetcher</code>返回的取数模型是同构，但是所有字段的类型都会被转换成GraphQL内部类型。<code>PropertyDataFetcher</code>之所以会成为CPU热点，问题就在于这个模型转换过程，业务定义的模型到GraphQL类型模型转换过程示意图如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eda15725d57060f766fa2800784e4c3f.png\"></p>\n<p>图17 业务模型到GraphQL模型转换示意图</p>\n<p>当查询结果模型中的字段非常多的时候，比如上万个，意味着每次查询有上万次的<code>PropertyDataFetcher</code>操作，实际就反映到了CPU热点问题上，这个问题我们的解决思路是保持原有业务模型不变，将非<code>PropertyDataFetcher</code>查询的结果反过来填充到业务模型上。如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/00312b3068556d24deb0f880e5c2103a.png\"></p>\n<p>图18 查询结果模型反向填充示意图</p>\n<p>基于这个思路，我们通过GraphQL执行引擎拿到的结果就是业务<code>Fetcher</code>返回的对象模型，这样不仅仅解决了因字段反射转换带来的CPU热点问题，同时对于业务开发来说增加了友好性。因为GraphQL模型类似JSON模型，这种模型是缺少业务类型的，业务开发直接使用起来非常麻烦。以上优化在一个场景上试点测试，结果显示该场景的平均响应时间缩短1.457ms，平均99线缩短5.82ms，平均CPU利用率降低约12%。</p>\n<p><strong>3）列表计算优化</strong></p>\n<p>当列表元素比较多的时候，默认的单线程遍历列表元素计算的方式所带来的延迟消耗非常明显，对于响应时间比较敏感的场景这个延迟优化很有必要。针对这个问题我们的解决思路是充分利用CPU多核心计算的能力，将列表拆分成任务，通过多线程并行执行，实现机制如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0858f511ea09ad5454793bd7ec11760e.png\"></p>\n<p>图19 列表遍历多核计算思路</p>\n<p>5.2.4 GraphQL-DataLoader调度优化</p>\n<p><strong>1）DataLoader基本原理</strong></p>\n<p>先简单介绍一下DataLoader的基本原理，DataLoader有两个方法，一个是<code>load</code>，一个是<code>dispatch</code>，在解决N+1问题的场景中，DataLoader是这么用的：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a41035acc9fa1a6bcafc9ebf069b1071.png\"></p>\n<p>图20 DataLoader基本原理</p>\n<p>整体分为2个阶段，第一个阶段调用<code>load</code>，调用N次，第二个阶段调用<code>dispatch</code>，调用<code>dispatch</code>的时候会真正的执行数据查询，从而达到批量查询+分片的效果。</p>\n<p><strong>2）DataLoader调度问题</strong></p>\n<p>GraphQL-Java对DataLoader的集成支持的实现在<code>FieldLevelTrackingApproach</code>中，<code>FieldLevelTrackingApproach</code>的实现会存在怎样的问题呢？下面基于一张图表达原生DataLoader调度机制所产生的问题：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7b544ddbe308313dfbb784d2cb3d4e50.png\"></p>\n<p>图21 GraphQL-Java对DataLoader调度存在的问题</p>\n<p>问题很明显，基于<code>FieldLevelTrackingApproach</code>的实现，下一层级的<code>DataLoader</code>的<code>dispatch</code>是需要等到本层级的结果都回来之后才发出。基于这样的实现，查询总耗时的计算公式等于：TOTAL = MAX（Level  1 Latency）+ MAX（Level 2 Latency）+ MAX（Level 3 Latency）+ … ，<strong>总查询耗时等于每层耗时最大的值加起来，而实际上如果链路编排由业务开发同学自己来写的话，理论上的效果是总耗时等于所有链路最长的那个链路所耗的时间</strong>，这个才是合理的。而<code>FieldLevelTrackingApproach</code>的实现所表现出来的结果是反常识的，至于为什么这么实现，目前我们理解可能是设计者基于简单和通用方面的考虑。</p>\n<p>问题在于以上的实现在有些业务场景下是不能接受的，比如我们的列表场景的响应时间约束一共也就不到100ms，其中几十ms是因为这个原因搭进去的。针对这个问题的解决思路，一种方式是对于响应时间要求特别高的场景独立编排，不采用GraphQL；另一种方式是在GraphQL层面解决这个问题，保持架构的统一性。接下来，介绍一下我们是如何扩展GraphQL-Java执行引擎来解决这个问题的。</p>\n<p><strong>3）DataLoader调度优化</strong></p>\n<p>针对DataLoader调度的性能问题，<strong>我们的解决思路是在最后一次调用某个</strong><strong><code>DataLoader</code>的<code>load</code>之后，立即调用<code>dispatch</code>方法发出查询请求</strong>，问题是我们怎么知道哪一次的load是最后一次load呢？这个问题也是解决DataLoader调度问题的难点，以下举个例子来解释我们的解决思路：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bd9ac368a374d5463c9c5ea6e41bd720.png\"></p>\n<p>图22 查询对象结果示意图</p>\n<p>假设我们查询到的模型结构如下：根节点是<code>Query</code>下的字段，字段名叫<code>subjects</code>，<code>subject</code>引用的是个列表，<code>subject</code>下有两个元素，都是<code>ModelA</code>的对象实例，<code>ModelA</code>有两个字段，<code>fieldA</code>和<code>fieldB</code>，<code>subjects[0]</code>的<code>fieldA</code>关联是<code>ModelB</code>的一个实例，<code>subjects[0]</code>的<code>fieldB</code>关联多个<code>ModelC</code>实例。</p>\n<p>为了方便理解，我们定义一些概念，字段、字段实例、字段实例执行完、字段实例值大小等等：</p>\n<ul>\n<li><p><strong>字段</strong>：具有唯一路径，是静态的，和运行时对象大小没有关系，如：<code>subjects</code>和<code>subjects/fieldA</code>。</p>\n</li>\n<li><p><strong>字段实例</strong>：字段的实例，具有唯一路径，是动态的，跟运行时对象大小有关系，如：<code>subjects[0]/fieldA</code>和<code>subjects[1]/fieldA</code>是字段<code>subjects/fieldA</code>的实例。</p>\n</li>\n<li><p><strong>字段实例执行完</strong>：字段实例关联的对象实例都被GraphQL执行完了。</p>\n</li>\n<li><p><strong>字段实例值大小</strong>：字段实例引用对象实例的个数，如以上示例，<code>subjects[0]/fieldA</code>字段实例值大小是1，<code>subjects[0]/fieldB</code>字段实例值大小是3。</p>\n</li>\n</ul>\n<p>除了以上定义之外，我们的业务场景还满足以下条件：</p>\n<ul>\n<li><p>只有1个根节点，且根节点是列表。</p>\n</li>\n<li><p><code>DataLoader</code>一定属于某个字段，某个字段下的<code>DataLoader</code>应该被执行次数等于其下的对象实例个数。</p>\n</li>\n</ul>\n<p>基于以上信息，我们可以得出以下问题分析：</p>\n<ul>\n<li><p>在执行字段实例的时候，我们可以知道当前字段实例的大小，字段实例的大小等于字段关联<code>DataLoader</code>在当前实例下需要执行<code>load</code>的次数，因此在执行<code>load</code>之后，我们可以知道当前对象实例是否是其所在字段实例的最后一个对象。</p>\n</li>\n<li><p>一个对象的实例可能会挂在不同的字段实例下，所以仅当当前对象实例是其所在字段实例的最后一个对象实例的时候，不代表当前对象实例是所有对象实例中的最后一个，当且仅当对象实例所在节点实例是节点的最后一个实例的时候才成立。</p>\n</li>\n<li><p>我们可从字段实例大小推算字段实例的个数，比如我们知道<code>subjects</code>的大小是2，那么就知道<code>subjects</code>字段有两个字段实例<code>subjects[0]</code>和<code>subjects[1]</code>，也就知道字段<code>subjects/fieldA</code>有两个实例，<code>subjects[0]/fieldA</code>和<code>subjects[1]/fieldA</code>，因此我们从根节点可以往下推断出某个字段实例是否执行完。</p>\n</li>\n</ul>\n<p>通过以上分析，我们可以得出，一个对象执行完的条件是其所在的字段实例以及其所在的字段所有的父亲字段实例都执行完，且当前执行的对象实例是其所在字段实例的最后一个对象实例的时候。</p>\n<p>基于这个判断逻辑，我们的实现方案是在每次调用完<code>DataFetcher</code>的时候，判断是否需要发起<code>dispatch</code>，如果是则发起。另外，以上时机和条件存在漏发<code>dispatch</code>的问题，有个特殊情况，当当前对象实例不是最后一个，但是剩下的对象大小都为0的时候，那么就永远不会触发当前对象关联的<code>DataLoader</code>的<code>load</code>了，所以在对象大小为0的时候，需要额外再判断一次。</p>\n<p>根据以上的逻辑分析，我们实现了<code>DataLoader</code>调用链路的最优化，达到理论最优的效果。</p>\n<h2 id=\"6-新架构对研发模式的影响\"><a href=\"#6-新架构对研发模式的影响\" class=\"headerlink\" title=\"6 新架构对研发模式的影响\"></a>6 新架构对研发模式的影响</h2><p>生产力决定生产关系，元数据驱动信息聚合架构是展示场景搭建的核心生产力，而业务开发模式和过程是生产关系，因此也会随之改变。下面我们将会从开发模式和流程两个角度来介绍新架构对研发带来的影响。</p>\n<h3 id=\"6-1-聚焦业务的开发模式\"><a href=\"#6-1-聚焦业务的开发模式\" class=\"headerlink\" title=\"6.1 聚焦业务的开发模式\"></a>6.1 聚焦业务的开发模式</h3><p>新架构提供了一套基于业务抽象出的标准化代码分解约束。以前开发同学对系统的理解很可能就是“查一查服务，把数据粘在一起”，而现在，研发同学对于业务的理解及代码分解思路将会是一致的。比如展示单元代表的是展示逻辑，取数单元代表的是取数逻辑。同时，很多冗杂且容易出错的逻辑已经被框架屏蔽掉了，研发同学能够有更多的精力聚焦于业务逻辑本身，比如：业务数据的理解和封装，展示逻辑的理解和编写，以及查询模型的抽象和建设。如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ef9c7ad70499f66a090c1a53e358176d.png\"></p>\n<p>图23 业务开发聚焦业务本身</p>\n<h3 id=\"6-2-研发流程升级\"><a href=\"#6-2-研发流程升级\" class=\"headerlink\" title=\"6.2 研发流程升级\"></a>6.2 研发流程升级</h3><p>新架构不仅仅影响了研发的代码编写，同时也影响着研发流程的改进，基于元数据架构实现的可视化及配置化能力，现有研发流程和之前研发流程相比有了明显的区别，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3b542c0413452e6b5f48505faa1c2d4f.png\"></p>\n<p>图24 基于开发框架搭建展示场景前后研发流程对比</p>\n<p>以前是“一杆子捅到底”的开发模式，每个展示场景的搭建需要经历过从接口的沟通到API的开发整个过程，基于新架构之后，系统自动具备多层复用及可视化、配置化能力。</p>\n<p><strong>情况一</strong>：这是最好的情况，此时取数功能和展示功能都已经被沉淀下来，研发同学需要做的只是创建查询方案，基于运营平台按需选择需要的展示单元，拿着查询方案ID基于查询接口就可以查到需要的展示信息了，可视化、配置化界面如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8472176f0fbaaa163b4534eed899f7d8.png\"></p>\n<p>图25 可视化及文案按需选用</p>\n<p><strong>情况二</strong>：此时可能没有展示功能，但是通过运营平台查看到，数据源已经接入过，那么也不难，只需要基于现有的数据源编写一段加工逻辑即可，这段加工逻辑是非常爽的一段纯逻辑的编写，数据源列表如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cdcff0b999c17ac971ebd80e2842e42a.png\"></p>\n<p>图26 数据源列表可视化</p>\n<p><strong>情况三</strong>：最坏的情况是此时系统不能满足当前的查询能力，这种情况比较少见，因为后端服务是比较稳定的，那么也无需惊慌，只需要按照标准规范将数据源接入进来，然后编写加工逻辑片段即可，之后这些能力是可以被持续复用的。</p>\n<h2 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7 总结\"></a>7 总结</h2><p>商品展示场景的复杂性体现在：场景多、依赖多、逻辑多，以及不同场景之间存在差异。在这样的背景下，如果是业务初期，怎么快怎么来，采用“烟囱式”个性化建设的方式不必有过多的质疑。但是随着业务的不断发展，功能的不断迭代，以及场景的规模化趋势，“烟囱式”个性化建设的弊端会慢慢凸显出来，包括代码复杂度高、缺少能力沉淀等问题。</p>\n<p>本文以基于对美团到店商品展示场景所面临的核心矛盾分析，介绍了：</p>\n<ul>\n<li><p>业界不同的BFF应用模式，以及不同模式的优势和缺点。</p>\n</li>\n<li><p>基于GraphQL BFF模式改进的元数据驱动的架构方案设计。</p>\n</li>\n<li><p>我们在GraphQL实践过程中遇到的问题及解决思路。</p>\n</li>\n<li><p>新架构对研发模式产生的影响呈现。</p>\n</li>\n</ul>\n<p>目前，笔者所在团队负责的核心商品展示场景都已迁入新架构，基于新的研发模式，我们实现了50%以上的展示逻辑复用以及1倍以上的效率提升。希望本文对大家能够有所帮助。</p>\n<h2 id=\"8-参考文献\"><a href=\"#8-参考文献\" class=\"headerlink\" title=\"8 参考文献\"></a>8 参考文献</h2><p>[1]<a href=\"https://samnewman.io/patterns/architectural/bff/\">https://samnewman.io/patterns/architectural/bff/</a></p>\n<p>[2]<a href=\"https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation\">https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation</a></p>\n<p>[3]<a href=\"http://www.woshipm.com/pd/3712746.html\">了解电商后台系统，看这篇就够了</a></p>\n<p>[4]<a href=\"https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6/1212667?fr=aladdin\">框架定义-百度百科</a></p>\n<p>[5]<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA==&chksm=fd54d63aca235f2c5abf8f65b3a0f235b55723d014aa4c7c75c48fcb5ce5c32b14fb43e5b40b&idx=1&mid=2247483947&mpshare=1&scene=21&sn=d1b600e57cca8c7304cca77a693c0b32&srcid=0404dHE42TNCAGO7clq9K2ep#wechat_redirect\">高效研发-闲鱼在数据聚合上的探索与实践</a></p>\n<p>[6] 《系统架构-复杂系统的产品设计与开发》</p>\n<p><strong>阅读更多</strong></p>\n<p>-–</p>\n<p><a href=\"https://t.1yb.co/jo7r\">前端</a>** |<strong><a href=\"https://t.1yb.co/jo7v\"> </a><a href=\"https://t.1yb.co/jsdG\">算法</a></strong> |** <a href=\"https://t.1yb.co/jsWK\">后端</a>** | **<a href=\"https://t.1yb.co/jqRZ\">数据</a></p>\n<p><a href=\"https://t.1yb.co/jo7v\">安全</a>** | <strong><a href=\"https://t.1yb.co/jui4\">Android</a></strong> |** <a href=\"https://t.1yb.co/jtXE\">iOS</a> ** |** <a href=\"https://t.1yb.co/jo7K\">运维</a>** | **<a href=\"https://t.1yb.co/jtsX\">测试</a></p>\n<p>-———  END  -———</p>\n<p><strong>招聘信息</strong></p>\n<p>美团到店综合研发中心长期招聘前端、后端、数据仓库、机器学习/数据挖掘算法工程师，坐标上海，欢迎感兴趣的同学发送简历至：tech@meituan.com（邮件标题注明：美团到店综合研发中心—上海）。</p>\n<p><strong>也许你还想看</strong></p>\n<p>**  | **<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd124aae8a65c3b888df80cc15d2f6dbd25c7e7094f3dc665c8e9079963b709043ac6fe865a7&idx=1&mid=2651755491&scene=21&sn=4ac719deb5781e9060b4d023bc75691f#wechat_redirect\">移动端UI一致性解决方案</a></p>\n<p>**  |** <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd1252888a65db9e9aac10fb930f5ad6a2f62b47b6df868c7cb975ebf613650ad3c4b8ade51e&idx=1&mid=2651753413&scene=21&sn=e987b6a105d65952de35c86e5f19ba03#wechat_redirect\">外卖客户端容器化架构的演进</a></p>\n<p>**  |** <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd12aeee8a6527f8a297d0dc797b81492837019c821898ae21c3e158831aaa7a383d5155ec9b&idx=1&mid=2651748259&scene=21&sn=a7ef0d515e94631c8d86bdbbf81da143#wechat_redirect\">美团外卖iOS多端复用的推动、支撑与思考</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ff5c1ae9c5bc0135299c86b4d6026a6.png\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>GraphQL是Facebook提出的一种数据查询语言，核心特性是数据聚合和按需索取，目前被广泛应用于前后端之间，解决客户端灵活使用数据问题。本文介绍的是GraphQL的另一种实践，我们将GraphQL下沉至后端BFF（Backend For Frontend）层之下，结合元数据技术，实现数据和加工逻辑的按需查询和执行。这样不仅解决了后端BFF层灵活使用数据的问题，这些字段加工逻辑还可以直接复用，大幅度提升了研发的效率。</p>\n<p>本文介绍的实践方案已经在美团部分业务场景中落地，并取得不错效果，希望这些经验能够对大家有帮助。<br>BFF一词来自Sam Newman的一篇博文《<a href=\"https://samnewman.io/patterns/architectural/bff/\">Pattern:Backends For Frontends</a>》，指的是服务于前端的后端。BFF是解决什么问题的呢？据原文描述，随着移动互联网的兴起，原适应于桌面Web的服务端功能希望同时提供给移动App使用，而在这个过程中存在这样的问题：<br>移动App和桌面Web在UI部分存在差异。</p>\n<blockquote>","more":"</blockquote>\n</blockquote>\n<ul>\n<li><p>移动App涉及不同的端，不仅有iOS、还有Android，这些不同端的UI之间存在差异。</p>\n</li>\n<li><p>原有后端功能和桌面Web UI之间已经存在了较大的耦合。</p>\n</li>\n</ul>\n<p>因为端的差异性存在，服务端的功能要针对端的差异进行适配和裁剪，而服务端的业务功能本身是相对单一的，这就产生了一个矛盾——服务端的单一业务功能和端的差异性诉求之间的矛盾。那么这个问题怎么解决呢？这也是文章的副标题所描述的”Single-purpose Edge Services for UIs and external parties”，引入BFF，由BFF来针对多端差异做适配，这也是目前业界广泛使用的一种模式。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f95ef4461eb139612078136232f13a5a.png\"></p>\n<p>图1 BFF示意图</p>\n<p>在实际业务的实践中，导致这种端差异性的原因有很多，有技术的原因，也有业务的原因。比如，用户的客户端是Android还是iOS，是大屏还是小屏，是什么版本。再比如，业务属于哪个行业，产品形态是什么，功能投放在什么场景，面向的用户群体是谁等等。这些因素都会带来面向端的功能逻辑的差异性。</p>\n<p>在这个问题上，笔者所在团队负责的商品展示业务有一定的发言权，同样的商品业务，在C端的展示功能逻辑，深刻受到商品类型、所在行业、交易形态、投放场所、面向群体等因素的影响。同时，面向消费者端的功能频繁迭代的属性，更是加剧并深化了这种矛盾，使其演化成了一种服务端单一稳定与端的差异灵活之间的矛盾，这也是商品展示（商品展示BFF）业务系统存在的必然性原因。本文主要在美团到店商品展示场景的背景下，介绍面临的一些问题及解决思路。</p>\n<h2 id=\"2-BFF背景下的核心矛盾\"><a href=\"#2-BFF背景下的核心矛盾\" class=\"headerlink\" title=\"2 BFF背景下的核心矛盾\"></a>2 BFF背景下的核心矛盾</h2><p>BFF这层的引入是解决服务端单一稳定与端的差异灵活诉求之间的矛盾，这个矛盾并不是不存在，而是转移了。由原来后端和前端之间的矛盾转移成了BFF和前端之间的矛盾。笔者所在团队的主要工作，就是和这种矛盾作斗争。下面以具体的业务场景为例，结合当前的业务特点，说明在BFF的生产模式下，我们所面临的具体问题。下图是两个不同行业的团购货架展示模块，这两个模块我们认为是两个商品的展示场景，它们是两套独立定义的产品逻辑，并且会各自迭代。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1aa3a779c43374c8038fada6b5c78290.png\"></p>\n<p>图2 展示场景</p>\n<p>在业务发展初期，这样的场景不多。BFF层系统“烟囱式”建设，功能快速开发上线满足业务的诉求，在这样的情况下，这种矛盾表现的不明显。而随着业务发展，行业的开拓，形成了许许多多这样的商品展示功能，矛盾逐渐加剧，主要表现在以下两个方面：</p>\n<ul>\n<li><p><strong>业务支撑效率</strong>：随着商品展示场景变得越来越多，API呈爆炸趋势，业务支撑效率和人力成线性关系，系统能力难以支撑业务场景的规模化拓展。</p>\n</li>\n<li><p><strong>系统复杂度高</strong>：核心功能持续迭代，内部逻辑充斥着<code>if…else…</code>，代码过程式编写，系统复杂度较高，难以修改和维护。</p>\n</li>\n</ul>\n<p>那么这些问题是怎么产生的呢？这要结合“烟囱式”系统建设的背景和商品展示场景所面临的业务，以及系统特点来进行理解。</p>\n<p><strong>特点一：外部依赖多、场景间取数存在差异、用户体验要求高</strong></p>\n<p>图例展示了两个不同行业的团购货架模块，这样一个看似不大的模块，后端在BFF层要调用20个以上的下游服务才能把数据拿全，这是其一。在上面两个不同的场景中，需要的数据源集合存在差异，而且这种差异普遍存在，这是其二，比如足疗团购货架需要的某个数据源，在丽人团购货架上不需要，丽人团购货架需要的某个数据源，足疗团购货架不需要。尽管依赖下游服务多，同时还要保证C端的用户体验，这是其三。</p>\n<p>这几个特点给技术带来了不小的难题：1）聚合大小难控制，聚合功能是分场景建设？还是统一建设？如果分场景建设，必然存在不同场景重复编写类似聚合逻辑的问题。如果统一建设，那么一个大而全的数据聚合中必然会存在无效的调用。2）聚合逻辑的复杂性控制问题，在这么多的数据源的情况下，不仅要考虑业务逻辑怎么写，还要考虑异步调用的编排，在代码复杂度未能良好控制的情况下，后续聚合的变更修改将会是一个难题。</p>\n<p><strong>特点二：展示逻辑多、场景之间存在差异，共性个性逻辑耦合</strong></p>\n<p>我们可以明显地识别某一类场景的逻辑是存在共性的，比如团单相关的展示场景。直观可以看出基本上都是展示团单维度的信息，但这只是表象。实际上在模块的生成过程中存在诸多的差异，比如以下两种差异：</p>\n<ul>\n<li><p><strong>字段拼接逻辑差异</strong>：比如以上图中两个团购货架的团购标题为例，同样是标题，在丽人团购货架中的展示规则是：<strong>[类型] + 团购标题</strong>，而在足疗团购货架的展示规则是：<strong>团购标题</strong>。</p>\n</li>\n<li><p><strong>排序过滤逻辑差异</strong>：比如同样是团单列表，A场景按照销量倒排序，B场景按照价格排序，不同场景的排序逻辑不同。</p>\n</li>\n</ul>\n<p>诸如此类的<strong>展示逻辑</strong>的差异性还有很多。类似的场景实际上在内部存在很多差异的逻辑，后端如何应对这种差异性是一个难题，下面是最常见的一种写法，通过读取具体的条件字段来做判断实现逻辑路由，如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(category == <span class=\"string\">&quot;丽人&quot;</span>) &#123;  title = <span class=\"string\">&quot;[&quot;</span> + category + <span class=\"string\">&quot;]&quot;</span> + productTitle;&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (category == <span class=\"string\">&quot;足疗&quot;</span>) &#123;  title = productTitle；&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方案在功能实现方面没有问题，也能够复用共同的逻辑。但是实际上在场景非常多的情况下，将会有非常多的差异性判断逻辑叠加在一起，功能一直会被持续迭代的情况下，可以想象，系统将会变得越来越复杂，越来越难以修改和维护。</p>\n<p><strong>总结</strong>：在BFF这层，不同商品展示场景存在差异。在业务发展初期，系统通过独立建设的方式支持业务快速试错，在这种情况下，业务差异性带来的问题不明显。而随着业务的不断发展，需要搭建及运营的场景越来越多，呈规模化趋势。此时，业务对技术效率提出了更高的要求。<strong>在这种场景多、场景间存在差异的背景下，如何满足场景拓展效率同时能够控制系统的复杂性，就是我们业务场景中面临的核心问题</strong>。</p>\n<h2 id=\"3-BFF应用模式分析\"><a href=\"#3-BFF应用模式分析\" class=\"headerlink\" title=\"3 BFF应用模式分析\"></a>3 BFF应用模式分析</h2><p>目前，业界针对此类的解决方案主要有两种模式，一种是后端BFF模式；另一种是前端BFF模式。</p>\n<h3 id=\"3-1-后端BFF模式\"><a href=\"#3-1-后端BFF模式\" class=\"headerlink\" title=\"3.1 后端BFF模式\"></a>3.1 后端BFF模式</h3><p>后端BFF模式指的是BFF由后端同学负责，这种模式目前最广泛的实践是基于GraphQL搭建的后端BFF方案，具体是：后端将展示字段封装成展示服务，通过GraphQL编排之后暴露给前端使用。如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9186b94e756d77bc0b098a1807e44e5a.png\"></p>\n<p>图3 后端BFF模式</p>\n<p>这种模式最大的特性和优势是，当展示字段已经存在的情况下，后端不需要关心前端差异性需求，按需查询的能力由GraphQL支持。这个特性可以很好地应对不同场景存在展示字段差异性这个问题，前端直接基于GraphQL按需查询数据即可，后端不需要变更。同时，借助GraphQL的编排和聚合查询能力，后端可以将逻辑分解在不同的展示服务中，因此在一定程度上能够化解BFF这层的复杂性。</p>\n<p>但是基于这种模式，仍然存在几个问题：展示服务颗粒度问题、数据图划分问题以及字段扩散问题，下图是基于当前模式的具体案例：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8dd8ffdccae5273f1c723e7bba3e4e5a.png\"></p>\n<p>图4 后端BFF模式（案例）</p>\n<p><strong>1）展示服务颗粒度设计问题</strong></p>\n<p>这种方案要求展示逻辑和取数逻辑封装在一个模块中，形成一个展示服务（Presentation Service），如上图所示。而实际上展示逻辑和取数逻辑是多对多的关系，还是以前文提到的例子说明：</p>\n<blockquote>\n<p><strong>背景</strong>：有两个展示服务，分别封装了商品标题和商品标签的查询能力。</p>\n<p><strong>情景</strong>：此时PM提了一个需求，希望商品在某个场景的标题以“[类型]+商品标题”的形式展示，此时商品标题的拼接依赖类型数据，而此时类型数据商品标签展示服务中已经调用了。</p>\n<p><strong>问题</strong>：商品标题展示服务自己调用类型数据还是将两个展示服务合并到一起？</p>\n</blockquote>\n<p>以上描述的问题的是展示服务颗粒度把控的问题，我们可以怀疑上述的示例是不是因为展示服务的颗粒度过小？那么反过来看一看，如果将两个服务合并到一起，那么势必又会存在冗余。这是展示服务设计的难点，<strong>核心原因在于，展示逻辑和取数逻辑本身是多对多的关系，结果却被设计放在了一起</strong>。</p>\n<p><strong>2）数据图划分问题</strong></p>\n<p>通过GraphQL将多个展示服务的数据聚合到一张图（GraphQL Schema）中，形成一个数据视图，需要数据的时候只要数据在图中，就可以基于Query按需查询。那么问题来了，这个图应该怎么组织？是一张图还是多张图？图过大的话，势必带来复杂的数据关系维护问题，图过小则将会降低方案本身的价值。</p>\n<p><strong>3）展示服务内部复杂性 + 模型扩散问题</strong></p>\n<p>上文提到过一个商品标题的展示存在不同拼接逻辑的情况，在商品展示场景，这种逻辑特别普遍。比如同样是价格，A行业展示优惠后价格，B行业展示优惠前价格；同样是标签位置，C行业展示服务时长，而D行业展示商品特性等。</p>\n<p>那么问题来了，展示模型如何设计？以标题字段为例，是在展示模型上放个<code>title</code>字段就可以，还是分别放个<code>title</code>和<code>titleWithCategory</code>？如果是前者那么服务内部必然会存在<code>if…else…</code>这种逻辑，用于区分<code>title</code>的拼接方式，这同样会导致展示服务内部的复杂性。如果是多个字段，那么可以想象，展示服务的模型字段也将会不断扩散。</p>\n<p><strong>总结</strong>：后端BFF模式能够在一定程度上化解后端逻辑的复杂性，同时提供一个展示字段的复用机制。但是仍然存在未决问题，如展示服务的颗粒度设计问题，数据图的划分问题，以及展示服务内部的复杂性和字段扩散问题。目前这种模式实践的代表有Facebook、爱彼迎、eBay、爱奇艺、携程、去哪儿等等。</p>\n<h3 id=\"3-2-前端BFF模式\"><a href=\"#3-2-前端BFF模式\" class=\"headerlink\" title=\"3.2 前端BFF模式\"></a>3.2 前端BFF模式</h3><p>前端BFF模式在Sam Newman的文章中的”And Autonomy”部分有特别的介绍，指的是BFF本身由前端团队自己负责，如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/94d1b0ff6f68b252711f342b3b0fd0ae.png\"></p>\n<p>图5 前端BFF模式</p>\n<p>这种模式的理念是，本来能一个团队交付的需求，没必要拆成两个团队，两个团队本身带来较大的沟通协作成本。本质上，也是一种将“敌我矛盾”转化为“人民内部矛盾”的思路。前端完全接手BFF的开发工作，实现数据查询的自给自足，大大减少了前后端的协作成本。但是这种模式没有提到我们关心的一些核心问题，如：复杂性如何应对、差异性如何应对、展示模型如何设计等等问题。除此之外，这种模式也存在一些前提条件及弊端，比如较为完备的前端基础设施；前端不仅仅需要关心渲染、还需要了解业务逻辑等。</p>\n<p><strong>总结</strong>：前端BFF模式通过前端自主查询和使用数据，从而达到降低跨团队协作的成本，提升BFF研发效率的效果。目前这种模式的实践代表是阿里巴巴。</p>\n<h2 id=\"4-基于GraphQL及元数据的信息聚合架构设计\"><a href=\"#4-基于GraphQL及元数据的信息聚合架构设计\" class=\"headerlink\" title=\"4 基于GraphQL及元数据的信息聚合架构设计\"></a>4 基于GraphQL及元数据的信息聚合架构设计</h2><h3 id=\"4-1-整体思路\"><a href=\"#4-1-整体思路\" class=\"headerlink\" title=\"4.1 整体思路\"></a>4.1 整体思路</h3><p>通过对后端BFF和前端BFF两种模式的分析，我们最终选择后端BFF模式，前端BFF这个方案对目前的研发模式影响较大，不仅需要大量的前端资源，而且需要建设完善的前端基础设施，方案实施成本比较高昂。</p>\n<p>前文提到的后端GraphQL BFF模式代入我们的具体场景虽然存在一些问题，但是总体有非常大的参考价值，比如展示字段的复用思路、数据的按需查询思路等等。在商品展示场景中，<strong>有80%的工作集中在数据的聚合和集成部分</strong>，并且这部分具有很强的复用价值，因此信息的查询和聚合是我们面临的主要矛盾。因此，我们的思路是：<strong>基于GraphQL+后端BFF方案改进，实现取数逻辑和展示逻辑的可沉淀、可组合、可复用</strong>，整体架构如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/21ffacbebfc1c0c59f6a6f1f421e55ac.png\"></p>\n<p>图6 基于GraphQL BFF的改进思路</p>\n<p>从上图可看出，与传统GraphQL BFF方案最大的差别在于我们将GraphQL下放至数据聚合部分，由于数据来源于商品领域，领域是相对稳定的，因此数据图规模可控且相对稳定。除此之外，整体架构的核心设计还包括以下三个方面：1）取数展示分离；2）查询模型归一；3）元数据驱动架构。</p>\n<p>我们通过取数展示分离解决展示服务颗粒度问题，同时使得展示逻辑和取数逻辑可沉淀、可复用；通过查询模型归一化设计解决展示字段扩散的问题；通过元数据驱动架构实现能力的可视化，业务组件编排执行的自动化，这能够让业务开发同学聚焦于业务逻辑的本身。下面将针对这三个部分逐一展开介绍。</p>\n<h3 id=\"4-2-核心设计\"><a href=\"#4-2-核心设计\" class=\"headerlink\" title=\"4.2 核心设计\"></a>4.2 核心设计</h3><p>4.2.1 取数展示分离</p>\n<p>上文提到，在商品展示场景中，展示逻辑和取数逻辑是多对多的关系，而传统的基于GraphQL的后端BFF实践方案把它们封装在一起，这是导致展示服务颗粒度难以设计的根本原因。思考一下取数逻辑和展示逻辑的关注点是什么？取数逻辑关注怎么查询和聚合数据，而展示逻辑关注怎么加工生成需要的展示字段，它们的关注点不一样，放在一起也会增加展示服务的复杂性。因此，我们的思路是将取数逻辑和展示逻辑分离开来，单独封装成逻辑单元，分别叫取数单元和展示单元。在取数展示分离之后，GraphQL也随之下沉，用于实现数据的按需聚合，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eeb60decd04420062983c3711804700e.png\"></p>\n<p>图7 取数展示分离+元数据描述</p>\n<p>那么取数和展示逻辑的封装颗粒度是怎么样的呢？不能太小也不能太大，在颗粒度的设计上，我们有两个核心考量：1）<strong>复用</strong>，展示逻辑和取数逻辑在商品展示场景中，都是可以被复用的资产，我们希望它们能沉淀下来，被单独按需使用；2）<strong>简单</strong>，保持简单，这样容易修改和维护。基于这两点考虑，颗粒度的定义如下：</p>\n<ul>\n<li><p><strong>取数单元</strong>：尽量只封装1个外部数据源，同时负责对外部数据源返回的模型进行简化，这部分生成的模型我们称之为取数模型。</p>\n</li>\n<li><p><strong>展示单元</strong>：尽量只封装1个展示字段的加工逻辑。</p>\n</li>\n</ul>\n<p>分开的好处是简单且可被组合使用，那么具体如何实现组合使用呢？我们的思路是通过元数据来描述它们之间的关系，基于元数据由统一的执行框架来关联运行，具体设计下文会展开介绍。通过取数和展示的分离，元数据的关联和运行时的组合调用，可以保持逻辑单元的简单，同时又满足复用诉求，这也很好地解决了传统方案中存在的<strong>展示服务的颗粒度问题</strong>。</p>\n<p>4.2.2 查询模型归一</p>\n<p>展示单元的加工结果通过什么样的接口透出呢？接下来，我们介绍一下查询接口设计的问题。</p>\n<p><strong>1）查询接口设计的难点</strong></p>\n<p>常见查询接口的设计模式有以下两种：</p>\n<ul>\n<li><p><strong>强类型模式</strong>：强类型模式指的是查询接口返回的是POJO对象，每一个查询结果对应POJO中的一个明确的具有特定业务含义的字段。</p>\n</li>\n<li><p><strong>弱类型模式</strong>：弱类型模式指的是查询结果以K-V或JSON模式返回，没有明确的静态字段。</p>\n</li>\n</ul>\n<p>以上两种模式在业界都有广泛应用，且它们都有明确的优缺点。强类型模式对开发者友好，但是业务是不断迭代的，与此同时，系统沉淀的展示单元会不断丰富，在这样的情况下，接口返回的DTO中的字段将会愈来愈多，每次新功能的支持，都要伴随着接口查询模型的修改，JAR版本的升级。而JAR的升级涉及数据提供方和数据消费两方，存在明显效率问题。另外，可以想象，查询模型的不断迭代，最终将会包括成百上千个字段，难以维护。</p>\n<p>而弱类型模式恰好可以弥补这一缺点，但是弱类型模式对于开发者来说非常不友好，接口查询模型中有哪些查询结果对于开发者来说在开发的过程中完全没有感觉，但是程序员的天性就是喜欢通过代码去理解逻辑，而非配置和文档。其实，这两种接口设计模式都存在着一个共性问题——缺少抽象，下面两节，我们将介绍在接口返回的查询模型设计方面的抽象思路及框架能力支持。</p>\n<p><strong>2）查询模型归一化设计</strong></p>\n<p>回到商品展示场景中，一个展示字段有多种不同的实现，如商品标题的两种不同实现方式：1）商品标题；2）[类目]+商品标题。商品标题和这两种展示逻辑的关系本质上是一种抽象-具体的关系。识别这个关键点，思路就明了了，我们的思路是对查询模型做抽象。查询模型上都是抽象的展示字段，一个展示字段对应多个展示单元，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d6223539b474bfdd2a7673c39752bcee.png\"></p>\n<p>图8 查询模型归一化 + 元数据描述</p>\n<p>在实现层面，同样基于元数据描述展示字段和展示单元之间的关系，基于以上的设计思路，可以在一定程度上减缓模型的扩散，但是还不能避免扩展。比如除了价格、库存、销量等每个商品都有的标准属性之外，不同的商品类型一般还会有这个商品特有的属性。比如密室主题拼场商品才有“几人拼”这样的描述属性，这种字段本身抽象的意义不大，且放在商品查询模型中作为一个单独的字段会导致模型扩张，针对这类问题，我们的解决思路是引入扩展属性，扩展属性专门承载这类非标准的字段。通过标准字段 + 扩展属性的方式建立查询模型，能够较好地解决<strong>字段扩散</strong>的问题。</p>\n<p>4.2.3 元数据驱动架构</p>\n<p>到目前为止，我们定义了如何分解<strong>业务逻辑单元</strong>以及如何设计<strong>查询模型</strong>，并提到用元数据描述它们之间的关系。基于以上定义实现的业务逻辑及模型，都具备很强的复用价值，可以作为业务资产沉淀下来。那么，为什么用元数据描述业务功能及模型之间的关系呢？</p>\n<p>我们引入元数据描述主要有两个目的：1）代码逻辑的自动编排，通过元数据描述业务逻辑之间的关联关系，运行时可以自动基于元数据实现逻辑之间的关联执行，从而可以消除大量的人工逻辑编排代码；2）业务功能的可视化，元数据本身描述了业务逻辑所提供的功能，如下面两个示例：</p>\n<blockquote>\n<p>团单基础售价字符串展示，例：30元。 </p>\n<p>团单市场价展示字段，例：100元。</p>\n</blockquote>\n<p>这些元数据上报到系统中，可以用于展示当前系统所提供的功能。通过元数据描述组件及组件之间关联关系，通过框架解析元数据自动进行业务组件的调用执行，形成了如下的元数据架构：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2acb91a2cdbee4b5eccf5309f5a295e1.png\"></p>\n<p>图9 元数据驱动架构</p>\n<p>整体架构由三个核心部分组成：</p>\n<ul>\n<li><p><strong>业务能力</strong>：标准的业务逻辑单元，包括取数单元、展示单元和查询模型，这些都是关键的可复用资产。</p>\n</li>\n<li><p><strong>元数据</strong>：描述业务功能（如：展示单元、取数单元）以及业务功能之间的关联关系，比如展示单元依赖的数据，展示单元映射的展示字段等。</p>\n</li>\n<li><p><strong>执行引擎</strong>：负责消费元数据，并基于元数据对业务逻辑进行调度和执行。</p>\n</li>\n</ul>\n<p>通过以上三个部分有机的组合在一起，形成了一个元数据驱动风格的架构。</p>\n<h2 id=\"5-针对GraphQL的优化实践\"><a href=\"#5-针对GraphQL的优化实践\" class=\"headerlink\" title=\"5 针对GraphQL的优化实践\"></a>5 针对GraphQL的优化实践</h2><h3 id=\"5-1-使用简化\"><a href=\"#5-1-使用简化\" class=\"headerlink\" title=\"5.1 使用简化\"></a>5.1 使用简化</h3><p><strong>1）GraphQL直接使用问题</strong></p>\n<p>引入GraphQL，会引入一些额外的复杂性，比如会涉及到GraphQL带来的一些概念如：Schema、RuntimeWiring，下面是基于GraphQL原生Java框架的开发过程：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1897c77958b24b0253e5968bb06dd147.png\"></p>\n<p>图10 原生GraphQL使用流程</p>\n<p>这些概念对于未接触过GraphQL的同学来说，增加了学习和理解的成本，而这些概念和业务领域通常没有什么关系。而我们仅仅希望使用GraphQL的按需查询特性，却被GraphQL本身拖累了，业务开发同学的关注点应该聚焦在业务逻辑本身才对，这个问题如何解决呢？</p>\n<p>著名计算机科学家David Wheeler说了一句名言，”All problems in computer science can be solved by another level of indirection”。没有加一层解决不了的问题，本质上是需要有人来对这事负责，因此我们在原生GraphQL之上增加了一层执行引擎层来解决这些问题，目标是屏蔽GraphQL的复杂性，让开发人员只需要关注业务逻辑。</p>\n<p><strong>2）取数接口标准化</strong></p>\n<p>首先要简化数据的接入，原生的<code>DataFetcher</code>和<code>DataLoader</code>都是处在一个比较高的抽象层次，缺少业务语义，而在查询场景，我们能够归纳出，所有的查询都属于以下三种模式：</p>\n<ul>\n<li><p><strong>1查1</strong>：根据一个条件查询一个结果。</p>\n</li>\n<li><p><strong>1查N</strong>：根据一个条件查询多个结果。</p>\n</li>\n<li><p><strong>N查N</strong>：一查一或一查多的批量版本。</p>\n</li>\n</ul>\n<p>由此，我们对查询接口进行了标准化，业务开发同学基于场景判断是那种，按需选择使用即可，取数接口标准化设计如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/71923ee77268f32e6ce9789d1b8dfc9f.png\"></p>\n<p>图11 查询接口标准化</p>\n<p>业务开发同学按需选择所需要使用的取数器，通过泛型指定结果类型，1查1和1查N比较简单，N查N我们对其定义为批量查询接口，用于满足”N+1”的场景，其中<code>batchSize</code>字段用于指定分片大小，<code>batchKey</code>用于指定查询Key，业务开发只需要指定参数，其他的框架会自动处理。除此之外，我们还约束了返回结果必须是<code>CompleteFuture</code>，用于满足聚合查询的全链路异步化。</p>\n<p><strong>3）聚合编排自动化</strong></p>\n<p>取数接口标准化使得数据源的语义更清晰，开发过程按需选择即可，简化了业务的开发。但是此时业务开发同学写好<code>Fetcher</code>之后，还需要去另一个地方去写<code>Schema</code>，而且写完<code>Schema</code>还要再写<code>Schema</code>和<code>Fetcher</code>的映射关系，业务开发更享受写代码的过程，不太愿意写完代码还要去另外一个地方取配置，并且同时维护代码和对应配置也提高了出错的可能性，能否将这些冗杂的步骤移除掉？</p>\n<p><code>Schema</code>和<code>RuntimeWiring</code>本质上是想描述某些信息，如果这些信息换一种方式描述是不是也可以。我们的优化思路是，在业务开发过程中标记注解，通过注解标注的元数据描述这些信息，其他的事情交给框架来做。解决思路示意图如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a1adc237e833aad26cf198c0c5dd6bc2.png\"></p>\n<p>图12 注解元数据描述Schema和RuntimeWiring</p>\n<h3 id=\"5-2-性能优化\"><a href=\"#5-2-性能优化\" class=\"headerlink\" title=\"5.2 性能优化\"></a>5.2 性能优化</h3><p>5.2.1 GraphQL性能问题</p>\n<p>虽然GraphQL已经开源了，但是Facebook只开源了相关标准，并没有给出解决方案。GraphQL-Java框架是由社区贡献的，基于开源的GraphQL-Java作为按需查询引擎的方案，我们发现了GraphQL应用方面的一些问题，这些问题有部分是由于使用姿势不当所导致的，也有部分是GraphQL本身实现的问题，比如我们遇到的几个典型的问题：</p>\n<ul>\n<li><p>耗CPU的查询解析，包括<code>Schema</code>的解析和<code>Query</code>的解析。</p>\n</li>\n<li><p>当查询模型比较复杂特别是存在大列表时候的延时问题。</p>\n</li>\n<li><p>基于反射的模型转换CPU消耗问题。</p>\n</li>\n<li><p><code>DataLoader</code>的层级调度问题。</p>\n</li>\n</ul>\n<p>于是，我们对使用方式和框架做了一些优化与改造，以解决上面列举的问题。本章着重介绍我们在GraphQL-Java方面的优化和改造思路。</p>\n<p>5.2.2 GraphQL编译优化</p>\n<p><strong>1）GraphQL语言原理概述</strong></p>\n<p>GraphQL是一种查询语言，目的是基于直观和灵活的语法构建客户端应用程序，用于描述其数据需求和交互。GraphQL属于一种领域特定语言（DSL），而我们所使用的GraphQL-Java客户端在语言编译层面是基于ANTLR 4实现的，ANTLR 4是一种基于Java编写的语言定义和识别工具，Antlr是一种元语言（Meta-Language），它们的关系如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/780967a52c449d978d352760694363ae.png\"></p>\n<p>图13 GraphQL语言基本原理示意图</p>\n<p>GraphQL执行引擎所接受的<code>Schema</code>及<code>Query</code>都是基于GraphQL定义的语言所表达的内容，GraphQL执行引擎不能直接理解GraphQL，在执行之前必须由GraphQL编译器翻译成GraphQL执行引擎可理解的文档对象。而GraphQL编译器是基于Java的，经验表明在大流量场景实时解释的情况下，这部分代码将会成为CPU热点，而且还占用响应延迟，<code>Schema</code>或<code>Query</code>越复杂，性能损耗越明显。</p>\n<p><strong>2）Schema及Query编译缓存</strong></p>\n<p><code>Schema</code>表达的是数据视图和取数模型同构，相对稳定，个数也不多，在我们的业务场景一个服务也就一个。因此，我们的做法是在启动的时候就将基于<code>Schema</code>构造的GraphQL执行引擎构造好，作为单例缓存下来。对于<code>Query</code>来说，每个场景的<code>Query</code>有些差异，因此<code>Query</code>的解析结果不能作为单例，我们的做法是实现<code>PreparsedDocumentProvider</code>接口，基于<code>Query</code>作为Key将<code>Query</code>编译结果缓存下来。如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ddbeff75483900054a0216acf3a52f2d.png\"></p>\n<p>图14 Query缓存实现示意图</p>\n<p>5.2.3 GraphQL执行引擎优化</p>\n<p><strong>1）GraphQL执行机制及问题</strong></p>\n<p>我们先一起了解一下GraphQL-Java执行引擎的运行机制是怎么样的。假设在执行策略上我们选取的是<code>AsyncExecutionStrategy</code>，来看看GraphQL执行引擎的执行过程：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d792881807f277fcc7d02794f645a8b0.png\"></p>\n<p>图15 GraphQL执行引擎执行过程</p>\n<p>以上时序图做了些简化，去除了一些与重点无关的信息，<code>AsyncExecutionStrategy</code>的<code>execute</code>方法是对象执行策略的异步化模式实现，是查询执行的起点，也是根节点查询的入口，<code>AsyncExecutionStrategy</code>对对象的多个字段的查询逻辑，采取的是循环+异步化的实现方式，我们从<code>AsyncExecutionStrategy</code>的<code>execute</code>方法触发，理解GraphQL查询过程如下：</p>\n<ol>\n<li><p> 调用当前字段所绑定的<code>DataFetcher</code>的<code>get</code>方法，如果字段没有绑定<code>DataFetcher</code>，则通过默认的<code>PropertyDataFetcher</code>查询字段，<code>PropertyDataFetcher</code>的实现是基于反射从源对象中读取查询字段。</p>\n</li>\n<li><p> 将从<code>DataFetcher</code>查询得到结果包装成<code>CompletableFuture</code>，如果结果本身是<code>CompletableFuture</code>，那么不会包装。</p>\n</li>\n<li><p> 结果<code>CompletableFuture</code>完成之后，调用<code>completeValue</code>，基于结果类型分别处理。</p>\n</li>\n</ol>\n<ul>\n<li><p>如果查询结果是列表类型，那么会对列表类型进行遍历，针对每个元素在递归执行<code>completeValue</code>。</p>\n</li>\n<li><p>如果结果类型是对象类型，那么会对对象执行<code>execute</code>，又回到了起点，也就是<code>AsyncExecutionStrategy的execute</code>。</p>\n</li>\n</ul>\n<p>以上是GraphQL的执行过程，这个过程有什么问题呢？下面基于图上的标记顺序一起看看GraphQL在我们的业务场景中应用和实践所遇到的问题，这些问题不代表在其他场景也是问题，仅供参考：</p>\n<p><strong>问题1</strong>：<code>PropertyDataFetcher</code>CPU热点问题，<code>PropertyDataFetcher</code>在整个查询过程中属于热点代码，而其本身的实现也有一些优化空间，在运行时<code>PropertyDataFetcher</code>的执行会成为CPU热点。（具体问题可参考GitHub上的commit和Conversion：<a href=\"https://github.com/graphql-java/graphql-java/pull/1815\">https://github.com/graphql-java/graphql-java/pull/1815</a>）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c3a377dc5b480b403a67a2f8cb5cd0aa.png\">图16 PropertyDataFetcher成为CPU热点</p>\n<p><strong>问题2</strong>：列表的计算耗时问题，列表计算是循环的，对于查询结果中存在大列表的场景，此时循环会造成整体查询明显的延迟。我们举个具体的例子，假设查询结果中存在一个列表大小是1000，每个元素的处理是0.01ms，那么总体耗时就是10ms，基于GraphQL的查机制，这个10ms会阻塞整个链路。</p>\n<p><strong>2）类型转换优化</strong></p>\n<p>通过GraphQL查询引擎拿到的GraphQL模型，和业务实现的<code>DataFetcher</code>返回的取数模型是同构，但是所有字段的类型都会被转换成GraphQL内部类型。<code>PropertyDataFetcher</code>之所以会成为CPU热点，问题就在于这个模型转换过程，业务定义的模型到GraphQL类型模型转换过程示意图如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eda15725d57060f766fa2800784e4c3f.png\"></p>\n<p>图17 业务模型到GraphQL模型转换示意图</p>\n<p>当查询结果模型中的字段非常多的时候，比如上万个，意味着每次查询有上万次的<code>PropertyDataFetcher</code>操作，实际就反映到了CPU热点问题上，这个问题我们的解决思路是保持原有业务模型不变，将非<code>PropertyDataFetcher</code>查询的结果反过来填充到业务模型上。如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/00312b3068556d24deb0f880e5c2103a.png\"></p>\n<p>图18 查询结果模型反向填充示意图</p>\n<p>基于这个思路，我们通过GraphQL执行引擎拿到的结果就是业务<code>Fetcher</code>返回的对象模型，这样不仅仅解决了因字段反射转换带来的CPU热点问题，同时对于业务开发来说增加了友好性。因为GraphQL模型类似JSON模型，这种模型是缺少业务类型的，业务开发直接使用起来非常麻烦。以上优化在一个场景上试点测试，结果显示该场景的平均响应时间缩短1.457ms，平均99线缩短5.82ms，平均CPU利用率降低约12%。</p>\n<p><strong>3）列表计算优化</strong></p>\n<p>当列表元素比较多的时候，默认的单线程遍历列表元素计算的方式所带来的延迟消耗非常明显，对于响应时间比较敏感的场景这个延迟优化很有必要。针对这个问题我们的解决思路是充分利用CPU多核心计算的能力，将列表拆分成任务，通过多线程并行执行，实现机制如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0858f511ea09ad5454793bd7ec11760e.png\"></p>\n<p>图19 列表遍历多核计算思路</p>\n<p>5.2.4 GraphQL-DataLoader调度优化</p>\n<p><strong>1）DataLoader基本原理</strong></p>\n<p>先简单介绍一下DataLoader的基本原理，DataLoader有两个方法，一个是<code>load</code>，一个是<code>dispatch</code>，在解决N+1问题的场景中，DataLoader是这么用的：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a41035acc9fa1a6bcafc9ebf069b1071.png\"></p>\n<p>图20 DataLoader基本原理</p>\n<p>整体分为2个阶段，第一个阶段调用<code>load</code>，调用N次，第二个阶段调用<code>dispatch</code>，调用<code>dispatch</code>的时候会真正的执行数据查询，从而达到批量查询+分片的效果。</p>\n<p><strong>2）DataLoader调度问题</strong></p>\n<p>GraphQL-Java对DataLoader的集成支持的实现在<code>FieldLevelTrackingApproach</code>中，<code>FieldLevelTrackingApproach</code>的实现会存在怎样的问题呢？下面基于一张图表达原生DataLoader调度机制所产生的问题：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7b544ddbe308313dfbb784d2cb3d4e50.png\"></p>\n<p>图21 GraphQL-Java对DataLoader调度存在的问题</p>\n<p>问题很明显，基于<code>FieldLevelTrackingApproach</code>的实现，下一层级的<code>DataLoader</code>的<code>dispatch</code>是需要等到本层级的结果都回来之后才发出。基于这样的实现，查询总耗时的计算公式等于：TOTAL = MAX（Level  1 Latency）+ MAX（Level 2 Latency）+ MAX（Level 3 Latency）+ … ，<strong>总查询耗时等于每层耗时最大的值加起来，而实际上如果链路编排由业务开发同学自己来写的话，理论上的效果是总耗时等于所有链路最长的那个链路所耗的时间</strong>，这个才是合理的。而<code>FieldLevelTrackingApproach</code>的实现所表现出来的结果是反常识的，至于为什么这么实现，目前我们理解可能是设计者基于简单和通用方面的考虑。</p>\n<p>问题在于以上的实现在有些业务场景下是不能接受的，比如我们的列表场景的响应时间约束一共也就不到100ms，其中几十ms是因为这个原因搭进去的。针对这个问题的解决思路，一种方式是对于响应时间要求特别高的场景独立编排，不采用GraphQL；另一种方式是在GraphQL层面解决这个问题，保持架构的统一性。接下来，介绍一下我们是如何扩展GraphQL-Java执行引擎来解决这个问题的。</p>\n<p><strong>3）DataLoader调度优化</strong></p>\n<p>针对DataLoader调度的性能问题，<strong>我们的解决思路是在最后一次调用某个</strong><strong><code>DataLoader</code>的<code>load</code>之后，立即调用<code>dispatch</code>方法发出查询请求</strong>，问题是我们怎么知道哪一次的load是最后一次load呢？这个问题也是解决DataLoader调度问题的难点，以下举个例子来解释我们的解决思路：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bd9ac368a374d5463c9c5ea6e41bd720.png\"></p>\n<p>图22 查询对象结果示意图</p>\n<p>假设我们查询到的模型结构如下：根节点是<code>Query</code>下的字段，字段名叫<code>subjects</code>，<code>subject</code>引用的是个列表，<code>subject</code>下有两个元素，都是<code>ModelA</code>的对象实例，<code>ModelA</code>有两个字段，<code>fieldA</code>和<code>fieldB</code>，<code>subjects[0]</code>的<code>fieldA</code>关联是<code>ModelB</code>的一个实例，<code>subjects[0]</code>的<code>fieldB</code>关联多个<code>ModelC</code>实例。</p>\n<p>为了方便理解，我们定义一些概念，字段、字段实例、字段实例执行完、字段实例值大小等等：</p>\n<ul>\n<li><p><strong>字段</strong>：具有唯一路径，是静态的，和运行时对象大小没有关系，如：<code>subjects</code>和<code>subjects/fieldA</code>。</p>\n</li>\n<li><p><strong>字段实例</strong>：字段的实例，具有唯一路径，是动态的，跟运行时对象大小有关系，如：<code>subjects[0]/fieldA</code>和<code>subjects[1]/fieldA</code>是字段<code>subjects/fieldA</code>的实例。</p>\n</li>\n<li><p><strong>字段实例执行完</strong>：字段实例关联的对象实例都被GraphQL执行完了。</p>\n</li>\n<li><p><strong>字段实例值大小</strong>：字段实例引用对象实例的个数，如以上示例，<code>subjects[0]/fieldA</code>字段实例值大小是1，<code>subjects[0]/fieldB</code>字段实例值大小是3。</p>\n</li>\n</ul>\n<p>除了以上定义之外，我们的业务场景还满足以下条件：</p>\n<ul>\n<li><p>只有1个根节点，且根节点是列表。</p>\n</li>\n<li><p><code>DataLoader</code>一定属于某个字段，某个字段下的<code>DataLoader</code>应该被执行次数等于其下的对象实例个数。</p>\n</li>\n</ul>\n<p>基于以上信息，我们可以得出以下问题分析：</p>\n<ul>\n<li><p>在执行字段实例的时候，我们可以知道当前字段实例的大小，字段实例的大小等于字段关联<code>DataLoader</code>在当前实例下需要执行<code>load</code>的次数，因此在执行<code>load</code>之后，我们可以知道当前对象实例是否是其所在字段实例的最后一个对象。</p>\n</li>\n<li><p>一个对象的实例可能会挂在不同的字段实例下，所以仅当当前对象实例是其所在字段实例的最后一个对象实例的时候，不代表当前对象实例是所有对象实例中的最后一个，当且仅当对象实例所在节点实例是节点的最后一个实例的时候才成立。</p>\n</li>\n<li><p>我们可从字段实例大小推算字段实例的个数，比如我们知道<code>subjects</code>的大小是2，那么就知道<code>subjects</code>字段有两个字段实例<code>subjects[0]</code>和<code>subjects[1]</code>，也就知道字段<code>subjects/fieldA</code>有两个实例，<code>subjects[0]/fieldA</code>和<code>subjects[1]/fieldA</code>，因此我们从根节点可以往下推断出某个字段实例是否执行完。</p>\n</li>\n</ul>\n<p>通过以上分析，我们可以得出，一个对象执行完的条件是其所在的字段实例以及其所在的字段所有的父亲字段实例都执行完，且当前执行的对象实例是其所在字段实例的最后一个对象实例的时候。</p>\n<p>基于这个判断逻辑，我们的实现方案是在每次调用完<code>DataFetcher</code>的时候，判断是否需要发起<code>dispatch</code>，如果是则发起。另外，以上时机和条件存在漏发<code>dispatch</code>的问题，有个特殊情况，当当前对象实例不是最后一个，但是剩下的对象大小都为0的时候，那么就永远不会触发当前对象关联的<code>DataLoader</code>的<code>load</code>了，所以在对象大小为0的时候，需要额外再判断一次。</p>\n<p>根据以上的逻辑分析，我们实现了<code>DataLoader</code>调用链路的最优化，达到理论最优的效果。</p>\n<h2 id=\"6-新架构对研发模式的影响\"><a href=\"#6-新架构对研发模式的影响\" class=\"headerlink\" title=\"6 新架构对研发模式的影响\"></a>6 新架构对研发模式的影响</h2><p>生产力决定生产关系，元数据驱动信息聚合架构是展示场景搭建的核心生产力，而业务开发模式和过程是生产关系，因此也会随之改变。下面我们将会从开发模式和流程两个角度来介绍新架构对研发带来的影响。</p>\n<h3 id=\"6-1-聚焦业务的开发模式\"><a href=\"#6-1-聚焦业务的开发模式\" class=\"headerlink\" title=\"6.1 聚焦业务的开发模式\"></a>6.1 聚焦业务的开发模式</h3><p>新架构提供了一套基于业务抽象出的标准化代码分解约束。以前开发同学对系统的理解很可能就是“查一查服务，把数据粘在一起”，而现在，研发同学对于业务的理解及代码分解思路将会是一致的。比如展示单元代表的是展示逻辑，取数单元代表的是取数逻辑。同时，很多冗杂且容易出错的逻辑已经被框架屏蔽掉了，研发同学能够有更多的精力聚焦于业务逻辑本身，比如：业务数据的理解和封装，展示逻辑的理解和编写，以及查询模型的抽象和建设。如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ef9c7ad70499f66a090c1a53e358176d.png\"></p>\n<p>图23 业务开发聚焦业务本身</p>\n<h3 id=\"6-2-研发流程升级\"><a href=\"#6-2-研发流程升级\" class=\"headerlink\" title=\"6.2 研发流程升级\"></a>6.2 研发流程升级</h3><p>新架构不仅仅影响了研发的代码编写，同时也影响着研发流程的改进，基于元数据架构实现的可视化及配置化能力，现有研发流程和之前研发流程相比有了明显的区别，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3b542c0413452e6b5f48505faa1c2d4f.png\"></p>\n<p>图24 基于开发框架搭建展示场景前后研发流程对比</p>\n<p>以前是“一杆子捅到底”的开发模式，每个展示场景的搭建需要经历过从接口的沟通到API的开发整个过程，基于新架构之后，系统自动具备多层复用及可视化、配置化能力。</p>\n<p><strong>情况一</strong>：这是最好的情况，此时取数功能和展示功能都已经被沉淀下来，研发同学需要做的只是创建查询方案，基于运营平台按需选择需要的展示单元，拿着查询方案ID基于查询接口就可以查到需要的展示信息了，可视化、配置化界面如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8472176f0fbaaa163b4534eed899f7d8.png\"></p>\n<p>图25 可视化及文案按需选用</p>\n<p><strong>情况二</strong>：此时可能没有展示功能，但是通过运营平台查看到，数据源已经接入过，那么也不难，只需要基于现有的数据源编写一段加工逻辑即可，这段加工逻辑是非常爽的一段纯逻辑的编写，数据源列表如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cdcff0b999c17ac971ebd80e2842e42a.png\"></p>\n<p>图26 数据源列表可视化</p>\n<p><strong>情况三</strong>：最坏的情况是此时系统不能满足当前的查询能力，这种情况比较少见，因为后端服务是比较稳定的，那么也无需惊慌，只需要按照标准规范将数据源接入进来，然后编写加工逻辑片段即可，之后这些能力是可以被持续复用的。</p>\n<h2 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7 总结\"></a>7 总结</h2><p>商品展示场景的复杂性体现在：场景多、依赖多、逻辑多，以及不同场景之间存在差异。在这样的背景下，如果是业务初期，怎么快怎么来，采用“烟囱式”个性化建设的方式不必有过多的质疑。但是随着业务的不断发展，功能的不断迭代，以及场景的规模化趋势，“烟囱式”个性化建设的弊端会慢慢凸显出来，包括代码复杂度高、缺少能力沉淀等问题。</p>\n<p>本文以基于对美团到店商品展示场景所面临的核心矛盾分析，介绍了：</p>\n<ul>\n<li><p>业界不同的BFF应用模式，以及不同模式的优势和缺点。</p>\n</li>\n<li><p>基于GraphQL BFF模式改进的元数据驱动的架构方案设计。</p>\n</li>\n<li><p>我们在GraphQL实践过程中遇到的问题及解决思路。</p>\n</li>\n<li><p>新架构对研发模式产生的影响呈现。</p>\n</li>\n</ul>\n<p>目前，笔者所在团队负责的核心商品展示场景都已迁入新架构，基于新的研发模式，我们实现了50%以上的展示逻辑复用以及1倍以上的效率提升。希望本文对大家能够有所帮助。</p>\n<h2 id=\"8-参考文献\"><a href=\"#8-参考文献\" class=\"headerlink\" title=\"8 参考文献\"></a>8 参考文献</h2><p>[1]<a href=\"https://samnewman.io/patterns/architectural/bff/\">https://samnewman.io/patterns/architectural/bff/</a></p>\n<p>[2]<a href=\"https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation\">https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation</a></p>\n<p>[3]<a href=\"http://www.woshipm.com/pd/3712746.html\">了解电商后台系统，看这篇就够了</a></p>\n<p>[4]<a href=\"https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6/1212667?fr=aladdin\">框架定义-百度百科</a></p>\n<p>[5]<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA==&chksm=fd54d63aca235f2c5abf8f65b3a0f235b55723d014aa4c7c75c48fcb5ce5c32b14fb43e5b40b&idx=1&mid=2247483947&mpshare=1&scene=21&sn=d1b600e57cca8c7304cca77a693c0b32&srcid=0404dHE42TNCAGO7clq9K2ep#wechat_redirect\">高效研发-闲鱼在数据聚合上的探索与实践</a></p>\n<p>[6] 《系统架构-复杂系统的产品设计与开发》</p>\n<p><strong>阅读更多</strong></p>\n<p>-–</p>\n<p><a href=\"https://t.1yb.co/jo7r\">前端</a>** |<strong><a href=\"https://t.1yb.co/jo7v\"> </a><a href=\"https://t.1yb.co/jsdG\">算法</a></strong> |** <a href=\"https://t.1yb.co/jsWK\">后端</a>** | **<a href=\"https://t.1yb.co/jqRZ\">数据</a></p>\n<p><a href=\"https://t.1yb.co/jo7v\">安全</a>** | <strong><a href=\"https://t.1yb.co/jui4\">Android</a></strong> |** <a href=\"https://t.1yb.co/jtXE\">iOS</a> ** |** <a href=\"https://t.1yb.co/jo7K\">运维</a>** | **<a href=\"https://t.1yb.co/jtsX\">测试</a></p>\n<p>-———  END  -———</p>\n<p><strong>招聘信息</strong></p>\n<p>美团到店综合研发中心长期招聘前端、后端、数据仓库、机器学习/数据挖掘算法工程师，坐标上海，欢迎感兴趣的同学发送简历至：tech@meituan.com（邮件标题注明：美团到店综合研发中心—上海）。</p>\n<p><strong>也许你还想看</strong></p>\n<p>**  | **<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd124aae8a65c3b888df80cc15d2f6dbd25c7e7094f3dc665c8e9079963b709043ac6fe865a7&idx=1&mid=2651755491&scene=21&sn=4ac719deb5781e9060b4d023bc75691f#wechat_redirect\">移动端UI一致性解决方案</a></p>\n<p>**  |** <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd1252888a65db9e9aac10fb930f5ad6a2f62b47b6df868c7cb975ebf613650ad3c4b8ade51e&idx=1&mid=2651753413&scene=21&sn=e987b6a105d65952de35c86e5f19ba03#wechat_redirect\">外卖客户端容器化架构的演进</a></p>\n<p>**  |** <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd12aeee8a6527f8a297d0dc797b81492837019c821898ae21c3e158831aaa7a383d5155ec9b&idx=1&mid=2651748259&scene=21&sn=a7ef0d515e94631c8d86bdbbf81da143#wechat_redirect\">美团外卖iOS多端复用的推动、支撑与思考</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ff5c1ae9c5bc0135299c86b4d6026a6.png\"></p>"},{"title":"shiro","date":"2021-06-10T06:00:39.000Z","_content":"###shiro鉴权\n\njwt和shiro鉴权一起使用\n通过realm判断权限问题\n<!-- more -->\n JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。虫虫今天给大家介绍JWT的原理和用法。","source":"_posts/shiro.md","raw":"---\ntitle: shiro\ndate: 2021-06-10 14:00:39\ntags:\n---\n###shiro鉴权\n\njwt和shiro鉴权一起使用\n通过realm判断权限问题\n<!-- more -->\n JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。虫虫今天给大家介绍JWT的原理和用法。","slug":"shiro","published":1,"updated":"2021-07-28T02:56:56.394Z","_id":"ckpyrh3s000007lv98cgr5mpb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>###shiro鉴权</p>\n<p>jwt和shiro鉴权一起使用<br>通过realm判断权限问题</p>\n<span id=\"more\"></span>\n<p> JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。虫虫今天给大家介绍JWT的原理和用法。</p>\n","site":{"data":{}},"excerpt":"<p>###shiro鉴权</p>\n<p>jwt和shiro鉴权一起使用<br>通过realm判断权限问题</p>","more":"<p> JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。虫虫今天给大家介绍JWT的原理和用法。</p>"},{"title":"python学习","date":"2021-07-12T03:45:34.000Z","_content":"查看jvm程序占用存储是多少\nps -p 21971  -o rss,vsz\n<!-- more -->","source":"_posts/python学习.md","raw":"---\ntitle: python学习\ndate: 2021-07-12 11:45:34\ntags:\n---\n查看jvm程序占用存储是多少\nps -p 21971  -o rss,vsz\n<!-- more -->","slug":"python学习","published":1,"updated":"2021-07-22T07:00:56.733Z","_id":"ckrd34xcp00001ev949spfiqh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查看jvm程序占用存储是多少<br>ps -p 21971  -o rss,vsz</p>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p>查看jvm程序占用存储是多少<br>ps -p 21971  -o rss,vsz</p>","more":""},{"title":"学习Maven之Maven Surefire Plugin(JUnit篇)","date":"2021-07-14T02:58:37.000Z","_content":"# 学习Maven之Maven Surefire Plugin(JUnit篇)\nmaven的生命周期有哪些阶段？\n<!-- more -->\n[validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]\n当然，如果你明确用的是JUnit4.7及以上版本，可以明确声明：\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit47</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit4.0(含)到JUnit4.7(不含)的版本，这样声明:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit4</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit3.8(含)到JUnit4.0(不含)的版本，这样声明:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit3</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit3.8以下的版本surefire不支持。建议大家用最新的JUnit版本，目前是4.12.\n```\n<dependencies>\n\t[...]\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n        <scope>test</scope>\n    </dependency>\n\t[...]        \n</dependencies>\n```\n本文的例子我们用的Junit4.12.\n本项目中：\n```pom\n <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.1</version>\n                <configuration>\n                    <forkCount>1</forkCount>\n                    <reuseForks>false</reuseForks>\n                    <testFailureIgnore>true</testFailureIgnore>\n                    <skipTests>false</skipTests>\n                </configuration>\n            </plugin>\n```\ndependency\n```\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <artifactId>mockito-core</artifactId>\n                    <groupId>org.mockito</groupId>\n                </exclusion>\n                <exclusion>\n                    <artifactId>junit</artifactId>\n                    <groupId>junit</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n```\n在spring-boot-starter-test中用的JUnit Jupiter        \nJunit Jupiter是junit5\nJUnit with Gradle\n代码地址为\nhttps://github.com/makotogo/HelloJUnit5\n导入idea中会出现\n“Cannot add task 'wrapper' as a task with that name already exists.”\n这是因为gradle版本所致，修改文件\n```\n\n// 旧版本是:\ntask wrapper(type:Wrapper) {\n    //configuration\n}\n \n// 新版本是：\nwrapper {\n    //configuration\n\n```\n运行gradle test报错\nIDEA报错：Process ‘command ‘./Java/jdk1.8.0_131/bin/java.exe‘‘ finished with non-zero exit value 1 解决！\n解决办法：\n设置idea-》settings-》gradle \n设置run test using “intelij idea”","source":"_posts/学习Maven之Maven-Surefire-Plugin-JUnit篇.md","raw":"---\ntitle: 学习Maven之Maven Surefire Plugin(JUnit篇)\ndate: 2021-07-14 10:58:37\ntags:\n---\n# 学习Maven之Maven Surefire Plugin(JUnit篇)\nmaven的生命周期有哪些阶段？\n<!-- more -->\n[validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]\n当然，如果你明确用的是JUnit4.7及以上版本，可以明确声明：\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit47</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit4.0(含)到JUnit4.7(不含)的版本，这样声明:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit4</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit3.8(含)到JUnit4.0(不含)的版本，这样声明:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit3</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit3.8以下的版本surefire不支持。建议大家用最新的JUnit版本，目前是4.12.\n```\n<dependencies>\n\t[...]\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n        <scope>test</scope>\n    </dependency>\n\t[...]        \n</dependencies>\n```\n本文的例子我们用的Junit4.12.\n本项目中：\n```pom\n <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.1</version>\n                <configuration>\n                    <forkCount>1</forkCount>\n                    <reuseForks>false</reuseForks>\n                    <testFailureIgnore>true</testFailureIgnore>\n                    <skipTests>false</skipTests>\n                </configuration>\n            </plugin>\n```\ndependency\n```\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <artifactId>mockito-core</artifactId>\n                    <groupId>org.mockito</groupId>\n                </exclusion>\n                <exclusion>\n                    <artifactId>junit</artifactId>\n                    <groupId>junit</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n```\n在spring-boot-starter-test中用的JUnit Jupiter        \nJunit Jupiter是junit5\nJUnit with Gradle\n代码地址为\nhttps://github.com/makotogo/HelloJUnit5\n导入idea中会出现\n“Cannot add task 'wrapper' as a task with that name already exists.”\n这是因为gradle版本所致，修改文件\n```\n\n// 旧版本是:\ntask wrapper(type:Wrapper) {\n    //configuration\n}\n \n// 新版本是：\nwrapper {\n    //configuration\n\n```\n运行gradle test报错\nIDEA报错：Process ‘command ‘./Java/jdk1.8.0_131/bin/java.exe‘‘ finished with non-zero exit value 1 解决！\n解决办法：\n设置idea-》settings-》gradle \n设置run test using “intelij idea”","slug":"学习Maven之Maven-Surefire-Plugin-JUnit篇","published":1,"updated":"2021-07-22T03:15:30.212Z","_id":"ckrd34xcv00011ev96v6recnb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"学习Maven之Maven-Surefire-Plugin-JUnit篇\"><a href=\"#学习Maven之Maven-Surefire-Plugin-JUnit篇\" class=\"headerlink\" title=\"学习Maven之Maven Surefire Plugin(JUnit篇)\"></a>学习Maven之Maven Surefire Plugin(JUnit篇)</h1><p>maven的生命周期有哪些阶段？</p>\n<span id=\"more\"></span>\n<p>[validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]<br>当然，如果你明确用的是JUnit4.7及以上版本，可以明确声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit47&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit4.0(含)到JUnit4.7(不含)的版本，这样声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit4&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit3.8(含)到JUnit4.0(不含)的版本，这样声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit3&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit3.8以下的版本surefire不支持。建议大家用最新的JUnit版本，目前是4.12.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t[...]</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class=\"line\">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">\t[...]        </span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>本文的例子我们用的Junit4.12.<br>本项目中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">               &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class=\"line\">               &lt;configuration&gt;</span><br><span class=\"line\">                   &lt;forkCount&gt;1&lt;/forkCount&gt;</span><br><span class=\"line\">                   &lt;reuseForks&gt;false&lt;/reuseForks&gt;</span><br><span class=\"line\">                   &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;</span><br><span class=\"line\">                   &lt;skipTests&gt;false&lt;/skipTests&gt;</span><br><span class=\"line\">               &lt;/configuration&gt;</span><br><span class=\"line\">           &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>dependency</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">           &lt;exclusions&gt;</span><br><span class=\"line\">               &lt;exclusion&gt;</span><br><span class=\"line\">                   &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;</span><br><span class=\"line\">                   &lt;groupId&gt;org.mockito&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;/exclusion&gt;</span><br><span class=\"line\">               &lt;exclusion&gt;</span><br><span class=\"line\">                   &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">                   &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;/exclusion&gt;</span><br><span class=\"line\">           &lt;/exclusions&gt;</span><br><span class=\"line\">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>在spring-boot-starter-test中用的JUnit Jupiter<br>Junit Jupiter是junit5<br>JUnit with Gradle<br>代码地址为<br><a href=\"https://github.com/makotogo/HelloJUnit5\">https://github.com/makotogo/HelloJUnit5</a><br>导入idea中会出现<br>“Cannot add task ‘wrapper’ as a task with that name already exists.”<br>这是因为gradle版本所致，修改文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 旧版本是:</span><br><span class=\"line\">task wrapper(type:Wrapper) &#123;</span><br><span class=\"line\">    //configuration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 新版本是：</span><br><span class=\"line\">wrapper &#123;</span><br><span class=\"line\">    //configuration</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>运行gradle test报错<br>IDEA报错：Process ‘command ‘./Java/jdk1.8.0_131/bin/java.exe‘‘ finished with non-zero exit value 1 解决！<br>解决办法：<br>设置idea-》settings-》gradle<br>设置run test using “intelij idea”</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"学习Maven之Maven-Surefire-Plugin-JUnit篇\"><a href=\"#学习Maven之Maven-Surefire-Plugin-JUnit篇\" class=\"headerlink\" title=\"学习Maven之Maven Surefire Plugin(JUnit篇)\"></a>学习Maven之Maven Surefire Plugin(JUnit篇)</h1><p>maven的生命周期有哪些阶段？</p>","more":"<p>[validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]<br>当然，如果你明确用的是JUnit4.7及以上版本，可以明确声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit47&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit4.0(含)到JUnit4.7(不含)的版本，这样声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit4&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit3.8(含)到JUnit4.0(不含)的版本，这样声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit3&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit3.8以下的版本surefire不支持。建议大家用最新的JUnit版本，目前是4.12.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t[...]</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class=\"line\">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">\t[...]        </span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>本文的例子我们用的Junit4.12.<br>本项目中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">               &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class=\"line\">               &lt;configuration&gt;</span><br><span class=\"line\">                   &lt;forkCount&gt;1&lt;/forkCount&gt;</span><br><span class=\"line\">                   &lt;reuseForks&gt;false&lt;/reuseForks&gt;</span><br><span class=\"line\">                   &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;</span><br><span class=\"line\">                   &lt;skipTests&gt;false&lt;/skipTests&gt;</span><br><span class=\"line\">               &lt;/configuration&gt;</span><br><span class=\"line\">           &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>dependency</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">           &lt;exclusions&gt;</span><br><span class=\"line\">               &lt;exclusion&gt;</span><br><span class=\"line\">                   &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;</span><br><span class=\"line\">                   &lt;groupId&gt;org.mockito&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;/exclusion&gt;</span><br><span class=\"line\">               &lt;exclusion&gt;</span><br><span class=\"line\">                   &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">                   &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;/exclusion&gt;</span><br><span class=\"line\">           &lt;/exclusions&gt;</span><br><span class=\"line\">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>在spring-boot-starter-test中用的JUnit Jupiter<br>Junit Jupiter是junit5<br>JUnit with Gradle<br>代码地址为<br><a href=\"https://github.com/makotogo/HelloJUnit5\">https://github.com/makotogo/HelloJUnit5</a><br>导入idea中会出现<br>“Cannot add task ‘wrapper’ as a task with that name already exists.”<br>这是因为gradle版本所致，修改文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 旧版本是:</span><br><span class=\"line\">task wrapper(type:Wrapper) &#123;</span><br><span class=\"line\">    //configuration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 新版本是：</span><br><span class=\"line\">wrapper &#123;</span><br><span class=\"line\">    //configuration</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>运行gradle test报错<br>IDEA报错：Process ‘command ‘./Java/jdk1.8.0_131/bin/java.exe‘‘ finished with non-zero exit value 1 解决！<br>解决办法：<br>设置idea-》settings-》gradle<br>设置run test using “intelij idea”</p>"},{"title":"一文教你用Typora + Gitee(码云) + PicGo 实现 云 markdown笔记","date":"2021-07-28T01:59:14.000Z","photos":["https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg"],"_content":"\n## 前言\n\n你在开心写markdown文档时，有没有为图片的分享，而煎熬，现在通过picgo吧图片上传gitee上，实现文档的分享，会不会很开心。好的，下面开始介绍如何操作\n\n1.picgo安装\n\n下载picgo\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg\" width=50% />\n哇，漂亮的小姐姐(❤ ω ❤)\n<!--more-->\n\n\n下载路径：\n\nhttps://github.com/Molunerfinn/PicGo/releases\n\n![image-20210728110457315](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110457315.png)\n\n如上图选择对应的安装文件下载：\n\n点击安装picgo进行配置：\n\n### 1.1 安装gitee插件\n\n![image-20210728110604641](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110604641.png)\n\n输入gitee搜索：\n\n![image-20210728110631995](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110631995.png)\n\n先安装gitee-uploader，再安装gitee 2.0.3\n\n接下面配置图床：\n\n ![](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111204092.png)\n\n配置gitee图床：\n\n1）*repo: 为 username + 仓库名，![image-20210728111307879](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111307879.png)\n\n2）branch: 分支，之前创建仓库的时候使用Readme文件初始化仓库的时候为我们创建了master 分支\n\n3）*token:：私人令牌，获取方式\n点击头像 --> 进入个人主页 --> 点击私人令牌 （私人令牌只出现一次，丢了需要重新创建）\n\n4）path 设为img\n\n5）customepath选择年月即可\n\n点击确定，设为默认图床\n\n点击测试上传，来验证是否生效\n\n![image-20210728111621502](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111621502.png)\n\n![image-20210728111639810](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111639810.png)\n\n图片可以在gitee上看见\n\n2.接下来配置typora\n\n![image-20210728112225189](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112225189.png)\n\n对于typora还是需要在配置命令行，因为无法选择app\n\n进入命令行目录\n\n```\ncd C:\\Users\\hxf\\AppData\\Roaming\\Typora\\picgo\\win64\n.\\picgo.exe install gitee-uploader\n.\\picgo.exe  set uploader\n\n```\n\n选择gitee\n\n配置如下：\n\n```\n{\n  \"picBed\": {\n    \"current\": \"gitee\",\n    \"gitee\": {\n      \"repo\": \"hxf88/imgrepo\",\n      \"branch\": \"master\",\n      \"token\": \"994875f6f8aacc9508dc707ade1485c1\",\n      \"path\": \"img\",\n      \"customPath\": \"yearMonth\",\n      \"customUrl\": \"\"\n    },\n    \"uploader\": \"gitee\",\n    \"transformer\": \"path\"\n  },\n  \"picgoPlugins\": {\n    \"picgo-plugin-gitee\": true,\n    \"picgo-plugin-gitee-uploader\": true,\n    \"picgo-plugin-smms-user\": true\n  }\n}\n```\n\n![image-20210728112806311](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112806311.png)\n\n当配置完后选择，testuploader，当看到上传成功即可。\n\n下面就可以愉快写文档了。\n\n","source":"_posts/一文教你用Typora-Gitee-码云-PicGo-实现-云-markdown笔记.md","raw":"---\ntitle: 一文教你用Typora + Gitee(码云) + PicGo 实现 云 markdown笔记\ndate: 2021-07-28 09:59:14\ntags: gitee typora picgo\nphotos:\n  -  \"https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg\"\n---\n\n## 前言\n\n你在开心写markdown文档时，有没有为图片的分享，而煎熬，现在通过picgo吧图片上传gitee上，实现文档的分享，会不会很开心。好的，下面开始介绍如何操作\n\n1.picgo安装\n\n下载picgo\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg\" width=50% />\n哇，漂亮的小姐姐(❤ ω ❤)\n<!--more-->\n\n\n下载路径：\n\nhttps://github.com/Molunerfinn/PicGo/releases\n\n![image-20210728110457315](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110457315.png)\n\n如上图选择对应的安装文件下载：\n\n点击安装picgo进行配置：\n\n### 1.1 安装gitee插件\n\n![image-20210728110604641](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110604641.png)\n\n输入gitee搜索：\n\n![image-20210728110631995](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110631995.png)\n\n先安装gitee-uploader，再安装gitee 2.0.3\n\n接下面配置图床：\n\n ![](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111204092.png)\n\n配置gitee图床：\n\n1）*repo: 为 username + 仓库名，![image-20210728111307879](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111307879.png)\n\n2）branch: 分支，之前创建仓库的时候使用Readme文件初始化仓库的时候为我们创建了master 分支\n\n3）*token:：私人令牌，获取方式\n点击头像 --> 进入个人主页 --> 点击私人令牌 （私人令牌只出现一次，丢了需要重新创建）\n\n4）path 设为img\n\n5）customepath选择年月即可\n\n点击确定，设为默认图床\n\n点击测试上传，来验证是否生效\n\n![image-20210728111621502](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111621502.png)\n\n![image-20210728111639810](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111639810.png)\n\n图片可以在gitee上看见\n\n2.接下来配置typora\n\n![image-20210728112225189](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112225189.png)\n\n对于typora还是需要在配置命令行，因为无法选择app\n\n进入命令行目录\n\n```\ncd C:\\Users\\hxf\\AppData\\Roaming\\Typora\\picgo\\win64\n.\\picgo.exe install gitee-uploader\n.\\picgo.exe  set uploader\n\n```\n\n选择gitee\n\n配置如下：\n\n```\n{\n  \"picBed\": {\n    \"current\": \"gitee\",\n    \"gitee\": {\n      \"repo\": \"hxf88/imgrepo\",\n      \"branch\": \"master\",\n      \"token\": \"994875f6f8aacc9508dc707ade1485c1\",\n      \"path\": \"img\",\n      \"customPath\": \"yearMonth\",\n      \"customUrl\": \"\"\n    },\n    \"uploader\": \"gitee\",\n    \"transformer\": \"path\"\n  },\n  \"picgoPlugins\": {\n    \"picgo-plugin-gitee\": true,\n    \"picgo-plugin-gitee-uploader\": true,\n    \"picgo-plugin-smms-user\": true\n  }\n}\n```\n\n![image-20210728112806311](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112806311.png)\n\n当配置完后选择，testuploader，当看到上传成功即可。\n\n下面就可以愉快写文档了。\n\n","slug":"一文教你用Typora-Gitee-码云-PicGo-实现-云-markdown笔记","published":1,"updated":"2021-08-24T08:55:22.993Z","_id":"ckrmzjq0z00006zv9647k5x36","comments":1,"layout":"post","link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>你在开心写markdown文档时，有没有为图片的分享，而煎熬，现在通过picgo吧图片上传gitee上，实现文档的分享，会不会很开心。好的，下面开始介绍如何操作</p>\n<p>1.picgo安装</p>\n<p>下载picgo<br><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg\" width=50% /><br>哇，漂亮的小姐姐(❤ ω ❤)</p>\n<span id=\"more\"></span>\n\n\n<p>下载路径：</p>\n<p><a href=\"https://github.com/Molunerfinn/PicGo/releases\">https://github.com/Molunerfinn/PicGo/releases</a></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110457315.png\" alt=\"image-20210728110457315\"></p>\n<p>如上图选择对应的安装文件下载：</p>\n<p>点击安装picgo进行配置：</p>\n<h3 id=\"1-1-安装gitee插件\"><a href=\"#1-1-安装gitee插件\" class=\"headerlink\" title=\"1.1 安装gitee插件\"></a>1.1 安装gitee插件</h3><p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110604641.png\" alt=\"image-20210728110604641\"></p>\n<p>输入gitee搜索：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110631995.png\" alt=\"image-20210728110631995\"></p>\n<p>先安装gitee-uploader，再安装gitee 2.0.3</p>\n<p>接下面配置图床：</p>\n<p> <img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111204092.png\"></p>\n<p>配置gitee图床：</p>\n<p>1）*repo: 为 username + 仓库名，<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111307879.png\" alt=\"image-20210728111307879\"></p>\n<p>2）branch: 分支，之前创建仓库的时候使用Readme文件初始化仓库的时候为我们创建了master 分支</p>\n<p>3）*token:：私人令牌，获取方式<br>点击头像 –&gt; 进入个人主页 –&gt; 点击私人令牌 （私人令牌只出现一次，丢了需要重新创建）</p>\n<p>4）path 设为img</p>\n<p>5）customepath选择年月即可</p>\n<p>点击确定，设为默认图床</p>\n<p>点击测试上传，来验证是否生效</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111621502.png\" alt=\"image-20210728111621502\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111639810.png\" alt=\"image-20210728111639810\"></p>\n<p>图片可以在gitee上看见</p>\n<p>2.接下来配置typora</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112225189.png\" alt=\"image-20210728112225189\"></p>\n<p>对于typora还是需要在配置命令行，因为无法选择app</p>\n<p>进入命令行目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd C:\\Users\\hxf\\AppData\\Roaming\\Typora\\picgo\\win64</span><br><span class=\"line\">.\\picgo.exe install gitee-uploader</span><br><span class=\"line\">.\\picgo.exe  set uploader</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选择gitee</p>\n<p>配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;picBed&quot;: &#123;</span><br><span class=\"line\">    &quot;current&quot;: &quot;gitee&quot;,</span><br><span class=\"line\">    &quot;gitee&quot;: &#123;</span><br><span class=\"line\">      &quot;repo&quot;: &quot;hxf88/imgrepo&quot;,</span><br><span class=\"line\">      &quot;branch&quot;: &quot;master&quot;,</span><br><span class=\"line\">      &quot;token&quot;: &quot;994875f6f8aacc9508dc707ade1485c1&quot;,</span><br><span class=\"line\">      &quot;path&quot;: &quot;img&quot;,</span><br><span class=\"line\">      &quot;customPath&quot;: &quot;yearMonth&quot;,</span><br><span class=\"line\">      &quot;customUrl&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;uploader&quot;: &quot;gitee&quot;,</span><br><span class=\"line\">    &quot;transformer&quot;: &quot;path&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;picgoPlugins&quot;: &#123;</span><br><span class=\"line\">    &quot;picgo-plugin-gitee&quot;: true,</span><br><span class=\"line\">    &quot;picgo-plugin-gitee-uploader&quot;: true,</span><br><span class=\"line\">    &quot;picgo-plugin-smms-user&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112806311.png\" alt=\"image-20210728112806311\"></p>\n<p>当配置完后选择，testuploader，当看到上传成功即可。</p>\n<p>下面就可以愉快写文档了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>你在开心写markdown文档时，有没有为图片的分享，而煎熬，现在通过picgo吧图片上传gitee上，实现文档的分享，会不会很开心。好的，下面开始介绍如何操作</p>\n<p>1.picgo安装</p>\n<p>下载picgo<br><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg\" width=50% /><br>哇，漂亮的小姐姐(❤ ω ❤)</p>","more":"<p>下载路径：</p>\n<p><a href=\"https://github.com/Molunerfinn/PicGo/releases\">https://github.com/Molunerfinn/PicGo/releases</a></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110457315.png\" alt=\"image-20210728110457315\"></p>\n<p>如上图选择对应的安装文件下载：</p>\n<p>点击安装picgo进行配置：</p>\n<h3 id=\"1-1-安装gitee插件\"><a href=\"#1-1-安装gitee插件\" class=\"headerlink\" title=\"1.1 安装gitee插件\"></a>1.1 安装gitee插件</h3><p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110604641.png\" alt=\"image-20210728110604641\"></p>\n<p>输入gitee搜索：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110631995.png\" alt=\"image-20210728110631995\"></p>\n<p>先安装gitee-uploader，再安装gitee 2.0.3</p>\n<p>接下面配置图床：</p>\n<p> <img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111204092.png\"></p>\n<p>配置gitee图床：</p>\n<p>1）*repo: 为 username + 仓库名，<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111307879.png\" alt=\"image-20210728111307879\"></p>\n<p>2）branch: 分支，之前创建仓库的时候使用Readme文件初始化仓库的时候为我们创建了master 分支</p>\n<p>3）*token:：私人令牌，获取方式<br>点击头像 –&gt; 进入个人主页 –&gt; 点击私人令牌 （私人令牌只出现一次，丢了需要重新创建）</p>\n<p>4）path 设为img</p>\n<p>5）customepath选择年月即可</p>\n<p>点击确定，设为默认图床</p>\n<p>点击测试上传，来验证是否生效</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111621502.png\" alt=\"image-20210728111621502\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111639810.png\" alt=\"image-20210728111639810\"></p>\n<p>图片可以在gitee上看见</p>\n<p>2.接下来配置typora</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112225189.png\" alt=\"image-20210728112225189\"></p>\n<p>对于typora还是需要在配置命令行，因为无法选择app</p>\n<p>进入命令行目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd C:\\Users\\hxf\\AppData\\Roaming\\Typora\\picgo\\win64</span><br><span class=\"line\">.\\picgo.exe install gitee-uploader</span><br><span class=\"line\">.\\picgo.exe  set uploader</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选择gitee</p>\n<p>配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;picBed&quot;: &#123;</span><br><span class=\"line\">    &quot;current&quot;: &quot;gitee&quot;,</span><br><span class=\"line\">    &quot;gitee&quot;: &#123;</span><br><span class=\"line\">      &quot;repo&quot;: &quot;hxf88/imgrepo&quot;,</span><br><span class=\"line\">      &quot;branch&quot;: &quot;master&quot;,</span><br><span class=\"line\">      &quot;token&quot;: &quot;994875f6f8aacc9508dc707ade1485c1&quot;,</span><br><span class=\"line\">      &quot;path&quot;: &quot;img&quot;,</span><br><span class=\"line\">      &quot;customPath&quot;: &quot;yearMonth&quot;,</span><br><span class=\"line\">      &quot;customUrl&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;uploader&quot;: &quot;gitee&quot;,</span><br><span class=\"line\">    &quot;transformer&quot;: &quot;path&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;picgoPlugins&quot;: &#123;</span><br><span class=\"line\">    &quot;picgo-plugin-gitee&quot;: true,</span><br><span class=\"line\">    &quot;picgo-plugin-gitee-uploader&quot;: true,</span><br><span class=\"line\">    &quot;picgo-plugin-smms-user&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112806311.png\" alt=\"image-20210728112806311\"></p>\n<p>当配置完后选择，testuploader，当看到上传成功即可。</p>\n<p>下面就可以愉快写文档了。</p>"},{"title":"go加速","date":"2021-07-29T03:14:19.000Z","_content":"\n使用七牛云 go module 镜像\n\ngolang1.13.x 可以直接执行：\n\n```\ngo` `env -w GO111MODULE=on``go` `env -w GOPROXY=https:``//goproxy.cn,direct\n```\n<!--more-->\n\n然后再次使用 go get 下载 gin 依赖就可以了。\n\n","source":"_posts/go加速.md","raw":"---\ntitle: go加速\ndate: 2021-07-29 11:14:19\ntags: go\n---\n\n使用七牛云 go module 镜像\n\ngolang1.13.x 可以直接执行：\n\n```\ngo` `env -w GO111MODULE=on``go` `env -w GOPROXY=https:``//goproxy.cn,direct\n```\n<!--more-->\n\n然后再次使用 go get 下载 gin 依赖就可以了。\n\n","slug":"go加速","published":1,"updated":"2021-08-23T00:38:38.711Z","_id":"ckrybznbw00008sv970yy489g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用七牛云 go module 镜像</p>\n<p>golang1.13.x 可以直接执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go` `env -w GO111MODULE=on``go` `env -w GOPROXY=https:``//goproxy.cn,direct</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>然后再次使用 go get 下载 gin 依赖就可以了。</p>\n","site":{"data":{}},"excerpt":"<p>使用七牛云 go module 镜像</p>\n<p>golang1.13.x 可以直接执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go` `env -w GO111MODULE=on``go` `env -w GOPROXY=https:``//goproxy.cn,direct</span><br></pre></td></tr></table></figure>","more":"<p>然后再次使用 go get 下载 gin 依赖就可以了。</p>"},{"title":"windowsTerminal美化","date":"2021-07-29T09:32:47.000Z","_content":"\n安装 Window Terminal \n\n有两种安装方式，这个要自行选择\n\n git 安装\n\n  1.0正式版本已经发布了，不需要自行编译了。直接去Github Window Terminal下载安装即可 \n\n商店安装\n<!--more-->\n在微软商店里搜windows terminal，安装即可。 1、商店打不开的，自行解决，直接了当的方式就是升级系统到最新版本，重启。 2、提示当前所在的区域不支持的话 ： 登录账号的进账号把自己所在区域地址改成美国，然后把系统时间设置成美国。重启 正常情况下，你会安装成功的。 可以继续往下看了，先放一张图：\n\n![image-20210730112728438](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210730112728438.png)我们需要安装以下模块：\n\n\n```\n\nInstall-Module git-aliases -AllowColbber\nInstall-Module posh-git\nInstall-Module oh-my-posh\nInstall-Module DirColors#让ls等命令可以像Unix系统终端一样具有多彩的颜色。\n\n```\n\n## 保存配置\n\n```\n notepad $PROFILE\n```\n\n通过notepad打开配置文件：\n\n输入以下内容：\n\n```\nImport-Module posh-git # 引入 posh-git\nImport-Module oh-my-posh # 引入 oh-my-posh\nImport-Module DirColors\nImport-Module git-aliases -DisableNameChecking\n\nSet-PoshPrompt -Theme PowerLine\n\nSet-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录\n\nSet-PSReadlineKeyHandler -Key Tab -Function Complete # 设置 Tab 键补全\nSet-PSReadLineKeyHandler -Key \"Ctrl+d\" -Function MenuComplete # 设置 Ctrl+d 为菜单补全和 Intellisense\nSet-PSReadLineKeyHandler -Key \"Ctrl+z\" -Function Undo # 设置 Ctrl+z 为撤销\nSet-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向上键为后向搜索历史记录\nSet-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward # 设置向下键为前向搜索历史纪录\n```\n\n## 分屏\n\nwindows terminal 也支持分屏，分屏的快捷键为：\n\n- 水平分屏 alt + shift + - (减号)\n- 垂直分屏 alt + shift + + (加号)\n\n切换当前的分屏视图：alt + left/right/up/down\n调整分屏的窗口的大小：alt + shift + left/right/up/down\n\n缩放当前视图：ctrl + +/-/鼠标滚轮\n\n退出当前分屏视图：直接输入`exit`\n\n参考文章：[windows terminal 终极美化](https://www.chuchur.com/article/windows-terminal-beautify)\n\n[https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/](https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/)\n\n​             \n\n","source":"_posts/windowsTerminal美化.md","raw":"---\ntitle: windowsTerminal美化\ndate: 2021-07-29 17:32:47\ntags:  windowsTerminal powershell7\n---\n\n安装 Window Terminal \n\n有两种安装方式，这个要自行选择\n\n git 安装\n\n  1.0正式版本已经发布了，不需要自行编译了。直接去Github Window Terminal下载安装即可 \n\n商店安装\n<!--more-->\n在微软商店里搜windows terminal，安装即可。 1、商店打不开的，自行解决，直接了当的方式就是升级系统到最新版本，重启。 2、提示当前所在的区域不支持的话 ： 登录账号的进账号把自己所在区域地址改成美国，然后把系统时间设置成美国。重启 正常情况下，你会安装成功的。 可以继续往下看了，先放一张图：\n\n![image-20210730112728438](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210730112728438.png)我们需要安装以下模块：\n\n\n```\n\nInstall-Module git-aliases -AllowColbber\nInstall-Module posh-git\nInstall-Module oh-my-posh\nInstall-Module DirColors#让ls等命令可以像Unix系统终端一样具有多彩的颜色。\n\n```\n\n## 保存配置\n\n```\n notepad $PROFILE\n```\n\n通过notepad打开配置文件：\n\n输入以下内容：\n\n```\nImport-Module posh-git # 引入 posh-git\nImport-Module oh-my-posh # 引入 oh-my-posh\nImport-Module DirColors\nImport-Module git-aliases -DisableNameChecking\n\nSet-PoshPrompt -Theme PowerLine\n\nSet-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录\n\nSet-PSReadlineKeyHandler -Key Tab -Function Complete # 设置 Tab 键补全\nSet-PSReadLineKeyHandler -Key \"Ctrl+d\" -Function MenuComplete # 设置 Ctrl+d 为菜单补全和 Intellisense\nSet-PSReadLineKeyHandler -Key \"Ctrl+z\" -Function Undo # 设置 Ctrl+z 为撤销\nSet-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向上键为后向搜索历史记录\nSet-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward # 设置向下键为前向搜索历史纪录\n```\n\n## 分屏\n\nwindows terminal 也支持分屏，分屏的快捷键为：\n\n- 水平分屏 alt + shift + - (减号)\n- 垂直分屏 alt + shift + + (加号)\n\n切换当前的分屏视图：alt + left/right/up/down\n调整分屏的窗口的大小：alt + shift + left/right/up/down\n\n缩放当前视图：ctrl + +/-/鼠标滚轮\n\n退出当前分屏视图：直接输入`exit`\n\n参考文章：[windows terminal 终极美化](https://www.chuchur.com/article/windows-terminal-beautify)\n\n[https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/](https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/)\n\n​             \n\n","slug":"windowsTerminal美化","published":1,"updated":"2021-08-23T00:38:38.735Z","_id":"ckrybznc100018sv9aoil7pt6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>安装 Window Terminal </p>\n<p>有两种安装方式，这个要自行选择</p>\n<p> git 安装</p>\n<p>  1.0正式版本已经发布了，不需要自行编译了。直接去Github Window Terminal下载安装即可 </p>\n<p>商店安装</p>\n<span id=\"more\"></span>\n<p>在微软商店里搜windows terminal，安装即可。 1、商店打不开的，自行解决，直接了当的方式就是升级系统到最新版本，重启。 2、提示当前所在的区域不支持的话 ： 登录账号的进账号把自己所在区域地址改成美国，然后把系统时间设置成美国。重启 正常情况下，你会安装成功的。 可以继续往下看了，先放一张图：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210730112728438.png\" alt=\"image-20210730112728438\">我们需要安装以下模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Install-Module git-aliases -AllowColbber</span><br><span class=\"line\">Install-Module posh-git</span><br><span class=\"line\">Install-Module oh-my-posh</span><br><span class=\"line\">Install-Module DirColors#让ls等命令可以像Unix系统终端一样具有多彩的颜色。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保存配置\"><a href=\"#保存配置\" class=\"headerlink\" title=\"保存配置\"></a>保存配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notepad $PROFILE</span><br></pre></td></tr></table></figure>\n\n<p>通过notepad打开配置文件：</p>\n<p>输入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Import-Module posh-git # 引入 posh-git</span><br><span class=\"line\">Import-Module oh-my-posh # 引入 oh-my-posh</span><br><span class=\"line\">Import-Module DirColors</span><br><span class=\"line\">Import-Module git-aliases -DisableNameChecking</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PoshPrompt -Theme PowerLine</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PSReadlineKeyHandler -Key Tab -Function Complete # 设置 Tab 键补全</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key &quot;Ctrl+d&quot; -Function MenuComplete # 设置 Ctrl+d 为菜单补全和 Intellisense</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key &quot;Ctrl+z&quot; -Function Undo # 设置 Ctrl+z 为撤销</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向上键为后向搜索历史记录</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward # 设置向下键为前向搜索历史纪录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h2><p>windows terminal 也支持分屏，分屏的快捷键为：</p>\n<ul>\n<li>水平分屏 alt + shift + - (减号)</li>\n<li>垂直分屏 alt + shift + + (加号)</li>\n</ul>\n<p>切换当前的分屏视图：alt + left/right/up/down<br>调整分屏的窗口的大小：alt + shift + left/right/up/down</p>\n<p>缩放当前视图：ctrl + +/-/鼠标滚轮</p>\n<p>退出当前分屏视图：直接输入<code>exit</code></p>\n<p>参考文章：<a href=\"https://www.chuchur.com/article/windows-terminal-beautify\">windows terminal 终极美化</a></p>\n<p><a href=\"https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/\">https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/</a></p>\n<p>​             </p>\n","site":{"data":{}},"excerpt":"<p>安装 Window Terminal </p>\n<p>有两种安装方式，这个要自行选择</p>\n<p> git 安装</p>\n<p>  1.0正式版本已经发布了，不需要自行编译了。直接去Github Window Terminal下载安装即可 </p>\n<p>商店安装</p>","more":"<p>在微软商店里搜windows terminal，安装即可。 1、商店打不开的，自行解决，直接了当的方式就是升级系统到最新版本，重启。 2、提示当前所在的区域不支持的话 ： 登录账号的进账号把自己所在区域地址改成美国，然后把系统时间设置成美国。重启 正常情况下，你会安装成功的。 可以继续往下看了，先放一张图：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210730112728438.png\" alt=\"image-20210730112728438\">我们需要安装以下模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Install-Module git-aliases -AllowColbber</span><br><span class=\"line\">Install-Module posh-git</span><br><span class=\"line\">Install-Module oh-my-posh</span><br><span class=\"line\">Install-Module DirColors#让ls等命令可以像Unix系统终端一样具有多彩的颜色。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保存配置\"><a href=\"#保存配置\" class=\"headerlink\" title=\"保存配置\"></a>保存配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notepad $PROFILE</span><br></pre></td></tr></table></figure>\n\n<p>通过notepad打开配置文件：</p>\n<p>输入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Import-Module posh-git # 引入 posh-git</span><br><span class=\"line\">Import-Module oh-my-posh # 引入 oh-my-posh</span><br><span class=\"line\">Import-Module DirColors</span><br><span class=\"line\">Import-Module git-aliases -DisableNameChecking</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PoshPrompt -Theme PowerLine</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PSReadlineKeyHandler -Key Tab -Function Complete # 设置 Tab 键补全</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key &quot;Ctrl+d&quot; -Function MenuComplete # 设置 Ctrl+d 为菜单补全和 Intellisense</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key &quot;Ctrl+z&quot; -Function Undo # 设置 Ctrl+z 为撤销</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向上键为后向搜索历史记录</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward # 设置向下键为前向搜索历史纪录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h2><p>windows terminal 也支持分屏，分屏的快捷键为：</p>\n<ul>\n<li>水平分屏 alt + shift + - (减号)</li>\n<li>垂直分屏 alt + shift + + (加号)</li>\n</ul>\n<p>切换当前的分屏视图：alt + left/right/up/down<br>调整分屏的窗口的大小：alt + shift + left/right/up/down</p>\n<p>缩放当前视图：ctrl + +/-/鼠标滚轮</p>\n<p>退出当前分屏视图：直接输入<code>exit</code></p>\n<p>参考文章：<a href=\"https://www.chuchur.com/article/windows-terminal-beautify\">windows terminal 终极美化</a></p>\n<p><a href=\"https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/\">https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/</a></p>\n<p>​             </p>"},{"title":"powershell7不识别最新path","date":"2021-07-30T01:39:28.000Z","_content":"\n# 问题\n\n使用不用方式启动的 Powershell 得到的环境是不同的。通过以下命令查看。可将系统路径（Machine）和用户路径合并后设置未当前的环境变量\n\n```powershell\n>> $env:path\n```\n<!--more-->\n\n# 解决\n\n```powershell\n$env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::Get\n```\n\n","source":"_posts/powershell7不识别最新path.md","raw":"---\ntitle: powershell7不识别最新path\ndate: 2021-07-30 09:39:28\ntags: powershell7 \n---\n\n# 问题\n\n使用不用方式启动的 Powershell 得到的环境是不同的。通过以下命令查看。可将系统路径（Machine）和用户路径合并后设置未当前的环境变量\n\n```powershell\n>> $env:path\n```\n<!--more-->\n\n# 解决\n\n```powershell\n$env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::Get\n```\n\n","slug":"powershell7不识别最新path","published":1,"updated":"2021-08-23T00:38:38.726Z","_id":"ckrybznc800038sv9bqom4ymj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>使用不用方式启动的 Powershell 得到的环境是不同的。通过以下命令查看。可将系统路径（Machine）和用户路径合并后设置未当前的环境变量</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; <span class=\"variable\">$env:path</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:Path</span> = [<span class=\"type\">System.Environment</span>]::GetEnvironmentVariable(<span class=\"string\">&quot;Path&quot;</span>,<span class=\"string\">&quot;Machine&quot;</span>) + <span class=\"string\">&quot;;&quot;</span> + [<span class=\"type\">System.Environment</span>]::Get</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>使用不用方式启动的 Powershell 得到的环境是不同的。通过以下命令查看。可将系统路径（Machine）和用户路径合并后设置未当前的环境变量</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; <span class=\"variable\">$env:path</span></span><br></pre></td></tr></table></figure>","more":"<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:Path</span> = [<span class=\"type\">System.Environment</span>]::GetEnvironmentVariable(<span class=\"string\">&quot;Path&quot;</span>,<span class=\"string\">&quot;Machine&quot;</span>) + <span class=\"string\">&quot;;&quot;</span> + [<span class=\"type\">System.Environment</span>]::Get</span><br></pre></td></tr></table></figure>"},{"title":"yarn设置淘宝镜像源","date":"2021-07-29T01:04:29.000Z","_content":"\n全局修改：\n\n```shell\nyarn config set registry https://registry.npm.taobao.org/\n```\n<!--more-->\n\n临时修改\n\n```shell\nyarn save 软件名 --registry https://registry.npm.taobao.org/\n```\n\n```\n# 全局配置，单台设备上永久生效\nyarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n\n# 针对单次安装\nSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ && yarn add node-sass\n# or\nyarn add node-sass --sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n```\n\n","source":"_posts/yarn设置淘宝镜像源.md","raw":"---\ntitle: yarn设置淘宝镜像源\ndate: 2021-07-29 09:04:29\ntags: yarn\n---\n\n全局修改：\n\n```shell\nyarn config set registry https://registry.npm.taobao.org/\n```\n<!--more-->\n\n临时修改\n\n```shell\nyarn save 软件名 --registry https://registry.npm.taobao.org/\n```\n\n```\n# 全局配置，单台设备上永久生效\nyarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n\n# 针对单次安装\nSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ && yarn add node-sass\n# or\nyarn add node-sass --sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n```\n\n","slug":"yarn设置淘宝镜像源","published":1,"updated":"2021-08-23T00:38:38.737Z","_id":"ckrybzncb00048sv9751w1xrk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>全局修改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>临时修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn save 软件名 --registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 全局配置，单台设备上永久生效</span><br><span class=\"line\">yarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\"></span><br><span class=\"line\"># 针对单次安装</span><br><span class=\"line\">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ &amp;&amp; yarn add node-sass</span><br><span class=\"line\"># or</span><br><span class=\"line\">yarn add node-sass --sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>全局修改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>","more":"<p>临时修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn save 软件名 --registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 全局配置，单台设备上永久生效</span><br><span class=\"line\">yarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\"></span><br><span class=\"line\"># 针对单次安装</span><br><span class=\"line\">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ &amp;&amp; yarn add node-sass</span><br><span class=\"line\"># or</span><br><span class=\"line\">yarn add node-sass --sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure>"},{"title":"注解customParam在并发下问题","date":"2021-08-03T01:59:35.000Z","_content":"\nIPH中引入自定义customParam参数\n\ncustomParam在并发情况下，会出现报错，\n\n<!--more-->\n\n\n![image-20210803101609700](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101609700.png)\n\n报错代码在\n\n![image-20210803101710426](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101710426.png)\n\n该原因是因为value在并发情况下为空，分析问题，原因为param不因作为类的私有变量，在并发情况下map不安全，需要吧map作为局部变量使用，当改为局部变量，该问题解决。\n\n代码类位置为CustomMethodArgumentResolver\n\n![image-20210803102111316](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102111316.png)\n\n第二个问题，customParam是作为单个参数接收的，当改为局部变量，做login接口变为customParam来接受username和password，则会报错，因为customParam会两次经过customHandler来处理，所以需要改写requestBody来接受用户名和密码，\n\n![image-20210803102651718](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102651718.png)\n\n![image-20210803102616035](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png\n\n![image-20210803102239469](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102239469.png)\n\ncustomParam推荐接收单个参数，多个参数使用bean来接受\n\n需要大家检测自身代码问题，\n\n针对于requestbody这种修改方式，综合考虑成本比较大，涉及到之前的很多接口，需要重新考虑该接口如何实现，\n\n通过分析，发现多个customParam注解为什么会不成功，是因为getrequestbody只能获取一次，多个参数时，获取不到，那么解决办法，需要保证能多次从requestbody中获取数据。\n\n我们先来看看为什么HttpServletRequest的输入流只能读一次，当我们调用`getInputStream()`方法获取输入流时得到的是一个InputStream对象，而实际类型是ServletInputStream，它继承于InputStream。\n\nInputStream的`read()`方法内部有一个postion，标志当前流被读取到的位置，每读取一次，该标志就会移动一次，如果读到最后，`read()`会返回-1，表示已经读取完了。如果想要重新读取则需要调用`reset()`方法，position就会移动到上次调用mark的位置，mark默认是0，所以就能从头再读了。调用`reset()`方法的前提是已经重写了`reset()`方法，当然能否reset也是有条件的，它取决于`markSupported()`方法是否返回true。\n\nInputStream默认不实现`reset()`，并且`markSupported()`默认也是返回false，这一点查看其源码便知：\n\n我们再来看看ServletInputStream，可以看到该类没有重写`mark()`，`reset()`以及`markSupported()`方法：\n\n综上，InputStream默认不实现reset的相关方法，而ServletInputStream也没有重写reset的相关方法，这样就无法重复读取流，这就是我们从request对象中获取的输入流就只能读取一次的原因。\n\n### 使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题\n\n既然ServletInputStream不支持重新读写，那么为什么不把流读出来后用容器存储起来，后面就可以多次利用了。那么问题就来了，要如何存储这个流呢？\n\n所幸JavaEE提供了一个 HttpServletRequestWrapper类，从类名也可以知道它是一个http请求包装器，其基于装饰者模式实现了HttpServletRequest界面，部分源码如下：\n\n![image-20210804101044518](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101044518.png)\n\n从上图中的部分源码可以看到，该类并没有真正去实现HttpServletRequest的方法，而只是在方法内又去调用HttpServletRequest的方法，所以我们可以通过继承该类并实现想要重新定义的方法以达到包装原生HttpServletRequest对象的目的。\n\n首先我们要定义一个容器，将输入流里面的数据存储到这个容器里，这个容器可以是数组或集合。然后我们重写getInputStream方法，每次都从这个容器里读数据，这样我们的输入流就可以读取任意次了。\n\n具体的实现代码如下：\n\n```\n\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport javax.servlet.ReadListener;\nimport javax.servlet.ServletInputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport java.io.*;\nimport java.nio.charset.Charset;\n\n@Slf4j\npublic class RequestWrapper extends HttpServletRequestWrapper {\n    /**\n     * 存储body数据的容器\n     */\n    private final byte[] body;\n\n    public RequestWrapper(HttpServletRequest request) throws IOException {\n        super(request);\n\n        // 将body数据存储起来\n        String bodyStr = getBodyString(request);\n        body = bodyStr.getBytes(Charset.defaultCharset());\n    }\n\n    /**\n     * 获取请求Body\n     *\n     * @param request request\n     * @return String\n     */\n    public String getBodyString(final ServletRequest request) {\n        try {\n            return inputStream2String(request.getInputStream());\n        } catch (IOException e) {\n            log.error(\"\", e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * 获取请求Body\n     *\n     * @return String\n     */\n    public String getBodyString() {\n        final InputStream inputStream = new ByteArrayInputStream(body);\n\n        return inputStream2String(inputStream);\n    }\n\n    /**\n     * 将inputStream里的数据读取出来并转换成字符串\n     *\n     * @param inputStream inputStream\n     * @return String\n     */\n    private String inputStream2String(InputStream inputStream) {\n        StringBuilder sb = new StringBuilder();\n        BufferedReader reader = null;\n\n        try {\n            reader = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n        } catch (IOException e) {\n            log.error(\"\", e);\n            throw new RuntimeException(e);\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    log.error(\"\", e);\n                }\n            }\n        }\n\n        return sb.toString();\n    }\n\n    @Override\n    public BufferedReader getReader() throws IOException {\n        return new BufferedReader(new InputStreamReader(getInputStream()));\n    }\n\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n\n        final ByteArrayInputStream inputStream = new ByteArrayInputStream(body);\n\n        return new ServletInputStream() {\n            @Override\n            public int read() throws IOException {\n                return inputStream.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n                return false;\n            }\n\n            @Override\n            public boolean isReady() {\n                return false;\n            }\n\n            @Override\n            public void setReadListener(ReadListener readListener) {\n            }\n        };\n    }\n}\n\n```\n\n除了要写一个包装器外，我们还需要在过滤器里将原生的HttpServletRequest对象替换成我们的RequestWrapper对象，代码如下：\n\n```\n\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\n\n@Slf4j\npublic class ReplaceStreamFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        log.info(\"StreamFilter初始化...\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        ServletRequest requestWrapper = new RequestWrapper((HttpServletRequest) request);\n        chain.doFilter(requestWrapper, response);\n    }\n\n    @Override\n    public void destroy() {\n        log.info(\"StreamFilter销毁...\");\n    }\n}\n\n```\n\n从而我们在customParam中使用requestbody就没有问题了\n\n![image-20210804101807196](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101807196.png)\n\n```\nprivate String getRequestBody(HttpServletRequest servletRequest)  {\n        String jsonParam = null;\n        try {\n            jsonParam = new RequestWrapper(servletRequest).getBodyString();\n        } catch (IOException e) {\n            log.error(\"读取流异常\", e);\n            throw new BizException(ErrorCodeConstant.SERVER_INTERNAL_ERROR,\"IO异常\");\n        }\n        log.info(\"[preHandle] json数据 : {}\", jsonParam);\n        return jsonParam;\n    }\n```\n\n编写完以上的代码后，还需要将过滤器在配置类中进行注册才会生效，过滤器配置类代码如下：\n\n![image-20210804102053267](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804102053267.png)\n\n```\n   /**\n     * 实例化StreamFilter\n     *\n     * @return Filter\n     */\n    @Bean(name = \"replaceStreamFilter\")\n    public Filter replaceStreamFilter() {\n        return new ReplaceStreamFilter();\n    }\n```\n\n经过以上配置，就可以正常使用@customParam在多参数下。\n\n","source":"_posts/注解customParam在并发下问题.md","raw":"---\ntitle: 注解customParam在并发下问题\ndate: 2021-08-03 09:59:35\ntags: 注解 customParam\n---\n\nIPH中引入自定义customParam参数\n\ncustomParam在并发情况下，会出现报错，\n\n<!--more-->\n\n\n![image-20210803101609700](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101609700.png)\n\n报错代码在\n\n![image-20210803101710426](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101710426.png)\n\n该原因是因为value在并发情况下为空，分析问题，原因为param不因作为类的私有变量，在并发情况下map不安全，需要吧map作为局部变量使用，当改为局部变量，该问题解决。\n\n代码类位置为CustomMethodArgumentResolver\n\n![image-20210803102111316](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102111316.png)\n\n第二个问题，customParam是作为单个参数接收的，当改为局部变量，做login接口变为customParam来接受username和password，则会报错，因为customParam会两次经过customHandler来处理，所以需要改写requestBody来接受用户名和密码，\n\n![image-20210803102651718](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102651718.png)\n\n![image-20210803102616035](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png\n\n![image-20210803102239469](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102239469.png)\n\ncustomParam推荐接收单个参数，多个参数使用bean来接受\n\n需要大家检测自身代码问题，\n\n针对于requestbody这种修改方式，综合考虑成本比较大，涉及到之前的很多接口，需要重新考虑该接口如何实现，\n\n通过分析，发现多个customParam注解为什么会不成功，是因为getrequestbody只能获取一次，多个参数时，获取不到，那么解决办法，需要保证能多次从requestbody中获取数据。\n\n我们先来看看为什么HttpServletRequest的输入流只能读一次，当我们调用`getInputStream()`方法获取输入流时得到的是一个InputStream对象，而实际类型是ServletInputStream，它继承于InputStream。\n\nInputStream的`read()`方法内部有一个postion，标志当前流被读取到的位置，每读取一次，该标志就会移动一次，如果读到最后，`read()`会返回-1，表示已经读取完了。如果想要重新读取则需要调用`reset()`方法，position就会移动到上次调用mark的位置，mark默认是0，所以就能从头再读了。调用`reset()`方法的前提是已经重写了`reset()`方法，当然能否reset也是有条件的，它取决于`markSupported()`方法是否返回true。\n\nInputStream默认不实现`reset()`，并且`markSupported()`默认也是返回false，这一点查看其源码便知：\n\n我们再来看看ServletInputStream，可以看到该类没有重写`mark()`，`reset()`以及`markSupported()`方法：\n\n综上，InputStream默认不实现reset的相关方法，而ServletInputStream也没有重写reset的相关方法，这样就无法重复读取流，这就是我们从request对象中获取的输入流就只能读取一次的原因。\n\n### 使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题\n\n既然ServletInputStream不支持重新读写，那么为什么不把流读出来后用容器存储起来，后面就可以多次利用了。那么问题就来了，要如何存储这个流呢？\n\n所幸JavaEE提供了一个 HttpServletRequestWrapper类，从类名也可以知道它是一个http请求包装器，其基于装饰者模式实现了HttpServletRequest界面，部分源码如下：\n\n![image-20210804101044518](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101044518.png)\n\n从上图中的部分源码可以看到，该类并没有真正去实现HttpServletRequest的方法，而只是在方法内又去调用HttpServletRequest的方法，所以我们可以通过继承该类并实现想要重新定义的方法以达到包装原生HttpServletRequest对象的目的。\n\n首先我们要定义一个容器，将输入流里面的数据存储到这个容器里，这个容器可以是数组或集合。然后我们重写getInputStream方法，每次都从这个容器里读数据，这样我们的输入流就可以读取任意次了。\n\n具体的实现代码如下：\n\n```\n\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport javax.servlet.ReadListener;\nimport javax.servlet.ServletInputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport java.io.*;\nimport java.nio.charset.Charset;\n\n@Slf4j\npublic class RequestWrapper extends HttpServletRequestWrapper {\n    /**\n     * 存储body数据的容器\n     */\n    private final byte[] body;\n\n    public RequestWrapper(HttpServletRequest request) throws IOException {\n        super(request);\n\n        // 将body数据存储起来\n        String bodyStr = getBodyString(request);\n        body = bodyStr.getBytes(Charset.defaultCharset());\n    }\n\n    /**\n     * 获取请求Body\n     *\n     * @param request request\n     * @return String\n     */\n    public String getBodyString(final ServletRequest request) {\n        try {\n            return inputStream2String(request.getInputStream());\n        } catch (IOException e) {\n            log.error(\"\", e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * 获取请求Body\n     *\n     * @return String\n     */\n    public String getBodyString() {\n        final InputStream inputStream = new ByteArrayInputStream(body);\n\n        return inputStream2String(inputStream);\n    }\n\n    /**\n     * 将inputStream里的数据读取出来并转换成字符串\n     *\n     * @param inputStream inputStream\n     * @return String\n     */\n    private String inputStream2String(InputStream inputStream) {\n        StringBuilder sb = new StringBuilder();\n        BufferedReader reader = null;\n\n        try {\n            reader = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n        } catch (IOException e) {\n            log.error(\"\", e);\n            throw new RuntimeException(e);\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    log.error(\"\", e);\n                }\n            }\n        }\n\n        return sb.toString();\n    }\n\n    @Override\n    public BufferedReader getReader() throws IOException {\n        return new BufferedReader(new InputStreamReader(getInputStream()));\n    }\n\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n\n        final ByteArrayInputStream inputStream = new ByteArrayInputStream(body);\n\n        return new ServletInputStream() {\n            @Override\n            public int read() throws IOException {\n                return inputStream.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n                return false;\n            }\n\n            @Override\n            public boolean isReady() {\n                return false;\n            }\n\n            @Override\n            public void setReadListener(ReadListener readListener) {\n            }\n        };\n    }\n}\n\n```\n\n除了要写一个包装器外，我们还需要在过滤器里将原生的HttpServletRequest对象替换成我们的RequestWrapper对象，代码如下：\n\n```\n\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\n\n@Slf4j\npublic class ReplaceStreamFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        log.info(\"StreamFilter初始化...\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        ServletRequest requestWrapper = new RequestWrapper((HttpServletRequest) request);\n        chain.doFilter(requestWrapper, response);\n    }\n\n    @Override\n    public void destroy() {\n        log.info(\"StreamFilter销毁...\");\n    }\n}\n\n```\n\n从而我们在customParam中使用requestbody就没有问题了\n\n![image-20210804101807196](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101807196.png)\n\n```\nprivate String getRequestBody(HttpServletRequest servletRequest)  {\n        String jsonParam = null;\n        try {\n            jsonParam = new RequestWrapper(servletRequest).getBodyString();\n        } catch (IOException e) {\n            log.error(\"读取流异常\", e);\n            throw new BizException(ErrorCodeConstant.SERVER_INTERNAL_ERROR,\"IO异常\");\n        }\n        log.info(\"[preHandle] json数据 : {}\", jsonParam);\n        return jsonParam;\n    }\n```\n\n编写完以上的代码后，还需要将过滤器在配置类中进行注册才会生效，过滤器配置类代码如下：\n\n![image-20210804102053267](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804102053267.png)\n\n```\n   /**\n     * 实例化StreamFilter\n     *\n     * @return Filter\n     */\n    @Bean(name = \"replaceStreamFilter\")\n    public Filter replaceStreamFilter() {\n        return new ReplaceStreamFilter();\n    }\n```\n\n经过以上配置，就可以正常使用@customParam在多参数下。\n\n","slug":"注解customParam在并发下问题","published":1,"updated":"2021-08-23T00:38:38.751Z","_id":"ckrybzncc00078sv9g6ct7ol0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>IPH中引入自定义customParam参数</p>\n<p>customParam在并发情况下，会出现报错，</p>\n<span id=\"more\"></span>\n\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101609700.png\" alt=\"image-20210803101609700\"></p>\n<p>报错代码在</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101710426.png\" alt=\"image-20210803101710426\"></p>\n<p>该原因是因为value在并发情况下为空，分析问题，原因为param不因作为类的私有变量，在并发情况下map不安全，需要吧map作为局部变量使用，当改为局部变量，该问题解决。</p>\n<p>代码类位置为CustomMethodArgumentResolver</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102111316.png\" alt=\"image-20210803102111316\"></p>\n<p>第二个问题，customParam是作为单个参数接收的，当改为局部变量，做login接口变为customParam来接受username和password，则会报错，因为customParam会两次经过customHandler来处理，所以需要改写requestBody来接受用户名和密码，</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102651718.png\" alt=\"image-20210803102651718\"></p>\n<p>![image-20210803102616035](<a href=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png\">https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png</a></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102239469.png\" alt=\"image-20210803102239469\"></p>\n<p>customParam推荐接收单个参数，多个参数使用bean来接受</p>\n<p>需要大家检测自身代码问题，</p>\n<p>针对于requestbody这种修改方式，综合考虑成本比较大，涉及到之前的很多接口，需要重新考虑该接口如何实现，</p>\n<p>通过分析，发现多个customParam注解为什么会不成功，是因为getrequestbody只能获取一次，多个参数时，获取不到，那么解决办法，需要保证能多次从requestbody中获取数据。</p>\n<p>我们先来看看为什么HttpServletRequest的输入流只能读一次，当我们调用<code>getInputStream()</code>方法获取输入流时得到的是一个InputStream对象，而实际类型是ServletInputStream，它继承于InputStream。</p>\n<p>InputStream的<code>read()</code>方法内部有一个postion，标志当前流被读取到的位置，每读取一次，该标志就会移动一次，如果读到最后，<code>read()</code>会返回-1，表示已经读取完了。如果想要重新读取则需要调用<code>reset()</code>方法，position就会移动到上次调用mark的位置，mark默认是0，所以就能从头再读了。调用<code>reset()</code>方法的前提是已经重写了<code>reset()</code>方法，当然能否reset也是有条件的，它取决于<code>markSupported()</code>方法是否返回true。</p>\n<p>InputStream默认不实现<code>reset()</code>，并且<code>markSupported()</code>默认也是返回false，这一点查看其源码便知：</p>\n<p>我们再来看看ServletInputStream，可以看到该类没有重写<code>mark()</code>，<code>reset()</code>以及<code>markSupported()</code>方法：</p>\n<p>综上，InputStream默认不实现reset的相关方法，而ServletInputStream也没有重写reset的相关方法，这样就无法重复读取流，这就是我们从request对象中获取的输入流就只能读取一次的原因。</p>\n<h3 id=\"使用HttpServletRequestWrapper-Filter解决输入流不能重复读取问题\"><a href=\"#使用HttpServletRequestWrapper-Filter解决输入流不能重复读取问题\" class=\"headerlink\" title=\"使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题\"></a>使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题</h3><p>既然ServletInputStream不支持重新读写，那么为什么不把流读出来后用容器存储起来，后面就可以多次利用了。那么问题就来了，要如何存储这个流呢？</p>\n<p>所幸JavaEE提供了一个 HttpServletRequestWrapper类，从类名也可以知道它是一个http请求包装器，其基于装饰者模式实现了HttpServletRequest界面，部分源码如下：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101044518.png\" alt=\"image-20210804101044518\"></p>\n<p>从上图中的部分源码可以看到，该类并没有真正去实现HttpServletRequest的方法，而只是在方法内又去调用HttpServletRequest的方法，所以我们可以通过继承该类并实现想要重新定义的方法以达到包装原生HttpServletRequest对象的目的。</p>\n<p>首先我们要定义一个容器，将输入流里面的数据存储到这个容器里，这个容器可以是数组或集合。然后我们重写getInputStream方法，每次都从这个容器里读数据，这样我们的输入流就可以读取任意次了。</p>\n<p>具体的实现代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.ReadListener;</span><br><span class=\"line\">import javax.servlet.ServletInputStream;</span><br><span class=\"line\">import javax.servlet.ServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequestWrapper;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class RequestWrapper extends HttpServletRequestWrapper &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 存储body数据的容器</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private final byte[] body;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RequestWrapper(HttpServletRequest request) throws IOException &#123;</span><br><span class=\"line\">        super(request);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 将body数据存储起来</span><br><span class=\"line\">        String bodyStr = getBodyString(request);</span><br><span class=\"line\">        body = bodyStr.getBytes(Charset.defaultCharset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取请求Body</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request request</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String getBodyString(final ServletRequest request) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return inputStream2String(request.getInputStream());</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;&quot;, e);</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取请求Body</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String getBodyString() &#123;</span><br><span class=\"line\">        final InputStream inputStream = new ByteArrayInputStream(body);</span><br><span class=\"line\"></span><br><span class=\"line\">        return inputStream2String(inputStream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将inputStream里的数据读取出来并转换成字符串</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param inputStream inputStream</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String inputStream2String(InputStream inputStream) &#123;</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        BufferedReader reader = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            reader = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = reader.readLine()) != null) &#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;&quot;, e);</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            if (reader != null) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    reader.close();</span><br><span class=\"line\">                &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                    log.error(&quot;&quot;, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public BufferedReader getReader() throws IOException &#123;</span><br><span class=\"line\">        return new BufferedReader(new InputStreamReader(getInputStream()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public ServletInputStream getInputStream() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        final ByteArrayInputStream inputStream = new ByteArrayInputStream(body);</span><br><span class=\"line\"></span><br><span class=\"line\">        return new ServletInputStream() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public int read() throws IOException &#123;</span><br><span class=\"line\">                return inputStream.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean isFinished() &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean isReady() &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void setReadListener(ReadListener readListener) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>除了要写一个包装器外，我们还需要在过滤器里将原生的HttpServletRequest对象替换成我们的RequestWrapper对象，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.*;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class ReplaceStreamFilter implements Filter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\">        log.info(&quot;StreamFilter初始化...&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        ServletRequest requestWrapper = new RequestWrapper((HttpServletRequest) request);</span><br><span class=\"line\">        chain.doFilter(requestWrapper, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">        log.info(&quot;StreamFilter销毁...&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从而我们在customParam中使用requestbody就没有问题了</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101807196.png\" alt=\"image-20210804101807196\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String getRequestBody(HttpServletRequest servletRequest)  &#123;</span><br><span class=\"line\">        String jsonParam = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            jsonParam = new RequestWrapper(servletRequest).getBodyString();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;读取流异常&quot;, e);</span><br><span class=\"line\">            throw new BizException(ErrorCodeConstant.SERVER_INTERNAL_ERROR,&quot;IO异常&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(&quot;[preHandle] json数据 : &#123;&#125;&quot;, jsonParam);</span><br><span class=\"line\">        return jsonParam;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写完以上的代码后，还需要将过滤器在配置类中进行注册才会生效，过滤器配置类代码如下：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804102053267.png\" alt=\"image-20210804102053267\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">  * 实例化StreamFilter</span><br><span class=\"line\">  *</span><br><span class=\"line\">  * @return Filter</span><br><span class=\"line\">  */</span><br><span class=\"line\"> @Bean(name = &quot;replaceStreamFilter&quot;)</span><br><span class=\"line\"> public Filter replaceStreamFilter() &#123;</span><br><span class=\"line\">     return new ReplaceStreamFilter();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过以上配置，就可以正常使用@customParam在多参数下。</p>\n","site":{"data":{}},"excerpt":"<p>IPH中引入自定义customParam参数</p>\n<p>customParam在并发情况下，会出现报错，</p>","more":"<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101609700.png\" alt=\"image-20210803101609700\"></p>\n<p>报错代码在</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101710426.png\" alt=\"image-20210803101710426\"></p>\n<p>该原因是因为value在并发情况下为空，分析问题，原因为param不因作为类的私有变量，在并发情况下map不安全，需要吧map作为局部变量使用，当改为局部变量，该问题解决。</p>\n<p>代码类位置为CustomMethodArgumentResolver</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102111316.png\" alt=\"image-20210803102111316\"></p>\n<p>第二个问题，customParam是作为单个参数接收的，当改为局部变量，做login接口变为customParam来接受username和password，则会报错，因为customParam会两次经过customHandler来处理，所以需要改写requestBody来接受用户名和密码，</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102651718.png\" alt=\"image-20210803102651718\"></p>\n<p>![image-20210803102616035](<a href=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png\">https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png</a></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102239469.png\" alt=\"image-20210803102239469\"></p>\n<p>customParam推荐接收单个参数，多个参数使用bean来接受</p>\n<p>需要大家检测自身代码问题，</p>\n<p>针对于requestbody这种修改方式，综合考虑成本比较大，涉及到之前的很多接口，需要重新考虑该接口如何实现，</p>\n<p>通过分析，发现多个customParam注解为什么会不成功，是因为getrequestbody只能获取一次，多个参数时，获取不到，那么解决办法，需要保证能多次从requestbody中获取数据。</p>\n<p>我们先来看看为什么HttpServletRequest的输入流只能读一次，当我们调用<code>getInputStream()</code>方法获取输入流时得到的是一个InputStream对象，而实际类型是ServletInputStream，它继承于InputStream。</p>\n<p>InputStream的<code>read()</code>方法内部有一个postion，标志当前流被读取到的位置，每读取一次，该标志就会移动一次，如果读到最后，<code>read()</code>会返回-1，表示已经读取完了。如果想要重新读取则需要调用<code>reset()</code>方法，position就会移动到上次调用mark的位置，mark默认是0，所以就能从头再读了。调用<code>reset()</code>方法的前提是已经重写了<code>reset()</code>方法，当然能否reset也是有条件的，它取决于<code>markSupported()</code>方法是否返回true。</p>\n<p>InputStream默认不实现<code>reset()</code>，并且<code>markSupported()</code>默认也是返回false，这一点查看其源码便知：</p>\n<p>我们再来看看ServletInputStream，可以看到该类没有重写<code>mark()</code>，<code>reset()</code>以及<code>markSupported()</code>方法：</p>\n<p>综上，InputStream默认不实现reset的相关方法，而ServletInputStream也没有重写reset的相关方法，这样就无法重复读取流，这就是我们从request对象中获取的输入流就只能读取一次的原因。</p>\n<h3 id=\"使用HttpServletRequestWrapper-Filter解决输入流不能重复读取问题\"><a href=\"#使用HttpServletRequestWrapper-Filter解决输入流不能重复读取问题\" class=\"headerlink\" title=\"使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题\"></a>使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题</h3><p>既然ServletInputStream不支持重新读写，那么为什么不把流读出来后用容器存储起来，后面就可以多次利用了。那么问题就来了，要如何存储这个流呢？</p>\n<p>所幸JavaEE提供了一个 HttpServletRequestWrapper类，从类名也可以知道它是一个http请求包装器，其基于装饰者模式实现了HttpServletRequest界面，部分源码如下：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101044518.png\" alt=\"image-20210804101044518\"></p>\n<p>从上图中的部分源码可以看到，该类并没有真正去实现HttpServletRequest的方法，而只是在方法内又去调用HttpServletRequest的方法，所以我们可以通过继承该类并实现想要重新定义的方法以达到包装原生HttpServletRequest对象的目的。</p>\n<p>首先我们要定义一个容器，将输入流里面的数据存储到这个容器里，这个容器可以是数组或集合。然后我们重写getInputStream方法，每次都从这个容器里读数据，这样我们的输入流就可以读取任意次了。</p>\n<p>具体的实现代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.ReadListener;</span><br><span class=\"line\">import javax.servlet.ServletInputStream;</span><br><span class=\"line\">import javax.servlet.ServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequestWrapper;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class RequestWrapper extends HttpServletRequestWrapper &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 存储body数据的容器</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private final byte[] body;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RequestWrapper(HttpServletRequest request) throws IOException &#123;</span><br><span class=\"line\">        super(request);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 将body数据存储起来</span><br><span class=\"line\">        String bodyStr = getBodyString(request);</span><br><span class=\"line\">        body = bodyStr.getBytes(Charset.defaultCharset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取请求Body</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request request</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String getBodyString(final ServletRequest request) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return inputStream2String(request.getInputStream());</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;&quot;, e);</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取请求Body</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String getBodyString() &#123;</span><br><span class=\"line\">        final InputStream inputStream = new ByteArrayInputStream(body);</span><br><span class=\"line\"></span><br><span class=\"line\">        return inputStream2String(inputStream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将inputStream里的数据读取出来并转换成字符串</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param inputStream inputStream</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String inputStream2String(InputStream inputStream) &#123;</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        BufferedReader reader = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            reader = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = reader.readLine()) != null) &#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;&quot;, e);</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            if (reader != null) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    reader.close();</span><br><span class=\"line\">                &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                    log.error(&quot;&quot;, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public BufferedReader getReader() throws IOException &#123;</span><br><span class=\"line\">        return new BufferedReader(new InputStreamReader(getInputStream()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public ServletInputStream getInputStream() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        final ByteArrayInputStream inputStream = new ByteArrayInputStream(body);</span><br><span class=\"line\"></span><br><span class=\"line\">        return new ServletInputStream() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public int read() throws IOException &#123;</span><br><span class=\"line\">                return inputStream.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean isFinished() &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean isReady() &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void setReadListener(ReadListener readListener) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>除了要写一个包装器外，我们还需要在过滤器里将原生的HttpServletRequest对象替换成我们的RequestWrapper对象，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.*;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class ReplaceStreamFilter implements Filter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\">        log.info(&quot;StreamFilter初始化...&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        ServletRequest requestWrapper = new RequestWrapper((HttpServletRequest) request);</span><br><span class=\"line\">        chain.doFilter(requestWrapper, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">        log.info(&quot;StreamFilter销毁...&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从而我们在customParam中使用requestbody就没有问题了</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101807196.png\" alt=\"image-20210804101807196\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String getRequestBody(HttpServletRequest servletRequest)  &#123;</span><br><span class=\"line\">        String jsonParam = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            jsonParam = new RequestWrapper(servletRequest).getBodyString();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;读取流异常&quot;, e);</span><br><span class=\"line\">            throw new BizException(ErrorCodeConstant.SERVER_INTERNAL_ERROR,&quot;IO异常&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(&quot;[preHandle] json数据 : &#123;&#125;&quot;, jsonParam);</span><br><span class=\"line\">        return jsonParam;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写完以上的代码后，还需要将过滤器在配置类中进行注册才会生效，过滤器配置类代码如下：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804102053267.png\" alt=\"image-20210804102053267\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">  * 实例化StreamFilter</span><br><span class=\"line\">  *</span><br><span class=\"line\">  * @return Filter</span><br><span class=\"line\">  */</span><br><span class=\"line\"> @Bean(name = &quot;replaceStreamFilter&quot;)</span><br><span class=\"line\"> public Filter replaceStreamFilter() &#123;</span><br><span class=\"line\">     return new ReplaceStreamFilter();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过以上配置，就可以正常使用@customParam在多参数下。</p>"},{"title":"用 Docker 每日自动化备份 MySQL, Postgres 或 MongoDB 并上传到 minio","date":"2021-07-29T03:38:11.000Z","_content":"\n由于备份[PostgreSQL](https://www.postgresql.org/)的指令[pg_dump](https://docs.postgresql.tw/reference/client-applications/pg_dump)需要特定版本才可以备份，故制作用[Docker](https://www.docker.com/)容器方式来自己备份，此工具支持[MySQL](https://www.mysql.com/)，PostgreSQL跟[MongoDB](https://www.mongodb.com/)，只要一个docker-compose yaml 档案就可以进行线上的备份，并且上传到minio，另外也可以设定每天晚上固定时间点进行时间备份，也就是饮食所设定的定时任务。没有使用，或者管理机房的朋友们，就可以通过这小工具，进行每天半夜线上备份，避免资料被误判。\n\n<!--more-->\n\n\n使用方式：\n\n```yaml\nservices:\n  minio:\n    image: minio/minio:edge\n    restart: always\n    volumes:\n      - data1-1:/data1\n    ports:\n      - 9000:9000\n    environment:\n      MINIO_ACCESS_KEY: 1234567890\n      MINIO_SECRET_KEY: 1234567890\n    command: server /data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n\n  postgres:\n    image: postgres:12\n    restart: always\n    volumes:\n      - pg-data:/var/lib/postgresql/data\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      POSTGRES_USER: db\n      POSTGRES_DB: db\n      POSTGRES_PASSWORD: db\n```\n\n挑选特定资料库版本的Docker Image\n\n```yaml\nbackup_postgres:\n    image: appleboy/docker-backup-database:postgres-12\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      STORAGE_DRIVER: s3\n      STORAGE_ENDPOINT: minio:9000\n      STORAGE_BUCKET: test\n      STORAGE_REGION: ap-northeast-1\n      STORAGE_PATH: backup_postgres\n      STORAGE_SSL: \"false\"\n      STORAGE_INSECURE_SKIP_VERIFY: \"false\"\n      ACCESS_KEY_ID: 1234567890\n      SECRET_ACCESS_KEY: 1234567890\n\n      DATABASE_DRIVER: postgres\n      DATABASE_HOST: postgres:5432\n      DATABASE_USERNAME: db\n      DATABASE_PASSWORD: db\n      DATABASE_NAME: db\n      DATABASE_OPTS:\n```\n\nFinal Step: [manage bucket lifecycle](https://docs.min.io/docs/minio-bucket-lifecycle-guide.html) using [MinIO Client (mc)](https://docs.min.io/docs/minio-client-quickstart-guide.html).\n\n```shell\n$ mc ilm import minio/test <<EOF\n{\n    \"Rules\": [\n        {\n            \"Expiration\": {\n                \"Days\": 7\n            },\n            \"ID\": \"backup_postgres\",\n            \"Filter\": {\n                \"Prefix\": \"backup_postgres/\"\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\nEOF\n```\n\n上面设定是快乐的备份，也就是手动使用`docker-compose up backup_postgres`就可以进行一次备份，当然可以每天晚上来备份\n\n```yaml\n backup_mysql:\n    image: appleboy/docker-backup-database:mysql-8\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      STORAGE_DRIVER: s3\n      STORAGE_ENDPOINT: minio:9000\n      STORAGE_BUCKET: test\n      STORAGE_REGION: ap-northeast-1\n      STORAGE_PATH: backup_mysql\n      STORAGE_SSL: \"false\"\n      STORAGE_INSECURE_SKIP_VERIFY: \"false\"\n      ACCESS_KEY_ID: 1234567890\n      SECRET_ACCESS_KEY: 1234567890\n\n      DATABASE_DRIVER: mysql\n      DATABASE_HOST: mysql:3306\n      DATABASE_USERNAME: root\n      DATABASE_PASSWORD: db\n      DATABASE_NAME: db\n      DATABASE_OPTS:\n\n      TIME_SCHEDULE: \"@daily\"\n      TIME_LOCATION: Asia/Shanghai\n```\n\n`TIME_LOCATION`可以设为上海时区，美食预设会是UTC+8时间。更多详细的设置可以[参考文件](https://github.com/appleboy/docker-backup-database)。\n\n```\n./mc alias set minio http://minio:9000 1234567890 1234567890\n./mc mb minio/test\n./mc ilm import minio/test <<EOF\n{\n    \"Rules\": [\n        {\n            \"Expiration\": {\n                \"Days\": 7\n            },\n            \"ID\": \"backup_postgres\",\n            \"Filter\": {\n                \"Prefix\": \"backup_postgres/\"\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\nEOF\n```\n\n当文件上传后如下图所示：\n\n![image-20210729130727118](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130727118.png)\n\n![image-20210729130614955](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130614955.png)\n","source":"_posts/用-Docker-每日自动化备份-MySQL-Postgres-或-MongoDB-并上传到-minio.md","raw":"---\ntitle: '用 Docker 每日自动化备份 MySQL, Postgres 或 MongoDB 并上传到 minio'\ndate: 2021-07-29 11:38:11\ntags: docker 备份\n---\n\n由于备份[PostgreSQL](https://www.postgresql.org/)的指令[pg_dump](https://docs.postgresql.tw/reference/client-applications/pg_dump)需要特定版本才可以备份，故制作用[Docker](https://www.docker.com/)容器方式来自己备份，此工具支持[MySQL](https://www.mysql.com/)，PostgreSQL跟[MongoDB](https://www.mongodb.com/)，只要一个docker-compose yaml 档案就可以进行线上的备份，并且上传到minio，另外也可以设定每天晚上固定时间点进行时间备份，也就是饮食所设定的定时任务。没有使用，或者管理机房的朋友们，就可以通过这小工具，进行每天半夜线上备份，避免资料被误判。\n\n<!--more-->\n\n\n使用方式：\n\n```yaml\nservices:\n  minio:\n    image: minio/minio:edge\n    restart: always\n    volumes:\n      - data1-1:/data1\n    ports:\n      - 9000:9000\n    environment:\n      MINIO_ACCESS_KEY: 1234567890\n      MINIO_SECRET_KEY: 1234567890\n    command: server /data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n\n  postgres:\n    image: postgres:12\n    restart: always\n    volumes:\n      - pg-data:/var/lib/postgresql/data\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      POSTGRES_USER: db\n      POSTGRES_DB: db\n      POSTGRES_PASSWORD: db\n```\n\n挑选特定资料库版本的Docker Image\n\n```yaml\nbackup_postgres:\n    image: appleboy/docker-backup-database:postgres-12\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      STORAGE_DRIVER: s3\n      STORAGE_ENDPOINT: minio:9000\n      STORAGE_BUCKET: test\n      STORAGE_REGION: ap-northeast-1\n      STORAGE_PATH: backup_postgres\n      STORAGE_SSL: \"false\"\n      STORAGE_INSECURE_SKIP_VERIFY: \"false\"\n      ACCESS_KEY_ID: 1234567890\n      SECRET_ACCESS_KEY: 1234567890\n\n      DATABASE_DRIVER: postgres\n      DATABASE_HOST: postgres:5432\n      DATABASE_USERNAME: db\n      DATABASE_PASSWORD: db\n      DATABASE_NAME: db\n      DATABASE_OPTS:\n```\n\nFinal Step: [manage bucket lifecycle](https://docs.min.io/docs/minio-bucket-lifecycle-guide.html) using [MinIO Client (mc)](https://docs.min.io/docs/minio-client-quickstart-guide.html).\n\n```shell\n$ mc ilm import minio/test <<EOF\n{\n    \"Rules\": [\n        {\n            \"Expiration\": {\n                \"Days\": 7\n            },\n            \"ID\": \"backup_postgres\",\n            \"Filter\": {\n                \"Prefix\": \"backup_postgres/\"\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\nEOF\n```\n\n上面设定是快乐的备份，也就是手动使用`docker-compose up backup_postgres`就可以进行一次备份，当然可以每天晚上来备份\n\n```yaml\n backup_mysql:\n    image: appleboy/docker-backup-database:mysql-8\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      STORAGE_DRIVER: s3\n      STORAGE_ENDPOINT: minio:9000\n      STORAGE_BUCKET: test\n      STORAGE_REGION: ap-northeast-1\n      STORAGE_PATH: backup_mysql\n      STORAGE_SSL: \"false\"\n      STORAGE_INSECURE_SKIP_VERIFY: \"false\"\n      ACCESS_KEY_ID: 1234567890\n      SECRET_ACCESS_KEY: 1234567890\n\n      DATABASE_DRIVER: mysql\n      DATABASE_HOST: mysql:3306\n      DATABASE_USERNAME: root\n      DATABASE_PASSWORD: db\n      DATABASE_NAME: db\n      DATABASE_OPTS:\n\n      TIME_SCHEDULE: \"@daily\"\n      TIME_LOCATION: Asia/Shanghai\n```\n\n`TIME_LOCATION`可以设为上海时区，美食预设会是UTC+8时间。更多详细的设置可以[参考文件](https://github.com/appleboy/docker-backup-database)。\n\n```\n./mc alias set minio http://minio:9000 1234567890 1234567890\n./mc mb minio/test\n./mc ilm import minio/test <<EOF\n{\n    \"Rules\": [\n        {\n            \"Expiration\": {\n                \"Days\": 7\n            },\n            \"ID\": \"backup_postgres\",\n            \"Filter\": {\n                \"Prefix\": \"backup_postgres/\"\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\nEOF\n```\n\n当文件上传后如下图所示：\n\n![image-20210729130727118](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130727118.png)\n\n![image-20210729130614955](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130614955.png)\n","slug":"用-Docker-每日自动化备份-MySQL-Postgres-或-MongoDB-并上传到-minio","published":1,"updated":"2021-08-23T00:38:38.752Z","_id":"ckrybzncd00088sv9g5j11g6g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>由于备份<a href=\"https://www.postgresql.org/\">PostgreSQL</a>的指令<a href=\"https://docs.postgresql.tw/reference/client-applications/pg_dump\">pg_dump</a>需要特定版本才可以备份，故制作用<a href=\"https://www.docker.com/\">Docker</a>容器方式来自己备份，此工具支持<a href=\"https://www.mysql.com/\">MySQL</a>，PostgreSQL跟<a href=\"https://www.mongodb.com/\">MongoDB</a>，只要一个docker-compose yaml 档案就可以进行线上的备份，并且上传到minio，另外也可以设定每天晚上固定时间点进行时间备份，也就是饮食所设定的定时任务。没有使用，或者管理机房的朋友们，就可以通过这小工具，进行每天半夜线上备份，避免资料被误判。</p>\n<span id=\"more\"></span>\n\n\n<p>使用方式：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">minio:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">minio/minio:edge</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">data1-1:/data1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9000</span><span class=\"string\">:9000</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_SECRET_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">server</span> <span class=\"string\">/data</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">postgres:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:12</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pg-data:/var/lib/postgresql/data</span></span><br><span class=\"line\">    <span class=\"attr\">logging:</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_USER:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_DB:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_PASSWORD:</span> <span class=\"string\">db</span></span><br></pre></td></tr></table></figure>\n\n<p>挑选特定资料库版本的Docker Image</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup_postgres:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">appleboy/docker-backup-database:postgres-12</span></span><br><span class=\"line\">    <span class=\"attr\">logging:</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_DRIVER:</span> <span class=\"string\">s3</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_ENDPOINT:</span> <span class=\"string\">minio:9000</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_BUCKET:</span> <span class=\"string\">test</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_REGION:</span> <span class=\"string\">ap-northeast-1</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_PATH:</span> <span class=\"string\">backup_postgres</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_SSL:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_INSECURE_SKIP_VERIFY:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">ACCESS_KEY_ID:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">      <span class=\"attr\">SECRET_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_DRIVER:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_HOST:</span> <span class=\"string\">postgres:5432</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_USERNAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_PASSWORD:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_NAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_OPTS:</span></span><br></pre></td></tr></table></figure>\n\n<p>Final Step: <a href=\"https://docs.min.io/docs/minio-bucket-lifecycle-guide.html\">manage bucket lifecycle</a> using <a href=\"https://docs.min.io/docs/minio-client-quickstart-guide.html\">MinIO Client (mc)</a>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc ilm import minio/<span class=\"built_in\">test</span> &lt;&lt;<span class=\"string\">EOF</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Rules&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;Expiration&quot;: &#123;</span><br><span class=\"line\">                &quot;Days&quot;: 7</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;ID&quot;: &quot;backup_postgres&quot;,</span><br><span class=\"line\">            &quot;Filter&quot;: &#123;</span><br><span class=\"line\">                &quot;Prefix&quot;: &quot;backup_postgres/&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Status&quot;: &quot;Enabled&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>上面设定是快乐的备份，也就是手动使用<code>docker-compose up backup_postgres</code>就可以进行一次备份，当然可以每天晚上来备份</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup_mysql:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">appleboy/docker-backup-database:mysql-8</span></span><br><span class=\"line\">   <span class=\"attr\">logging:</span></span><br><span class=\"line\">     <span class=\"attr\">options:</span></span><br><span class=\"line\">       <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_DRIVER:</span> <span class=\"string\">s3</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_ENDPOINT:</span> <span class=\"string\">minio:9000</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_BUCKET:</span> <span class=\"string\">test</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_REGION:</span> <span class=\"string\">ap-northeast-1</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_PATH:</span> <span class=\"string\">backup_mysql</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_SSL:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_INSECURE_SKIP_VERIFY:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">ACCESS_KEY_ID:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">     <span class=\"attr\">SECRET_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_DRIVER:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_HOST:</span> <span class=\"string\">mysql:3306</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_USERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_PASSWORD:</span> <span class=\"string\">db</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_NAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_OPTS:</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">TIME_SCHEDULE:</span> <span class=\"string\">&quot;@daily&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">TIME_LOCATION:</span> <span class=\"string\">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>\n\n<p><code>TIME_LOCATION</code>可以设为上海时区，美食预设会是UTC+8时间。更多详细的设置可以<a href=\"https://github.com/appleboy/docker-backup-database\">参考文件</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc alias set minio http://minio:9000 1234567890 1234567890</span><br><span class=\"line\">./mc mb minio/test</span><br><span class=\"line\">./mc ilm import minio/test &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Rules&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;Expiration&quot;: &#123;</span><br><span class=\"line\">                &quot;Days&quot;: 7</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;ID&quot;: &quot;backup_postgres&quot;,</span><br><span class=\"line\">            &quot;Filter&quot;: &#123;</span><br><span class=\"line\">                &quot;Prefix&quot;: &quot;backup_postgres/&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Status&quot;: &quot;Enabled&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>当文件上传后如下图所示：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130727118.png\" alt=\"image-20210729130727118\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130614955.png\" alt=\"image-20210729130614955\"></p>\n","site":{"data":{}},"excerpt":"<p>由于备份<a href=\"https://www.postgresql.org/\">PostgreSQL</a>的指令<a href=\"https://docs.postgresql.tw/reference/client-applications/pg_dump\">pg_dump</a>需要特定版本才可以备份，故制作用<a href=\"https://www.docker.com/\">Docker</a>容器方式来自己备份，此工具支持<a href=\"https://www.mysql.com/\">MySQL</a>，PostgreSQL跟<a href=\"https://www.mongodb.com/\">MongoDB</a>，只要一个docker-compose yaml 档案就可以进行线上的备份，并且上传到minio，另外也可以设定每天晚上固定时间点进行时间备份，也就是饮食所设定的定时任务。没有使用，或者管理机房的朋友们，就可以通过这小工具，进行每天半夜线上备份，避免资料被误判。</p>","more":"<p>使用方式：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">minio:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">minio/minio:edge</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">data1-1:/data1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9000</span><span class=\"string\">:9000</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_SECRET_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">server</span> <span class=\"string\">/data</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">postgres:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:12</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pg-data:/var/lib/postgresql/data</span></span><br><span class=\"line\">    <span class=\"attr\">logging:</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_USER:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_DB:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_PASSWORD:</span> <span class=\"string\">db</span></span><br></pre></td></tr></table></figure>\n\n<p>挑选特定资料库版本的Docker Image</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup_postgres:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">appleboy/docker-backup-database:postgres-12</span></span><br><span class=\"line\">    <span class=\"attr\">logging:</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_DRIVER:</span> <span class=\"string\">s3</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_ENDPOINT:</span> <span class=\"string\">minio:9000</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_BUCKET:</span> <span class=\"string\">test</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_REGION:</span> <span class=\"string\">ap-northeast-1</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_PATH:</span> <span class=\"string\">backup_postgres</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_SSL:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_INSECURE_SKIP_VERIFY:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">ACCESS_KEY_ID:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">      <span class=\"attr\">SECRET_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_DRIVER:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_HOST:</span> <span class=\"string\">postgres:5432</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_USERNAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_PASSWORD:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_NAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_OPTS:</span></span><br></pre></td></tr></table></figure>\n\n<p>Final Step: <a href=\"https://docs.min.io/docs/minio-bucket-lifecycle-guide.html\">manage bucket lifecycle</a> using <a href=\"https://docs.min.io/docs/minio-client-quickstart-guide.html\">MinIO Client (mc)</a>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc ilm import minio/<span class=\"built_in\">test</span> &lt;&lt;<span class=\"string\">EOF</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Rules&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;Expiration&quot;: &#123;</span><br><span class=\"line\">                &quot;Days&quot;: 7</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;ID&quot;: &quot;backup_postgres&quot;,</span><br><span class=\"line\">            &quot;Filter&quot;: &#123;</span><br><span class=\"line\">                &quot;Prefix&quot;: &quot;backup_postgres/&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Status&quot;: &quot;Enabled&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>上面设定是快乐的备份，也就是手动使用<code>docker-compose up backup_postgres</code>就可以进行一次备份，当然可以每天晚上来备份</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup_mysql:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">appleboy/docker-backup-database:mysql-8</span></span><br><span class=\"line\">   <span class=\"attr\">logging:</span></span><br><span class=\"line\">     <span class=\"attr\">options:</span></span><br><span class=\"line\">       <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_DRIVER:</span> <span class=\"string\">s3</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_ENDPOINT:</span> <span class=\"string\">minio:9000</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_BUCKET:</span> <span class=\"string\">test</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_REGION:</span> <span class=\"string\">ap-northeast-1</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_PATH:</span> <span class=\"string\">backup_mysql</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_SSL:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_INSECURE_SKIP_VERIFY:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">ACCESS_KEY_ID:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">     <span class=\"attr\">SECRET_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_DRIVER:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_HOST:</span> <span class=\"string\">mysql:3306</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_USERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_PASSWORD:</span> <span class=\"string\">db</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_NAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_OPTS:</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">TIME_SCHEDULE:</span> <span class=\"string\">&quot;@daily&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">TIME_LOCATION:</span> <span class=\"string\">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>\n\n<p><code>TIME_LOCATION</code>可以设为上海时区，美食预设会是UTC+8时间。更多详细的设置可以<a href=\"https://github.com/appleboy/docker-backup-database\">参考文件</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc alias set minio http://minio:9000 1234567890 1234567890</span><br><span class=\"line\">./mc mb minio/test</span><br><span class=\"line\">./mc ilm import minio/test &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Rules&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;Expiration&quot;: &#123;</span><br><span class=\"line\">                &quot;Days&quot;: 7</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;ID&quot;: &quot;backup_postgres&quot;,</span><br><span class=\"line\">            &quot;Filter&quot;: &#123;</span><br><span class=\"line\">                &quot;Prefix&quot;: &quot;backup_postgres/&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Status&quot;: &quot;Enabled&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>当文件上传后如下图所示：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130727118.png\" alt=\"image-20210729130727118\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130614955.png\" alt=\"image-20210729130614955\"></p>"},{"title":"gitea启动报错","date":"2021-08-05T09:21:08.000Z","_content":"\ndrone gitea 启动失败\n\n\n\nlib/gitea/gitea\n❯ cp gitea.db gitea.db.20210805\n<!--more-->\n\nlib/gitea/gitea\n❯ sqlite3 gitea.db\nSQLite version 3.36.0 2021-06-18 18:36:39\nEnter \".help\" for usage hints.\nsqlite>  `UPDATE version SET version=186 WHERE id=1;`\n   ...> UPDATE version SET version=186 WHERE id=1;\nError: near \"`UPDATE version SET version=186 WHERE id=1;`\": syntax error\nsqlite> UPDATE version SET version=186 WHERE id=1;\nsqlite>\n\n","source":"_posts/gitea启动报错.md","raw":"---\ntitle: gitea启动报错\ndate: 2021-08-05 17:21:08\ntags:\n---\n\ndrone gitea 启动失败\n\n\n\nlib/gitea/gitea\n❯ cp gitea.db gitea.db.20210805\n<!--more-->\n\nlib/gitea/gitea\n❯ sqlite3 gitea.db\nSQLite version 3.36.0 2021-06-18 18:36:39\nEnter \".help\" for usage hints.\nsqlite>  `UPDATE version SET version=186 WHERE id=1;`\n   ...> UPDATE version SET version=186 WHERE id=1;\nError: near \"`UPDATE version SET version=186 WHERE id=1;`\": syntax error\nsqlite> UPDATE version SET version=186 WHERE id=1;\nsqlite>\n\n","slug":"gitea启动报错","published":1,"updated":"2021-08-23T00:38:38.709Z","_id":"cks3wmawv000068v9gb0v1daf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>drone gitea 启动失败</p>\n<p>lib/gitea/gitea<br>❯ cp gitea.db gitea.db.20210805</p>\n<span id=\"more\"></span>\n\n<p>lib/gitea/gitea<br>❯ sqlite3 gitea.db<br>SQLite version 3.36.0 2021-06-18 18:36:39<br>Enter “.help” for usage hints.<br>sqlite&gt;  <code>UPDATE version SET version=186 WHERE id=1;</code><br>   …&gt; UPDATE version SET version=186 WHERE id=1;<br>Error: near “<code>UPDATE version SET version=186 WHERE id=1;</code>“: syntax error<br>sqlite&gt; UPDATE version SET version=186 WHERE id=1;<br>sqlite&gt;</p>\n","site":{"data":{}},"excerpt":"<p>drone gitea 启动失败</p>\n<p>lib/gitea/gitea<br>❯ cp gitea.db gitea.db.20210805</p>","more":"<p>lib/gitea/gitea<br>❯ sqlite3 gitea.db<br>SQLite version 3.36.0 2021-06-18 18:36:39<br>Enter “.help” for usage hints.<br>sqlite&gt;  <code>UPDATE version SET version=186 WHERE id=1;</code><br>   …&gt; UPDATE version SET version=186 WHERE id=1;<br>Error: near “<code>UPDATE version SET version=186 WHERE id=1;</code>“: syntax error<br>sqlite&gt; UPDATE version SET version=186 WHERE id=1;<br>sqlite&gt;</p>"},{"title":"迁移数据","date":"2021-08-05T03:12:29.000Z","_content":"","source":"_posts/迁移数据.md","raw":"---\ntitle: 迁移数据\ndate: 2021-08-05 11:12:29\ntags:\n---\n","slug":"迁移数据","published":1,"updated":"2021-08-05T03:12:29.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks3wmawx000168v9e06w9i1k","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"记录 WSL 从 C 盘迁移至 D 盘","date":"2021-08-05T03:19:16.000Z","_content":"\n前言\nWSL 默认安装在 C 盘，随着开发时间的增长，数据越来越多，子系统数据占用高达 60 GB，对于原本 100 GB 的 C 盘，不堪重负，终于只剩下不足 300 MB 的空间，随之而来的就是 PHPStorm 无法打开\n\n为了解决这个问题，需要迁移 WSL 默认存储位置\n<!--more-->\n\n\n\n过程\n下载工具\n\nLxRunOffline：一个非常强大的管理子系统的工具\n\n下载并解压后，在解压目录中打开 PowerShell\n\n查看已安装的子系统\n\n $ LxRunOffline.exe list\n\n![image-20210805112423151](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210805112423151.png)\n\n\n查看子系统所在目录\n\n $ LxRunOffline.exe get-dir -n ArchLinux\n\n![image-20210805112646034](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210805112646034.png)\n\n\n新建目标目录并授权\n\n $ icacls D:\\wsl\\installed /grant \"hxf:(OI)(CI)(F)\"\n目标目录：D:\\wsl\\installed\n用户名：hxf\n迁移系统\n\n $ .\\LxRunOffline move -n ArchLinux -d D:\\wsl\\installed\\ArchLinux\nCopy\n然后耐心等待一大堆 Warning 的结束\n","source":"_posts/记录-WSL-从-C-盘迁移至-D-盘.md","raw":"---\ntitle: 记录 WSL 从 C 盘迁移至 D 盘\ndate: 2021-08-05 11:19:16\ntags:\n---\n\n前言\nWSL 默认安装在 C 盘，随着开发时间的增长，数据越来越多，子系统数据占用高达 60 GB，对于原本 100 GB 的 C 盘，不堪重负，终于只剩下不足 300 MB 的空间，随之而来的就是 PHPStorm 无法打开\n\n为了解决这个问题，需要迁移 WSL 默认存储位置\n<!--more-->\n\n\n\n过程\n下载工具\n\nLxRunOffline：一个非常强大的管理子系统的工具\n\n下载并解压后，在解压目录中打开 PowerShell\n\n查看已安装的子系统\n\n $ LxRunOffline.exe list\n\n![image-20210805112423151](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210805112423151.png)\n\n\n查看子系统所在目录\n\n $ LxRunOffline.exe get-dir -n ArchLinux\n\n![image-20210805112646034](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210805112646034.png)\n\n\n新建目标目录并授权\n\n $ icacls D:\\wsl\\installed /grant \"hxf:(OI)(CI)(F)\"\n目标目录：D:\\wsl\\installed\n用户名：hxf\n迁移系统\n\n $ .\\LxRunOffline move -n ArchLinux -d D:\\wsl\\installed\\ArchLinux\nCopy\n然后耐心等待一大堆 Warning 的结束\n","slug":"记录-WSL-从-C-盘迁移至-D-盘","published":1,"updated":"2021-08-23T00:38:38.757Z","_id":"cks3wmawy000268v96h9ihh31","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前言<br>WSL 默认安装在 C 盘，随着开发时间的增长，数据越来越多，子系统数据占用高达 60 GB，对于原本 100 GB 的 C 盘，不堪重负，终于只剩下不足 300 MB 的空间，随之而来的就是 PHPStorm 无法打开</p>\n<p>为了解决这个问题，需要迁移 WSL 默认存储位置</p>\n<span id=\"more\"></span>\n\n\n\n<p>过程<br>下载工具</p>\n<p>LxRunOffline：一个非常强大的管理子系统的工具</p>\n<p>下载并解压后，在解压目录中打开 PowerShell</p>\n<p>查看已安装的子系统</p>\n<p> $ LxRunOffline.exe list</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210805112423151.png\" alt=\"image-20210805112423151\"></p>\n<p>查看子系统所在目录</p>\n<p> $ LxRunOffline.exe get-dir -n ArchLinux</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210805112646034.png\" alt=\"image-20210805112646034\"></p>\n<p>新建目标目录并授权</p>\n<p> $ icacls D:\\wsl\\installed /grant “hxf:(OI)(CI)(F)”<br>目标目录：D:\\wsl\\installed<br>用户名：hxf<br>迁移系统</p>\n<p> $ .\\LxRunOffline move -n ArchLinux -d D:\\wsl\\installed\\ArchLinux<br>Copy<br>然后耐心等待一大堆 Warning 的结束</p>\n","site":{"data":{}},"excerpt":"<p>前言<br>WSL 默认安装在 C 盘，随着开发时间的增长，数据越来越多，子系统数据占用高达 60 GB，对于原本 100 GB 的 C 盘，不堪重负，终于只剩下不足 300 MB 的空间，随之而来的就是 PHPStorm 无法打开</p>\n<p>为了解决这个问题，需要迁移 WSL 默认存储位置</p>","more":"<p>过程<br>下载工具</p>\n<p>LxRunOffline：一个非常强大的管理子系统的工具</p>\n<p>下载并解压后，在解压目录中打开 PowerShell</p>\n<p>查看已安装的子系统</p>\n<p> $ LxRunOffline.exe list</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210805112423151.png\" alt=\"image-20210805112423151\"></p>\n<p>查看子系统所在目录</p>\n<p> $ LxRunOffline.exe get-dir -n ArchLinux</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210805112646034.png\" alt=\"image-20210805112646034\"></p>\n<p>新建目标目录并授权</p>\n<p> $ icacls D:\\wsl\\installed /grant “hxf:(OI)(CI)(F)”<br>目标目录：D:\\wsl\\installed<br>用户名：hxf<br>迁移系统</p>\n<p> $ .\\LxRunOffline move -n ArchLinux -d D:\\wsl\\installed\\ArchLinux<br>Copy<br>然后耐心等待一大堆 Warning 的结束</p>"},{"title":"Hexo使用攻略-添加分类及标签","date":"2021-08-13T01:21:34.000Z","_content":"\n### 1、创建“分类”选项\n\n#### 1.1 生成“分类”页并添加tpye属性\n<!--more-->\n\n打开命令行，进入博客所在文件夹。执行命令\n\n```\n$ hexo new page categories\n```\n\n成功后会提示：\n\n```\nINFO  Created: ~/Documents/blog/source/categories/index.md\n```\n\n![image-20210813092247207](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210813092247207.png)\n\n\n\n根据上面的路径，找到`index.md`这个文件，打开后默认内容是这样的：\n\n```\n---\ntitle: categories\ndate: 2021-08-13 09:22:29\n---\n```\n\n添加`type: \"categories\"`到内容中，添加后是这样的：\n\n```\n---\ntitle: categories\ndate: 2021-08-13 09:22:29\ntype: \"categories\"\n---\n\n```\n\n保存并关闭文件。\n\n\n\n#### 1.2 给文章添加“categories”属性\n\n打开需要添加分类的文章，为其添加categories属性。下方的`categories: web前端`表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。\n\n```\n---\ntitle: Hexo使用攻略-添加分类及标签\ndate: 2021-08-13 09:21:34\ntags:\ncategories: \n- web前端\n```\n\n至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了`categories: xxx`的文章才会被收录到首页的“分类”中。\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210813092754872.png\" alt=\"image-20210813092754872\" style=\"zoom:50%;\" />\n\n### 2、创建“标签”选项\n\n#### 2.1 生成“标签”页并添加tpye属性\n\n打开命令行，进入博客所在文件夹。执行命令\n\n```\n$ hexo new page tags\n```\n\n成功后会提示：\n\n```\nINFO  Created: ~/Documents/blog/source/tags/index.md\n```\n\n根据上面的路径，找到`index.md`这个文件，打开后默认内容是这样的：\n\n```\n---\ntitle: tags\ndate: 2021-08-13 09:28:50\n---\n```\n\n添加`type: \"tags\"`到内容中，添加后是这样的：\n\n```\n---\ntitle: tags\ndate: 2021-08-13 09:28:50\ntype: \"tags\"\n---\n```\n\n保存并关闭文件。\n\n#### 2.2 给文章添加“tags”属性\n\n打开需要添加标签的文章，为其添加tags属性。下方的`tags:`下方的`- jQuery` `- 表格`\n`- 表单验证`就是这篇文章的标签了\n\n```\n---\ntitle: Hexo使用攻略-添加分类及标签\ndate: 2021-08-13 09:21:34\ntags:\n- hexo\n- shell\n- 表单验证\ncategories: \n- web前端\n---\n```\n\n至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了`tags: xxx`的文章才会被收录到首页的“标签”中。\n\n细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行`hexo new 文章名`命令生成的文件，页面里就有`categories:`项了。\n\nscaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。\n\n教程结束，赶紧去设置吧！\n\n参考文档\n\n[自动添加readme](https://blog.zthxxx.me/post/hexo-automatic-add-readmore/)\n\n","source":"_posts/Hexo使用攻略-添加分类及标签.md","raw":"---\ntitle: Hexo使用攻略-添加分类及标签\ndate: 2021-08-13 09:21:34\ntags:\n- hexo\n- shell\n- 表单验证\ncategories: \n- web前端\n---\n\n### 1、创建“分类”选项\n\n#### 1.1 生成“分类”页并添加tpye属性\n<!--more-->\n\n打开命令行，进入博客所在文件夹。执行命令\n\n```\n$ hexo new page categories\n```\n\n成功后会提示：\n\n```\nINFO  Created: ~/Documents/blog/source/categories/index.md\n```\n\n![image-20210813092247207](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210813092247207.png)\n\n\n\n根据上面的路径，找到`index.md`这个文件，打开后默认内容是这样的：\n\n```\n---\ntitle: categories\ndate: 2021-08-13 09:22:29\n---\n```\n\n添加`type: \"categories\"`到内容中，添加后是这样的：\n\n```\n---\ntitle: categories\ndate: 2021-08-13 09:22:29\ntype: \"categories\"\n---\n\n```\n\n保存并关闭文件。\n\n\n\n#### 1.2 给文章添加“categories”属性\n\n打开需要添加分类的文章，为其添加categories属性。下方的`categories: web前端`表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。\n\n```\n---\ntitle: Hexo使用攻略-添加分类及标签\ndate: 2021-08-13 09:21:34\ntags:\ncategories: \n- web前端\n```\n\n至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了`categories: xxx`的文章才会被收录到首页的“分类”中。\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210813092754872.png\" alt=\"image-20210813092754872\" style=\"zoom:50%;\" />\n\n### 2、创建“标签”选项\n\n#### 2.1 生成“标签”页并添加tpye属性\n\n打开命令行，进入博客所在文件夹。执行命令\n\n```\n$ hexo new page tags\n```\n\n成功后会提示：\n\n```\nINFO  Created: ~/Documents/blog/source/tags/index.md\n```\n\n根据上面的路径，找到`index.md`这个文件，打开后默认内容是这样的：\n\n```\n---\ntitle: tags\ndate: 2021-08-13 09:28:50\n---\n```\n\n添加`type: \"tags\"`到内容中，添加后是这样的：\n\n```\n---\ntitle: tags\ndate: 2021-08-13 09:28:50\ntype: \"tags\"\n---\n```\n\n保存并关闭文件。\n\n#### 2.2 给文章添加“tags”属性\n\n打开需要添加标签的文章，为其添加tags属性。下方的`tags:`下方的`- jQuery` `- 表格`\n`- 表单验证`就是这篇文章的标签了\n\n```\n---\ntitle: Hexo使用攻略-添加分类及标签\ndate: 2021-08-13 09:21:34\ntags:\n- hexo\n- shell\n- 表单验证\ncategories: \n- web前端\n---\n```\n\n至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了`tags: xxx`的文章才会被收录到首页的“标签”中。\n\n细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行`hexo new 文章名`命令生成的文件，页面里就有`categories:`项了。\n\nscaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。\n\n教程结束，赶紧去设置吧！\n\n参考文档\n\n[自动添加readme](https://blog.zthxxx.me/post/hexo-automatic-add-readmore/)\n\n","slug":"Hexo使用攻略-添加分类及标签","published":1,"updated":"2021-08-23T00:38:38.692Z","_id":"cks9o6obz00000pv9bfzlemsc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、创建“分类”选项\"><a href=\"#1、创建“分类”选项\" class=\"headerlink\" title=\"1、创建“分类”选项\"></a>1、创建“分类”选项</h3><h4 id=\"1-1-生成“分类”页并添加tpye属性\"><a href=\"#1-1-生成“分类”页并添加tpye属性\" class=\"headerlink\" title=\"1.1 生成“分类”页并添加tpye属性\"></a>1.1 生成“分类”页并添加tpye属性</h4><span id=\"more\"></span>\n\n<p>打开命令行，进入博客所在文件夹。执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>成功后会提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210813092247207.png\" alt=\"image-20210813092247207\"></p>\n<p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2021-08-13 09:22:29</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>添加<code>type: &quot;categories&quot;</code>到内容中，添加后是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2021-08-13 09:22:29</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭文件。</p>\n<h4 id=\"1-2-给文章添加“categories”属性\"><a href=\"#1-2-给文章添加“categories”属性\" class=\"headerlink\" title=\"1.2 给文章添加“categories”属性\"></a>1.2 给文章添加“categories”属性</h4><p>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: web前端</code>表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo使用攻略-添加分类及标签</span><br><span class=\"line\">date: 2021-08-13 09:21:34</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- web前端</span><br></pre></td></tr></table></figure>\n\n<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210813092754872.png\" alt=\"image-20210813092754872\" style=\"zoom:50%;\" />\n\n<h3 id=\"2、创建“标签”选项\"><a href=\"#2、创建“标签”选项\" class=\"headerlink\" title=\"2、创建“标签”选项\"></a>2、创建“标签”选项</h3><h4 id=\"2-1-生成“标签”页并添加tpye属性\"><a href=\"#2-1-生成“标签”页并添加tpye属性\" class=\"headerlink\" title=\"2.1 生成“标签”页并添加tpye属性\"></a>2.1 生成“标签”页并添加tpye属性</h4><p>打开命令行，进入博客所在文件夹。执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>成功后会提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure>\n\n<p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-08-13 09:28:50</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>添加<code>type: &quot;tags&quot;</code>到内容中，添加后是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-08-13 09:28:50</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭文件。</p>\n<h4 id=\"2-2-给文章添加“tags”属性\"><a href=\"#2-2-给文章添加“tags”属性\" class=\"headerlink\" title=\"2.2 给文章添加“tags”属性\"></a>2.2 给文章添加“tags”属性</h4><p>打开需要添加标签的文章，为其添加tags属性。下方的<code>tags:</code>下方的<code>- jQuery</code> <code>- 表格</code><br><code>- 表单验证</code>就是这篇文章的标签了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo使用攻略-添加分类及标签</span><br><span class=\"line\">date: 2021-08-13 09:21:34</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\">- shell</span><br><span class=\"line\">- 表单验证</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- web前端</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</p>\n<p>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行<code>hexo new 文章名</code>命令生成的文件，页面里就有<code>categories:</code>项了。</p>\n<p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p>\n<p>教程结束，赶紧去设置吧！</p>\n<p>参考文档</p>\n<p><a href=\"https://blog.zthxxx.me/post/hexo-automatic-add-readmore/\">自动添加readme</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、创建“分类”选项\"><a href=\"#1、创建“分类”选项\" class=\"headerlink\" title=\"1、创建“分类”选项\"></a>1、创建“分类”选项</h3><h4 id=\"1-1-生成“分类”页并添加tpye属性\"><a href=\"#1-1-生成“分类”页并添加tpye属性\" class=\"headerlink\" title=\"1.1 生成“分类”页并添加tpye属性\"></a>1.1 生成“分类”页并添加tpye属性</h4>","more":"<p>打开命令行，进入博客所在文件夹。执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>成功后会提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210813092247207.png\" alt=\"image-20210813092247207\"></p>\n<p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2021-08-13 09:22:29</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>添加<code>type: &quot;categories&quot;</code>到内容中，添加后是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2021-08-13 09:22:29</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭文件。</p>\n<h4 id=\"1-2-给文章添加“categories”属性\"><a href=\"#1-2-给文章添加“categories”属性\" class=\"headerlink\" title=\"1.2 给文章添加“categories”属性\"></a>1.2 给文章添加“categories”属性</h4><p>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: web前端</code>表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo使用攻略-添加分类及标签</span><br><span class=\"line\">date: 2021-08-13 09:21:34</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- web前端</span><br></pre></td></tr></table></figure>\n\n<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210813092754872.png\" alt=\"image-20210813092754872\" style=\"zoom:50%;\" />\n\n<h3 id=\"2、创建“标签”选项\"><a href=\"#2、创建“标签”选项\" class=\"headerlink\" title=\"2、创建“标签”选项\"></a>2、创建“标签”选项</h3><h4 id=\"2-1-生成“标签”页并添加tpye属性\"><a href=\"#2-1-生成“标签”页并添加tpye属性\" class=\"headerlink\" title=\"2.1 生成“标签”页并添加tpye属性\"></a>2.1 生成“标签”页并添加tpye属性</h4><p>打开命令行，进入博客所在文件夹。执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>成功后会提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure>\n\n<p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-08-13 09:28:50</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>添加<code>type: &quot;tags&quot;</code>到内容中，添加后是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-08-13 09:28:50</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭文件。</p>\n<h4 id=\"2-2-给文章添加“tags”属性\"><a href=\"#2-2-给文章添加“tags”属性\" class=\"headerlink\" title=\"2.2 给文章添加“tags”属性\"></a>2.2 给文章添加“tags”属性</h4><p>打开需要添加标签的文章，为其添加tags属性。下方的<code>tags:</code>下方的<code>- jQuery</code> <code>- 表格</code><br><code>- 表单验证</code>就是这篇文章的标签了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo使用攻略-添加分类及标签</span><br><span class=\"line\">date: 2021-08-13 09:21:34</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\">- shell</span><br><span class=\"line\">- 表单验证</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- web前端</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</p>\n<p>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行<code>hexo new 文章名</code>命令生成的文件，页面里就有<code>categories:</code>项了。</p>\n<p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p>\n<p>教程结束，赶紧去设置吧！</p>\n<p>参考文档</p>\n<p><a href=\"https://blog.zthxxx.me/post/hexo-automatic-add-readmore/\">自动添加readme</a></p>"},{"title":"Mybatis-plus SQL性能优化（分页数据获取)","date":"2021-08-11T05:47:37.000Z","_content":"\n![image-20210811134932015](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811134932015.png)\n\n<!--more-->\n\n\n## 特性\n\n- **无侵入**：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑\n- **损耗小**：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作\n- **强大的 CRUD 操作**：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求\n- **支持 Lambda 形式调用**：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错\n- **支持主键自动生成**：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题\n- **支持 ActiveRecord 模式**：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作\n- **支持自定义全局通用操作**：支持全局通用方法注入（ Write once, use anywhere ）\n- **内置代码生成器**：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用\n- **内置分页插件**：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询\n- **分页插件支持多种数据库**：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库\n- **内置性能分析插件**：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询\n- **内置全局拦截插件**：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作\n\n通过日志分析，目前mybatis获取分页的方法是执行两个sql，一个是count了，另一个是分页。查看日志方式，吧下方注释放开即可，但是日志量会陡增，生产环境不建议开启，log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n\n![image-20210811135534008](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811135534008.png)\n\n**优化方向：**\n\n那我们完全可以将这两步放到一次sql去执行获取，减少一半的查询时间。\n\n看代码：\n\nselect SQL_CALC_FOUND_ROWS\n\n  col_name1 as colName1,\n\n  col_name2 as colName2\n\nfrom table_name limit 0,10;\n\nselect FOUND_ROWS() as count;\n\n在SELECT语句中加上修饰SQL_CALC_FOUND_ROWS 之后，SELECT FOUND_ROWS() 会返回满足条件记录的总数。\n\n这样，你执行完 select SQL_CALC_FOUND_ROWS 之后，再取一下记录总数就行了。\n\n看到没有，两个结果：第一个是分页list，第二个是总数count。接下来怎么办？\n\n接下来我们就将相关代码放到JAVA中，可是我们会发现：在数据库中能够成功执行语句，但是放到代码中却会报错。\n\n\n\n原来，mybatis在我们使用链接连接数据库时，需要我们手动在连接上加上代码：\n\n&allowMultiQueries=true  //允许执行多条sql\n\n这样，mybatis就可以成功通过多条sql语句get到多个数据集了。\n\n那么现在问题来了：\n\n我们在xml中如何去接收sql查询到的多数据集呢？\n\n废话不多说，直接上代码：\n\n```javascript\n<!-- 获取学生列表数据-分页-+count数据 -->\n<select id=\"getStudentManagePage\" resultMap=\"StudentManageVoMap,count\">\n   SELECT sql_calc_found_rows 这里是字段 FROM\n        tbl_student_infomation AS tsi\n        LEFT JOIN tbl_college AS tco ON tsi.college_id=tco.id\n        LEFT JOIN tbl_profession AS tp ON tsi.profession_id=tp.id\n        LEFT JOIN tbl_class AS tcl ON tsi.class_id=tcl.id\n        WHERE 1=1\n        ORDER BY tcs.score DESC,tsi.is_track DESC,tsi.sno DESC limit #{offset},#{limit};\n   SELECT found_rows() as count;\n</select>\n<!--接收count数据集-->\n<resultMap type=\"Integer\" id=\"count\">\n    <result column=\"count\" jdbcType=\"INTEGER\" javaType=\"Integer\" />\n</resultMap>\n<!--接收分页数据集-->\n<resultMap type=\"com.atage.entity.vo.StudentManageVo\" id=\"StudentManageVoMap\">\n        <result column=\"sno\" jdbcType=\"VARCHAR\" property=\"sno\" />\n        <result column=\"name\" jdbcType=\"VARCHAR\" property=\"name\" />\n        <result column=\"sex\" jdbcType=\"INTEGER\" property=\"sex\" />\n        <result column=\"imgUrl\" jdbcType=\"VARCHAR\" property=\"imgUrl\" />\n        <result column=\"brithday\" jdbcType=\"DATE\" property=\"brithday\" />\n        <result column=\"sourcePlace\" jdbcType=\"VARCHAR\" property=\"sourcePlace\" />\n        <result column=\"singleton\" jdbcType=\"INTEGER\" property=\"singleton\" />\n        <result column=\"parentFamily\" jdbcType=\"INTEGER\" property=\"parentFamily\" />\n        <result column=\"enrollment\" jdbcType=\"VARCHAR\" property=\"enrollment\" />\n        <result column=\"collegeId\" jdbcType=\"VARCHAR\" property=\"collegeId\" />\n        <result column=\"professionId\" jdbcType=\"VARCHAR\" property=\"professionId\" />\n        <result column=\"classId\" jdbcType=\"VARCHAR\" property=\"classId\" />\n        <result column=\"isTrack\" jdbcType=\"INTEGER\" property=\"isTrack\" />\n        <result column=\"score\" jdbcType=\"DOUBLE\" property=\"score\" />\n        <result column=\"gradeC\" jdbcType=\"DOUBLE\" property=\"gradeC\" />\n        <result column=\"gradeQ\" jdbcType=\"DOUBLE\" property=\"gradeQ\" />\n        <result column=\"gradeId\" jdbcType=\"VARCHAR\" property=\"gradeId\" />\n        <result column=\"clollegeName\" jdbcType=\"VARCHAR\" property=\"clollegeName\" />\n        <result column=\"yearName\" jdbcType=\"VARCHAR\" property=\"yearName\" />\n        <result column=\"professionName\" jdbcType=\"VARCHAR\" property=\"professionName\" />\n        <result column=\"className\" jdbcType=\"VARCHAR\" property=\"className\" />\n        <result column=\"teacherId\" jdbcType=\"VARCHAR\" property=\"teacherId\" />\n    </resultMap>\n```\n\n通过分号把两个sql进行执行。\n\n2.Mapper代码\n\n```javascript\n//接收用list<?>\nList<?> getStudentManagePage(这里是传递的条件参数);\n```\n\n3.service代码\n\n```javascript\n//接收用list<?>\nList<?> getStudentManagePage(这里是传递的条件参数);\n```\n\n4.serviceImpl代码\n\n```javascript\n@Override\n    public List<?> getStudentManagePage(参数) {\n        return tblStudentInfomationMapper.getStudentManagePage(参数);\n    }\n```\n\n5.controller代码\n\n```javascript\n//这里是接收数据\nList<?> list = tblStudentInfomationService.getStudentManagePage(参数);\nList<StudentManageVo> studentManageVoList = new ArrayList<StudentManageVo>();\n//接收分页数据\nstudentManageVoList = (List<StudentManageVo>)list.get(0);\n//接收count数据\ncount = ((List<Integer>) list.get(1)).get(0);\n```\n\n好，按照以上配置，你就会发现SQL执行效率就大大提高了。\n\n**☆重点提示**\n\n强调下必须修改数据库连接 \n\n1、修改数据库连接参数加上allowMultiQueries=true，如： \n\n```javascript\nhikariConfig.security.jdbcUrl=jdbc:mysql://xx.xx.xx:3306/xxxxx?characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true\n```\n\n2、直接写多条语句，用“；”隔开即可\n\n```javascript\n<delete id=\"deleteUserById\" parameterType=\"String\">\ndelete from sec_user_role where userId=#{id};\ndelete from sec_user where id=#{id};\n</delete>\n```\n\n","source":"_posts/Mybatis-plus-SQL性能优化（分页数据获取.md","raw":"---\ntitle: Mybatis-plus SQL性能优化（分页数据获取)\ndate: 2021-08-11 13:47:37\ntags: mybatis 分页 \n---\n\n![image-20210811134932015](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811134932015.png)\n\n<!--more-->\n\n\n## 特性\n\n- **无侵入**：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑\n- **损耗小**：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作\n- **强大的 CRUD 操作**：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求\n- **支持 Lambda 形式调用**：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错\n- **支持主键自动生成**：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题\n- **支持 ActiveRecord 模式**：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作\n- **支持自定义全局通用操作**：支持全局通用方法注入（ Write once, use anywhere ）\n- **内置代码生成器**：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用\n- **内置分页插件**：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询\n- **分页插件支持多种数据库**：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库\n- **内置性能分析插件**：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询\n- **内置全局拦截插件**：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作\n\n通过日志分析，目前mybatis获取分页的方法是执行两个sql，一个是count了，另一个是分页。查看日志方式，吧下方注释放开即可，但是日志量会陡增，生产环境不建议开启，log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n\n![image-20210811135534008](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811135534008.png)\n\n**优化方向：**\n\n那我们完全可以将这两步放到一次sql去执行获取，减少一半的查询时间。\n\n看代码：\n\nselect SQL_CALC_FOUND_ROWS\n\n  col_name1 as colName1,\n\n  col_name2 as colName2\n\nfrom table_name limit 0,10;\n\nselect FOUND_ROWS() as count;\n\n在SELECT语句中加上修饰SQL_CALC_FOUND_ROWS 之后，SELECT FOUND_ROWS() 会返回满足条件记录的总数。\n\n这样，你执行完 select SQL_CALC_FOUND_ROWS 之后，再取一下记录总数就行了。\n\n看到没有，两个结果：第一个是分页list，第二个是总数count。接下来怎么办？\n\n接下来我们就将相关代码放到JAVA中，可是我们会发现：在数据库中能够成功执行语句，但是放到代码中却会报错。\n\n\n\n原来，mybatis在我们使用链接连接数据库时，需要我们手动在连接上加上代码：\n\n&allowMultiQueries=true  //允许执行多条sql\n\n这样，mybatis就可以成功通过多条sql语句get到多个数据集了。\n\n那么现在问题来了：\n\n我们在xml中如何去接收sql查询到的多数据集呢？\n\n废话不多说，直接上代码：\n\n```javascript\n<!-- 获取学生列表数据-分页-+count数据 -->\n<select id=\"getStudentManagePage\" resultMap=\"StudentManageVoMap,count\">\n   SELECT sql_calc_found_rows 这里是字段 FROM\n        tbl_student_infomation AS tsi\n        LEFT JOIN tbl_college AS tco ON tsi.college_id=tco.id\n        LEFT JOIN tbl_profession AS tp ON tsi.profession_id=tp.id\n        LEFT JOIN tbl_class AS tcl ON tsi.class_id=tcl.id\n        WHERE 1=1\n        ORDER BY tcs.score DESC,tsi.is_track DESC,tsi.sno DESC limit #{offset},#{limit};\n   SELECT found_rows() as count;\n</select>\n<!--接收count数据集-->\n<resultMap type=\"Integer\" id=\"count\">\n    <result column=\"count\" jdbcType=\"INTEGER\" javaType=\"Integer\" />\n</resultMap>\n<!--接收分页数据集-->\n<resultMap type=\"com.atage.entity.vo.StudentManageVo\" id=\"StudentManageVoMap\">\n        <result column=\"sno\" jdbcType=\"VARCHAR\" property=\"sno\" />\n        <result column=\"name\" jdbcType=\"VARCHAR\" property=\"name\" />\n        <result column=\"sex\" jdbcType=\"INTEGER\" property=\"sex\" />\n        <result column=\"imgUrl\" jdbcType=\"VARCHAR\" property=\"imgUrl\" />\n        <result column=\"brithday\" jdbcType=\"DATE\" property=\"brithday\" />\n        <result column=\"sourcePlace\" jdbcType=\"VARCHAR\" property=\"sourcePlace\" />\n        <result column=\"singleton\" jdbcType=\"INTEGER\" property=\"singleton\" />\n        <result column=\"parentFamily\" jdbcType=\"INTEGER\" property=\"parentFamily\" />\n        <result column=\"enrollment\" jdbcType=\"VARCHAR\" property=\"enrollment\" />\n        <result column=\"collegeId\" jdbcType=\"VARCHAR\" property=\"collegeId\" />\n        <result column=\"professionId\" jdbcType=\"VARCHAR\" property=\"professionId\" />\n        <result column=\"classId\" jdbcType=\"VARCHAR\" property=\"classId\" />\n        <result column=\"isTrack\" jdbcType=\"INTEGER\" property=\"isTrack\" />\n        <result column=\"score\" jdbcType=\"DOUBLE\" property=\"score\" />\n        <result column=\"gradeC\" jdbcType=\"DOUBLE\" property=\"gradeC\" />\n        <result column=\"gradeQ\" jdbcType=\"DOUBLE\" property=\"gradeQ\" />\n        <result column=\"gradeId\" jdbcType=\"VARCHAR\" property=\"gradeId\" />\n        <result column=\"clollegeName\" jdbcType=\"VARCHAR\" property=\"clollegeName\" />\n        <result column=\"yearName\" jdbcType=\"VARCHAR\" property=\"yearName\" />\n        <result column=\"professionName\" jdbcType=\"VARCHAR\" property=\"professionName\" />\n        <result column=\"className\" jdbcType=\"VARCHAR\" property=\"className\" />\n        <result column=\"teacherId\" jdbcType=\"VARCHAR\" property=\"teacherId\" />\n    </resultMap>\n```\n\n通过分号把两个sql进行执行。\n\n2.Mapper代码\n\n```javascript\n//接收用list<?>\nList<?> getStudentManagePage(这里是传递的条件参数);\n```\n\n3.service代码\n\n```javascript\n//接收用list<?>\nList<?> getStudentManagePage(这里是传递的条件参数);\n```\n\n4.serviceImpl代码\n\n```javascript\n@Override\n    public List<?> getStudentManagePage(参数) {\n        return tblStudentInfomationMapper.getStudentManagePage(参数);\n    }\n```\n\n5.controller代码\n\n```javascript\n//这里是接收数据\nList<?> list = tblStudentInfomationService.getStudentManagePage(参数);\nList<StudentManageVo> studentManageVoList = new ArrayList<StudentManageVo>();\n//接收分页数据\nstudentManageVoList = (List<StudentManageVo>)list.get(0);\n//接收count数据\ncount = ((List<Integer>) list.get(1)).get(0);\n```\n\n好，按照以上配置，你就会发现SQL执行效率就大大提高了。\n\n**☆重点提示**\n\n强调下必须修改数据库连接 \n\n1、修改数据库连接参数加上allowMultiQueries=true，如： \n\n```javascript\nhikariConfig.security.jdbcUrl=jdbc:mysql://xx.xx.xx:3306/xxxxx?characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true\n```\n\n2、直接写多条语句，用“；”隔开即可\n\n```javascript\n<delete id=\"deleteUserById\" parameterType=\"String\">\ndelete from sec_user_role where userId=#{id};\ndelete from sec_user where id=#{id};\n</delete>\n```\n\n","slug":"Mybatis-plus-SQL性能优化（分页数据获取","published":1,"updated":"2021-08-23T00:38:38.696Z","_id":"cks9o6oc400020pv9ddfy3vjv","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811134932015.png\" alt=\"image-20210811134932015\"></p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>\n<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>\n<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>\n<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>\n<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>\n<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>\n<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>\n<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>\n<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>\n<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>\n<li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>\n<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>\n</ul>\n<p>通过日志分析，目前mybatis获取分页的方法是执行两个sql，一个是count了，另一个是分页。查看日志方式，吧下方注释放开即可，但是日志量会陡增，生产环境不建议开启，log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811135534008.png\" alt=\"image-20210811135534008\"></p>\n<p><strong>优化方向：</strong></p>\n<p>那我们完全可以将这两步放到一次sql去执行获取，减少一半的查询时间。</p>\n<p>看代码：</p>\n<p>select SQL_CALC_FOUND_ROWS</p>\n<p>  col_name1 as colName1,</p>\n<p>  col_name2 as colName2</p>\n<p>from table_name limit 0,10;</p>\n<p>select FOUND_ROWS() as count;</p>\n<p>在SELECT语句中加上修饰SQL_CALC_FOUND_ROWS 之后，SELECT FOUND_ROWS() 会返回满足条件记录的总数。</p>\n<p>这样，你执行完 select SQL_CALC_FOUND_ROWS 之后，再取一下记录总数就行了。</p>\n<p>看到没有，两个结果：第一个是分页list，第二个是总数count。接下来怎么办？</p>\n<p>接下来我们就将相关代码放到JAVA中，可是我们会发现：在数据库中能够成功执行语句，但是放到代码中却会报错。</p>\n<p>原来，mybatis在我们使用链接连接数据库时，需要我们手动在连接上加上代码：</p>\n<p>&amp;allowMultiQueries=true  //允许执行多条sql</p>\n<p>这样，mybatis就可以成功通过多条sql语句get到多个数据集了。</p>\n<p>那么现在问题来了：</p>\n<p>我们在xml中如何去接收sql查询到的多数据集呢？</p>\n<p>废话不多说，直接上代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 获取学生列表数据-分页-+count数据 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getStudentManagePage&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;StudentManageVoMap,count&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">   SELECT sql_calc_found_rows 这里是字段 FROM</span></span><br><span class=\"line\"><span class=\"xml\">        tbl_student_infomation AS tsi</span></span><br><span class=\"line\"><span class=\"xml\">        LEFT JOIN tbl_college AS tco ON tsi.college_id=tco.id</span></span><br><span class=\"line\"><span class=\"xml\">        LEFT JOIN tbl_profession AS tp ON tsi.profession_id=tp.id</span></span><br><span class=\"line\"><span class=\"xml\">        LEFT JOIN tbl_class AS tcl ON tsi.class_id=tcl.id</span></span><br><span class=\"line\"><span class=\"xml\">        WHERE 1=1</span></span><br><span class=\"line\"><span class=\"xml\">        ORDER BY tcs.score DESC,tsi.is_track DESC,tsi.sno DESC limit #&#123;offset&#125;,#&#123;limit&#125;;</span></span><br><span class=\"line\"><span class=\"xml\">   SELECT found_rows() as count;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span></span><br><span class=\"line\">&lt;!--接收count数据集--&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Integer&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;count&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;Integer&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span></span><br><span class=\"line\">&lt;!--接收分页数据集--&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.atage.entity.vo.StudentManageVo&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;StudentManageVoMap&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sno&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;sno&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;sex&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;imgUrl&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;imgUrl&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;brithday&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DATE&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;brithday&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sourcePlace&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;sourcePlace&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;singleton&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;singleton&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;parentFamily&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;parentFamily&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;enrollment&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;enrollment&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;collegeId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;collegeId&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;professionId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;professionId&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;classId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;classId&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;isTrack&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;isTrack&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;score&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DOUBLE&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;score&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;gradeC&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DOUBLE&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;gradeC&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;gradeQ&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DOUBLE&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;gradeQ&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;gradeId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;gradeId&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;clollegeName&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;clollegeName&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;yearName&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;yearName&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;professionName&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;professionName&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;className&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;className&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;teacherId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;teacherId&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>通过分号把两个sql进行执行。</p>\n<p>2.Mapper代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接收用list&lt;?&gt;</span></span><br><span class=\"line\">List&lt;?&gt; getStudentManagePage(这里是传递的条件参数);</span><br></pre></td></tr></table></figure>\n\n<p>3.service代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接收用list&lt;?&gt;</span></span><br><span class=\"line\">List&lt;?&gt; getStudentManagePage(这里是传递的条件参数);</span><br></pre></td></tr></table></figure>\n\n<p>4.serviceImpl代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public List&lt;?&gt; <span class=\"function\"><span class=\"title\">getStudentManagePage</span>(<span class=\"params\">参数</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tblStudentInfomationMapper.getStudentManagePage(参数);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.controller代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里是接收数据</span></span><br><span class=\"line\">List&lt;?&gt; list = tblStudentInfomationService.getStudentManagePage(参数);</span><br><span class=\"line\">List&lt;StudentManageVo&gt; studentManageVoList = <span class=\"keyword\">new</span> ArrayList&lt;StudentManageVo&gt;();</span><br><span class=\"line\"><span class=\"comment\">//接收分页数据</span></span><br><span class=\"line\">studentManageVoList = (List&lt;StudentManageVo&gt;)list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//接收count数据</span></span><br><span class=\"line\">count = ((List&lt;Integer&gt;) list.get(<span class=\"number\">1</span>)).get(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>好，按照以上配置，你就会发现SQL执行效率就大大提高了。</p>\n<p><strong>☆重点提示</strong></p>\n<p>强调下必须修改数据库连接 </p>\n<p>1、修改数据库连接参数加上allowMultiQueries=true，如： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hikariConfig.security.jdbcUrl=jdbc:mysql:<span class=\"comment\">//xx.xx.xx:3306/xxxxx?characterEncoding=utf-8&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;allowMultiQueries=true</span></span><br></pre></td></tr></table></figure>\n\n<p>2、直接写多条语句，用“；”隔开即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">delete</span> id=<span class=\"string\">&quot;deleteUserById&quot;</span> parameterType=<span class=\"string\">&quot;String&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> sec_user_role where userId=#&#123;id&#125;;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> sec_user where id=#&#123;id&#125;;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">delete</span>&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811134932015.png\" alt=\"image-20210811134932015\"></p>","more":"<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>\n<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>\n<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>\n<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>\n<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>\n<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>\n<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>\n<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>\n<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>\n<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>\n<li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>\n<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>\n</ul>\n<p>通过日志分析，目前mybatis获取分页的方法是执行两个sql，一个是count了，另一个是分页。查看日志方式，吧下方注释放开即可，但是日志量会陡增，生产环境不建议开启，log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811135534008.png\" alt=\"image-20210811135534008\"></p>\n<p><strong>优化方向：</strong></p>\n<p>那我们完全可以将这两步放到一次sql去执行获取，减少一半的查询时间。</p>\n<p>看代码：</p>\n<p>select SQL_CALC_FOUND_ROWS</p>\n<p>  col_name1 as colName1,</p>\n<p>  col_name2 as colName2</p>\n<p>from table_name limit 0,10;</p>\n<p>select FOUND_ROWS() as count;</p>\n<p>在SELECT语句中加上修饰SQL_CALC_FOUND_ROWS 之后，SELECT FOUND_ROWS() 会返回满足条件记录的总数。</p>\n<p>这样，你执行完 select SQL_CALC_FOUND_ROWS 之后，再取一下记录总数就行了。</p>\n<p>看到没有，两个结果：第一个是分页list，第二个是总数count。接下来怎么办？</p>\n<p>接下来我们就将相关代码放到JAVA中，可是我们会发现：在数据库中能够成功执行语句，但是放到代码中却会报错。</p>\n<p>原来，mybatis在我们使用链接连接数据库时，需要我们手动在连接上加上代码：</p>\n<p>&amp;allowMultiQueries=true  //允许执行多条sql</p>\n<p>这样，mybatis就可以成功通过多条sql语句get到多个数据集了。</p>\n<p>那么现在问题来了：</p>\n<p>我们在xml中如何去接收sql查询到的多数据集呢？</p>\n<p>废话不多说，直接上代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 获取学生列表数据-分页-+count数据 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getStudentManagePage&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;StudentManageVoMap,count&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">   SELECT sql_calc_found_rows 这里是字段 FROM</span></span><br><span class=\"line\"><span class=\"xml\">        tbl_student_infomation AS tsi</span></span><br><span class=\"line\"><span class=\"xml\">        LEFT JOIN tbl_college AS tco ON tsi.college_id=tco.id</span></span><br><span class=\"line\"><span class=\"xml\">        LEFT JOIN tbl_profession AS tp ON tsi.profession_id=tp.id</span></span><br><span class=\"line\"><span class=\"xml\">        LEFT JOIN tbl_class AS tcl ON tsi.class_id=tcl.id</span></span><br><span class=\"line\"><span class=\"xml\">        WHERE 1=1</span></span><br><span class=\"line\"><span class=\"xml\">        ORDER BY tcs.score DESC,tsi.is_track DESC,tsi.sno DESC limit #&#123;offset&#125;,#&#123;limit&#125;;</span></span><br><span class=\"line\"><span class=\"xml\">   SELECT found_rows() as count;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span></span><br><span class=\"line\">&lt;!--接收count数据集--&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Integer&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;count&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;Integer&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span></span><br><span class=\"line\">&lt;!--接收分页数据集--&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.atage.entity.vo.StudentManageVo&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;StudentManageVoMap&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sno&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;sno&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;sex&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;imgUrl&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;imgUrl&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;brithday&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DATE&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;brithday&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sourcePlace&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;sourcePlace&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;singleton&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;singleton&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;parentFamily&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;parentFamily&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;enrollment&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;enrollment&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;collegeId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;collegeId&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;professionId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;professionId&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;classId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;classId&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;isTrack&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;isTrack&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;score&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DOUBLE&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;score&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;gradeC&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DOUBLE&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;gradeC&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;gradeQ&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DOUBLE&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;gradeQ&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;gradeId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;gradeId&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;clollegeName&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;clollegeName&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;yearName&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;yearName&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;professionName&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;professionName&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;className&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;className&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;teacherId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;teacherId&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>通过分号把两个sql进行执行。</p>\n<p>2.Mapper代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接收用list&lt;?&gt;</span></span><br><span class=\"line\">List&lt;?&gt; getStudentManagePage(这里是传递的条件参数);</span><br></pre></td></tr></table></figure>\n\n<p>3.service代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接收用list&lt;?&gt;</span></span><br><span class=\"line\">List&lt;?&gt; getStudentManagePage(这里是传递的条件参数);</span><br></pre></td></tr></table></figure>\n\n<p>4.serviceImpl代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public List&lt;?&gt; <span class=\"function\"><span class=\"title\">getStudentManagePage</span>(<span class=\"params\">参数</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tblStudentInfomationMapper.getStudentManagePage(参数);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.controller代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里是接收数据</span></span><br><span class=\"line\">List&lt;?&gt; list = tblStudentInfomationService.getStudentManagePage(参数);</span><br><span class=\"line\">List&lt;StudentManageVo&gt; studentManageVoList = <span class=\"keyword\">new</span> ArrayList&lt;StudentManageVo&gt;();</span><br><span class=\"line\"><span class=\"comment\">//接收分页数据</span></span><br><span class=\"line\">studentManageVoList = (List&lt;StudentManageVo&gt;)list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//接收count数据</span></span><br><span class=\"line\">count = ((List&lt;Integer&gt;) list.get(<span class=\"number\">1</span>)).get(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>好，按照以上配置，你就会发现SQL执行效率就大大提高了。</p>\n<p><strong>☆重点提示</strong></p>\n<p>强调下必须修改数据库连接 </p>\n<p>1、修改数据库连接参数加上allowMultiQueries=true，如： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hikariConfig.security.jdbcUrl=jdbc:mysql:<span class=\"comment\">//xx.xx.xx:3306/xxxxx?characterEncoding=utf-8&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;allowMultiQueries=true</span></span><br></pre></td></tr></table></figure>\n\n<p>2、直接写多条语句，用“；”隔开即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">delete</span> id=<span class=\"string\">&quot;deleteUserById&quot;</span> parameterType=<span class=\"string\">&quot;String&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> sec_user_role where userId=#&#123;id&#125;;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> sec_user where id=#&#123;id&#125;;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">delete</span>&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ManjaroLinux搭建","date":"2021-08-11T02:23:02.000Z","_content":"\n下载压缩包：Manjarco.zip\n\n解压压缩包如一下目录所示\n\n![image-20210811105044473](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105044473.png)\n\n双击Manjarco.exe则进行linux的安装，需要等一会，会告诉安装成功\n<!--more-->\n\n\n\n查看安装后的命令输入\n\n![image-20210811105147021](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105147021.png)\n\n如果成功则可以看见Manjaro的命令。\n\n通过wsl -d Manjaro则可进入到服务器。\n\n`wsl -d Manjaro`\n\n![image-20210811105354401](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105354401.png)\n\n### 换源更新[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#509598612)\n\nPS: 以下部分都以 root 用户身份运行命令。\n\n```bash\nCopypasswd # 设置密码\n# 设置软件源\necho 'Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch' > /etc/pacman.d/mirrorlist\necho 'Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch' >> /etc/pacman.d/mirrorlist\n# 添加写保护，防止被修改\nchattr +i /etc/pacman.d/mirrorlist\n# 初始化 keyring\npacman-key --init\npacman-key --populate\npacman -Syu # 更新\n```\n\n其他镜像源请见通过 [Pacman Mirrorlist 生成器](https://www.archlinux.org/mirrorlist/)生成的[国内源列表](https://www.archlinux.org/mirrorlist/?country=CN&protocol=http&protocol=https&ip_version=4)，用自己学校的更快哦！建议看看 [镜像状态列表](https://www.archlinux.org/mirrors/status/)，使用 Mirror Status 较低的国内镜像站\n\n### 启用 multilib 库[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#3927474463)\n\nmultilib 库包含 64 位系统中需要的 32 位软件和库。\n\n`vim /etc/pacman.conf`，取消这几行的注释：\n\n```\nCopy[multilib]\nInclude = /etc/pacman.d/mirrorlist\n```\n\n并且取消该文件中`#Color`这一行的注释，以启用彩色输出。\n\n### 添加 archlinuxcn 源[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#515215996)\n\nArch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体/美化包等。\n\n```bash\nCopyvim /etc/pacman.conf\n```\n\n在文件末尾加上：\n\n```conf\nCopy[archlinuxcn]\nServer = https://mirrors.aliyun.com/archlinuxcn/$arch\n# 其他的见 https://github.com/archlinuxcn/mirrorlist-repo，最好是用自己学校的\n```\n\n然后：\n\n```bash\nCopypacman -Syy\npacman -S archlinuxcn-keyring\n```\n\n### 创建用户[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1153411218)\n\n有需要就创建吧。\n*注：此处的 yourname 是你要创建的用户名*\n\n```bash\nCopy# 新建用户。-m 为用户创建家目录；-G wheel 将用户添加到 wheel 用户组\nuseradd -m -G wheel xfhuang\n# 设置密码\npasswd xfhuang\n\n# 因为 visudo 需要 vi\nln -s /usr/bin/vim /usr/bin/vi\n# 编辑 /etc/sudoers\nvisudo\n```\n\n将以下两行行首的`#`去掉\n\n```bash\nCopy# %wheel ALL=(ALL) ALL\n# %wheel ALL=(ALL) NOPASSWD: ALL\n```\n\n在 powershell 中进入到 Arch.exe 所在文件夹，设置 WSL 默认登陆用户和默认的 WSL：\n\n```powershell\nCopy.\\Arch.exe config --default-user yourname\nwsl -s Arch\n```\n\n重新打开，就是在 yourname 用户了。\n\n## 安装常用软件[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1880665260)\n\nPS: 这部分以 yourname 用户身份运行命令。\n\n### 安装 yay[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1538716494)\n\n```bash\nCopysudo pacman -S --needed base-devel\n```\n\n出现`:: fakeroot is in IgnorePkg/IgnoreGroup. Install anyway? [Y/n]`，选 n，接下来一直回车即可。\n\n```bash\nCopysudo pacman -S --needed yay\n# yay 换源\nyay --aururl \"https://aur.tuna.tsinghua.edu.cn\" --save\n```\n\n### 安装其他的一些软件[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#3500358456)\n\n```bash\nCopysudo pacman -S --needed neofetch lolcat bat tokei tree screenfetch\nneofetch | lolcat -a\n```\n\n### 安装 gcc、clang、qemu 等[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1080076022)\n\n```bash\nCopysudo pacman -S --needed gcc clang lib32-gcc-libs gdb make binutils git openssh man-pages ccls\n```\n\n安装 qemu（有需要就安装吧）：\n\n```bash\nCopysudo pacman -S --needed qemu-arch-extra\n```\n\n### 安装 zsh[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2194599011)\n\n给 windows 安装以下字体，并且改变 windows terminal 的字体设置(这里就不细说了)：\n\n- [MesloLGS NF](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Meslo/S/Regular/complete) *powerlevel10k 作者推荐*\n- [FiraCode NF](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode/Regular/complete) *我更喜欢这个*\n\n安装 zsh 并且将其设置为默认 shell：\n\n```bash\nCopysudo pacman -S --needed zsh\n# 编辑 /etc/passwd 文件，将 root 用户和 yourname 用户的 /bin/bash 改为 /bin/zsh\n# 或者使用 chsh -s /bin/zsh 来改变当前用户的默认shell\nsudo vim /etc/passwd\ntouch ~/.zshrc\n# 在yourname用户创建软链接，让root用户也使用yourname用户的.zshrc\n# 我觉得这样比较方便\nsudo ln -s ~/.zshrc /root/.zshrc\n```\n\n### 使用 proxychains 代理终端程序[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2378191044)\n\n可以使用 windows 的 [qv②ray](https://qv2ray.net/)/clash/ssr 等代理软件来代理 wsl 中的程序！先安装 proxychains：\n\n```bash\nCopysudo pacman -S --needed proxychains-ng\n```\n\n首先，`sudo vim /etc/proxychains.conf`，将`proxy_dns`这一行注释。（这样能够让 proxychains 代理 yay）\n\n如果用的是 WSL 1，那就 `sudo vim /etc/proxychains.conf`，将最后一行的 socks4 127.0.0.1 9095 修改为：\n\n```\nCopysocks5 127.0.0.1 7890\n```\n\n这个 7890 是我的 qv②ray 的 socks5 端口号，改成你自己的。如果你用的是 WSL 2，由于目前 WSL 2 和 windows 的 ip 不同，我们需要先`cp -f /etc/proxychains.conf ~/.proxychains.conf`，然后在`~/.zshrc`中添加以下内容：\n\n```bash\nCopy# 获取windows的ip\nexport WIN_IP=`cat /etc/resolv.conf | grep nameserver | awk '{print $2}'`\n# 删除 ~/.proxychains.conf 中 [ProxyList] 所在行到文件末尾的全部内容\nsed -i '/\\[ProxyList\\]/,$d' ~/.proxychains.conf\n# 往文件末尾添加socks5设置，这个 7890 是我的 qv②ray 的 socks5 端口号，改成你自己的\necho '[ProxyList]\\nsocks5 '${WIN_IP}' 7890' >> ~/.proxychains.conf\n# 设置别名；使用 ~/.proxychains.conf 作为proxychains的配置文件；让proxychains quiet（不输出一大串东西）\nalias pc='proxychains4 -q -f ~/.proxychains.conf'\n# 用来手动开关代理，建议走 http 协议，因为 wget 不支持 socks5\nmy_proxy=http://${WIN_IP}:7891\nalias p-on='export all_proxy='${my_proxy}' http_proxy='${my_proxy}' https_proxy='${my_proxy}''\nalias p-off='unset all_proxy http_proxy https_proxy'\n```\n\n然后：\n\n```bash\nCopy# 在 yourname 用户中\nsudo ln -s ~/.proxychains.conf /root/.proxychains.conf\nsource ~/.zshrc\n```\n\n**如果你发现还是无法代理，[那可能是因为你的代理软件没打开`允许来自局域网的连接`选项](https://github.com/microsoft/WSL/issues/4402#issuecomment-570474468)**\n\n注：`pc ping google.com`是没有效果的，因为 proxychains 只会代理 TCP。\n\n注意为了让wsl能通过代理访问，需要放开防火墙\n\n命令来源：https://github.com/microsoft/WSL/issues/4585\n\n```ps1\n# 直接放开 `vEthernet (WSL)` 这张网卡的防火墙\nNew-NetFirewallRule -DisplayName \"WSL\" -Direction Inbound -InterfaceAlias \"vEthernet (WSL)\" -Action Allow\n```\n\n参考文档：\n\n [WSL2 的一些网络访问问题]( https://lengthmin.me/posts/wsl2-network-tricks/)\n\n### 安装 antigen\n\n注：安装 antigen 时会从 github 下载文件，准备好代理软件。\n\n使用 antigen 管理 zsh 的插件：\n\n```bash\nCopypc yay -S antigen\n```\n\n往`~/.zshrc`中添加如下内容，以启用历史命令、按键绑定、命令补全、语法高亮、powerlevel10k 主题：\n\n```bash\nCopy# 初始化 antigen\nsource /usr/share/zsh/share/antigen.zsh\n# Load the oh-my-zsh's library\n# oh-my-zsh 会启用历史命令、按键绑定等功能\nantigen use oh-my-zsh\n# 启用一些 bundle\nantigen bundle zsh-users/zsh-syntax-highlighting\nantigen bundle zsh-users/zsh-autosuggestions\nantigen bundle zsh-users/zsh-completions\n# Load the theme\nantigen theme romkatv/powerlevel10k\n# Tell antigen that you're done\nantigen apply\n```\n\n然后`pc zsh`，antigen 就会给你安装插件，安装完后就会开始让你选择 powerlevel10k 的主题样式，如果没出现，就`p10k configure`，我比较喜欢 pure 这个主题。`~/.p10k.zsh`是 powerlevel10k 主题的配置文件，[项目主页](https://github.com/romkatv/powerlevel10k) 有详细的介绍。\n\n之后给 root 用户创建软链接：\n\n```bash\nCopy# 在 yourname 用户中\nsudo ln -s ~/.p10k.zsh /root/.p10k.zsh\n```\n\n### systemd[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2178938276)\n\nWSL 不支持 systemd，但可以使用其他方法运行 systemd。详见[systemd/systemctl](https://github.com/yuk7/ArchWSL/wiki/Known-issues#systemdsystemctl)。之前有 genie-systemd aur 软件包，但现在没了，还好我找到了[PKGBUILD](https://github.com/arkane-systems/genie/issues/82#issuecomment-695821616)。\n\n`vim PKGBUILD`，填入如下内容：\n\n```sh\nCopy# Maintainer: Arley Henostroza <arllk10[at]gmail[dot]com>\n# Contibutor: facekapow\n\npkgname=genie-systemd\n_pkgname=genie\npkgver=1.28\npkgrel=1\npkgdesc=\"A quick way into a systemd \\\"bottle\\\" for WSL\"\narch=('x86_64')\nurl=\"https://github.com/arkane-systems/genie\"\nlicense=('custom:The Unlicense')\ndepends=('daemonize' 'dotnet-runtime>=3.1' 'dotnet-host>=3.1' 'inetutils')\nmakedepends=('dotnet-sdk>=3.1')\nconflicts=('genie-systemd')\nprovides=('genie-systemd')\nsource=(\"${url}/archive/${pkgver}.tar.gz\")\nsha256sums=('688253faad5e3c40c9277dac00a481f48bc5ed62cf2bc82c2c1234d92604ea96')\n\nprepare() {\n  tar -xzf ${pkgver}.tar.gz\n}\n\npackage() {\n  export DOTNET_CLI_TELEMETRY_OPTOUT=1\n  export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true\n  ls -alh\n  cd genie-${pkgver}/genie\n  export DESTDIR=$pkgdir\n  make build\n  make install\n  mkdir -p ${pkgdir}/usr/bin\n  chmod +x ${pkgdir}/usr/libexec/genie\n  ln -s /usr/libexec/genie/main/genie ${pkgdir}/usr/bin/genie\n}\n```\n\n然后进行安装（注意需要和 PKGBUILD 在相同目录）\n\n```bash\nCopyyay -S daemonize\nmakepkg -si # 处理依赖并安装\n```\n\n然后就可以使用 genie 了\n\n```bash\nCopy# 运行 genie -i，让ArchWSL可以正常使用systemd\ngenie -i\n```\n\n接下来让 ArchWSL 在 windows 开机时，就能够自动`genie -i`。\n\n```bash\nCopysudo echo 'genie -i' > /etc/init.wsl\nsudo chmod +x /etc/init.wsl\n```\n\n在 windows 上创建`ArchWSL-init.vbs`文件（这里的 Arch 是该 wsl 发行版的名称，可通过`wsl -l`命令查看），文件内容为：\n\n```vbs\nCopySet ws = CreateObject(\"Wscript.Shell\")\nws.run \"wsl -d Arch -u root /etc/init.wsl\", vbhide\n```\n\n然后在`C:\\Users\\用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`中新建快捷方式，指向刚才创建的 vbs 文件。这样下次 windows 开机时就会自动在 ArchWSL 中执行`genie -i`，然后退出，注意：`wsl --shutdown`命令会把 wsl“关机”，所以你 shutdown 之后，需要再手动运行`ArchWSL-init.vbs`。\n\nPS: 我打开.vbs 文件的时候出现了`Windows 无法访问指定设备、路径或文件。你可能没有适当的权限访问该项目。`的错误，解决方法是用[Default Programs Editor](http://defaultprogramseditor.com/)，把`.vbs`的默认程序设置为`C:\\Windows\\System32\\wscript.exe`。\n\n引入startship\n\n[startship](https://starship.rs/guide/#%F0%9F%9A%80-installation)\n\n","source":"_posts/ManjaroLinux搭建.md","raw":"---\ntitle: ManjaroLinux搭建\ndate: 2021-08-11 10:23:02\ntags: linnux manjarco\n---\n\n下载压缩包：Manjarco.zip\n\n解压压缩包如一下目录所示\n\n![image-20210811105044473](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105044473.png)\n\n双击Manjarco.exe则进行linux的安装，需要等一会，会告诉安装成功\n<!--more-->\n\n\n\n查看安装后的命令输入\n\n![image-20210811105147021](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105147021.png)\n\n如果成功则可以看见Manjaro的命令。\n\n通过wsl -d Manjaro则可进入到服务器。\n\n`wsl -d Manjaro`\n\n![image-20210811105354401](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105354401.png)\n\n### 换源更新[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#509598612)\n\nPS: 以下部分都以 root 用户身份运行命令。\n\n```bash\nCopypasswd # 设置密码\n# 设置软件源\necho 'Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch' > /etc/pacman.d/mirrorlist\necho 'Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch' >> /etc/pacman.d/mirrorlist\n# 添加写保护，防止被修改\nchattr +i /etc/pacman.d/mirrorlist\n# 初始化 keyring\npacman-key --init\npacman-key --populate\npacman -Syu # 更新\n```\n\n其他镜像源请见通过 [Pacman Mirrorlist 生成器](https://www.archlinux.org/mirrorlist/)生成的[国内源列表](https://www.archlinux.org/mirrorlist/?country=CN&protocol=http&protocol=https&ip_version=4)，用自己学校的更快哦！建议看看 [镜像状态列表](https://www.archlinux.org/mirrors/status/)，使用 Mirror Status 较低的国内镜像站\n\n### 启用 multilib 库[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#3927474463)\n\nmultilib 库包含 64 位系统中需要的 32 位软件和库。\n\n`vim /etc/pacman.conf`，取消这几行的注释：\n\n```\nCopy[multilib]\nInclude = /etc/pacman.d/mirrorlist\n```\n\n并且取消该文件中`#Color`这一行的注释，以启用彩色输出。\n\n### 添加 archlinuxcn 源[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#515215996)\n\nArch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体/美化包等。\n\n```bash\nCopyvim /etc/pacman.conf\n```\n\n在文件末尾加上：\n\n```conf\nCopy[archlinuxcn]\nServer = https://mirrors.aliyun.com/archlinuxcn/$arch\n# 其他的见 https://github.com/archlinuxcn/mirrorlist-repo，最好是用自己学校的\n```\n\n然后：\n\n```bash\nCopypacman -Syy\npacman -S archlinuxcn-keyring\n```\n\n### 创建用户[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1153411218)\n\n有需要就创建吧。\n*注：此处的 yourname 是你要创建的用户名*\n\n```bash\nCopy# 新建用户。-m 为用户创建家目录；-G wheel 将用户添加到 wheel 用户组\nuseradd -m -G wheel xfhuang\n# 设置密码\npasswd xfhuang\n\n# 因为 visudo 需要 vi\nln -s /usr/bin/vim /usr/bin/vi\n# 编辑 /etc/sudoers\nvisudo\n```\n\n将以下两行行首的`#`去掉\n\n```bash\nCopy# %wheel ALL=(ALL) ALL\n# %wheel ALL=(ALL) NOPASSWD: ALL\n```\n\n在 powershell 中进入到 Arch.exe 所在文件夹，设置 WSL 默认登陆用户和默认的 WSL：\n\n```powershell\nCopy.\\Arch.exe config --default-user yourname\nwsl -s Arch\n```\n\n重新打开，就是在 yourname 用户了。\n\n## 安装常用软件[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1880665260)\n\nPS: 这部分以 yourname 用户身份运行命令。\n\n### 安装 yay[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1538716494)\n\n```bash\nCopysudo pacman -S --needed base-devel\n```\n\n出现`:: fakeroot is in IgnorePkg/IgnoreGroup. Install anyway? [Y/n]`，选 n，接下来一直回车即可。\n\n```bash\nCopysudo pacman -S --needed yay\n# yay 换源\nyay --aururl \"https://aur.tuna.tsinghua.edu.cn\" --save\n```\n\n### 安装其他的一些软件[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#3500358456)\n\n```bash\nCopysudo pacman -S --needed neofetch lolcat bat tokei tree screenfetch\nneofetch | lolcat -a\n```\n\n### 安装 gcc、clang、qemu 等[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1080076022)\n\n```bash\nCopysudo pacman -S --needed gcc clang lib32-gcc-libs gdb make binutils git openssh man-pages ccls\n```\n\n安装 qemu（有需要就安装吧）：\n\n```bash\nCopysudo pacman -S --needed qemu-arch-extra\n```\n\n### 安装 zsh[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2194599011)\n\n给 windows 安装以下字体，并且改变 windows terminal 的字体设置(这里就不细说了)：\n\n- [MesloLGS NF](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Meslo/S/Regular/complete) *powerlevel10k 作者推荐*\n- [FiraCode NF](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode/Regular/complete) *我更喜欢这个*\n\n安装 zsh 并且将其设置为默认 shell：\n\n```bash\nCopysudo pacman -S --needed zsh\n# 编辑 /etc/passwd 文件，将 root 用户和 yourname 用户的 /bin/bash 改为 /bin/zsh\n# 或者使用 chsh -s /bin/zsh 来改变当前用户的默认shell\nsudo vim /etc/passwd\ntouch ~/.zshrc\n# 在yourname用户创建软链接，让root用户也使用yourname用户的.zshrc\n# 我觉得这样比较方便\nsudo ln -s ~/.zshrc /root/.zshrc\n```\n\n### 使用 proxychains 代理终端程序[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2378191044)\n\n可以使用 windows 的 [qv②ray](https://qv2ray.net/)/clash/ssr 等代理软件来代理 wsl 中的程序！先安装 proxychains：\n\n```bash\nCopysudo pacman -S --needed proxychains-ng\n```\n\n首先，`sudo vim /etc/proxychains.conf`，将`proxy_dns`这一行注释。（这样能够让 proxychains 代理 yay）\n\n如果用的是 WSL 1，那就 `sudo vim /etc/proxychains.conf`，将最后一行的 socks4 127.0.0.1 9095 修改为：\n\n```\nCopysocks5 127.0.0.1 7890\n```\n\n这个 7890 是我的 qv②ray 的 socks5 端口号，改成你自己的。如果你用的是 WSL 2，由于目前 WSL 2 和 windows 的 ip 不同，我们需要先`cp -f /etc/proxychains.conf ~/.proxychains.conf`，然后在`~/.zshrc`中添加以下内容：\n\n```bash\nCopy# 获取windows的ip\nexport WIN_IP=`cat /etc/resolv.conf | grep nameserver | awk '{print $2}'`\n# 删除 ~/.proxychains.conf 中 [ProxyList] 所在行到文件末尾的全部内容\nsed -i '/\\[ProxyList\\]/,$d' ~/.proxychains.conf\n# 往文件末尾添加socks5设置，这个 7890 是我的 qv②ray 的 socks5 端口号，改成你自己的\necho '[ProxyList]\\nsocks5 '${WIN_IP}' 7890' >> ~/.proxychains.conf\n# 设置别名；使用 ~/.proxychains.conf 作为proxychains的配置文件；让proxychains quiet（不输出一大串东西）\nalias pc='proxychains4 -q -f ~/.proxychains.conf'\n# 用来手动开关代理，建议走 http 协议，因为 wget 不支持 socks5\nmy_proxy=http://${WIN_IP}:7891\nalias p-on='export all_proxy='${my_proxy}' http_proxy='${my_proxy}' https_proxy='${my_proxy}''\nalias p-off='unset all_proxy http_proxy https_proxy'\n```\n\n然后：\n\n```bash\nCopy# 在 yourname 用户中\nsudo ln -s ~/.proxychains.conf /root/.proxychains.conf\nsource ~/.zshrc\n```\n\n**如果你发现还是无法代理，[那可能是因为你的代理软件没打开`允许来自局域网的连接`选项](https://github.com/microsoft/WSL/issues/4402#issuecomment-570474468)**\n\n注：`pc ping google.com`是没有效果的，因为 proxychains 只会代理 TCP。\n\n注意为了让wsl能通过代理访问，需要放开防火墙\n\n命令来源：https://github.com/microsoft/WSL/issues/4585\n\n```ps1\n# 直接放开 `vEthernet (WSL)` 这张网卡的防火墙\nNew-NetFirewallRule -DisplayName \"WSL\" -Direction Inbound -InterfaceAlias \"vEthernet (WSL)\" -Action Allow\n```\n\n参考文档：\n\n [WSL2 的一些网络访问问题]( https://lengthmin.me/posts/wsl2-network-tricks/)\n\n### 安装 antigen\n\n注：安装 antigen 时会从 github 下载文件，准备好代理软件。\n\n使用 antigen 管理 zsh 的插件：\n\n```bash\nCopypc yay -S antigen\n```\n\n往`~/.zshrc`中添加如下内容，以启用历史命令、按键绑定、命令补全、语法高亮、powerlevel10k 主题：\n\n```bash\nCopy# 初始化 antigen\nsource /usr/share/zsh/share/antigen.zsh\n# Load the oh-my-zsh's library\n# oh-my-zsh 会启用历史命令、按键绑定等功能\nantigen use oh-my-zsh\n# 启用一些 bundle\nantigen bundle zsh-users/zsh-syntax-highlighting\nantigen bundle zsh-users/zsh-autosuggestions\nantigen bundle zsh-users/zsh-completions\n# Load the theme\nantigen theme romkatv/powerlevel10k\n# Tell antigen that you're done\nantigen apply\n```\n\n然后`pc zsh`，antigen 就会给你安装插件，安装完后就会开始让你选择 powerlevel10k 的主题样式，如果没出现，就`p10k configure`，我比较喜欢 pure 这个主题。`~/.p10k.zsh`是 powerlevel10k 主题的配置文件，[项目主页](https://github.com/romkatv/powerlevel10k) 有详细的介绍。\n\n之后给 root 用户创建软链接：\n\n```bash\nCopy# 在 yourname 用户中\nsudo ln -s ~/.p10k.zsh /root/.p10k.zsh\n```\n\n### systemd[#](https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2178938276)\n\nWSL 不支持 systemd，但可以使用其他方法运行 systemd。详见[systemd/systemctl](https://github.com/yuk7/ArchWSL/wiki/Known-issues#systemdsystemctl)。之前有 genie-systemd aur 软件包，但现在没了，还好我找到了[PKGBUILD](https://github.com/arkane-systems/genie/issues/82#issuecomment-695821616)。\n\n`vim PKGBUILD`，填入如下内容：\n\n```sh\nCopy# Maintainer: Arley Henostroza <arllk10[at]gmail[dot]com>\n# Contibutor: facekapow\n\npkgname=genie-systemd\n_pkgname=genie\npkgver=1.28\npkgrel=1\npkgdesc=\"A quick way into a systemd \\\"bottle\\\" for WSL\"\narch=('x86_64')\nurl=\"https://github.com/arkane-systems/genie\"\nlicense=('custom:The Unlicense')\ndepends=('daemonize' 'dotnet-runtime>=3.1' 'dotnet-host>=3.1' 'inetutils')\nmakedepends=('dotnet-sdk>=3.1')\nconflicts=('genie-systemd')\nprovides=('genie-systemd')\nsource=(\"${url}/archive/${pkgver}.tar.gz\")\nsha256sums=('688253faad5e3c40c9277dac00a481f48bc5ed62cf2bc82c2c1234d92604ea96')\n\nprepare() {\n  tar -xzf ${pkgver}.tar.gz\n}\n\npackage() {\n  export DOTNET_CLI_TELEMETRY_OPTOUT=1\n  export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true\n  ls -alh\n  cd genie-${pkgver}/genie\n  export DESTDIR=$pkgdir\n  make build\n  make install\n  mkdir -p ${pkgdir}/usr/bin\n  chmod +x ${pkgdir}/usr/libexec/genie\n  ln -s /usr/libexec/genie/main/genie ${pkgdir}/usr/bin/genie\n}\n```\n\n然后进行安装（注意需要和 PKGBUILD 在相同目录）\n\n```bash\nCopyyay -S daemonize\nmakepkg -si # 处理依赖并安装\n```\n\n然后就可以使用 genie 了\n\n```bash\nCopy# 运行 genie -i，让ArchWSL可以正常使用systemd\ngenie -i\n```\n\n接下来让 ArchWSL 在 windows 开机时，就能够自动`genie -i`。\n\n```bash\nCopysudo echo 'genie -i' > /etc/init.wsl\nsudo chmod +x /etc/init.wsl\n```\n\n在 windows 上创建`ArchWSL-init.vbs`文件（这里的 Arch 是该 wsl 发行版的名称，可通过`wsl -l`命令查看），文件内容为：\n\n```vbs\nCopySet ws = CreateObject(\"Wscript.Shell\")\nws.run \"wsl -d Arch -u root /etc/init.wsl\", vbhide\n```\n\n然后在`C:\\Users\\用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`中新建快捷方式，指向刚才创建的 vbs 文件。这样下次 windows 开机时就会自动在 ArchWSL 中执行`genie -i`，然后退出，注意：`wsl --shutdown`命令会把 wsl“关机”，所以你 shutdown 之后，需要再手动运行`ArchWSL-init.vbs`。\n\nPS: 我打开.vbs 文件的时候出现了`Windows 无法访问指定设备、路径或文件。你可能没有适当的权限访问该项目。`的错误，解决方法是用[Default Programs Editor](http://defaultprogramseditor.com/)，把`.vbs`的默认程序设置为`C:\\Windows\\System32\\wscript.exe`。\n\n引入startship\n\n[startship](https://starship.rs/guide/#%F0%9F%9A%80-installation)\n\n","slug":"ManjaroLinux搭建","published":1,"updated":"2021-08-23T00:38:38.694Z","_id":"cks9o6ocb00040pv9hmnfhmfj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>下载压缩包：Manjarco.zip</p>\n<p>解压压缩包如一下目录所示</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105044473.png\" alt=\"image-20210811105044473\"></p>\n<p>双击Manjarco.exe则进行linux的安装，需要等一会，会告诉安装成功</p>\n<span id=\"more\"></span>\n\n\n\n<p>查看安装后的命令输入</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105147021.png\" alt=\"image-20210811105147021\"></p>\n<p>如果成功则可以看见Manjaro的命令。</p>\n<p>通过wsl -d Manjaro则可进入到服务器。</p>\n<p><code>wsl -d Manjaro</code></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105354401.png\" alt=\"image-20210811105354401\"></p>\n<h3 id=\"换源更新\"><a href=\"#换源更新\" class=\"headerlink\" title=\"换源更新#\"></a>换源更新<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#509598612\">#</a></h3><p>PS: 以下部分都以 root 用户身份运行命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copypasswd <span class=\"comment\"># 设置密码</span></span><br><span class=\"line\"><span class=\"comment\"># 设置软件源</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch&#x27;</span> &gt; /etc/pacman.d/mirrorlist</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch&#x27;</span> &gt;&gt; /etc/pacman.d/mirrorlist</span><br><span class=\"line\"><span class=\"comment\"># 添加写保护，防止被修改</span></span><br><span class=\"line\">chattr +i /etc/pacman.d/mirrorlist</span><br><span class=\"line\"><span class=\"comment\"># 初始化 keyring</span></span><br><span class=\"line\">pacman-key --init</span><br><span class=\"line\">pacman-key --populate</span><br><span class=\"line\">pacman -Syu <span class=\"comment\"># 更新</span></span><br></pre></td></tr></table></figure>\n\n<p>其他镜像源请见通过 <a href=\"https://www.archlinux.org/mirrorlist/\">Pacman Mirrorlist 生成器</a>生成的<a href=\"https://www.archlinux.org/mirrorlist/?country=CN&protocol=http&protocol=https&ip_version=4\">国内源列表</a>，用自己学校的更快哦！建议看看 <a href=\"https://www.archlinux.org/mirrors/status/\">镜像状态列表</a>，使用 Mirror Status 较低的国内镜像站</p>\n<h3 id=\"启用-multilib-库\"><a href=\"#启用-multilib-库\" class=\"headerlink\" title=\"启用 multilib 库#\"></a>启用 multilib 库<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#3927474463\">#</a></h3><p>multilib 库包含 64 位系统中需要的 32 位软件和库。</p>\n<p><code>vim /etc/pacman.conf</code>，取消这几行的注释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy[multilib]</span><br><span class=\"line\">Include = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>\n\n<p>并且取消该文件中<code>#Color</code>这一行的注释，以启用彩色输出。</p>\n<h3 id=\"添加-archlinuxcn-源\"><a href=\"#添加-archlinuxcn-源\" class=\"headerlink\" title=\"添加 archlinuxcn 源#\"></a>添加 archlinuxcn 源<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#515215996\">#</a></h3><p>Arch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体/美化包等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copyvim /etc/pacman.conf</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾加上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy[archlinuxcn]</span><br><span class=\"line\">Server = https://mirrors.aliyun.com/archlinuxcn/$arch</span><br><span class=\"line\"># 其他的见 https://github.com/archlinuxcn/mirrorlist-repo，最好是用自己学校的</span><br></pre></td></tr></table></figure>\n\n<p>然后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copypacman -Syy</span><br><span class=\"line\">pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户#\"></a>创建用户<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1153411218\">#</a></h3><p>有需要就创建吧。<br><em>注：此处的 yourname 是你要创建的用户名</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 新建用户。-m 为用户创建家目录；-G wheel 将用户添加到 wheel 用户组</span></span><br><span class=\"line\">useradd -m -G wheel xfhuang</span><br><span class=\"line\"><span class=\"comment\"># 设置密码</span></span><br><span class=\"line\">passwd xfhuang</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为 visudo 需要 vi</span></span><br><span class=\"line\">ln -s /usr/bin/vim /usr/bin/vi</span><br><span class=\"line\"><span class=\"comment\"># 编辑 /etc/sudoers</span></span><br><span class=\"line\">visudo</span><br></pre></td></tr></table></figure>\n\n<p>将以下两行行首的<code>#</code>去掉</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># %wheel ALL=(ALL) ALL</span></span><br><span class=\"line\"><span class=\"comment\"># %wheel ALL=(ALL) NOPASSWD: ALL</span></span><br></pre></td></tr></table></figure>\n\n<p>在 powershell 中进入到 Arch.exe 所在文件夹，设置 WSL 默认登陆用户和默认的 WSL：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy.\\Arch.exe config -<span class=\"literal\">-default</span><span class=\"literal\">-user</span> yourname</span><br><span class=\"line\">wsl <span class=\"literal\">-s</span> Arch</span><br></pre></td></tr></table></figure>\n\n<p>重新打开，就是在 yourname 用户了。</p>\n<h2 id=\"安装常用软件\"><a href=\"#安装常用软件\" class=\"headerlink\" title=\"安装常用软件#\"></a>安装常用软件<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1880665260\">#</a></h2><p>PS: 这部分以 yourname 用户身份运行命令。</p>\n<h3 id=\"安装-yay\"><a href=\"#安装-yay\" class=\"headerlink\" title=\"安装 yay#\"></a>安装 yay<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1538716494\">#</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed base-devel</span><br></pre></td></tr></table></figure>\n\n<p>出现<code>:: fakeroot is in IgnorePkg/IgnoreGroup. Install anyway? [Y/n]</code>，选 n，接下来一直回车即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed yay</span><br><span class=\"line\"><span class=\"comment\"># yay 换源</span></span><br><span class=\"line\">yay --aururl <span class=\"string\">&quot;https://aur.tuna.tsinghua.edu.cn&quot;</span> --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装其他的一些软件\"><a href=\"#安装其他的一些软件\" class=\"headerlink\" title=\"安装其他的一些软件#\"></a>安装其他的一些软件<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#3500358456\">#</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed neofetch lolcat bat tokei tree screenfetch</span><br><span class=\"line\">neofetch | lolcat -a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-gcc、clang、qemu-等\"><a href=\"#安装-gcc、clang、qemu-等\" class=\"headerlink\" title=\"安装 gcc、clang、qemu 等#\"></a>安装 gcc、clang、qemu 等<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1080076022\">#</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed gcc clang lib32-gcc-libs gdb make binutils git openssh man-pages ccls</span><br></pre></td></tr></table></figure>\n\n<p>安装 qemu（有需要就安装吧）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed qemu-arch-extra</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-zsh\"><a href=\"#安装-zsh\" class=\"headerlink\" title=\"安装 zsh#\"></a>安装 zsh<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2194599011\">#</a></h3><p>给 windows 安装以下字体，并且改变 windows terminal 的字体设置(这里就不细说了)：</p>\n<ul>\n<li><a href=\"https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Meslo/S/Regular/complete\">MesloLGS NF</a> <em>powerlevel10k 作者推荐</em></li>\n<li><a href=\"https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode/Regular/complete\">FiraCode NF</a> <em>我更喜欢这个</em></li>\n</ul>\n<p>安装 zsh 并且将其设置为默认 shell：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed zsh</span><br><span class=\"line\"><span class=\"comment\"># 编辑 /etc/passwd 文件，将 root 用户和 yourname 用户的 /bin/bash 改为 /bin/zsh</span></span><br><span class=\"line\"><span class=\"comment\"># 或者使用 chsh -s /bin/zsh 来改变当前用户的默认shell</span></span><br><span class=\"line\">sudo vim /etc/passwd</span><br><span class=\"line\">touch ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># 在yourname用户创建软链接，让root用户也使用yourname用户的.zshrc</span></span><br><span class=\"line\"><span class=\"comment\"># 我觉得这样比较方便</span></span><br><span class=\"line\">sudo ln -s ~/.zshrc /root/.zshrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-proxychains-代理终端程序\"><a href=\"#使用-proxychains-代理终端程序\" class=\"headerlink\" title=\"使用 proxychains 代理终端程序#\"></a>使用 proxychains 代理终端程序<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2378191044\">#</a></h3><p>可以使用 windows 的 <a href=\"https://qv2ray.net/\">qv②ray</a>/clash/ssr 等代理软件来代理 wsl 中的程序！先安装 proxychains：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed proxychains-ng</span><br></pre></td></tr></table></figure>\n\n<p>首先，<code>sudo vim /etc/proxychains.conf</code>，将<code>proxy_dns</code>这一行注释。（这样能够让 proxychains 代理 yay）</p>\n<p>如果用的是 WSL 1，那就 <code>sudo vim /etc/proxychains.conf</code>，将最后一行的 socks4 127.0.0.1 9095 修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysocks5 127.0.0.1 7890</span><br></pre></td></tr></table></figure>\n\n<p>这个 7890 是我的 qv②ray 的 socks5 端口号，改成你自己的。如果你用的是 WSL 2，由于目前 WSL 2 和 windows 的 ip 不同，我们需要先<code>cp -f /etc/proxychains.conf ~/.proxychains.conf</code>，然后在<code>~/.zshrc</code>中添加以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 获取windows的ip</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> WIN_IP=`cat /etc/resolv.conf | grep nameserver | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"comment\"># 删除 ~/.proxychains.conf 中 [ProxyList] 所在行到文件末尾的全部内容</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/\\[ProxyList\\]/,$d&#x27;</span> ~/.proxychains.conf</span><br><span class=\"line\"><span class=\"comment\"># 往文件末尾添加socks5设置，这个 7890 是我的 qv②ray 的 socks5 端口号，改成你自己的</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;[ProxyList]\\nsocks5 &#x27;</span><span class=\"variable\">$&#123;WIN_IP&#125;</span><span class=\"string\">&#x27; 7890&#x27;</span> &gt;&gt; ~/.proxychains.conf</span><br><span class=\"line\"><span class=\"comment\"># 设置别名；使用 ~/.proxychains.conf 作为proxychains的配置文件；让proxychains quiet（不输出一大串东西）</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> pc=<span class=\"string\">&#x27;proxychains4 -q -f ~/.proxychains.conf&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 用来手动开关代理，建议走 http 协议，因为 wget 不支持 socks5</span></span><br><span class=\"line\">my_proxy=http://<span class=\"variable\">$&#123;WIN_IP&#125;</span>:7891</span><br><span class=\"line\"><span class=\"built_in\">alias</span> p-on=<span class=\"string\">&#x27;export all_proxy=&#x27;</span><span class=\"variable\">$&#123;my_proxy&#125;</span><span class=\"string\">&#x27; http_proxy=&#x27;</span><span class=\"variable\">$&#123;my_proxy&#125;</span><span class=\"string\">&#x27; https_proxy=&#x27;</span><span class=\"variable\">$&#123;my_proxy&#125;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> p-off=<span class=\"string\">&#x27;unset all_proxy http_proxy https_proxy&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 在 yourname 用户中</span></span><br><span class=\"line\">sudo ln -s ~/.proxychains.conf /root/.proxychains.conf</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果你发现还是无法代理，<a href=\"https://github.com/microsoft/WSL/issues/4402#issuecomment-570474468\">那可能是因为你的代理软件没打开<code>允许来自局域网的连接</code>选项</a></strong></p>\n<p>注：<code>pc ping google.com</code>是没有效果的，因为 proxychains 只会代理 TCP。</p>\n<p>注意为了让wsl能通过代理访问，需要放开防火墙</p>\n<p>命令来源：<a href=\"https://github.com/microsoft/WSL/issues/4585\">https://github.com/microsoft/WSL/issues/4585</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 直接放开 `vEthernet (WSL)` 这张网卡的防火墙</span><br><span class=\"line\">New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound -InterfaceAlias &quot;vEthernet (WSL)&quot; -Action Allow</span><br></pre></td></tr></table></figure>\n\n<p>参考文档：</p>\n<p> <a href=\"https://lengthmin.me/posts/wsl2-network-tricks/\">WSL2 的一些网络访问问题</a></p>\n<h3 id=\"安装-antigen\"><a href=\"#安装-antigen\" class=\"headerlink\" title=\"安装 antigen\"></a>安装 antigen</h3><p>注：安装 antigen 时会从 github 下载文件，准备好代理软件。</p>\n<p>使用 antigen 管理 zsh 的插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copypc yay -S antigen</span><br></pre></td></tr></table></figure>\n\n<p>往<code>~/.zshrc</code>中添加如下内容，以启用历史命令、按键绑定、命令补全、语法高亮、powerlevel10k 主题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 初始化 antigen</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /usr/share/zsh/share/antigen.zsh</span><br><span class=\"line\"><span class=\"comment\"># Load the oh-my-zsh&#x27;s library</span></span><br><span class=\"line\"><span class=\"comment\"># oh-my-zsh 会启用历史命令、按键绑定等功能</span></span><br><span class=\"line\">antigen use oh-my-zsh</span><br><span class=\"line\"><span class=\"comment\"># 启用一些 bundle</span></span><br><span class=\"line\">antigen bundle zsh-users/zsh-syntax-highlighting</span><br><span class=\"line\">antigen bundle zsh-users/zsh-autosuggestions</span><br><span class=\"line\">antigen bundle zsh-users/zsh-completions</span><br><span class=\"line\"><span class=\"comment\"># Load the theme</span></span><br><span class=\"line\">antigen theme romkatv/powerlevel10k</span><br><span class=\"line\"><span class=\"comment\"># Tell antigen that you&#x27;re done</span></span><br><span class=\"line\">antigen apply</span><br></pre></td></tr></table></figure>\n\n<p>然后<code>pc zsh</code>，antigen 就会给你安装插件，安装完后就会开始让你选择 powerlevel10k 的主题样式，如果没出现，就<code>p10k configure</code>，我比较喜欢 pure 这个主题。<code>~/.p10k.zsh</code>是 powerlevel10k 主题的配置文件，<a href=\"https://github.com/romkatv/powerlevel10k\">项目主页</a> 有详细的介绍。</p>\n<p>之后给 root 用户创建软链接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 在 yourname 用户中</span></span><br><span class=\"line\">sudo ln -s ~/.p10k.zsh /root/.p10k.zsh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd#\"></a>systemd<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2178938276\">#</a></h3><p>WSL 不支持 systemd，但可以使用其他方法运行 systemd。详见<a href=\"https://github.com/yuk7/ArchWSL/wiki/Known-issues#systemdsystemctl\">systemd/systemctl</a>。之前有 genie-systemd aur 软件包，但现在没了，还好我找到了<a href=\"https://github.com/arkane-systems/genie/issues/82#issuecomment-695821616\">PKGBUILD</a>。</p>\n<p><code>vim PKGBUILD</code>，填入如下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># Maintainer: Arley Henostroza &lt;arllk10[at]gmail[dot]com&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Contibutor: facekapow</span></span><br><span class=\"line\"></span><br><span class=\"line\">pkgname=genie-systemd</span><br><span class=\"line\">_pkgname=genie</span><br><span class=\"line\">pkgver=1.28</span><br><span class=\"line\">pkgrel=1</span><br><span class=\"line\">pkgdesc=<span class=\"string\">&quot;A quick way into a systemd \\&quot;bottle\\&quot; for WSL&quot;</span></span><br><span class=\"line\">arch=(<span class=\"string\">&#x27;x86_64&#x27;</span>)</span><br><span class=\"line\">url=<span class=\"string\">&quot;https://github.com/arkane-systems/genie&quot;</span></span><br><span class=\"line\">license=(<span class=\"string\">&#x27;custom:The Unlicense&#x27;</span>)</span><br><span class=\"line\">depends=(<span class=\"string\">&#x27;daemonize&#x27;</span> <span class=\"string\">&#x27;dotnet-runtime&gt;=3.1&#x27;</span> <span class=\"string\">&#x27;dotnet-host&gt;=3.1&#x27;</span> <span class=\"string\">&#x27;inetutils&#x27;</span>)</span><br><span class=\"line\">makedepends=(<span class=\"string\">&#x27;dotnet-sdk&gt;=3.1&#x27;</span>)</span><br><span class=\"line\">conflicts=(<span class=\"string\">&#x27;genie-systemd&#x27;</span>)</span><br><span class=\"line\">provides=(<span class=\"string\">&#x27;genie-systemd&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">source</span>=(<span class=\"string\">&quot;<span class=\"variable\">$&#123;url&#125;</span>/archive/<span class=\"variable\">$&#123;pkgver&#125;</span>.tar.gz&quot;</span>)</span><br><span class=\"line\">sha256sums=(<span class=\"string\">&#x27;688253faad5e3c40c9277dac00a481f48bc5ed62cf2bc82c2c1234d92604ea96&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">prepare</span></span>() &#123;</span><br><span class=\"line\">  tar -xzf <span class=\"variable\">$&#123;pkgver&#125;</span>.tar.gz</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">package</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">export</span> DOTNET_CLI_TELEMETRY_OPTOUT=1</span><br><span class=\"line\">  <span class=\"built_in\">export</span> DOTNET_SKIP_FIRST_TIME_EXPERIENCE=<span class=\"literal\">true</span></span><br><span class=\"line\">  ls -alh</span><br><span class=\"line\">  <span class=\"built_in\">cd</span> genie-<span class=\"variable\">$&#123;pkgver&#125;</span>/genie</span><br><span class=\"line\">  <span class=\"built_in\">export</span> DESTDIR=<span class=\"variable\">$pkgdir</span></span><br><span class=\"line\">  make build</span><br><span class=\"line\">  make install</span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;pkgdir&#125;</span>/usr/bin</span><br><span class=\"line\">  chmod +x <span class=\"variable\">$&#123;pkgdir&#125;</span>/usr/libexec/genie</span><br><span class=\"line\">  ln -s /usr/libexec/genie/main/genie <span class=\"variable\">$&#123;pkgdir&#125;</span>/usr/bin/genie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后进行安装（注意需要和 PKGBUILD 在相同目录）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copyyay -S daemonize</span><br><span class=\"line\">makepkg -si <span class=\"comment\"># 处理依赖并安装</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以使用 genie 了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 运行 genie -i，让ArchWSL可以正常使用systemd</span></span><br><span class=\"line\">genie -i</span><br></pre></td></tr></table></figure>\n\n<p>接下来让 ArchWSL 在 windows 开机时，就能够自动<code>genie -i</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;genie -i&#x27;</span> &gt; /etc/init.wsl</span><br><span class=\"line\">sudo chmod +x /etc/init.wsl</span><br></pre></td></tr></table></figure>\n\n<p>在 windows 上创建<code>ArchWSL-init.vbs</code>文件（这里的 Arch 是该 wsl 发行版的名称，可通过<code>wsl -l</code>命令查看），文件内容为：</p>\n<figure class=\"highlight vbs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CopySet ws = <span class=\"built_in\">CreateObject</span>(<span class=\"string\">&quot;Wscript.Shell&quot;</span>)</span><br><span class=\"line\">ws.run <span class=\"string\">&quot;wsl -d Arch -u root /etc/init.wsl&quot;</span>, vbhide</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>C:\\Users\\用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>中新建快捷方式，指向刚才创建的 vbs 文件。这样下次 windows 开机时就会自动在 ArchWSL 中执行<code>genie -i</code>，然后退出，注意：<code>wsl --shutdown</code>命令会把 wsl“关机”，所以你 shutdown 之后，需要再手动运行<code>ArchWSL-init.vbs</code>。</p>\n<p>PS: 我打开.vbs 文件的时候出现了<code>Windows 无法访问指定设备、路径或文件。你可能没有适当的权限访问该项目。</code>的错误，解决方法是用<a href=\"http://defaultprogramseditor.com/\">Default Programs Editor</a>，把<code>.vbs</code>的默认程序设置为<code>C:\\Windows\\System32\\wscript.exe</code>。</p>\n<p>引入startship</p>\n<p><a href=\"https://starship.rs/guide/#%F0%9F%9A%80-installation\">startship</a></p>\n","site":{"data":{}},"excerpt":"<p>下载压缩包：Manjarco.zip</p>\n<p>解压压缩包如一下目录所示</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105044473.png\" alt=\"image-20210811105044473\"></p>\n<p>双击Manjarco.exe则进行linux的安装，需要等一会，会告诉安装成功</p>","more":"<p>查看安装后的命令输入</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105147021.png\" alt=\"image-20210811105147021\"></p>\n<p>如果成功则可以看见Manjaro的命令。</p>\n<p>通过wsl -d Manjaro则可进入到服务器。</p>\n<p><code>wsl -d Manjaro</code></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210811105354401.png\" alt=\"image-20210811105354401\"></p>\n<h3 id=\"换源更新\"><a href=\"#换源更新\" class=\"headerlink\" title=\"换源更新#\"></a>换源更新<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#509598612\">#</a></h3><p>PS: 以下部分都以 root 用户身份运行命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copypasswd <span class=\"comment\"># 设置密码</span></span><br><span class=\"line\"><span class=\"comment\"># 设置软件源</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch&#x27;</span> &gt; /etc/pacman.d/mirrorlist</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch&#x27;</span> &gt;&gt; /etc/pacman.d/mirrorlist</span><br><span class=\"line\"><span class=\"comment\"># 添加写保护，防止被修改</span></span><br><span class=\"line\">chattr +i /etc/pacman.d/mirrorlist</span><br><span class=\"line\"><span class=\"comment\"># 初始化 keyring</span></span><br><span class=\"line\">pacman-key --init</span><br><span class=\"line\">pacman-key --populate</span><br><span class=\"line\">pacman -Syu <span class=\"comment\"># 更新</span></span><br></pre></td></tr></table></figure>\n\n<p>其他镜像源请见通过 <a href=\"https://www.archlinux.org/mirrorlist/\">Pacman Mirrorlist 生成器</a>生成的<a href=\"https://www.archlinux.org/mirrorlist/?country=CN&protocol=http&protocol=https&ip_version=4\">国内源列表</a>，用自己学校的更快哦！建议看看 <a href=\"https://www.archlinux.org/mirrors/status/\">镜像状态列表</a>，使用 Mirror Status 较低的国内镜像站</p>\n<h3 id=\"启用-multilib-库\"><a href=\"#启用-multilib-库\" class=\"headerlink\" title=\"启用 multilib 库#\"></a>启用 multilib 库<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#3927474463\">#</a></h3><p>multilib 库包含 64 位系统中需要的 32 位软件和库。</p>\n<p><code>vim /etc/pacman.conf</code>，取消这几行的注释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy[multilib]</span><br><span class=\"line\">Include = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>\n\n<p>并且取消该文件中<code>#Color</code>这一行的注释，以启用彩色输出。</p>\n<h3 id=\"添加-archlinuxcn-源\"><a href=\"#添加-archlinuxcn-源\" class=\"headerlink\" title=\"添加 archlinuxcn 源#\"></a>添加 archlinuxcn 源<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#515215996\">#</a></h3><p>Arch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体/美化包等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copyvim /etc/pacman.conf</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾加上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy[archlinuxcn]</span><br><span class=\"line\">Server = https://mirrors.aliyun.com/archlinuxcn/$arch</span><br><span class=\"line\"># 其他的见 https://github.com/archlinuxcn/mirrorlist-repo，最好是用自己学校的</span><br></pre></td></tr></table></figure>\n\n<p>然后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copypacman -Syy</span><br><span class=\"line\">pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户#\"></a>创建用户<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1153411218\">#</a></h3><p>有需要就创建吧。<br><em>注：此处的 yourname 是你要创建的用户名</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 新建用户。-m 为用户创建家目录；-G wheel 将用户添加到 wheel 用户组</span></span><br><span class=\"line\">useradd -m -G wheel xfhuang</span><br><span class=\"line\"><span class=\"comment\"># 设置密码</span></span><br><span class=\"line\">passwd xfhuang</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为 visudo 需要 vi</span></span><br><span class=\"line\">ln -s /usr/bin/vim /usr/bin/vi</span><br><span class=\"line\"><span class=\"comment\"># 编辑 /etc/sudoers</span></span><br><span class=\"line\">visudo</span><br></pre></td></tr></table></figure>\n\n<p>将以下两行行首的<code>#</code>去掉</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># %wheel ALL=(ALL) ALL</span></span><br><span class=\"line\"><span class=\"comment\"># %wheel ALL=(ALL) NOPASSWD: ALL</span></span><br></pre></td></tr></table></figure>\n\n<p>在 powershell 中进入到 Arch.exe 所在文件夹，设置 WSL 默认登陆用户和默认的 WSL：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy.\\Arch.exe config -<span class=\"literal\">-default</span><span class=\"literal\">-user</span> yourname</span><br><span class=\"line\">wsl <span class=\"literal\">-s</span> Arch</span><br></pre></td></tr></table></figure>\n\n<p>重新打开，就是在 yourname 用户了。</p>\n<h2 id=\"安装常用软件\"><a href=\"#安装常用软件\" class=\"headerlink\" title=\"安装常用软件#\"></a>安装常用软件<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1880665260\">#</a></h2><p>PS: 这部分以 yourname 用户身份运行命令。</p>\n<h3 id=\"安装-yay\"><a href=\"#安装-yay\" class=\"headerlink\" title=\"安装 yay#\"></a>安装 yay<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1538716494\">#</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed base-devel</span><br></pre></td></tr></table></figure>\n\n<p>出现<code>:: fakeroot is in IgnorePkg/IgnoreGroup. Install anyway? [Y/n]</code>，选 n，接下来一直回车即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed yay</span><br><span class=\"line\"><span class=\"comment\"># yay 换源</span></span><br><span class=\"line\">yay --aururl <span class=\"string\">&quot;https://aur.tuna.tsinghua.edu.cn&quot;</span> --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装其他的一些软件\"><a href=\"#安装其他的一些软件\" class=\"headerlink\" title=\"安装其他的一些软件#\"></a>安装其他的一些软件<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#3500358456\">#</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed neofetch lolcat bat tokei tree screenfetch</span><br><span class=\"line\">neofetch | lolcat -a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-gcc、clang、qemu-等\"><a href=\"#安装-gcc、clang、qemu-等\" class=\"headerlink\" title=\"安装 gcc、clang、qemu 等#\"></a>安装 gcc、clang、qemu 等<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#1080076022\">#</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed gcc clang lib32-gcc-libs gdb make binutils git openssh man-pages ccls</span><br></pre></td></tr></table></figure>\n\n<p>安装 qemu（有需要就安装吧）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed qemu-arch-extra</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-zsh\"><a href=\"#安装-zsh\" class=\"headerlink\" title=\"安装 zsh#\"></a>安装 zsh<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2194599011\">#</a></h3><p>给 windows 安装以下字体，并且改变 windows terminal 的字体设置(这里就不细说了)：</p>\n<ul>\n<li><a href=\"https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Meslo/S/Regular/complete\">MesloLGS NF</a> <em>powerlevel10k 作者推荐</em></li>\n<li><a href=\"https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode/Regular/complete\">FiraCode NF</a> <em>我更喜欢这个</em></li>\n</ul>\n<p>安装 zsh 并且将其设置为默认 shell：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed zsh</span><br><span class=\"line\"><span class=\"comment\"># 编辑 /etc/passwd 文件，将 root 用户和 yourname 用户的 /bin/bash 改为 /bin/zsh</span></span><br><span class=\"line\"><span class=\"comment\"># 或者使用 chsh -s /bin/zsh 来改变当前用户的默认shell</span></span><br><span class=\"line\">sudo vim /etc/passwd</span><br><span class=\"line\">touch ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># 在yourname用户创建软链接，让root用户也使用yourname用户的.zshrc</span></span><br><span class=\"line\"><span class=\"comment\"># 我觉得这样比较方便</span></span><br><span class=\"line\">sudo ln -s ~/.zshrc /root/.zshrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-proxychains-代理终端程序\"><a href=\"#使用-proxychains-代理终端程序\" class=\"headerlink\" title=\"使用 proxychains 代理终端程序#\"></a>使用 proxychains 代理终端程序<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2378191044\">#</a></h3><p>可以使用 windows 的 <a href=\"https://qv2ray.net/\">qv②ray</a>/clash/ssr 等代理软件来代理 wsl 中的程序！先安装 proxychains：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo pacman -S --needed proxychains-ng</span><br></pre></td></tr></table></figure>\n\n<p>首先，<code>sudo vim /etc/proxychains.conf</code>，将<code>proxy_dns</code>这一行注释。（这样能够让 proxychains 代理 yay）</p>\n<p>如果用的是 WSL 1，那就 <code>sudo vim /etc/proxychains.conf</code>，将最后一行的 socks4 127.0.0.1 9095 修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysocks5 127.0.0.1 7890</span><br></pre></td></tr></table></figure>\n\n<p>这个 7890 是我的 qv②ray 的 socks5 端口号，改成你自己的。如果你用的是 WSL 2，由于目前 WSL 2 和 windows 的 ip 不同，我们需要先<code>cp -f /etc/proxychains.conf ~/.proxychains.conf</code>，然后在<code>~/.zshrc</code>中添加以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 获取windows的ip</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> WIN_IP=`cat /etc/resolv.conf | grep nameserver | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"comment\"># 删除 ~/.proxychains.conf 中 [ProxyList] 所在行到文件末尾的全部内容</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/\\[ProxyList\\]/,$d&#x27;</span> ~/.proxychains.conf</span><br><span class=\"line\"><span class=\"comment\"># 往文件末尾添加socks5设置，这个 7890 是我的 qv②ray 的 socks5 端口号，改成你自己的</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;[ProxyList]\\nsocks5 &#x27;</span><span class=\"variable\">$&#123;WIN_IP&#125;</span><span class=\"string\">&#x27; 7890&#x27;</span> &gt;&gt; ~/.proxychains.conf</span><br><span class=\"line\"><span class=\"comment\"># 设置别名；使用 ~/.proxychains.conf 作为proxychains的配置文件；让proxychains quiet（不输出一大串东西）</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> pc=<span class=\"string\">&#x27;proxychains4 -q -f ~/.proxychains.conf&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 用来手动开关代理，建议走 http 协议，因为 wget 不支持 socks5</span></span><br><span class=\"line\">my_proxy=http://<span class=\"variable\">$&#123;WIN_IP&#125;</span>:7891</span><br><span class=\"line\"><span class=\"built_in\">alias</span> p-on=<span class=\"string\">&#x27;export all_proxy=&#x27;</span><span class=\"variable\">$&#123;my_proxy&#125;</span><span class=\"string\">&#x27; http_proxy=&#x27;</span><span class=\"variable\">$&#123;my_proxy&#125;</span><span class=\"string\">&#x27; https_proxy=&#x27;</span><span class=\"variable\">$&#123;my_proxy&#125;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> p-off=<span class=\"string\">&#x27;unset all_proxy http_proxy https_proxy&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 在 yourname 用户中</span></span><br><span class=\"line\">sudo ln -s ~/.proxychains.conf /root/.proxychains.conf</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果你发现还是无法代理，<a href=\"https://github.com/microsoft/WSL/issues/4402#issuecomment-570474468\">那可能是因为你的代理软件没打开<code>允许来自局域网的连接</code>选项</a></strong></p>\n<p>注：<code>pc ping google.com</code>是没有效果的，因为 proxychains 只会代理 TCP。</p>\n<p>注意为了让wsl能通过代理访问，需要放开防火墙</p>\n<p>命令来源：<a href=\"https://github.com/microsoft/WSL/issues/4585\">https://github.com/microsoft/WSL/issues/4585</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 直接放开 `vEthernet (WSL)` 这张网卡的防火墙</span><br><span class=\"line\">New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound -InterfaceAlias &quot;vEthernet (WSL)&quot; -Action Allow</span><br></pre></td></tr></table></figure>\n\n<p>参考文档：</p>\n<p> <a href=\"https://lengthmin.me/posts/wsl2-network-tricks/\">WSL2 的一些网络访问问题</a></p>\n<h3 id=\"安装-antigen\"><a href=\"#安装-antigen\" class=\"headerlink\" title=\"安装 antigen\"></a>安装 antigen</h3><p>注：安装 antigen 时会从 github 下载文件，准备好代理软件。</p>\n<p>使用 antigen 管理 zsh 的插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copypc yay -S antigen</span><br></pre></td></tr></table></figure>\n\n<p>往<code>~/.zshrc</code>中添加如下内容，以启用历史命令、按键绑定、命令补全、语法高亮、powerlevel10k 主题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 初始化 antigen</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /usr/share/zsh/share/antigen.zsh</span><br><span class=\"line\"><span class=\"comment\"># Load the oh-my-zsh&#x27;s library</span></span><br><span class=\"line\"><span class=\"comment\"># oh-my-zsh 会启用历史命令、按键绑定等功能</span></span><br><span class=\"line\">antigen use oh-my-zsh</span><br><span class=\"line\"><span class=\"comment\"># 启用一些 bundle</span></span><br><span class=\"line\">antigen bundle zsh-users/zsh-syntax-highlighting</span><br><span class=\"line\">antigen bundle zsh-users/zsh-autosuggestions</span><br><span class=\"line\">antigen bundle zsh-users/zsh-completions</span><br><span class=\"line\"><span class=\"comment\"># Load the theme</span></span><br><span class=\"line\">antigen theme romkatv/powerlevel10k</span><br><span class=\"line\"><span class=\"comment\"># Tell antigen that you&#x27;re done</span></span><br><span class=\"line\">antigen apply</span><br></pre></td></tr></table></figure>\n\n<p>然后<code>pc zsh</code>，antigen 就会给你安装插件，安装完后就会开始让你选择 powerlevel10k 的主题样式，如果没出现，就<code>p10k configure</code>，我比较喜欢 pure 这个主题。<code>~/.p10k.zsh</code>是 powerlevel10k 主题的配置文件，<a href=\"https://github.com/romkatv/powerlevel10k\">项目主页</a> 有详细的介绍。</p>\n<p>之后给 root 用户创建软链接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 在 yourname 用户中</span></span><br><span class=\"line\">sudo ln -s ~/.p10k.zsh /root/.p10k.zsh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd#\"></a>systemd<a href=\"https://www.cnblogs.com/zsmumu/p/archlinux-wsl2.html#2178938276\">#</a></h3><p>WSL 不支持 systemd，但可以使用其他方法运行 systemd。详见<a href=\"https://github.com/yuk7/ArchWSL/wiki/Known-issues#systemdsystemctl\">systemd/systemctl</a>。之前有 genie-systemd aur 软件包，但现在没了，还好我找到了<a href=\"https://github.com/arkane-systems/genie/issues/82#issuecomment-695821616\">PKGBUILD</a>。</p>\n<p><code>vim PKGBUILD</code>，填入如下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># Maintainer: Arley Henostroza &lt;arllk10[at]gmail[dot]com&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Contibutor: facekapow</span></span><br><span class=\"line\"></span><br><span class=\"line\">pkgname=genie-systemd</span><br><span class=\"line\">_pkgname=genie</span><br><span class=\"line\">pkgver=1.28</span><br><span class=\"line\">pkgrel=1</span><br><span class=\"line\">pkgdesc=<span class=\"string\">&quot;A quick way into a systemd \\&quot;bottle\\&quot; for WSL&quot;</span></span><br><span class=\"line\">arch=(<span class=\"string\">&#x27;x86_64&#x27;</span>)</span><br><span class=\"line\">url=<span class=\"string\">&quot;https://github.com/arkane-systems/genie&quot;</span></span><br><span class=\"line\">license=(<span class=\"string\">&#x27;custom:The Unlicense&#x27;</span>)</span><br><span class=\"line\">depends=(<span class=\"string\">&#x27;daemonize&#x27;</span> <span class=\"string\">&#x27;dotnet-runtime&gt;=3.1&#x27;</span> <span class=\"string\">&#x27;dotnet-host&gt;=3.1&#x27;</span> <span class=\"string\">&#x27;inetutils&#x27;</span>)</span><br><span class=\"line\">makedepends=(<span class=\"string\">&#x27;dotnet-sdk&gt;=3.1&#x27;</span>)</span><br><span class=\"line\">conflicts=(<span class=\"string\">&#x27;genie-systemd&#x27;</span>)</span><br><span class=\"line\">provides=(<span class=\"string\">&#x27;genie-systemd&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">source</span>=(<span class=\"string\">&quot;<span class=\"variable\">$&#123;url&#125;</span>/archive/<span class=\"variable\">$&#123;pkgver&#125;</span>.tar.gz&quot;</span>)</span><br><span class=\"line\">sha256sums=(<span class=\"string\">&#x27;688253faad5e3c40c9277dac00a481f48bc5ed62cf2bc82c2c1234d92604ea96&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">prepare</span></span>() &#123;</span><br><span class=\"line\">  tar -xzf <span class=\"variable\">$&#123;pkgver&#125;</span>.tar.gz</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">package</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">export</span> DOTNET_CLI_TELEMETRY_OPTOUT=1</span><br><span class=\"line\">  <span class=\"built_in\">export</span> DOTNET_SKIP_FIRST_TIME_EXPERIENCE=<span class=\"literal\">true</span></span><br><span class=\"line\">  ls -alh</span><br><span class=\"line\">  <span class=\"built_in\">cd</span> genie-<span class=\"variable\">$&#123;pkgver&#125;</span>/genie</span><br><span class=\"line\">  <span class=\"built_in\">export</span> DESTDIR=<span class=\"variable\">$pkgdir</span></span><br><span class=\"line\">  make build</span><br><span class=\"line\">  make install</span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;pkgdir&#125;</span>/usr/bin</span><br><span class=\"line\">  chmod +x <span class=\"variable\">$&#123;pkgdir&#125;</span>/usr/libexec/genie</span><br><span class=\"line\">  ln -s /usr/libexec/genie/main/genie <span class=\"variable\">$&#123;pkgdir&#125;</span>/usr/bin/genie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后进行安装（注意需要和 PKGBUILD 在相同目录）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copyyay -S daemonize</span><br><span class=\"line\">makepkg -si <span class=\"comment\"># 处理依赖并安装</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以使用 genie 了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copy<span class=\"comment\"># 运行 genie -i，让ArchWSL可以正常使用systemd</span></span><br><span class=\"line\">genie -i</span><br></pre></td></tr></table></figure>\n\n<p>接下来让 ArchWSL 在 windows 开机时，就能够自动<code>genie -i</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Copysudo <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;genie -i&#x27;</span> &gt; /etc/init.wsl</span><br><span class=\"line\">sudo chmod +x /etc/init.wsl</span><br></pre></td></tr></table></figure>\n\n<p>在 windows 上创建<code>ArchWSL-init.vbs</code>文件（这里的 Arch 是该 wsl 发行版的名称，可通过<code>wsl -l</code>命令查看），文件内容为：</p>\n<figure class=\"highlight vbs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CopySet ws = <span class=\"built_in\">CreateObject</span>(<span class=\"string\">&quot;Wscript.Shell&quot;</span>)</span><br><span class=\"line\">ws.run <span class=\"string\">&quot;wsl -d Arch -u root /etc/init.wsl&quot;</span>, vbhide</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>C:\\Users\\用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>中新建快捷方式，指向刚才创建的 vbs 文件。这样下次 windows 开机时就会自动在 ArchWSL 中执行<code>genie -i</code>，然后退出，注意：<code>wsl --shutdown</code>命令会把 wsl“关机”，所以你 shutdown 之后，需要再手动运行<code>ArchWSL-init.vbs</code>。</p>\n<p>PS: 我打开.vbs 文件的时候出现了<code>Windows 无法访问指定设备、路径或文件。你可能没有适当的权限访问该项目。</code>的错误，解决方法是用<a href=\"http://defaultprogramseditor.com/\">Default Programs Editor</a>，把<code>.vbs</code>的默认程序设置为<code>C:\\Windows\\System32\\wscript.exe</code>。</p>\n<p>引入startship</p>\n<p><a href=\"https://starship.rs/guide/#%F0%9F%9A%80-installation\">startship</a></p>"},{"title":"Timeout exceeded: try increasing it by passing --timeout option","date":"2021-08-12T05:25:11.000Z","_content":"\nci里面配置了golangci-lint检查，但是偶尔总出现level=error msg=\"Timeout exceeded: try increasing it by passing --timeout option\"这种错误， 重新执行一次就正常了，虽然几率小，但还是会造成困扰，于是找了下问题，分享下解决方案。\n————————————————\n\n### 解决方法\n<!--more-->\n\n\n\n在**golangci-lint**运行时，加上timeout的参数设置(默认是1分钟)\n\n```\ngolangci-lint run ./... --timeout=10m\n\n123\n```\n\n详细的信息可以通过命令行的help查看:`golangci-lint run -h`\n\n","source":"_posts/Timeout-exceeded-try-increasing-it-by-passing-timeout-option.md","raw":"---\ntitle: 'Timeout exceeded: try increasing it by passing --timeout option'\ndate: 2021-08-12 13:25:11\ntags: golang\n---\n\nci里面配置了golangci-lint检查，但是偶尔总出现level=error msg=\"Timeout exceeded: try increasing it by passing --timeout option\"这种错误， 重新执行一次就正常了，虽然几率小，但还是会造成困扰，于是找了下问题，分享下解决方案。\n————————————————\n\n### 解决方法\n<!--more-->\n\n\n\n在**golangci-lint**运行时，加上timeout的参数设置(默认是1分钟)\n\n```\ngolangci-lint run ./... --timeout=10m\n\n123\n```\n\n详细的信息可以通过命令行的help查看:`golangci-lint run -h`\n\n","slug":"Timeout-exceeded-try-increasing-it-by-passing-timeout-option","published":1,"updated":"2021-08-23T00:38:38.702Z","_id":"cks9o6ocf000a0pv97w01h7il","comments":1,"layout":"post","photos":[],"link":"","content":"<p>ci里面配置了golangci-lint检查，但是偶尔总出现level=error msg=”Timeout exceeded: try increasing it by passing –timeout option”这种错误， 重新执行一次就正常了，虽然几率小，但还是会造成困扰，于是找了下问题，分享下解决方案。<br>————————————————</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><span id=\"more\"></span>\n\n\n\n<p>在<strong>golangci-lint</strong>运行时，加上timeout的参数设置(默认是1分钟)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">golangci-lint run ./... --timeout=10m</span><br><span class=\"line\"></span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n<p>详细的信息可以通过命令行的help查看:<code>golangci-lint run -h</code></p>\n","site":{"data":{}},"excerpt":"<p>ci里面配置了golangci-lint检查，但是偶尔总出现level=error msg=”Timeout exceeded: try increasing it by passing –timeout option”这种错误， 重新执行一次就正常了，虽然几率小，但还是会造成困扰，于是找了下问题，分享下解决方案。<br>————————————————</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3>","more":"<p>在<strong>golangci-lint</strong>运行时，加上timeout的参数设置(默认是1分钟)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">golangci-lint run ./... --timeout=10m</span><br><span class=\"line\"></span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n<p>详细的信息可以通过命令行的help查看:<code>golangci-lint run -h</code></p>"},{"title":"linux命令","date":"2021-08-13T00:22:44.000Z","_content":"\n# linux 下 取进程占用 cpu 最高的前10个进程\nps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head\n\n\n# linux 下 取进程占用内存(MEM)最高的前10个进程\nps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head\n\n查看端口占用\n\n```\nnetstat -tunlp | grep 端口号\n```\n<!--more-->\n\n \n\n","source":"_posts/linux命令.md","raw":"---\ntitle: linux命令\ndate: 2021-08-13 08:22:44\ntags:\n- shell\ncategories: \n- linux\n---\n\n# linux 下 取进程占用 cpu 最高的前10个进程\nps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head\n\n\n# linux 下 取进程占用内存(MEM)最高的前10个进程\nps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head\n\n查看端口占用\n\n```\nnetstat -tunlp | grep 端口号\n```\n<!--more-->\n\n \n\n","slug":"linux命令","published":1,"updated":"2021-08-23T00:38:38.720Z","_id":"cks9o6och000b0pv9aoazg1cw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"linux-下-取进程占用-cpu-最高的前10个进程\"><a href=\"#linux-下-取进程占用-cpu-最高的前10个进程\" class=\"headerlink\" title=\"linux 下 取进程占用 cpu 最高的前10个进程\"></a>linux 下 取进程占用 cpu 最高的前10个进程</h1><p>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head</p>\n<h1 id=\"linux-下-取进程占用内存-MEM-最高的前10个进程\"><a href=\"#linux-下-取进程占用内存-MEM-最高的前10个进程\" class=\"headerlink\" title=\"linux 下 取进程占用内存(MEM)最高的前10个进程\"></a>linux 下 取进程占用内存(MEM)最高的前10个进程</h1><p>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head</p>\n<p>查看端口占用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -tunlp | grep 端口号</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"linux-下-取进程占用-cpu-最高的前10个进程\"><a href=\"#linux-下-取进程占用-cpu-最高的前10个进程\" class=\"headerlink\" title=\"linux 下 取进程占用 cpu 最高的前10个进程\"></a>linux 下 取进程占用 cpu 最高的前10个进程</h1><p>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head</p>\n<h1 id=\"linux-下-取进程占用内存-MEM-最高的前10个进程\"><a href=\"#linux-下-取进程占用内存-MEM-最高的前10个进程\" class=\"headerlink\" title=\"linux 下 取进程占用内存(MEM)最高的前10个进程\"></a>linux 下 取进程占用内存(MEM)最高的前10个进程</h1><p>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head</p>\n<p>查看端口占用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -tunlp | grep 端口号</span><br></pre></td></tr></table></figure>","more":""},{"title":"postgresql - 与PostgreSQL中的FOUND_ROWS()函数等效","date":"2021-08-12T00:37:02.000Z","_content":"\n我正在应用程序中进行一些分页，使用PostgreSQL的标准OFFSET和LIMIT关键字一次从数据库返回20行。例如，要获得第1页:\n\n```\nSELECT stuff FROM table WHERE condition ORDER BY stuff OFFSET 0 LIMIT 20\n```\n\n\n\n这也是应用程序的要求，我们还向用户显示记录总数。因此，显然，我可以通过发出一个单独的查询来获得总数:\n\n```\nSELECT COUNT(*) FROM table WHERE condition\n```\n\n\n但是，如果有很多行，那么这不是最佳解决方案。我注意到MySQL具有一个非常有用的函数FOUND_ROWS()，它确实可以满足我的需求:\n\n[http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function%5Ffound-rows](http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function_found-rows)\n\nPostgreSQL中有等效的东西吗？\n\n\n\n# 最佳答案\n\nPostgreSQL已经有[window functions](http://www.postgresql.org/docs/current/interactive/tutorial-window.html)一段时间了，它可以用来做很多事情，包括在应用LIMIT之前对行进行计数。\n\n根据以上示例:\n<!--more-->\n\n```\nSELECT stuff,\n       count(*) OVER() AS total_count\nFROM table\nWHERE condition\nORDER BY stuff OFFSET 40 LIMIT 20\n```\n\n\n\n关于postgresql - 与PostgreSQL中的FOUND_ROWS()函数等效，我们在Stack Overflow上找到一个类似的问题： https://stackoverflow.com/questions/3984643/\n\n# 但在postgresql测试性能并没有达到很大，建议分开执行。参考原则为以下：\n\n# Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL\n\n| From:       | Oliver Elphick <olly(at)lfix(dot)co(dot)uk>                  |\n| ----------- | ------------------------------------------------------------ |\n| To:         | \"Matt Arnilo S(dot) Baluyos (Mailing Lists)\" <matt(dot)baluyos(dot)lists(at)gmail(dot)com> |\n| Cc:         | pgsql-novice(at)postgresql(dot)org                           |\n| Subject:    | Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL             |\n| Date:       | 2007-07-31 06:24:34                                          |\n| Message-ID: | [1185863074.10580.91.camel@linda.lfix.co.uk](https://www.postgresql.org/message-id/1185863074.10580.91.camel%40linda.lfix.co.uk) |\n| Views:      | [Raw Message](https://www.postgresql.org/message-id/raw/1185863074.10580.91.camel%40linda.lfix.co.uk) \\| [Whole Thread](https://www.postgresql.org/message-id/flat/1185863074.10580.91.camel%40linda.lfix.co.uk) \\| [Download mbox](https://www.postgresql.org/message-id/mbox/1185863074.10580.91.camel%40linda.lfix.co.uk) \\| [Resend email](https://www.postgresql.org/message-id/resend/1185863074.10580.91.camel%40linda.lfix.co.uk) |\n| Thread:     | 2007-07-31 01:22:25 from \"Matt Arnilo S(dot) Baluyos (Mailing Lists)\" <matt(dot)baluyos(dot)lists(at)gmail(dot)com>  2007-07-31 06:24:34 from Oliver Elphick <olly(at)lfix(dot)co(dot)uk>   2007-07-31 14:32:16 from Michael Fuhr <mike(at)fuhr(dot)org> |\n| Lists:      | [pgsql-novice](https://www.postgresql.org/list/pgsql-novice/since/200707310624) |\n\nOn Tue, 2007-07-31 at 09:22 +0800, Matt Arnilo S. Baluyos (Mailing\nLists) wrote:\n\\> Hello everyone,\n\\> \n\\> I would like to use PostgreSQL with the SmartyPaginate plugin of the\n\\> Smarty template engine.\n\\> \n\\> In the examples on the documentation, the following two queries are used:\n\\> \n\\> SELECT SQL_CALC_FOUND_ROWS * FROM mytable LIMIT X,Y\n\\> SELECT FOUND_ROWS() as total\n\\> \n\\> What the SQL_CALC_FOUND_ROWS does is that it allows the FOUND_ROWS()\n\\> function to return the total rows if the first query didn't have the\n\\> LIMIT.\n\\> \nSQL_CALC_FOUND_ROWS and FOUND_ROWS() are MySQL features.\n\n\\> Is there an equivalent function in PostgreSQL for this or perhaps a\n\\> workaround?\n\nThere is no equivalent.  Use\n\n   BEGIN;\n   SELECT * FROM mytable OFFSET X LIMIT Y;\n   SELECT COUNT(*) AS total FROM mytable;\n   END;\n\n(To ensure consistent results, both queries should be done in a single\ntransaction.)\n\nIf you are repeating the query multiple times for separate pages, it\nwould be more efficient to do the COUNT() selection first and not repeat\nit for each page.  You could use a cursor to go back and forth through\nthe results while doing the query only once.\n\n\\-- \nOliver Elphick                                          olly(at)lfix(dot)co(dot)uk\nIsle of Wight                              http://www.lfix.co.uk/oliver\nGPG: 1024D/A54310EA  92C8 39E7 280E 3631 3F0E  1EC0 5664 7A2F A543 10EA\n                 ========================================\n   Do you want to know God?   http://www.lfix.co.uk/knowing_god.html\n\n\\-- \nThis message has been scanned for viruses and\ndangerous content by MailScanner, and is\nbelieved to be clean.\n\n\n\n\n\n### In response to\n\n- [SQL_CALC_FOUND_ROWS equivalent in PostgreSQL](https://www.postgresql.org/message-id/d1a6d7930707301822geda34b2i1e558ccd84ca9513%40mail.gmail.com) at 2007-07-31 01:22:25 from Matt Arnilo S. Baluyos (Mailing Lists)\n\n### Responses\n\n- [Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL](https://www.postgresql.org/message-id/20070731143216.GA28226%40winnie.fuhr.org) at 2007-07-31 14:32:16 from Michael Fuhr\n\n### Browse pgsql-novice by date\n\n[postgresql found_rows性能并不好]: https://www.postgresql.org/message-id/1185863074.10580.91.camel@linda.lfix.co.uk\n\n","source":"_posts/postgresql-与PostgreSQL中的FOUND-ROWS-函数等效.md","raw":"---\ntitle: postgresql - 与PostgreSQL中的FOUND_ROWS()函数等效\ndate: 2021-08-12 08:37:02\ntags: postgres mysql found_rows()\n---\n\n我正在应用程序中进行一些分页，使用PostgreSQL的标准OFFSET和LIMIT关键字一次从数据库返回20行。例如，要获得第1页:\n\n```\nSELECT stuff FROM table WHERE condition ORDER BY stuff OFFSET 0 LIMIT 20\n```\n\n\n\n这也是应用程序的要求，我们还向用户显示记录总数。因此，显然，我可以通过发出一个单独的查询来获得总数:\n\n```\nSELECT COUNT(*) FROM table WHERE condition\n```\n\n\n但是，如果有很多行，那么这不是最佳解决方案。我注意到MySQL具有一个非常有用的函数FOUND_ROWS()，它确实可以满足我的需求:\n\n[http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function%5Ffound-rows](http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function_found-rows)\n\nPostgreSQL中有等效的东西吗？\n\n\n\n# 最佳答案\n\nPostgreSQL已经有[window functions](http://www.postgresql.org/docs/current/interactive/tutorial-window.html)一段时间了，它可以用来做很多事情，包括在应用LIMIT之前对行进行计数。\n\n根据以上示例:\n<!--more-->\n\n```\nSELECT stuff,\n       count(*) OVER() AS total_count\nFROM table\nWHERE condition\nORDER BY stuff OFFSET 40 LIMIT 20\n```\n\n\n\n关于postgresql - 与PostgreSQL中的FOUND_ROWS()函数等效，我们在Stack Overflow上找到一个类似的问题： https://stackoverflow.com/questions/3984643/\n\n# 但在postgresql测试性能并没有达到很大，建议分开执行。参考原则为以下：\n\n# Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL\n\n| From:       | Oliver Elphick <olly(at)lfix(dot)co(dot)uk>                  |\n| ----------- | ------------------------------------------------------------ |\n| To:         | \"Matt Arnilo S(dot) Baluyos (Mailing Lists)\" <matt(dot)baluyos(dot)lists(at)gmail(dot)com> |\n| Cc:         | pgsql-novice(at)postgresql(dot)org                           |\n| Subject:    | Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL             |\n| Date:       | 2007-07-31 06:24:34                                          |\n| Message-ID: | [1185863074.10580.91.camel@linda.lfix.co.uk](https://www.postgresql.org/message-id/1185863074.10580.91.camel%40linda.lfix.co.uk) |\n| Views:      | [Raw Message](https://www.postgresql.org/message-id/raw/1185863074.10580.91.camel%40linda.lfix.co.uk) \\| [Whole Thread](https://www.postgresql.org/message-id/flat/1185863074.10580.91.camel%40linda.lfix.co.uk) \\| [Download mbox](https://www.postgresql.org/message-id/mbox/1185863074.10580.91.camel%40linda.lfix.co.uk) \\| [Resend email](https://www.postgresql.org/message-id/resend/1185863074.10580.91.camel%40linda.lfix.co.uk) |\n| Thread:     | 2007-07-31 01:22:25 from \"Matt Arnilo S(dot) Baluyos (Mailing Lists)\" <matt(dot)baluyos(dot)lists(at)gmail(dot)com>  2007-07-31 06:24:34 from Oliver Elphick <olly(at)lfix(dot)co(dot)uk>   2007-07-31 14:32:16 from Michael Fuhr <mike(at)fuhr(dot)org> |\n| Lists:      | [pgsql-novice](https://www.postgresql.org/list/pgsql-novice/since/200707310624) |\n\nOn Tue, 2007-07-31 at 09:22 +0800, Matt Arnilo S. Baluyos (Mailing\nLists) wrote:\n\\> Hello everyone,\n\\> \n\\> I would like to use PostgreSQL with the SmartyPaginate plugin of the\n\\> Smarty template engine.\n\\> \n\\> In the examples on the documentation, the following two queries are used:\n\\> \n\\> SELECT SQL_CALC_FOUND_ROWS * FROM mytable LIMIT X,Y\n\\> SELECT FOUND_ROWS() as total\n\\> \n\\> What the SQL_CALC_FOUND_ROWS does is that it allows the FOUND_ROWS()\n\\> function to return the total rows if the first query didn't have the\n\\> LIMIT.\n\\> \nSQL_CALC_FOUND_ROWS and FOUND_ROWS() are MySQL features.\n\n\\> Is there an equivalent function in PostgreSQL for this or perhaps a\n\\> workaround?\n\nThere is no equivalent.  Use\n\n   BEGIN;\n   SELECT * FROM mytable OFFSET X LIMIT Y;\n   SELECT COUNT(*) AS total FROM mytable;\n   END;\n\n(To ensure consistent results, both queries should be done in a single\ntransaction.)\n\nIf you are repeating the query multiple times for separate pages, it\nwould be more efficient to do the COUNT() selection first and not repeat\nit for each page.  You could use a cursor to go back and forth through\nthe results while doing the query only once.\n\n\\-- \nOliver Elphick                                          olly(at)lfix(dot)co(dot)uk\nIsle of Wight                              http://www.lfix.co.uk/oliver\nGPG: 1024D/A54310EA  92C8 39E7 280E 3631 3F0E  1EC0 5664 7A2F A543 10EA\n                 ========================================\n   Do you want to know God?   http://www.lfix.co.uk/knowing_god.html\n\n\\-- \nThis message has been scanned for viruses and\ndangerous content by MailScanner, and is\nbelieved to be clean.\n\n\n\n\n\n### In response to\n\n- [SQL_CALC_FOUND_ROWS equivalent in PostgreSQL](https://www.postgresql.org/message-id/d1a6d7930707301822geda34b2i1e558ccd84ca9513%40mail.gmail.com) at 2007-07-31 01:22:25 from Matt Arnilo S. Baluyos (Mailing Lists)\n\n### Responses\n\n- [Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL](https://www.postgresql.org/message-id/20070731143216.GA28226%40winnie.fuhr.org) at 2007-07-31 14:32:16 from Michael Fuhr\n\n### Browse pgsql-novice by date\n\n[postgresql found_rows性能并不好]: https://www.postgresql.org/message-id/1185863074.10580.91.camel@linda.lfix.co.uk\n\n","slug":"postgresql-与PostgreSQL中的FOUND-ROWS-函数等效","published":1,"updated":"2021-08-23T00:38:38.725Z","_id":"cks9o6oci000d0pv9c8sfc1v1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我正在应用程序中进行一些分页，使用PostgreSQL的标准OFFSET和LIMIT关键字一次从数据库返回20行。例如，要获得第1页:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT stuff FROM table WHERE condition ORDER BY stuff OFFSET 0 LIMIT 20</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这也是应用程序的要求，我们还向用户显示记录总数。因此，显然，我可以通过发出一个单独的查询来获得总数:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(*) FROM table WHERE condition</span><br></pre></td></tr></table></figure>\n\n\n<p>但是，如果有很多行，那么这不是最佳解决方案。我注意到MySQL具有一个非常有用的函数FOUND_ROWS()，它确实可以满足我的需求:</p>\n<p><a href=\"http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function_found-rows\">http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function%5Ffound-rows</a></p>\n<p>PostgreSQL中有等效的东西吗？</p>\n<h1 id=\"最佳答案\"><a href=\"#最佳答案\" class=\"headerlink\" title=\"最佳答案\"></a>最佳答案</h1><p>PostgreSQL已经有<a href=\"http://www.postgresql.org/docs/current/interactive/tutorial-window.html\">window functions</a>一段时间了，它可以用来做很多事情，包括在应用LIMIT之前对行进行计数。</p>\n<p>根据以上示例:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT stuff,</span><br><span class=\"line\">       count(*) OVER() AS total_count</span><br><span class=\"line\">FROM table</span><br><span class=\"line\">WHERE condition</span><br><span class=\"line\">ORDER BY stuff OFFSET 40 LIMIT 20</span><br></pre></td></tr></table></figure>\n\n\n\n<p>关于postgresql - 与PostgreSQL中的FOUND_ROWS()函数等效，我们在Stack Overflow上找到一个类似的问题： <a href=\"https://stackoverflow.com/questions/3984643/\">https://stackoverflow.com/questions/3984643/</a></p>\n<h1 id=\"但在postgresql测试性能并没有达到很大，建议分开执行。参考原则为以下：\"><a href=\"#但在postgresql测试性能并没有达到很大，建议分开执行。参考原则为以下：\" class=\"headerlink\" title=\"但在postgresql测试性能并没有达到很大，建议分开执行。参考原则为以下：\"></a>但在postgresql测试性能并没有达到很大，建议分开执行。参考原则为以下：</h1><h1 id=\"Re-SQL-CALC-FOUND-ROWS-equivalent-in-PostgreSQL\"><a href=\"#Re-SQL-CALC-FOUND-ROWS-equivalent-in-PostgreSQL\" class=\"headerlink\" title=\"Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL\"></a>Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL</h1><table>\n<thead>\n<tr>\n<th>From:</th>\n<th>Oliver Elphick &lt;olly(at)lfix(dot)co(dot)uk&gt;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>To:</td>\n<td>“Matt Arnilo S(dot) Baluyos (Mailing Lists)” &lt;matt(dot)baluyos(dot)lists(at)gmail(dot)com&gt;</td>\n</tr>\n<tr>\n<td>Cc:</td>\n<td>pgsql-novice(at)postgresql(dot)org</td>\n</tr>\n<tr>\n<td>Subject:</td>\n<td>Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL</td>\n</tr>\n<tr>\n<td>Date:</td>\n<td>2007-07-31 06:24:34</td>\n</tr>\n<tr>\n<td>Message-ID:</td>\n<td><a href=\"https://www.postgresql.org/message-id/1185863074.10580.91.camel%40linda.lfix.co.uk\">1185863074.10580.91.camel@linda.lfix.co.uk</a></td>\n</tr>\n<tr>\n<td>Views:</td>\n<td><a href=\"https://www.postgresql.org/message-id/raw/1185863074.10580.91.camel%40linda.lfix.co.uk\">Raw Message</a> | <a href=\"https://www.postgresql.org/message-id/flat/1185863074.10580.91.camel%40linda.lfix.co.uk\">Whole Thread</a> | <a href=\"https://www.postgresql.org/message-id/mbox/1185863074.10580.91.camel%40linda.lfix.co.uk\">Download mbox</a> | <a href=\"https://www.postgresql.org/message-id/resend/1185863074.10580.91.camel%40linda.lfix.co.uk\">Resend email</a></td>\n</tr>\n<tr>\n<td>Thread:</td>\n<td>2007-07-31 01:22:25 from “Matt Arnilo S(dot) Baluyos (Mailing Lists)” &lt;matt(dot)baluyos(dot)lists(at)gmail(dot)com&gt;  2007-07-31 06:24:34 from Oliver Elphick &lt;olly(at)lfix(dot)co(dot)uk&gt;   2007-07-31 14:32:16 from Michael Fuhr &lt;mike(at)fuhr(dot)org&gt;</td>\n</tr>\n<tr>\n<td>Lists:</td>\n<td><a href=\"https://www.postgresql.org/list/pgsql-novice/since/200707310624\">pgsql-novice</a></td>\n</tr>\n</tbody></table>\n<p>On Tue, 2007-07-31 at 09:22 +0800, Matt Arnilo S. Baluyos (Mailing<br>Lists) wrote:<br>&gt; Hello everyone,<br>&gt;<br>&gt; I would like to use PostgreSQL with the SmartyPaginate plugin of the<br>&gt; Smarty template engine.<br>&gt;<br>&gt; In the examples on the documentation, the following two queries are used:<br>&gt;<br>&gt; SELECT SQL_CALC_FOUND_ROWS * FROM mytable LIMIT X,Y<br>&gt; SELECT FOUND_ROWS() as total<br>&gt;<br>&gt; What the SQL_CALC_FOUND_ROWS does is that it allows the FOUND_ROWS()<br>&gt; function to return the total rows if the first query didn’t have the<br>&gt; LIMIT.<br>&gt;<br>SQL_CALC_FOUND_ROWS and FOUND_ROWS() are MySQL features.</p>\n<p>&gt; Is there an equivalent function in PostgreSQL for this or perhaps a<br>&gt; workaround?</p>\n<p>There is no equivalent.  Use</p>\n<p>   BEGIN;<br>   SELECT * FROM mytable OFFSET X LIMIT Y;<br>   SELECT COUNT(*) AS total FROM mytable;<br>   END;</p>\n<p>(To ensure consistent results, both queries should be done in a single<br>transaction.)</p>\n<p>If you are repeating the query multiple times for separate pages, it<br>would be more efficient to do the COUNT() selection first and not repeat<br>it for each page.  You could use a cursor to go back and forth through<br>the results while doing the query only once.</p>\n<p>--<br>Oliver Elphick                                          olly(at)lfix(dot)co(dot)uk<br>Isle of Wight                              <a href=\"http://www.lfix.co.uk/oliver\">http://www.lfix.co.uk/oliver</a><br>GPG: 1024D/A54310EA  92C8 39E7 280E 3631 3F0E  1EC0 5664 7A2F A543 10EA<br>                 ========================================<br>   Do you want to know God?   <a href=\"http://www.lfix.co.uk/knowing_god.html\">http://www.lfix.co.uk/knowing_god.html</a></p>\n<p>--<br>This message has been scanned for viruses and<br>dangerous content by MailScanner, and is<br>believed to be clean.</p>\n<h3 id=\"In-response-to\"><a href=\"#In-response-to\" class=\"headerlink\" title=\"In response to\"></a>In response to</h3><ul>\n<li><a href=\"https://www.postgresql.org/message-id/d1a6d7930707301822geda34b2i1e558ccd84ca9513%40mail.gmail.com\">SQL_CALC_FOUND_ROWS equivalent in PostgreSQL</a> at 2007-07-31 01:22:25 from Matt Arnilo S. Baluyos (Mailing Lists)</li>\n</ul>\n<h3 id=\"Responses\"><a href=\"#Responses\" class=\"headerlink\" title=\"Responses\"></a>Responses</h3><ul>\n<li><a href=\"https://www.postgresql.org/message-id/20070731143216.GA28226%40winnie.fuhr.org\">Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL</a> at 2007-07-31 14:32:16 from Michael Fuhr</li>\n</ul>\n<h3 id=\"Browse-pgsql-novice-by-date\"><a href=\"#Browse-pgsql-novice-by-date\" class=\"headerlink\" title=\"Browse pgsql-novice by date\"></a>Browse pgsql-novice by date</h3>","site":{"data":{}},"excerpt":"<p>我正在应用程序中进行一些分页，使用PostgreSQL的标准OFFSET和LIMIT关键字一次从数据库返回20行。例如，要获得第1页:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT stuff FROM table WHERE condition ORDER BY stuff OFFSET 0 LIMIT 20</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这也是应用程序的要求，我们还向用户显示记录总数。因此，显然，我可以通过发出一个单独的查询来获得总数:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(*) FROM table WHERE condition</span><br></pre></td></tr></table></figure>\n\n\n<p>但是，如果有很多行，那么这不是最佳解决方案。我注意到MySQL具有一个非常有用的函数FOUND_ROWS()，它确实可以满足我的需求:</p>\n<p><a href=\"http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function_found-rows\">http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function%5Ffound-rows</a></p>\n<p>PostgreSQL中有等效的东西吗？</p>\n<h1 id=\"最佳答案\"><a href=\"#最佳答案\" class=\"headerlink\" title=\"最佳答案\"></a>最佳答案</h1><p>PostgreSQL已经有<a href=\"http://www.postgresql.org/docs/current/interactive/tutorial-window.html\">window functions</a>一段时间了，它可以用来做很多事情，包括在应用LIMIT之前对行进行计数。</p>\n<p>根据以上示例:</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT stuff,</span><br><span class=\"line\">       count(*) OVER() AS total_count</span><br><span class=\"line\">FROM table</span><br><span class=\"line\">WHERE condition</span><br><span class=\"line\">ORDER BY stuff OFFSET 40 LIMIT 20</span><br></pre></td></tr></table></figure>\n\n\n\n<p>关于postgresql - 与PostgreSQL中的FOUND_ROWS()函数等效，我们在Stack Overflow上找到一个类似的问题： <a href=\"https://stackoverflow.com/questions/3984643/\">https://stackoverflow.com/questions/3984643/</a></p>\n<h1 id=\"但在postgresql测试性能并没有达到很大，建议分开执行。参考原则为以下：\"><a href=\"#但在postgresql测试性能并没有达到很大，建议分开执行。参考原则为以下：\" class=\"headerlink\" title=\"但在postgresql测试性能并没有达到很大，建议分开执行。参考原则为以下：\"></a>但在postgresql测试性能并没有达到很大，建议分开执行。参考原则为以下：</h1><h1 id=\"Re-SQL-CALC-FOUND-ROWS-equivalent-in-PostgreSQL\"><a href=\"#Re-SQL-CALC-FOUND-ROWS-equivalent-in-PostgreSQL\" class=\"headerlink\" title=\"Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL\"></a>Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL</h1><table>\n<thead>\n<tr>\n<th>From:</th>\n<th>Oliver Elphick &lt;olly(at)lfix(dot)co(dot)uk&gt;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>To:</td>\n<td>“Matt Arnilo S(dot) Baluyos (Mailing Lists)” &lt;matt(dot)baluyos(dot)lists(at)gmail(dot)com&gt;</td>\n</tr>\n<tr>\n<td>Cc:</td>\n<td>pgsql-novice(at)postgresql(dot)org</td>\n</tr>\n<tr>\n<td>Subject:</td>\n<td>Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL</td>\n</tr>\n<tr>\n<td>Date:</td>\n<td>2007-07-31 06:24:34</td>\n</tr>\n<tr>\n<td>Message-ID:</td>\n<td><a href=\"https://www.postgresql.org/message-id/1185863074.10580.91.camel%40linda.lfix.co.uk\">1185863074.10580.91.camel@linda.lfix.co.uk</a></td>\n</tr>\n<tr>\n<td>Views:</td>\n<td><a href=\"https://www.postgresql.org/message-id/raw/1185863074.10580.91.camel%40linda.lfix.co.uk\">Raw Message</a> | <a href=\"https://www.postgresql.org/message-id/flat/1185863074.10580.91.camel%40linda.lfix.co.uk\">Whole Thread</a> | <a href=\"https://www.postgresql.org/message-id/mbox/1185863074.10580.91.camel%40linda.lfix.co.uk\">Download mbox</a> | <a href=\"https://www.postgresql.org/message-id/resend/1185863074.10580.91.camel%40linda.lfix.co.uk\">Resend email</a></td>\n</tr>\n<tr>\n<td>Thread:</td>\n<td>2007-07-31 01:22:25 from “Matt Arnilo S(dot) Baluyos (Mailing Lists)” &lt;matt(dot)baluyos(dot)lists(at)gmail(dot)com&gt;  2007-07-31 06:24:34 from Oliver Elphick &lt;olly(at)lfix(dot)co(dot)uk&gt;   2007-07-31 14:32:16 from Michael Fuhr &lt;mike(at)fuhr(dot)org&gt;</td>\n</tr>\n<tr>\n<td>Lists:</td>\n<td><a href=\"https://www.postgresql.org/list/pgsql-novice/since/200707310624\">pgsql-novice</a></td>\n</tr>\n</tbody></table>\n<p>On Tue, 2007-07-31 at 09:22 +0800, Matt Arnilo S. Baluyos (Mailing<br>Lists) wrote:<br>&gt; Hello everyone,<br>&gt;<br>&gt; I would like to use PostgreSQL with the SmartyPaginate plugin of the<br>&gt; Smarty template engine.<br>&gt;<br>&gt; In the examples on the documentation, the following two queries are used:<br>&gt;<br>&gt; SELECT SQL_CALC_FOUND_ROWS * FROM mytable LIMIT X,Y<br>&gt; SELECT FOUND_ROWS() as total<br>&gt;<br>&gt; What the SQL_CALC_FOUND_ROWS does is that it allows the FOUND_ROWS()<br>&gt; function to return the total rows if the first query didn’t have the<br>&gt; LIMIT.<br>&gt;<br>SQL_CALC_FOUND_ROWS and FOUND_ROWS() are MySQL features.</p>\n<p>&gt; Is there an equivalent function in PostgreSQL for this or perhaps a<br>&gt; workaround?</p>\n<p>There is no equivalent.  Use</p>\n<p>   BEGIN;<br>   SELECT * FROM mytable OFFSET X LIMIT Y;<br>   SELECT COUNT(*) AS total FROM mytable;<br>   END;</p>\n<p>(To ensure consistent results, both queries should be done in a single<br>transaction.)</p>\n<p>If you are repeating the query multiple times for separate pages, it<br>would be more efficient to do the COUNT() selection first and not repeat<br>it for each page.  You could use a cursor to go back and forth through<br>the results while doing the query only once.</p>\n<p>--<br>Oliver Elphick                                          olly(at)lfix(dot)co(dot)uk<br>Isle of Wight                              <a href=\"http://www.lfix.co.uk/oliver\">http://www.lfix.co.uk/oliver</a><br>GPG: 1024D/A54310EA  92C8 39E7 280E 3631 3F0E  1EC0 5664 7A2F A543 10EA<br>                 ========================================<br>   Do you want to know God?   <a href=\"http://www.lfix.co.uk/knowing_god.html\">http://www.lfix.co.uk/knowing_god.html</a></p>\n<p>--<br>This message has been scanned for viruses and<br>dangerous content by MailScanner, and is<br>believed to be clean.</p>\n<h3 id=\"In-response-to\"><a href=\"#In-response-to\" class=\"headerlink\" title=\"In response to\"></a>In response to</h3><ul>\n<li><a href=\"https://www.postgresql.org/message-id/d1a6d7930707301822geda34b2i1e558ccd84ca9513%40mail.gmail.com\">SQL_CALC_FOUND_ROWS equivalent in PostgreSQL</a> at 2007-07-31 01:22:25 from Matt Arnilo S. Baluyos (Mailing Lists)</li>\n</ul>\n<h3 id=\"Responses\"><a href=\"#Responses\" class=\"headerlink\" title=\"Responses\"></a>Responses</h3><ul>\n<li><a href=\"https://www.postgresql.org/message-id/20070731143216.GA28226%40winnie.fuhr.org\">Re: SQL_CALC_FOUND_ROWS equivalent in PostgreSQL</a> at 2007-07-31 14:32:16 from Michael Fuhr</li>\n</ul>\n<h3 id=\"Browse-pgsql-novice-by-date\"><a href=\"#Browse-pgsql-novice-by-date\" class=\"headerlink\" title=\"Browse pgsql-novice by date\"></a>Browse pgsql-novice by date</h3>"},{"title":"请使用startship来进行命令行","date":"2021-08-11T05:37:49.000Z","_content":"\nstartship ：轻量级、反应迅速，可定制的高颜值终端！\n\n### 前置要求\n\n- A [Nerd Font (opens new window)](https://www.nerdfonts.com/)installed and enabled in your terminal.\n\n### [#](https://starship.rs/zh-CN/#快速安装)快速安装\n<!--more-->\n\n\n\n1. 安装 **starship** 二进制文件：\n\n   #### [#](https://starship.rs/zh-CN/#安装最新版本)安装最新版本\n\n   使用 Shell 命令：\n\n   ```sh\n   sh -c \"$(curl -fsSL https://starship.rs/install.sh)\"\n   ```\n\n   To update the Starship itself, rerun the above script. It will replace the current version without touching Starship's configuration.\n\n   #### [#](https://starship.rs/zh-CN/#通过软件包管理器安装)通过软件包管理器安装\n\n   使用 [Homebrew (opens new window)](https://brew.sh/)：\n\n   ```sh\n   brew install starship\n   ```\n\n   使用 [Scoop (opens new window)](https://scoop.sh/)：\n\n   ```powershell\n   scoop install starship\n   ```\n\n2. 将初始化脚本添加到您的 shell 的配置文件：\n\n   #### [#](https://starship.rs/zh-CN/#bash)Bash\n\n   在 `~/.bashhrc` 的最后，添加以下内容：\n\n   ```sh\n   # ~/.bashrc\n   \n   eval \"$(starship init bash)\"\n   ```\n\n   #### [#](https://starship.rs/zh-CN/#fish)Fish\n\n   在 `~/.config/fish/config.fish` 的最后，添加以下内容：\n\n   ```sh\n   # ~/.config/fish/config.fish\n   \n   starship init fish | source\n   ```\n\n   #### [#](https://starship.rs/zh-CN/#zsh)Zsh\n\n   在 `~/.zshrc` 的最后，添加以下内容：\n\n   ```sh\n   # ~/.zshrc\n   \n   eval \"$(starship init zsh)\"\n   ```\n\n遇到的问题：\n\n在git环境下报：\n\n[WARN] - (starship::utils): Executing command \"git\" timed out.\n\n解决办法，引入配置文件\n\n您需要创建配置文件 `~/.config/starship.toml` 以供 Starship 使用。\n\n```sh\nmkdir -p ~/.config && touch ~/.config/starship.toml\n```\n\nStarship 的所有配置都在此 [TOML (opens new window)](https://github.com/toml-lang/toml)配置文件中完成：\n\n```toml\n# Inserts a blank line between shell prompts\nadd_newline = true\n\n# Replace the \"❯\" symbol in the prompt with \"➜\"\n[character]                            # The name of the module we are configuring is \"character\"\nsuccess_symbol = \"[➜](bold green)\"     # The \"success_symbol\" segment is being set to \"➜\" with the color \"bold green\"\n\n# Disable the package module, hiding it from the prompt completely\n[package]\ndisabled = true\n```\n\n添加command_timeout=10000即可。\n\n","source":"_posts/请使用startship来进行命令行.md","raw":"---\ntitle: 请使用startship来进行命令行\ndate: 2021-08-11 13:37:49\ntags:\n---\n\nstartship ：轻量级、反应迅速，可定制的高颜值终端！\n\n### 前置要求\n\n- A [Nerd Font (opens new window)](https://www.nerdfonts.com/)installed and enabled in your terminal.\n\n### [#](https://starship.rs/zh-CN/#快速安装)快速安装\n<!--more-->\n\n\n\n1. 安装 **starship** 二进制文件：\n\n   #### [#](https://starship.rs/zh-CN/#安装最新版本)安装最新版本\n\n   使用 Shell 命令：\n\n   ```sh\n   sh -c \"$(curl -fsSL https://starship.rs/install.sh)\"\n   ```\n\n   To update the Starship itself, rerun the above script. It will replace the current version without touching Starship's configuration.\n\n   #### [#](https://starship.rs/zh-CN/#通过软件包管理器安装)通过软件包管理器安装\n\n   使用 [Homebrew (opens new window)](https://brew.sh/)：\n\n   ```sh\n   brew install starship\n   ```\n\n   使用 [Scoop (opens new window)](https://scoop.sh/)：\n\n   ```powershell\n   scoop install starship\n   ```\n\n2. 将初始化脚本添加到您的 shell 的配置文件：\n\n   #### [#](https://starship.rs/zh-CN/#bash)Bash\n\n   在 `~/.bashhrc` 的最后，添加以下内容：\n\n   ```sh\n   # ~/.bashrc\n   \n   eval \"$(starship init bash)\"\n   ```\n\n   #### [#](https://starship.rs/zh-CN/#fish)Fish\n\n   在 `~/.config/fish/config.fish` 的最后，添加以下内容：\n\n   ```sh\n   # ~/.config/fish/config.fish\n   \n   starship init fish | source\n   ```\n\n   #### [#](https://starship.rs/zh-CN/#zsh)Zsh\n\n   在 `~/.zshrc` 的最后，添加以下内容：\n\n   ```sh\n   # ~/.zshrc\n   \n   eval \"$(starship init zsh)\"\n   ```\n\n遇到的问题：\n\n在git环境下报：\n\n[WARN] - (starship::utils): Executing command \"git\" timed out.\n\n解决办法，引入配置文件\n\n您需要创建配置文件 `~/.config/starship.toml` 以供 Starship 使用。\n\n```sh\nmkdir -p ~/.config && touch ~/.config/starship.toml\n```\n\nStarship 的所有配置都在此 [TOML (opens new window)](https://github.com/toml-lang/toml)配置文件中完成：\n\n```toml\n# Inserts a blank line between shell prompts\nadd_newline = true\n\n# Replace the \"❯\" symbol in the prompt with \"➜\"\n[character]                            # The name of the module we are configuring is \"character\"\nsuccess_symbol = \"[➜](bold green)\"     # The \"success_symbol\" segment is being set to \"➜\" with the color \"bold green\"\n\n# Disable the package module, hiding it from the prompt completely\n[package]\ndisabled = true\n```\n\n添加command_timeout=10000即可。\n\n","slug":"请使用startship来进行命令行","published":1,"updated":"2021-08-23T00:38:38.760Z","_id":"cks9o6oci000e0pv9bqv18nci","comments":1,"layout":"post","photos":[],"link":"","content":"<p>startship ：轻量级、反应迅速，可定制的高颜值终端！</p>\n<h3 id=\"前置要求\"><a href=\"#前置要求\" class=\"headerlink\" title=\"前置要求\"></a>前置要求</h3><ul>\n<li>A <a href=\"https://www.nerdfonts.com/\">Nerd Font (opens new window)</a>installed and enabled in your terminal.</li>\n</ul>\n<h3 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"#快速安装\"></a><a href=\"https://starship.rs/zh-CN/#%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85\">#</a>快速安装</h3><span id=\"more\"></span>\n\n\n\n<ol>\n<li><p>安装 <strong>starship</strong> 二进制文件：</p>\n<h4 id=\"安装最新版本\"><a href=\"#安装最新版本\" class=\"headerlink\" title=\"#安装最新版本\"></a><a href=\"https://starship.rs/zh-CN/#%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC\">#</a>安装最新版本</h4><p>使用 Shell 命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://starship.rs/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>To update the Starship itself, rerun the above script. It will replace the current version without touching Starship’s configuration.</p>\n<h4 id=\"通过软件包管理器安装\"><a href=\"#通过软件包管理器安装\" class=\"headerlink\" title=\"#通过软件包管理器安装\"></a><a href=\"https://starship.rs/zh-CN/#%E9%80%9A%E8%BF%87%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E5%AE%89%E8%A3%85\">#</a>通过软件包管理器安装</h4><p>使用 <a href=\"https://brew.sh/\">Homebrew (opens new window)</a>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install starship</span><br></pre></td></tr></table></figure>\n\n<p>使用 <a href=\"https://scoop.sh/\">Scoop (opens new window)</a>：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop install starship</span><br></pre></td></tr></table></figure></li>\n<li><p>将初始化脚本添加到您的 shell 的配置文件：</p>\n<h4 id=\"Bash\"><a href=\"#Bash\" class=\"headerlink\" title=\"#Bash\"></a><a href=\"https://starship.rs/zh-CN/#bash\">#</a>Bash</h4><p>在 <code>~/.bashhrc</code> 的最后，添加以下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.bashrc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(starship init bash)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fish\"><a href=\"#Fish\" class=\"headerlink\" title=\"#Fish\"></a><a href=\"https://starship.rs/zh-CN/#fish\">#</a>Fish</h4><p>在 <code>~/.config/fish/config.fish</code> 的最后，添加以下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.config/fish/config.fish</span></span><br><span class=\"line\"></span><br><span class=\"line\">starship init fish | <span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Zsh\"><a href=\"#Zsh\" class=\"headerlink\" title=\"#Zsh\"></a><a href=\"https://starship.rs/zh-CN/#zsh\">#</a>Zsh</h4><p>在 <code>~/.zshrc</code> 的最后，添加以下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.zshrc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(starship init zsh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>遇到的问题：</p>\n<p>在git环境下报：</p>\n<p>[WARN] - (starship::utils): Executing command “git” timed out.</p>\n<p>解决办法，引入配置文件</p>\n<p>您需要创建配置文件 <code>~/.config/starship.toml</code> 以供 Starship 使用。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/.config &amp;&amp; touch ~/.config/starship.toml</span><br></pre></td></tr></table></figure>\n\n<p>Starship 的所有配置都在此 <a href=\"https://github.com/toml-lang/toml\">TOML (opens new window)</a>配置文件中完成：</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Inserts a blank line between shell prompts</span></span><br><span class=\"line\"><span class=\"attr\">add_newline</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Replace the &quot;❯&quot; symbol in the prompt with &quot;➜&quot;</span></span><br><span class=\"line\"><span class=\"section\">[character]</span>                            <span class=\"comment\"># The name of the module we are configuring is &quot;character&quot;</span></span><br><span class=\"line\"><span class=\"attr\">success_symbol</span> = <span class=\"string\">&quot;[➜](bold green)&quot;</span>     <span class=\"comment\"># The &quot;success_symbol&quot; segment is being set to &quot;➜&quot; with the color &quot;bold green&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable the package module, hiding it from the prompt completely</span></span><br><span class=\"line\"><span class=\"section\">[package]</span></span><br><span class=\"line\"><span class=\"attr\">disabled</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>添加command_timeout=10000即可。</p>\n","site":{"data":{}},"excerpt":"<p>startship ：轻量级、反应迅速，可定制的高颜值终端！</p>\n<h3 id=\"前置要求\"><a href=\"#前置要求\" class=\"headerlink\" title=\"前置要求\"></a>前置要求</h3><ul>\n<li>A <a href=\"https://www.nerdfonts.com/\">Nerd Font (opens new window)</a>installed and enabled in your terminal.</li>\n</ul>\n<h3 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"#快速安装\"></a><a href=\"https://starship.rs/zh-CN/#%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85\">#</a>快速安装</h3>","more":"<ol>\n<li><p>安装 <strong>starship</strong> 二进制文件：</p>\n<h4 id=\"安装最新版本\"><a href=\"#安装最新版本\" class=\"headerlink\" title=\"#安装最新版本\"></a><a href=\"https://starship.rs/zh-CN/#%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC\">#</a>安装最新版本</h4><p>使用 Shell 命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://starship.rs/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>To update the Starship itself, rerun the above script. It will replace the current version without touching Starship’s configuration.</p>\n<h4 id=\"通过软件包管理器安装\"><a href=\"#通过软件包管理器安装\" class=\"headerlink\" title=\"#通过软件包管理器安装\"></a><a href=\"https://starship.rs/zh-CN/#%E9%80%9A%E8%BF%87%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E5%AE%89%E8%A3%85\">#</a>通过软件包管理器安装</h4><p>使用 <a href=\"https://brew.sh/\">Homebrew (opens new window)</a>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install starship</span><br></pre></td></tr></table></figure>\n\n<p>使用 <a href=\"https://scoop.sh/\">Scoop (opens new window)</a>：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop install starship</span><br></pre></td></tr></table></figure></li>\n<li><p>将初始化脚本添加到您的 shell 的配置文件：</p>\n<h4 id=\"Bash\"><a href=\"#Bash\" class=\"headerlink\" title=\"#Bash\"></a><a href=\"https://starship.rs/zh-CN/#bash\">#</a>Bash</h4><p>在 <code>~/.bashhrc</code> 的最后，添加以下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.bashrc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(starship init bash)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fish\"><a href=\"#Fish\" class=\"headerlink\" title=\"#Fish\"></a><a href=\"https://starship.rs/zh-CN/#fish\">#</a>Fish</h4><p>在 <code>~/.config/fish/config.fish</code> 的最后，添加以下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.config/fish/config.fish</span></span><br><span class=\"line\"></span><br><span class=\"line\">starship init fish | <span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Zsh\"><a href=\"#Zsh\" class=\"headerlink\" title=\"#Zsh\"></a><a href=\"https://starship.rs/zh-CN/#zsh\">#</a>Zsh</h4><p>在 <code>~/.zshrc</code> 的最后，添加以下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.zshrc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(starship init zsh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>遇到的问题：</p>\n<p>在git环境下报：</p>\n<p>[WARN] - (starship::utils): Executing command “git” timed out.</p>\n<p>解决办法，引入配置文件</p>\n<p>您需要创建配置文件 <code>~/.config/starship.toml</code> 以供 Starship 使用。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/.config &amp;&amp; touch ~/.config/starship.toml</span><br></pre></td></tr></table></figure>\n\n<p>Starship 的所有配置都在此 <a href=\"https://github.com/toml-lang/toml\">TOML (opens new window)</a>配置文件中完成：</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Inserts a blank line between shell prompts</span></span><br><span class=\"line\"><span class=\"attr\">add_newline</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Replace the &quot;❯&quot; symbol in the prompt with &quot;➜&quot;</span></span><br><span class=\"line\"><span class=\"section\">[character]</span>                            <span class=\"comment\"># The name of the module we are configuring is &quot;character&quot;</span></span><br><span class=\"line\"><span class=\"attr\">success_symbol</span> = <span class=\"string\">&quot;[➜](bold green)&quot;</span>     <span class=\"comment\"># The &quot;success_symbol&quot; segment is being set to &quot;➜&quot; with the color &quot;bold green&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable the package module, hiding it from the prompt completely</span></span><br><span class=\"line\"><span class=\"section\">[package]</span></span><br><span class=\"line\"><span class=\"attr\">disabled</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>添加command_timeout=10000即可。</p>"},{"title":"Git-子模块","date":"2021-08-17T06:20:24.000Z","_content":"\n[官方指南](https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)\n\n-   添加子模块\n-   初始化并更新子模块\n\n默认情况下，子模块会将子项目放到当前工作目录下的一个与仓库同名的目录中，本例中是 repository-sub-one、repository-sub-two. 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。\n<!--more-->\n\n\n\n```\ngit submodule add git@gitee.com:yangzhaoyunfei/repository-sub-one.git\ngit submodule add git@gitee.com:yangzhaoyunfei/repository-sub-two.git\n# 或\ngit submodule add git@gitee.com:yangzhaoyunfei/repository-sub-two.git path/to/dir\n```\n\n.gitmodules 文件。 该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：\n\n\n\n```\n[submodule \"repository-sub-two\"]\npath = repository-sub-two\nurl = git@gitee.com:yangzhaoyunfei/repository-sub-two.git\n[submodule \"repository-sub-one\"]\npath = repository-sub-one\nurl = git@gitee.com:yangzhaoyunfei/repository-sub-one.git\n```\n\nGit 子模块允许你**将一个 Git 仓库作为另一个 Git 仓库的子目录**。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。\n\n当你不在子模块那个目录中时，Git 并不会跟踪它的内容， 而是将它看作子模块仓库中的某个具体的提交。\n\n\n\n```\n# 默认会包含该子模块目录，但其中还没有任何文件.\ngit clone git@gitee.com:yangzhaoyunfei/repository-main\n\n# 在子模块目录中初始化出本地git配置文件\ncd ./repository-main/repository-sub-one\ngit submodule init\n\n# 检出子模块文件\n# 从该项目中抓取所有数据并检出到在父项目中列出的合适的提交(子模块自身有多个提交,但检出到父模块的只能有一个提交)\ngit submodule update\n\n# 或者init update 可以合并为一个操作\ngit submodule update --init\n```\n\n\n\n```\n# 会自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块\ngit clone --recurse-submodules git@gitee.com:yangzhaoyunfei/repository-main\n```\n\n\n\n```\n# 在子模块目录操作, 主项目中的子模块提交记录会更新\ngit fetch && git merge origin/master\n```\n\n\n```\n# 在主项目中操作, Git 将会自动进入**所有子模块**然后抓取并更新\n# 默认master分支\ngit submodule update --remote\n\n# 或(只更新某个模块)\ngit submodule update --remote repository-sub-one\n```\n\n在主模块中拉取更改只会获取子模块的提交记录,不会检出子模块更新后的文件.所以需要手动更新,\n\n\n\n```\n# 为防止在主模块中添加了新子模块,所以需要添加--init\ngit submodule update --init --recursive\n```\n\n与在普通仓库上工作无异。\n\n子模块与父模块使用不同的远程仓库，互不影响,以下命令均在父模块根目录下操作\n\n\n```\n# 添加\ngit submodule add -b master https://github.com/username/reponame.git dirname\n# 或\ngit submodule add -b master git@github.com:username/reponame.git dirname\n\n# 移除\ngit rm submodule-name\n```\n\nRemoving a submodule is useful when it is no longer required. The steps below outline the removal of a submodule.\n\nRemove Submodule Delete the section referring to the submodule from the .gitmodules file Stage the changes via git add .gitmodules Delete the relevant section of the submodule from .git/config. Run git rm –cached path\\_to\\_submodule (no trailing slash) Run rm -rf .git/modules/path\\_to\\_submodule Commit the changes with \\`\\`\\`git commit -m “Removed submodule \" Delete the now untracked submodule files rm -rf path\\_to\\_submodule\n\n-   [移除子模块](https://forum.freecodecamp.org/t/how-to-remove-a-submodule-in-git/13228)\n","source":"_posts/Git-子模块.md","raw":"---\ntitle: Git-子模块\ndate: 2021-08-17 14:20:24\ntags:\n- git\ncategories: \n- tools\n---\n\n[官方指南](https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)\n\n-   添加子模块\n-   初始化并更新子模块\n\n默认情况下，子模块会将子项目放到当前工作目录下的一个与仓库同名的目录中，本例中是 repository-sub-one、repository-sub-two. 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。\n<!--more-->\n\n\n\n```\ngit submodule add git@gitee.com:yangzhaoyunfei/repository-sub-one.git\ngit submodule add git@gitee.com:yangzhaoyunfei/repository-sub-two.git\n# 或\ngit submodule add git@gitee.com:yangzhaoyunfei/repository-sub-two.git path/to/dir\n```\n\n.gitmodules 文件。 该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：\n\n\n\n```\n[submodule \"repository-sub-two\"]\npath = repository-sub-two\nurl = git@gitee.com:yangzhaoyunfei/repository-sub-two.git\n[submodule \"repository-sub-one\"]\npath = repository-sub-one\nurl = git@gitee.com:yangzhaoyunfei/repository-sub-one.git\n```\n\nGit 子模块允许你**将一个 Git 仓库作为另一个 Git 仓库的子目录**。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。\n\n当你不在子模块那个目录中时，Git 并不会跟踪它的内容， 而是将它看作子模块仓库中的某个具体的提交。\n\n\n\n```\n# 默认会包含该子模块目录，但其中还没有任何文件.\ngit clone git@gitee.com:yangzhaoyunfei/repository-main\n\n# 在子模块目录中初始化出本地git配置文件\ncd ./repository-main/repository-sub-one\ngit submodule init\n\n# 检出子模块文件\n# 从该项目中抓取所有数据并检出到在父项目中列出的合适的提交(子模块自身有多个提交,但检出到父模块的只能有一个提交)\ngit submodule update\n\n# 或者init update 可以合并为一个操作\ngit submodule update --init\n```\n\n\n\n```\n# 会自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块\ngit clone --recurse-submodules git@gitee.com:yangzhaoyunfei/repository-main\n```\n\n\n\n```\n# 在子模块目录操作, 主项目中的子模块提交记录会更新\ngit fetch && git merge origin/master\n```\n\n\n```\n# 在主项目中操作, Git 将会自动进入**所有子模块**然后抓取并更新\n# 默认master分支\ngit submodule update --remote\n\n# 或(只更新某个模块)\ngit submodule update --remote repository-sub-one\n```\n\n在主模块中拉取更改只会获取子模块的提交记录,不会检出子模块更新后的文件.所以需要手动更新,\n\n\n\n```\n# 为防止在主模块中添加了新子模块,所以需要添加--init\ngit submodule update --init --recursive\n```\n\n与在普通仓库上工作无异。\n\n子模块与父模块使用不同的远程仓库，互不影响,以下命令均在父模块根目录下操作\n\n\n```\n# 添加\ngit submodule add -b master https://github.com/username/reponame.git dirname\n# 或\ngit submodule add -b master git@github.com:username/reponame.git dirname\n\n# 移除\ngit rm submodule-name\n```\n\nRemoving a submodule is useful when it is no longer required. The steps below outline the removal of a submodule.\n\nRemove Submodule Delete the section referring to the submodule from the .gitmodules file Stage the changes via git add .gitmodules Delete the relevant section of the submodule from .git/config. Run git rm –cached path\\_to\\_submodule (no trailing slash) Run rm -rf .git/modules/path\\_to\\_submodule Commit the changes with \\`\\`\\`git commit -m “Removed submodule \" Delete the now untracked submodule files rm -rf path\\_to\\_submodule\n\n-   [移除子模块](https://forum.freecodecamp.org/t/how-to-remove-a-submodule-in-git/13228)\n","slug":"Git-子模块","published":1,"updated":"2021-08-23T00:38:38.685Z","_id":"cksfr6gyz0000iqv9f2w780jt","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\">官方指南</a></p>\n<ul>\n<li>  添加子模块</li>\n<li>  初始化并更新子模块</li>\n</ul>\n<p>默认情况下，子模块会将子项目放到当前工作目录下的一个与仓库同名的目录中，本例中是 repository-sub-one、repository-sub-two. 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。</p>\n<span id=\"more\"></span>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add git@gitee.com:yangzhaoyunfei/repository-sub-one.git</span><br><span class=\"line\">git submodule add git@gitee.com:yangzhaoyunfei/repository-sub-two.git</span><br><span class=\"line\"># 或</span><br><span class=\"line\">git submodule add git@gitee.com:yangzhaoyunfei/repository-sub-two.git path/to/dir</span><br></pre></td></tr></table></figure>\n\n<p>.gitmodules 文件。 该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;repository-sub-two&quot;]</span><br><span class=\"line\">path = repository-sub-two</span><br><span class=\"line\">url = git@gitee.com:yangzhaoyunfei/repository-sub-two.git</span><br><span class=\"line\">[submodule &quot;repository-sub-one&quot;]</span><br><span class=\"line\">path = repository-sub-one</span><br><span class=\"line\">url = git@gitee.com:yangzhaoyunfei/repository-sub-one.git</span><br></pre></td></tr></table></figure>\n\n<p>Git 子模块允许你<strong>将一个 Git 仓库作为另一个 Git 仓库的子目录</strong>。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p>\n<p>当你不在子模块那个目录中时，Git 并不会跟踪它的内容， 而是将它看作子模块仓库中的某个具体的提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认会包含该子模块目录，但其中还没有任何文件.</span><br><span class=\"line\">git clone git@gitee.com:yangzhaoyunfei/repository-main</span><br><span class=\"line\"></span><br><span class=\"line\"># 在子模块目录中初始化出本地git配置文件</span><br><span class=\"line\">cd ./repository-main/repository-sub-one</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\"></span><br><span class=\"line\"># 检出子模块文件</span><br><span class=\"line\"># 从该项目中抓取所有数据并检出到在父项目中列出的合适的提交(子模块自身有多个提交,但检出到父模块的只能有一个提交)</span><br><span class=\"line\">git submodule update</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者init update 可以合并为一个操作</span><br><span class=\"line\">git submodule update --init</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 会自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块</span><br><span class=\"line\">git clone --recurse-submodules git@gitee.com:yangzhaoyunfei/repository-main</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在子模块目录操作, 主项目中的子模块提交记录会更新</span><br><span class=\"line\">git fetch &amp;&amp; git merge origin/master</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在主项目中操作, Git 将会自动进入**所有子模块**然后抓取并更新</span><br><span class=\"line\"># 默认master分支</span><br><span class=\"line\">git submodule update --remote</span><br><span class=\"line\"></span><br><span class=\"line\"># 或(只更新某个模块)</span><br><span class=\"line\">git submodule update --remote repository-sub-one</span><br></pre></td></tr></table></figure>\n\n<p>在主模块中拉取更改只会获取子模块的提交记录,不会检出子模块更新后的文件.所以需要手动更新,</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 为防止在主模块中添加了新子模块,所以需要添加--init</span><br><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n\n<p>与在普通仓库上工作无异。</p>\n<p>子模块与父模块使用不同的远程仓库，互不影响,以下命令均在父模块根目录下操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加</span><br><span class=\"line\">git submodule add -b master https://github.com/username/reponame.git dirname</span><br><span class=\"line\"># 或</span><br><span class=\"line\">git submodule add -b master git@github.com:username/reponame.git dirname</span><br><span class=\"line\"></span><br><span class=\"line\"># 移除</span><br><span class=\"line\">git rm submodule-name</span><br></pre></td></tr></table></figure>\n\n<p>Removing a submodule is useful when it is no longer required. The steps below outline the removal of a submodule.</p>\n<p>Remove Submodule Delete the section referring to the submodule from the .gitmodules file Stage the changes via git add .gitmodules Delete the relevant section of the submodule from .git/config. Run git rm –cached path_to_submodule (no trailing slash) Run rm -rf .git/modules/path_to_submodule Commit the changes with ```git commit -m “Removed submodule “ Delete the now untracked submodule files rm -rf path_to_submodule</p>\n<ul>\n<li>  <a href=\"https://forum.freecodecamp.org/t/how-to-remove-a-submodule-in-git/13228\">移除子模块</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\">官方指南</a></p>\n<ul>\n<li>  添加子模块</li>\n<li>  初始化并更新子模块</li>\n</ul>\n<p>默认情况下，子模块会将子项目放到当前工作目录下的一个与仓库同名的目录中，本例中是 repository-sub-one、repository-sub-two. 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add git@gitee.com:yangzhaoyunfei/repository-sub-one.git</span><br><span class=\"line\">git submodule add git@gitee.com:yangzhaoyunfei/repository-sub-two.git</span><br><span class=\"line\"># 或</span><br><span class=\"line\">git submodule add git@gitee.com:yangzhaoyunfei/repository-sub-two.git path/to/dir</span><br></pre></td></tr></table></figure>\n\n<p>.gitmodules 文件。 该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;repository-sub-two&quot;]</span><br><span class=\"line\">path = repository-sub-two</span><br><span class=\"line\">url = git@gitee.com:yangzhaoyunfei/repository-sub-two.git</span><br><span class=\"line\">[submodule &quot;repository-sub-one&quot;]</span><br><span class=\"line\">path = repository-sub-one</span><br><span class=\"line\">url = git@gitee.com:yangzhaoyunfei/repository-sub-one.git</span><br></pre></td></tr></table></figure>\n\n<p>Git 子模块允许你<strong>将一个 Git 仓库作为另一个 Git 仓库的子目录</strong>。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p>\n<p>当你不在子模块那个目录中时，Git 并不会跟踪它的内容， 而是将它看作子模块仓库中的某个具体的提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认会包含该子模块目录，但其中还没有任何文件.</span><br><span class=\"line\">git clone git@gitee.com:yangzhaoyunfei/repository-main</span><br><span class=\"line\"></span><br><span class=\"line\"># 在子模块目录中初始化出本地git配置文件</span><br><span class=\"line\">cd ./repository-main/repository-sub-one</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\"></span><br><span class=\"line\"># 检出子模块文件</span><br><span class=\"line\"># 从该项目中抓取所有数据并检出到在父项目中列出的合适的提交(子模块自身有多个提交,但检出到父模块的只能有一个提交)</span><br><span class=\"line\">git submodule update</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者init update 可以合并为一个操作</span><br><span class=\"line\">git submodule update --init</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 会自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块</span><br><span class=\"line\">git clone --recurse-submodules git@gitee.com:yangzhaoyunfei/repository-main</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在子模块目录操作, 主项目中的子模块提交记录会更新</span><br><span class=\"line\">git fetch &amp;&amp; git merge origin/master</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在主项目中操作, Git 将会自动进入**所有子模块**然后抓取并更新</span><br><span class=\"line\"># 默认master分支</span><br><span class=\"line\">git submodule update --remote</span><br><span class=\"line\"></span><br><span class=\"line\"># 或(只更新某个模块)</span><br><span class=\"line\">git submodule update --remote repository-sub-one</span><br></pre></td></tr></table></figure>\n\n<p>在主模块中拉取更改只会获取子模块的提交记录,不会检出子模块更新后的文件.所以需要手动更新,</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 为防止在主模块中添加了新子模块,所以需要添加--init</span><br><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n\n<p>与在普通仓库上工作无异。</p>\n<p>子模块与父模块使用不同的远程仓库，互不影响,以下命令均在父模块根目录下操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加</span><br><span class=\"line\">git submodule add -b master https://github.com/username/reponame.git dirname</span><br><span class=\"line\"># 或</span><br><span class=\"line\">git submodule add -b master git@github.com:username/reponame.git dirname</span><br><span class=\"line\"></span><br><span class=\"line\"># 移除</span><br><span class=\"line\">git rm submodule-name</span><br></pre></td></tr></table></figure>\n\n<p>Removing a submodule is useful when it is no longer required. The steps below outline the removal of a submodule.</p>\n<p>Remove Submodule Delete the section referring to the submodule from the .gitmodules file Stage the changes via git add .gitmodules Delete the relevant section of the submodule from .git/config. Run git rm –cached path_to_submodule (no trailing slash) Run rm -rf .git/modules/path_to_submodule Commit the changes with ```git commit -m “Removed submodule “ Delete the now untracked submodule files rm -rf path_to_submodule</p>\n<ul>\n<li>  <a href=\"https://forum.freecodecamp.org/t/how-to-remove-a-submodule-in-git/13228\">移除子模块</a></li>\n</ul>"},{"title":"Hadoop-CDH发行版--集群离线部署教程","date":"2021-08-17T05:47:18.000Z","_content":"\n为贴近真实环境,本文档假设以下条件:\n\n1.集群中各机器无法连接外网,只能通过内网向集群发送文件  \n2.集群内各机器间网络互通  \n3.操作者拥有集群内各机器的root权限\n<!--more-->\n\n1.  jdk(这一步放到了脚本中) 从上面配置好的apache上下载,集群每个主机必须安装受支持的统一版本,Cloudera强烈建议安装在`/usr/java/jdk-version`目录下,这样可以自动检测到它\n\n1.挂载iso,并复制文件供http挂载(vm虚拟机上该方案有可能因inode不足而失败,提供备选方案)\n\n```\n# 复制到大量文件到某一目录下可能出现inode节点数不足或空间不足的现象,需要预先处理\n\nmkdir -p /data/iso\nmount -o loop -t iso9660 /home/yangzhaoyunfei/CentOS-7-x86_64-Everything-1804.iso  /data/iso\nmkdir -p /data/centos7\ncp -rf  /data/iso/*  /data/centos7\numount /data/iso/\n\n# vw虚拟机上使用如下脚本\nmkdir -p /data/iso\nmount /dev/cdrom  /data/iso\nmkdir -p /data/centos7\ncp -rf  /data/iso/*  /data/centos7\numount /data/iso/\n\n```\n\n2.制作并只启用本地yum源(因为无法连接外网,所以必须使用本地源)\n\n```\ncd /etc/yum.repos.d/\nll\n# 备份原repo文件\nfor file in `ls` ;do sudo mv $file $file\"bak\";done\nll\n\ncat>/etc/yum.repos.d/local.repo<<EOF\n[local] \nname=local\nbaseurl=file:///data/centos7\nenabled=1\ngpgcheck=0 \nEOF\n\n#验证\nyum clean all\nyum makecache\n\n```\n\n> 前置要求: local repo\n\n```\n# 禁用防火墙\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\n# 禁用selinux\nsed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config\nreboot\n\nyum install -y httpd\nsystemctl enable httpd\nsystemctl start httpd\n# 软链接挂载\ncd /var/www/html && ll\nln -s /data/centos7/ /var/www/html/centos7 && ll\n\n```\n\n访问浏览器[http\\_yum](http://192.168.181.128/centos7)测试\n\n```\n# 如果无法访问,检查firewall,检查selinux,正确配置后重启\n# service httpd restart\n```\n\n> 上一步制作的local.repo可以启用,统一采用http.repo\n\n```\nmv /etc/yum.repos.d/local.repo /etc/yum.repos.d/local.repobak && ll /etc/yum.repos.d/\n\ncat>/etc/yum.repos.d/http.repo<<EOF\n[http] \nname=http\nbaseurl=http://192.168.181.128/centos7\nenabled=1\ngpgcheck=0 \nEOF\n\nll /etc/yum.repos.d/\nyum clean all\nyum makecache\n\n```\n\n将下载的jdk也挂载到http中\n\n```\nmkdir -p /data/softwares/ \n# 将jdk,jdbc驱动等放到这个文件夹中\nln -s /data/softwares/ /var/www/html/softwares\n\n```\n\n访问浏览器[http\\_softwares](http://192.168.181.128/softwares)验证\n\n1.下载Tarball\n\n```\nCloudera Manager 5: https://archive.cloudera.com/cm5/repo-as-tarball/\n```\n\n2.解压缩tarball，将文件移动到Web服务器目录，然后修改文件权限\n\n```\ntar xvfz cm5.15.1-centos7.tar.gz\nsudo mv cm /var/www/html\nsudo chmod -R ugo+rX /var/www/html/cm\n\n```\n\n访问[cm\\_rpms](http://192.168.181.128/cm)验证是否正确设置 3.创建repo文件\n\n```\ncat>/etc/yum.repos.d/cloudera-repo.repo<<EOF\n[cloudera-repo]\nname=cloudera-repo\nbaseurl=http://192.168.181.128/cm/5\nenabled=1\ngpgcheck=0\nEOF\n\nyum clean all\nyum makecache\n\n```\n\n1.先从cloudera官网下载对应系统平台的 \\*\\*\\*parcel and manifest.json and sha1 文件\n\n```\nCDH 5: Impala, Kudu, Spark 1, and Search are included in the CDH parcel.\n    CDH - https://archive.cloudera.com/cdh5/parcels/\n    Accumulo - - https://archive.cloudera.com/accumulo-c5/parcels/\n    GPL Extras - https://archive.cloudera.com/gplextras5/parcels/\nCloudera Distribution of Apache Spark 2 for CDH 5:\n    The exact parcel name is dependent on the OS. You can find all the parcels at https://archive.cloudera.com/spark2/parcels/.\nSqoop Connectors:\n    https://archive.cloudera.com/sqoop-connectors/parcels/\n```\n\n1.移动`.parcel, .sha1 and manifest.json`文件到web server目录,然后修改权限\n\n```\nsudo mkdir -p /var/www/html/cloudera-parcels/cdh5/5.15.1/\nsudo mv *.parcel* /var/www/html/cloudera-parcels/cdh5/5.15.1/\nsudo mv manifest.json /var/www/html/cloudera-parcels/cdh5/5.15.1/\nsudo chmod -R ugo+rX /var/www/html/cloudera-parcels/cdh5/5.15.1/\n\n```\n\n> 5.15.1 替换为你的版本 (如 5.14.0)\n\n访问[cdh\\_parcels](http://192.168.181.128/cloudera-parcels/cdh5/5.15.1)\n\n```\n#服务端(master)\nyum install -y chrony\n\nvi /etc/chrony.conf\n# 注释以下四个外网时间同步服务器,并添加master机器为时间同步服务器\n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\nserver 192.168.181.128 iburst\n\n# 重启服务\nsystemctl restart chronyd\nchronyc -a makestep\nchronyc sources -v\n\n```\n\ncat»/etc/sysctl.conf«EOF ####################### 自行添加 ########################### #关闭ipv6 net.ipv6.conf.all.disable\\_ipv6 = 1 net.ipv6.conf.default.disable\\_ipv6 = 1 ####################### 自行添加 ########################### EOF\n\n````\n\n## 安装expect, 执行脚本(仅master)\n```bash\n# 上传脚本及hostname文件\nyum -y install expect\n\nchmod +x InstallCDH_SSH.sh\n\n./InstallCDH_SSH.sh root root hostsname.txt \n\n````\n\n> 前置要求: 配置cm,cdh的repo(rpm)库\n\n```\nsudo yum install -y cloudera-manager-daemons cloudera-manager-server\n\n```\n\n> 为Cloudera Software安装和配置MariaDB  \n> cloudera建议的配置文件在centos7.5自带5.x mariadb下无法启动,可能需要只适合10.x版本\n\n```\n# 安装,开机自启,启动\nsudo yum install -y mariadb-server\nsudo systemctl enable mariadb\nsudo systemctl start mariadb\n\n# 停止数据库服务,mariadb配置文件`/etc/my.cnf`,修改内容为\n>这个配置文件不适用与centos7自带5.x mariadb\nsudo systemctl stop mariadb\nmv /etc/my.cnf /etc/my.cnfbak\n############################################# 这个配置文件不适用与5.x mariadb\ncat>/etc/my.cnf<<EOF\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\ntransaction-isolation = READ-COMMITTED\n# Disabling symbolic-links is recommended to prevent assorted security risks;\n# to do so, uncomment this line:\nsymbolic-links = 0\n# Settings user and group are ignored when systemd is used.\n# If you need to run mysqld under a different user or group,\n# customize your systemd unit file for mariadb according to the\n# instructions in http://fedoraproject.org/wiki/Systemd\n\nkey_buffer = 16M\nkey_buffer_size = 32M\nmax_allowed_packet = 32M\nthread_stack = 256K\nthread_cache_size = 64\nquery_cache_limit = 8M\nquery_cache_size = 64M\nquery_cache_type = 1\n\nmax_connections = 550\n#expire_logs_days = 10\n#max_binlog_size = 100M\n\n#log_bin should be on a disk with enough free space.\n#Replace '/var/lib/mysql/mysql_binary_log' with an appropriate path for your\n#system and chown the specified folder to the mysql user.\nlog_bin=/var/lib/mysql/mysql_binary_log\n\n#In later versions of MariaDB, if you enable the binary log and do not set\n#a server_id, MariaDB will not start. The server_id must be unique within\n#the replicating group.\nserver_id=1\n\nbinlog_format = mixed\n\nread_buffer_size = 2M\nread_rnd_buffer_size = 16M\nsort_buffer_size = 8M\njoin_buffer_size = 8M\n\n# InnoDB settings\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit  = 2\ninnodb_log_buffer_size = 64M\ninnodb_buffer_pool_size = 4G\ninnodb_thread_concurrency = 8\ninnodb_flush_method = O_DIRECT\ninnodb_log_file_size = 512M\n\n[mysqld_safe]\nlog-error=/var/log/mariadb/mariadb.log\npid-file=/var/run/mariadb/mariadb.pid\n\n#\n# include all files from the config directory\n#\n!includedir /etc/my.cnf.d\nEOF\n\n# 修改完配置后重新启动数据库\nsudo systemctl start mariadb\n\n# 运行脚本 为MariaDB进行初始化,包括设置root密码和一些选项:(^mariadbtxzpw01&FR)\nsudo /usr/bin/mysql_secure_installation\n\n```\n\n```\n# 输出如下\n[...]\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n[...]\nSet root password? [Y/n] Y\nNew password:\nRe-enter new password:\n[...]\nRemove anonymous users? [Y/n] Y\n[...]\nDisallow root login remotely? [Y/n] N\n[...]\nRemove test database and access to it [Y/n] Y\n[...]\nReload privilege tables now? [Y/n] Y\n[...]\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n\n```\n\n```\n# 前置要求: 将下载的Connector上传到http的softwares目录中\ncurl http://192.168.181.128/softwares/mysql-connector-java-5.1.47.tar.gz -O --progress \ntar zxvf mysql-connector-java-5.1.47.tar.gz\nsudo mkdir -p /usr/share/java/\ncd mysql-connector-java-5.1.47\nsudo cp mysql-connector-java-5.1.47-bin.jar /usr/share/java/mysql-connector-java.jar\n\n```\n\n```\n# 登陆mariadb\nmysql -u root -p\n# 输入密码(^mariadbtxzpw01&FR)\n```\n\n```\n# 执行以下sql,完成创建数据库,创建用户,授予权限\nCREATE DATABASE scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON scm.* TO 'scm'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE amon DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON amon.* TO 'amon'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON rman.* TO 'rman'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON hue.* TO 'hue'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON metastore.* TO 'hive'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON sentry.* TO 'sentry'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON nav.* TO 'nav'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON navms.* TO 'navms'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON oozie.* TO 'oozie'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nSHOW DATABASES;\n# 查看所有用户\nSELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;\n# 可以查看某用户的权限信息\nSHOW GRANTS FOR 'scm'@'%';\n\n```\n\n> 前置要求: 安装cms,创建cms数据库,mariadb与cms在同一主机上,如果不在,参考官方文档  \n> 备注: cms包含一个可以为自己创建和配置数据库的脚本scm\\_prepare\\_database.sh\n\n```\n# 对上一步创建的数据库依次运行下面的命令\n#sudo /usr/share/cmf/schema/scm_prepare_database.sh <databaseType> <databaseName> <databaseUser>\n# <databaseName>是cms要使用的数据库,其会在其中创建一些表用来保存管理数据等,如果指定-p -u选项,这回创建这个数据库\n# <databaseType>填mysql\n# <databaseUser>要创建或使用scm数据库的用户名,[创建权限的时候已经默认创建了该用户]\n\n\n# 例如,出现提示后输入scm数据库的访问密码(^cdhtxzpw01&FR)\nsudo /usr/share/cmf/schema/scm_prepare_database.sh mysql scm scm\n\n# 上一步中,如果没有创建cms数据库,则必须使用 -u -p 选项来创建cms数据库,命令如下\nsudo /usr/share/cmf/schema/scm_prepare_database.sh mysql -uroot -p\n```\n\n输出如下\n\n```\n[root@foo-1 yangzhaoyunfei]# sudo /usr/share/cmf/schema/scm_prepare_database.sh mysql scm scm\nEnter SCM password: \nJAVA_HOME=/usr/java/jdk1.8.0_162\nVerifying that we can write to /etc/cloudera-scm-server\nCreating SCM configuration file in /etc/cloudera-scm-server\nExecuting:  /usr/java/jdk1.8.0_162/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/usr/share/java/postgresql-connector-java.jar:/usr/share/cmf/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.\n[                          main] DbCommandExecutor              INFO  Successfully connected to database.\nAll done, your SCM database is configured correctly!\n```\n\n> 前置要求: 系统环境,jdk,database,connector,元数据库,配置cdh的repo(rpm)/http(parcel)库;数据库;数据库连接驱动,cms\n\n```\n# 启动cms\nsudo systemctl start cloudera-scm-server\n\n# 查看启动日志\nsudo tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log\n\n```\n\n```\n# 输入如下, 日志出现 Started Jetty server. ,启动成功\n[yangzhaoyunfei@foo-1 ~]$ sudo tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log\n2018-08-29 14:00:36,582 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Generating entities:2018-08-29T06:00:36.582Z\n2018-08-29 14:00:36,590 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Num entities:208\n2018-08-29 14:00:36,590 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Generating documents:2018-08-29T06:00:36.590Z\n2018-08-29 14:00:36,630 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Num docs:221\n2018-08-29 14:00:36,630 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Constructing repo:2018-08-29T06:00:36.630Z\n2018-08-29 14:00:37,249 INFO WebServerImpl:org.mortbay.log: jetty-6.1.26.cloudera.4\n2018-08-29 14:00:37,261 INFO WebServerImpl:org.mortbay.log: Started SelectChannelConnector@0.0.0.0:7180\n2018-08-29 14:00:37,261 INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server. #出现这句启动成功\n2018-08-29 14:00:37,356 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Finished constructing repo:2018-08-29T06:00:37.356Z\n2018-08-29 14:00:42,368 INFO ScmActive-0:com.cloudera.server.cmf.components.ScmActive: ScmActive completed successfully.\n\n```\n\n浏览器打开[安装界面](http://192.168.181.128:7180/)进行安装\n\n1.  `群集安装-->选择存储库-->选择方法`\n2.  `使用 Parcel (建议)` , `更多选项`\n3.  `删除所有远程 Parcel 存储库 URL`\n4.  添加本地parcel库地址 `http://192.168.181.128/cloudera-parcels/cdh5/5.15.1/`\n5.  其他 `Spark 2,Sqoop Connectors,cdh5` 等组件设置等同.\n6.  选择您要安装在主机上的 Cloudera Manager Agent 特定发行版,`自定义存储库`\n7.  agent存储库地址为上面配置过的cm repo地址 `http://192.168.181.128/cm/5/`\n8.  因为配置过`ssh互信`,`提供 SSH 登录凭据` 选择 `接受相同私钥,把master的私钥下载后选中`\n\n解决检查出的问题后继续\n\n```\nCloudera 建议将 /proc/sys/vm/swappiness 设置为最大值 10。当前设置为 60。使用 sysctl 命令在运行时更改该设置并编辑 /etc/sysctl.conf，以在重启后保存该设置。您可以继续进行安装，但 Cloudera Manager 可能会报告您的主机由于交换而运行状况不良。以下主机将受到影响： \n 查看详细信息\nfoo-[1-3].mycluster.com\n已启用透明大页面压缩，可能会导致重大性能问题。请运行\"echo never > /sys/kernel/mm/transparent_hugepage/defrag\"和\"echo never > /sys/kernel/mm/transparent_hugepage/enabled\"以禁用此设置，然后将同一命令添加到 /etc/rc.local 等初始化脚本中，以便在系统重启时予以设置。以下主机将受到影响: \n 查看详细信息\nfoo-[1-3].mycluster.com\n```\n\n查看前面相关的数据库设置\n\n保持默认即可\n\n等待部署完成\n\n1.  修改最大线程数IO等限制(暂不进行)\n\n```\nvi /etc/systemd/system.conf\n# 修改如下内容\nDefaultLimitCORE=infinity\nDefaultLimitNOFILE=100000\nDefaultLimitNPROC=100000\n\n```\n\n2.  关闭THP(脚本中已有)\n\n```\n# 检查状态\ncat /sys/kernel/mm/transparent_hugepage/defrag\n# output: [always] madvise never\ncat /sys/kernel/mm/transparent_hugepage/enabled\n# output: [always] madvise never\n\n# 修改启动脚本,每次开机都禁用它们\ncat>>/etc/rc.d/rc.local<<EOF\n####################### 自行添加 ###########################\nif test -f /sys/kernel/mm/transparent_hugepage/enabled; then\necho never > /sys/kernel/mm/transparent_hugepage/enabled\nfi\nif test -f /sys/kernel/mm/transparent_hugepage/defrag; then\necho never > /sys/kernel/mm/transparent_hugepage/defrag\nfi\n####################### 自行添加 ###########################\nEOF\n\nchmod +x /etc/rc.d/rc.local\nreboot\n```\n\n1.  内核参数优化(暂不进行,应该由专业运维人员来做)\n\n```\n# 添加以下内容\ncat>>/etc/sysctl.conf<<EOF\n####################### 自行添加 ###########################\n#关闭ipv6\nnet.ipv6.conf.all.disable_ipv6 = 1\nnet.ipv6.conf.default.disable_ipv6 = 1\n# 避免放大攻击\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\n# 开启恶意icmp错误消息保护\nnet.ipv4.icmp_ignore_bogus_error_responses = 1\n#关闭路由转发\nnet.ipv4.ip_forward = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n#开启反向路径过滤\nnet.ipv4.conf.all.rp_filter = 1\nnet.ipv4.conf.default.rp_filter = 1\n#处理无源路由的包\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\n#关闭sysrq功能\nkernel.sysrq = 0\n#core文件名中添加pid作为扩展名\nkernel.core_uses_pid = 1\n# 开启SYN洪水攻击保护\nnet.ipv4.tcp_syncookies = 1\n#修改消息队列长度\nkernel.msgmnb = 65536\nkernel.msgmax = 65536\n#设置最大内存共享段大小bytes\nkernel.shmmax = 68719476736\nkernel.shmall = 4294967296\n#timewait的数量，默认180000\nnet.ipv4.tcp_max_tw_buckets = 6000\nnet.ipv4.tcp_sack = 1\nnet.ipv4.tcp_window_scaling = 1\nnet.ipv4.tcp_rmem = 4096 87380 4194304\nnet.ipv4.tcp_wmem = 4096 16384 4194304\nnet.core.wmem_default = 8388608\nnet.core.rmem_default = 8388608\nnet.core.rmem_max = 16777216\nnet.core.wmem_max = 16777216\n#每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目\nnet.core.netdev_max_backlog = 262144\n#限制仅仅是为了防止简单的DoS 攻击\nnet.ipv4.tcp_max_orphans = 3276800\n#未收到客户端确认信息的连接请求的最大值\nnet.ipv4.tcp_max_syn_backlog = 262144\nnet.ipv4.tcp_timestamps = 0\n#内核放弃建立连接之前发送SYNACK 包的数量\nnet.ipv4.tcp_synack_retries = 1\n#内核放弃建立连接之前发送SYN 包的数量\nnet.ipv4.tcp_syn_retries = 1\n#启用timewait 快速回收\nnet.ipv4.tcp_tw_recycle = 1\n#开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_mem = 94500000 915000000 927000000\nnet.ipv4.tcp_fin_timeout = 1\n#当keepalive 起用的时候，TCP 发送keepalive 消息的频度。缺省是2 小时\nnet.ipv4.tcp_keepalive_time = 30\n#允许系统打开的端口范围\nnet.ipv4.ip_local_port_range = 1024 65000\n#修改防火墙表大小，默认65536\n\n#系统级别的能够打开的文件句柄的数量,ulimit 是进程级别的\nfs.file-max = 265535\n#系统允许的最大跟踪连接条目。在/etc/sysctl.conf文件中增加此属性，并运行>/sbin/sysctl.conf –p\nnet.ipv4.ip_conntrack_max=265535\n\n# 确保无人能修改路由表\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.all.secure_redirects = 0\nnet.ipv4.conf.default.secure_redirects = 0\nnet.nf_conntrack_max = 6553600\n\n# 如果在sysctl -p的时候报error: 'net.ipv4.ip_conntrack_max' is an unknown key ,通过以下命令向内核中加入模块修正：\nmodprobe ip_conntrack\necho \"modprobe ip_conntrack\" >> /etc/rc.local\n# net.netfilter.nf_conntrack_max=655350\n# net.netfilter.nf_conntrack_tcp_timeout_established=1200\n####################### 自行添加 ###########################\nEOF\n\n# 从/etc/sysctl.conf加载内核参数\nsysctl -p\n\n```\n\n1.Disable the tuned Service(暂不进行)\n\n```\nsystemctl start tuned\ntuned-adm off\ntuned-adm list\n# 输出中应该包含如下字样\n# No current active profile\nsystemctl stop tuned\nsystemctl disable tuned\n\n```\n\n8.系统优化 ALL 禁用交换分区 sysctl -w vm.swappiness=0 禁用透明大页面 echo never > /sys/kernel/mm/transparent\\_hugepage/defrag\n\n1.  chrony时间同步存在问题,显示不可达\n2.  linux系统还有几项可以优化\n3.  脚本还需加入上面的修改项\n\nInstallCDH\\_SSH.sh 文件内容如下:\n\n```\n#!/bin/bash\n\n# 该脚本的参数有三个,username,password,hostnames-file:\n# hostnames-file 内容示例,如:\n# 192.168.181.128=foo-1.mycluster.com\n# 192.168.181.129=foo-2.mycluster.com\n# 192.168.181.130=foo-3.mycluster.com\n# 192.168.181.131=foo-4.mycluster.com\n# 192.168.181.132=foo-5.mycluster.com\n# 192.168.181.133=foo-6.mycluster.com\n# 192.168.181.134=foo-7.mycluster.com\n# 192.168.181.135=foo-8.mycluster.com\n# 192.168.181.136=foo-9.mycluster.com\n# \n# 该脚本执行前需要按说明文档中先完成前置工作:\n# 1.createhostfile()中,\n# 2.createssh()中,\n# 3.createssh()中,repo文件,jdk文件需要放到第一台机器的httpd服务器中,供其所有机器下载\n\nif [ $# -ne 3 ]; then # 如果传入的参数不是3个\n    echo \"Usage:\"\n    echo \"$0  linuxuser linuxpasswd hostsFile\"\n    exit 1\nfi\n\n# 获取参数\nlinuxuser=$1\nlinuxpasswd=$2\nhostfilename=$3\n\n# 创建/etc/hosts文件,这个函数仅操作第一台机器\ncreatehostfile()\n{\n# 读取变量1个字符的变量,并赋给answer\nread -n 1 -p \"需要重置host文件吗？(y/n)?\" answer\n\ncase $answer in\nY | y)\n        local hostfile=$1 # 局部变量\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 01 开始生成 /etc/hosts 文件\"\n        cat /dev/null>/etc/hosts # 清空hosts文件\n        echo \"127.0.0.1 localhost\"\n        for line in `cat $hostfile`\n        do \n            ip=`echo $line|awk -F'=' '{print $1}'`\n            hostname=`echo $line|awk -F'=' '{print $2}'`\n            echo \"$ip $hostname\">>/etc/hosts # 追加\n        done  \n        echo \"127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\">>/etc/hosts\n        echo \"::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\">>/etc/hosts\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 01 生成 /etc/hosts 文件完成，请查看\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" =========================\"\n        cat /etc/hosts\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" =========================\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\"\"\n        read -n1 -p \"请确认是否正确？(y/n)?\" answer\n        case $answer in\n        Y | y)\n              echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 01 生成 /etc/hosts 文件完成\"\n              echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\" \n              ;;\n        N | n)\n              echo \"请确认传入参数文件是否正确\"\n              exit 1\n              ;;\n        *)\n              echo \"error choice\"\n              exit 1\n              ;;\n        esac  \n      ;;\nN | n)\n      echo \"跳过\" \n      ;; \nesac  \n\n\n\n}\n\n\n\n# 免密登陆,这里只需在一个主机上信任自身,然后拷贝到其他机器上,即可完成整个集群的互信\ncreatessh()\n{\n\nread -n 1 -p \"需要重置SSH吗？(y/n)?\" answer\n\ncase $answer in\nY | y)\n               \n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 02 开始自动化建立SSH互信\"\n        local DEST_USER=$1\n        local PASSWORD=$2\n        local HOSTS_FILE=$3\n        if [ $# -ne 3 ]; then\n            echo \"Usage:\"\n            echo \"$0 remoteUser remotePassword hostsFile\"\n            exit 1\n        fi\n\n        SSH_DIR=~/.ssh\n        SCRIPT_PREFIX=./tmp\n        # 1. prepare  directory .ssh\n        mkdir $SSH_DIR\n        chmod 700 $SSH_DIR\n\n        # 2. generat ssh key\n        TMP_SCRIPT=$SCRIPT_PREFIX.sh # ./tmp.sh\n        echo  \"#!/usr/bin/expect\">$TMP_SCRIPT\n        echo  \"spawn ssh-keygen -b 1024 -t rsa\">>$TMP_SCRIPT\n        echo  \"expect *key*\">>$TMP_SCRIPT # 检测到'key'\n        echo  \"send \\r\">>$TMP_SCRIPT\n        if [ -f $SSH_DIR/id_rsa ]; then # 检测文件是否为普通文件\n            echo  \"expect *verwrite*\">>$TMP_SCRIPT\n            echo  \"send y\\r\">>$TMP_SCRIPT\n        fi\n        echo  \"expect *passphrase*\">>$TMP_SCRIPT\n        echo  \"send \\r\">>$TMP_SCRIPT\n        echo  \"expect *again:\">>$TMP_SCRIPT\n        echo  \"send \\r\">>$TMP_SCRIPT\n        echo  \"interact\">>$TMP_SCRIPT\n\n        chmod +x $TMP_SCRIPT\n\n        /usr/bin/expect $TMP_SCRIPT\n        rm $TMP_SCRIPT\n\n        ################### 3. generat file authorized_keys\n        cat $SSH_DIR/id_rsa.pub>>$SSH_DIR/authorized_keys # 将本机id加到信任列表\n\n        ################### 4. chmod 600 for file authorized_keys\n        chmod 600 $SSH_DIR/authorized_keys\n        echo \"===========================\"\n        \n        ################### 5. copy all files to other hosts\n        for ip in `cat $HOSTS_FILE|awk -F'=' '{print $2}'`  # 对每个主机搜索\n        do\n            if [ \"x$ip\" != \"x\" ]; then # ip不为空\n                echo -------------------------\n                TMP_SCRIPT=${SCRIPT_PREFIX}.$ip.sh\n                # check known_hosts\n                val=`ssh-keygen -F $ip` # 在 know_hosts 中 find 指定 hostname\n                if [ \"x$val\" == \"x\" ]; then # 没有搜索到\n                    echo \"$ip not in $SSH_DIR/known_hosts, need to add\"\n                    val=`ssh-keyscan $ip 2>/dev/null` # 扫描该主机中的公钥,标错输出到空\n                    if [ \"x$val\" == \"x\" ]; then # 如果没有扫描到\n                        echo \"ssh-keyscan $ip failed!\"\n                    else\n                        echo $val>>$SSH_DIR/known_hosts # 将扫描到的公钥添加到\n                    fi\n                fi\n                echo \"copy $SSH_DIR to $ip\" \n                        \n                echo  \"#!/usr/bin/expect\">$TMP_SCRIPT\n                echo  \"spawn scp -r  $SSH_DIR $DEST_USER@$ip:~/\">>$TMP_SCRIPT\n                echo  \"expect *assword*\">>$TMP_SCRIPT\n                echo  \"send $PASSWORD\\r\">>$TMP_SCRIPT\n                echo  \"interact\">>$TMP_SCRIPT # 执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了\n                \n                chmod +x $TMP_SCRIPT\n            \n                /usr/bin/expect $TMP_SCRIPT\n                rm $TMP_SCRIPT\n                echo \"copy done.\"                \n            fi\n        done\n\n        echo done.\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 02 建立SSH互信完成，开始验证互信情况\"\n\n        for ip in `cat $HOSTS_FILE|awk -F'=' '{print $2}'`\n        do\n           localDATE=`date +%Y%m%d`\n           REMOTEDATE=`ssh ${ip} date +%Y%m%d`\n           if [ ${localDATE}==${REMOTEDATE} ];then\n                echo \"主机与远程IP：${ip} 连通测试成功\"\n           else\n                echo \"主机与远程IP：${ip} 连通测试失败\"\n           fi\n        done\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 02 验证互信情况完成\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\"\n        read -n 1 -p \"请确认互信情况是否正确？(y/n)?\" answer\n        case $answer in\n        Y | y)\n              echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 02 建立SSH互信完成，验证互信成功\"\n              echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\"\n              ;;\n        N | n)\n              echo \"请定位问题\"\n              exit 1\n              ;;\n        *)\n              echo \"error choice\"\n              exit 1\n              ;;\n        esac \n      ;;\nN | n)\n      echo \"跳过SSH互信\" \n      ;; \nesac  \n\n \n\n}\n\n\n# 设置主机名\nchangeHostName()\n{\n\n\nread -n 1 -p \"需要对每台主机名进行配置吗？(y/n)?\" answer\n\n\ncase $answer in\nY | y)\n\n    local HOSTS_FILE=$1\n    echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\"\n    echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 03 开始修改主机名并分发host文件\"\n    cat>>/etc/profile<<EOF\n################################ 自行添加 ###########################\n\nexport JAVA_HOME=/usr/java/jdk1.8.0_162\nPATH=\\$PATH:\\$JAVA_HOME/bin/;\nexport PATH\n\n\n################################ 自行添加 ###########################\nEOF\n    for line in `cat $HOSTS_FILE`\n    do \n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \n        ip=`echo $line|awk -F'=' '{print $1}'` # =为分隔符\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" 开始处理 $ip\"\n        hostname=`echo $line|awk -F'=' '{print $2}'`\n        originhostsname=`ssh ${ip} hostnamectl --static`  \n        if [ ! ${hostname} == ${originhostsname} ];then\n            echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip 需要修改Host\" \n            ssh $ip \"hostnamectl set-hostname $hostname\"\n            echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip 修改完毕\"\n        else\n            echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip 不需要修改Hostname\" \n        fi\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始发送hosts文件\"\n        scp /etc/hosts root@$hostname:/etc/\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始发送repo文件\" \n        ######################## 这个http的repo需要实现准备好 #########################################\n        scp /etc/yum.repos.d/http.repo  root@$hostname:/etc/yum.repos.d \n        files=\"/etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-CR.repo /etc/yum.repos.d/CentOS-Debuginfo.repo /etc/yum.repos.d/CentOS-fasttrack.repo /etc/yum.repos.d/CentOS-Media.repo /etc/yum.repos.d/CentOS-Sources.repo /etc/yum.repos.d/CentOS-Vault.repo\"\n        for file in $files ;do ssh $ip \"mv $file ${file}bak\" ;done # 备份原有repo\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始处理yum\"\n        ssh $ip \"yum clean all\"\n        ssh $ip \"yum makecache\"\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始处理SELINUX\"\n        ssh $ip \"setenforce 0\"\n        ssh $ip \"sed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config\" # 将文本中的en..替换成dis..\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始处理防火墙\"\n        ssh $ip \"systemctl stop firewalld\"\n        ssh $ip \"systemctl disable firewalld\"\n        ssh $ip \"systemctl status firewalld\"\n        \n        ############################ 这里是不是跟 这里换用了chrony,而不是老的ntp ##################################\n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始处理NTP时钟同步\" \n        ssh $ip \"yum install -y chrony\"\n        scp /etc/chrony.conf root@$hostname:/etc/\n        ssh $ip \"systemctl restart chronyd\"\n        ssh $ip \"chronyc sources\"\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始下载JDK包并解压\" \n        # 从预先配置好的apache下载jdk,这里官方文档没有谈到环境变量的问题,但我们应该配置上环境变量,因为其他组件,或者一些自己安装的软件会使用java\n        ssh $ip \"mkdir -p /usr/java/\"\n        ssh $ip \"rm -rf  /usr/java/jdk-8u162*\"\n        ssh $ip \"curl http://192.168.181.128/softwares/jdk-8u162-linux-x64.tar.gz -o /opt/jdk-8u162-linux-x64.tar.gz --progress\"\n        ssh $ip \"tar -zxf /opt/jdk-8u162-linux-x64.tar.gz -C /usr/java/\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始卸载OPENJDK\"\n         # mini install 没有jdk,但不同的centos版本,要写在的软件包不同,下面列举的是centos7.4de1\n        ssh $ip \"rpm -e --nodeps java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64\" # 强制卸载\n        ssh $ip \"rpm -e --nodeps java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64\"\n        ssh $ip \"rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.141-2.6.10.5.el7.x86_64\"\n        ssh $ip \"rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.131-11.b12.el7.x86_64\" \n        ssh $ip \"rpm -e --nodeps tzdata-java-2017b-1.el7.noarch\" \n        ssh $ip \"rpm -e --nodeps icedtea-web-1.6.2-4.el7.x86_64\" \n        #ssh $ip \"yum -y install jline*\" # ?????????????????\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始发送环境变量\" # 如果要使用个命令,先要设置jdk环境变量\n        scp /etc/profile root@$ip:/etc/\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始发送环境生效并检查jdk版本信息\"\n        ssh $ip \"source /etc/profile && java -version\" \n        #echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 检查JDK版本信息\"\n        #ssh $ip \"java -version\"\n        \n        ############################################## 参数调优部分结束 ####################################################\n        \n        #echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 修改系统限制\"  \n        #scp /etc/systemd/system.conf root@$ip:/etc/systemd/\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 关闭THP\" \n        scp /etc/rc.d/rc.local root@$ip:/etc/rc.d/\n        ssh $ip \"chmod +x /etc/rc.d/rc.local\"\n        ssh $ip \"echo never > /sys/kernel/mm/transparent_hugepage/enabled\"\n        ssh $ip \"echo never > /sys/kernel/mm/transparent_hugepage/defrag\"\n        \n        echo -e \"\\n\\n\\n\"\n        echo echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 关闭交换分区\" \n        ssh $ip \"swapoff -a\" \n        \n        echo -e \"\\n\\n\\n\"\n        echo echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 关闭tuned调优\" \n        ssh $ip \"systemctl start tuned\" \n        ssh $ip \"tuned-adm off\" \n        ssh $ip \"tuned-adm list\"\n        ssh $ip \"systemctl stop tuned\"\n        ssh $ip \"systemctl disable tuned\"\n        \n        echo -e \"\\n\\n\\n\"\n        echo echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始优化内核参数\"\n        scp /etc/sysctl.conf root@$ip:/etc/\n        ssh $ip \"sysctl -p\"\n        #ssh $ip \"ulimit –n 265535\"\n        \n        ############################################# 参数调优部分结束 ##################################################\n        \n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 处理结束\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \n        \n        \n    done    \n    echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 03 修改hostname成功\" \n\n    echo `date \"+%Y-%m-%d %H:%M:%S\"`\"================================================\"  \n     ;;\nN | n)\n      echo \"跳过对每台主机进行配置\" \n      ;; \nesac \n\n\n}\n\n\nmain()\n{\n\ncreatehostfile $hostfilename\ncreatessh $linuxuser $linuxpasswd $hostfilename\nchangeHostName $hostfilename\necho -e \"\\n\\n\\n处理完成\\n\\n\\n\"\n}\n\n\nmain\n\n\n```\n\nhostsname.txt 内容如下:\n\n```\n192.168.181.128=foo-1.mycluster.com\n192.168.181.129=foo-2.mycluster.com\n192.168.181.130=foo-3.mycluster.com\n```\n","source":"_posts/Hadoop-CDH发行版-集群离线部署教程.md","raw":"---\ntitle: Hadoop-CDH发行版--集群离线部署教程\ndate: 2021-08-17 13:47:18\ntags:\n- shell\ncategories: \n- bigdata\n---\n\n为贴近真实环境,本文档假设以下条件:\n\n1.集群中各机器无法连接外网,只能通过内网向集群发送文件  \n2.集群内各机器间网络互通  \n3.操作者拥有集群内各机器的root权限\n<!--more-->\n\n1.  jdk(这一步放到了脚本中) 从上面配置好的apache上下载,集群每个主机必须安装受支持的统一版本,Cloudera强烈建议安装在`/usr/java/jdk-version`目录下,这样可以自动检测到它\n\n1.挂载iso,并复制文件供http挂载(vm虚拟机上该方案有可能因inode不足而失败,提供备选方案)\n\n```\n# 复制到大量文件到某一目录下可能出现inode节点数不足或空间不足的现象,需要预先处理\n\nmkdir -p /data/iso\nmount -o loop -t iso9660 /home/yangzhaoyunfei/CentOS-7-x86_64-Everything-1804.iso  /data/iso\nmkdir -p /data/centos7\ncp -rf  /data/iso/*  /data/centos7\numount /data/iso/\n\n# vw虚拟机上使用如下脚本\nmkdir -p /data/iso\nmount /dev/cdrom  /data/iso\nmkdir -p /data/centos7\ncp -rf  /data/iso/*  /data/centos7\numount /data/iso/\n\n```\n\n2.制作并只启用本地yum源(因为无法连接外网,所以必须使用本地源)\n\n```\ncd /etc/yum.repos.d/\nll\n# 备份原repo文件\nfor file in `ls` ;do sudo mv $file $file\"bak\";done\nll\n\ncat>/etc/yum.repos.d/local.repo<<EOF\n[local] \nname=local\nbaseurl=file:///data/centos7\nenabled=1\ngpgcheck=0 \nEOF\n\n#验证\nyum clean all\nyum makecache\n\n```\n\n> 前置要求: local repo\n\n```\n# 禁用防火墙\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\n# 禁用selinux\nsed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config\nreboot\n\nyum install -y httpd\nsystemctl enable httpd\nsystemctl start httpd\n# 软链接挂载\ncd /var/www/html && ll\nln -s /data/centos7/ /var/www/html/centos7 && ll\n\n```\n\n访问浏览器[http\\_yum](http://192.168.181.128/centos7)测试\n\n```\n# 如果无法访问,检查firewall,检查selinux,正确配置后重启\n# service httpd restart\n```\n\n> 上一步制作的local.repo可以启用,统一采用http.repo\n\n```\nmv /etc/yum.repos.d/local.repo /etc/yum.repos.d/local.repobak && ll /etc/yum.repos.d/\n\ncat>/etc/yum.repos.d/http.repo<<EOF\n[http] \nname=http\nbaseurl=http://192.168.181.128/centos7\nenabled=1\ngpgcheck=0 \nEOF\n\nll /etc/yum.repos.d/\nyum clean all\nyum makecache\n\n```\n\n将下载的jdk也挂载到http中\n\n```\nmkdir -p /data/softwares/ \n# 将jdk,jdbc驱动等放到这个文件夹中\nln -s /data/softwares/ /var/www/html/softwares\n\n```\n\n访问浏览器[http\\_softwares](http://192.168.181.128/softwares)验证\n\n1.下载Tarball\n\n```\nCloudera Manager 5: https://archive.cloudera.com/cm5/repo-as-tarball/\n```\n\n2.解压缩tarball，将文件移动到Web服务器目录，然后修改文件权限\n\n```\ntar xvfz cm5.15.1-centos7.tar.gz\nsudo mv cm /var/www/html\nsudo chmod -R ugo+rX /var/www/html/cm\n\n```\n\n访问[cm\\_rpms](http://192.168.181.128/cm)验证是否正确设置 3.创建repo文件\n\n```\ncat>/etc/yum.repos.d/cloudera-repo.repo<<EOF\n[cloudera-repo]\nname=cloudera-repo\nbaseurl=http://192.168.181.128/cm/5\nenabled=1\ngpgcheck=0\nEOF\n\nyum clean all\nyum makecache\n\n```\n\n1.先从cloudera官网下载对应系统平台的 \\*\\*\\*parcel and manifest.json and sha1 文件\n\n```\nCDH 5: Impala, Kudu, Spark 1, and Search are included in the CDH parcel.\n    CDH - https://archive.cloudera.com/cdh5/parcels/\n    Accumulo - - https://archive.cloudera.com/accumulo-c5/parcels/\n    GPL Extras - https://archive.cloudera.com/gplextras5/parcels/\nCloudera Distribution of Apache Spark 2 for CDH 5:\n    The exact parcel name is dependent on the OS. You can find all the parcels at https://archive.cloudera.com/spark2/parcels/.\nSqoop Connectors:\n    https://archive.cloudera.com/sqoop-connectors/parcels/\n```\n\n1.移动`.parcel, .sha1 and manifest.json`文件到web server目录,然后修改权限\n\n```\nsudo mkdir -p /var/www/html/cloudera-parcels/cdh5/5.15.1/\nsudo mv *.parcel* /var/www/html/cloudera-parcels/cdh5/5.15.1/\nsudo mv manifest.json /var/www/html/cloudera-parcels/cdh5/5.15.1/\nsudo chmod -R ugo+rX /var/www/html/cloudera-parcels/cdh5/5.15.1/\n\n```\n\n> 5.15.1 替换为你的版本 (如 5.14.0)\n\n访问[cdh\\_parcels](http://192.168.181.128/cloudera-parcels/cdh5/5.15.1)\n\n```\n#服务端(master)\nyum install -y chrony\n\nvi /etc/chrony.conf\n# 注释以下四个外网时间同步服务器,并添加master机器为时间同步服务器\n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\nserver 192.168.181.128 iburst\n\n# 重启服务\nsystemctl restart chronyd\nchronyc -a makestep\nchronyc sources -v\n\n```\n\ncat»/etc/sysctl.conf«EOF ####################### 自行添加 ########################### #关闭ipv6 net.ipv6.conf.all.disable\\_ipv6 = 1 net.ipv6.conf.default.disable\\_ipv6 = 1 ####################### 自行添加 ########################### EOF\n\n````\n\n## 安装expect, 执行脚本(仅master)\n```bash\n# 上传脚本及hostname文件\nyum -y install expect\n\nchmod +x InstallCDH_SSH.sh\n\n./InstallCDH_SSH.sh root root hostsname.txt \n\n````\n\n> 前置要求: 配置cm,cdh的repo(rpm)库\n\n```\nsudo yum install -y cloudera-manager-daemons cloudera-manager-server\n\n```\n\n> 为Cloudera Software安装和配置MariaDB  \n> cloudera建议的配置文件在centos7.5自带5.x mariadb下无法启动,可能需要只适合10.x版本\n\n```\n# 安装,开机自启,启动\nsudo yum install -y mariadb-server\nsudo systemctl enable mariadb\nsudo systemctl start mariadb\n\n# 停止数据库服务,mariadb配置文件`/etc/my.cnf`,修改内容为\n>这个配置文件不适用与centos7自带5.x mariadb\nsudo systemctl stop mariadb\nmv /etc/my.cnf /etc/my.cnfbak\n############################################# 这个配置文件不适用与5.x mariadb\ncat>/etc/my.cnf<<EOF\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\ntransaction-isolation = READ-COMMITTED\n# Disabling symbolic-links is recommended to prevent assorted security risks;\n# to do so, uncomment this line:\nsymbolic-links = 0\n# Settings user and group are ignored when systemd is used.\n# If you need to run mysqld under a different user or group,\n# customize your systemd unit file for mariadb according to the\n# instructions in http://fedoraproject.org/wiki/Systemd\n\nkey_buffer = 16M\nkey_buffer_size = 32M\nmax_allowed_packet = 32M\nthread_stack = 256K\nthread_cache_size = 64\nquery_cache_limit = 8M\nquery_cache_size = 64M\nquery_cache_type = 1\n\nmax_connections = 550\n#expire_logs_days = 10\n#max_binlog_size = 100M\n\n#log_bin should be on a disk with enough free space.\n#Replace '/var/lib/mysql/mysql_binary_log' with an appropriate path for your\n#system and chown the specified folder to the mysql user.\nlog_bin=/var/lib/mysql/mysql_binary_log\n\n#In later versions of MariaDB, if you enable the binary log and do not set\n#a server_id, MariaDB will not start. The server_id must be unique within\n#the replicating group.\nserver_id=1\n\nbinlog_format = mixed\n\nread_buffer_size = 2M\nread_rnd_buffer_size = 16M\nsort_buffer_size = 8M\njoin_buffer_size = 8M\n\n# InnoDB settings\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit  = 2\ninnodb_log_buffer_size = 64M\ninnodb_buffer_pool_size = 4G\ninnodb_thread_concurrency = 8\ninnodb_flush_method = O_DIRECT\ninnodb_log_file_size = 512M\n\n[mysqld_safe]\nlog-error=/var/log/mariadb/mariadb.log\npid-file=/var/run/mariadb/mariadb.pid\n\n#\n# include all files from the config directory\n#\n!includedir /etc/my.cnf.d\nEOF\n\n# 修改完配置后重新启动数据库\nsudo systemctl start mariadb\n\n# 运行脚本 为MariaDB进行初始化,包括设置root密码和一些选项:(^mariadbtxzpw01&FR)\nsudo /usr/bin/mysql_secure_installation\n\n```\n\n```\n# 输出如下\n[...]\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n[...]\nSet root password? [Y/n] Y\nNew password:\nRe-enter new password:\n[...]\nRemove anonymous users? [Y/n] Y\n[...]\nDisallow root login remotely? [Y/n] N\n[...]\nRemove test database and access to it [Y/n] Y\n[...]\nReload privilege tables now? [Y/n] Y\n[...]\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n\n```\n\n```\n# 前置要求: 将下载的Connector上传到http的softwares目录中\ncurl http://192.168.181.128/softwares/mysql-connector-java-5.1.47.tar.gz -O --progress \ntar zxvf mysql-connector-java-5.1.47.tar.gz\nsudo mkdir -p /usr/share/java/\ncd mysql-connector-java-5.1.47\nsudo cp mysql-connector-java-5.1.47-bin.jar /usr/share/java/mysql-connector-java.jar\n\n```\n\n```\n# 登陆mariadb\nmysql -u root -p\n# 输入密码(^mariadbtxzpw01&FR)\n```\n\n```\n# 执行以下sql,完成创建数据库,创建用户,授予权限\nCREATE DATABASE scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON scm.* TO 'scm'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE amon DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON amon.* TO 'amon'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON rman.* TO 'rman'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON hue.* TO 'hue'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON metastore.* TO 'hive'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON sentry.* TO 'sentry'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON nav.* TO 'nav'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON navms.* TO 'navms'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nCREATE DATABASE oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nGRANT ALL ON oozie.* TO 'oozie'@'%' IDENTIFIED BY '^cdhtxzpw01&FR';\nSHOW DATABASES;\n# 查看所有用户\nSELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;\n# 可以查看某用户的权限信息\nSHOW GRANTS FOR 'scm'@'%';\n\n```\n\n> 前置要求: 安装cms,创建cms数据库,mariadb与cms在同一主机上,如果不在,参考官方文档  \n> 备注: cms包含一个可以为自己创建和配置数据库的脚本scm\\_prepare\\_database.sh\n\n```\n# 对上一步创建的数据库依次运行下面的命令\n#sudo /usr/share/cmf/schema/scm_prepare_database.sh <databaseType> <databaseName> <databaseUser>\n# <databaseName>是cms要使用的数据库,其会在其中创建一些表用来保存管理数据等,如果指定-p -u选项,这回创建这个数据库\n# <databaseType>填mysql\n# <databaseUser>要创建或使用scm数据库的用户名,[创建权限的时候已经默认创建了该用户]\n\n\n# 例如,出现提示后输入scm数据库的访问密码(^cdhtxzpw01&FR)\nsudo /usr/share/cmf/schema/scm_prepare_database.sh mysql scm scm\n\n# 上一步中,如果没有创建cms数据库,则必须使用 -u -p 选项来创建cms数据库,命令如下\nsudo /usr/share/cmf/schema/scm_prepare_database.sh mysql -uroot -p\n```\n\n输出如下\n\n```\n[root@foo-1 yangzhaoyunfei]# sudo /usr/share/cmf/schema/scm_prepare_database.sh mysql scm scm\nEnter SCM password: \nJAVA_HOME=/usr/java/jdk1.8.0_162\nVerifying that we can write to /etc/cloudera-scm-server\nCreating SCM configuration file in /etc/cloudera-scm-server\nExecuting:  /usr/java/jdk1.8.0_162/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/usr/share/java/postgresql-connector-java.jar:/usr/share/cmf/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.\n[                          main] DbCommandExecutor              INFO  Successfully connected to database.\nAll done, your SCM database is configured correctly!\n```\n\n> 前置要求: 系统环境,jdk,database,connector,元数据库,配置cdh的repo(rpm)/http(parcel)库;数据库;数据库连接驱动,cms\n\n```\n# 启动cms\nsudo systemctl start cloudera-scm-server\n\n# 查看启动日志\nsudo tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log\n\n```\n\n```\n# 输入如下, 日志出现 Started Jetty server. ,启动成功\n[yangzhaoyunfei@foo-1 ~]$ sudo tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log\n2018-08-29 14:00:36,582 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Generating entities:2018-08-29T06:00:36.582Z\n2018-08-29 14:00:36,590 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Num entities:208\n2018-08-29 14:00:36,590 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Generating documents:2018-08-29T06:00:36.590Z\n2018-08-29 14:00:36,630 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Num docs:221\n2018-08-29 14:00:36,630 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Constructing repo:2018-08-29T06:00:36.630Z\n2018-08-29 14:00:37,249 INFO WebServerImpl:org.mortbay.log: jetty-6.1.26.cloudera.4\n2018-08-29 14:00:37,261 INFO WebServerImpl:org.mortbay.log: Started SelectChannelConnector@0.0.0.0:7180\n2018-08-29 14:00:37,261 INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server. #出现这句启动成功\n2018-08-29 14:00:37,356 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Finished constructing repo:2018-08-29T06:00:37.356Z\n2018-08-29 14:00:42,368 INFO ScmActive-0:com.cloudera.server.cmf.components.ScmActive: ScmActive completed successfully.\n\n```\n\n浏览器打开[安装界面](http://192.168.181.128:7180/)进行安装\n\n1.  `群集安装-->选择存储库-->选择方法`\n2.  `使用 Parcel (建议)` , `更多选项`\n3.  `删除所有远程 Parcel 存储库 URL`\n4.  添加本地parcel库地址 `http://192.168.181.128/cloudera-parcels/cdh5/5.15.1/`\n5.  其他 `Spark 2,Sqoop Connectors,cdh5` 等组件设置等同.\n6.  选择您要安装在主机上的 Cloudera Manager Agent 特定发行版,`自定义存储库`\n7.  agent存储库地址为上面配置过的cm repo地址 `http://192.168.181.128/cm/5/`\n8.  因为配置过`ssh互信`,`提供 SSH 登录凭据` 选择 `接受相同私钥,把master的私钥下载后选中`\n\n解决检查出的问题后继续\n\n```\nCloudera 建议将 /proc/sys/vm/swappiness 设置为最大值 10。当前设置为 60。使用 sysctl 命令在运行时更改该设置并编辑 /etc/sysctl.conf，以在重启后保存该设置。您可以继续进行安装，但 Cloudera Manager 可能会报告您的主机由于交换而运行状况不良。以下主机将受到影响： \n 查看详细信息\nfoo-[1-3].mycluster.com\n已启用透明大页面压缩，可能会导致重大性能问题。请运行\"echo never > /sys/kernel/mm/transparent_hugepage/defrag\"和\"echo never > /sys/kernel/mm/transparent_hugepage/enabled\"以禁用此设置，然后将同一命令添加到 /etc/rc.local 等初始化脚本中，以便在系统重启时予以设置。以下主机将受到影响: \n 查看详细信息\nfoo-[1-3].mycluster.com\n```\n\n查看前面相关的数据库设置\n\n保持默认即可\n\n等待部署完成\n\n1.  修改最大线程数IO等限制(暂不进行)\n\n```\nvi /etc/systemd/system.conf\n# 修改如下内容\nDefaultLimitCORE=infinity\nDefaultLimitNOFILE=100000\nDefaultLimitNPROC=100000\n\n```\n\n2.  关闭THP(脚本中已有)\n\n```\n# 检查状态\ncat /sys/kernel/mm/transparent_hugepage/defrag\n# output: [always] madvise never\ncat /sys/kernel/mm/transparent_hugepage/enabled\n# output: [always] madvise never\n\n# 修改启动脚本,每次开机都禁用它们\ncat>>/etc/rc.d/rc.local<<EOF\n####################### 自行添加 ###########################\nif test -f /sys/kernel/mm/transparent_hugepage/enabled; then\necho never > /sys/kernel/mm/transparent_hugepage/enabled\nfi\nif test -f /sys/kernel/mm/transparent_hugepage/defrag; then\necho never > /sys/kernel/mm/transparent_hugepage/defrag\nfi\n####################### 自行添加 ###########################\nEOF\n\nchmod +x /etc/rc.d/rc.local\nreboot\n```\n\n1.  内核参数优化(暂不进行,应该由专业运维人员来做)\n\n```\n# 添加以下内容\ncat>>/etc/sysctl.conf<<EOF\n####################### 自行添加 ###########################\n#关闭ipv6\nnet.ipv6.conf.all.disable_ipv6 = 1\nnet.ipv6.conf.default.disable_ipv6 = 1\n# 避免放大攻击\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\n# 开启恶意icmp错误消息保护\nnet.ipv4.icmp_ignore_bogus_error_responses = 1\n#关闭路由转发\nnet.ipv4.ip_forward = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n#开启反向路径过滤\nnet.ipv4.conf.all.rp_filter = 1\nnet.ipv4.conf.default.rp_filter = 1\n#处理无源路由的包\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\n#关闭sysrq功能\nkernel.sysrq = 0\n#core文件名中添加pid作为扩展名\nkernel.core_uses_pid = 1\n# 开启SYN洪水攻击保护\nnet.ipv4.tcp_syncookies = 1\n#修改消息队列长度\nkernel.msgmnb = 65536\nkernel.msgmax = 65536\n#设置最大内存共享段大小bytes\nkernel.shmmax = 68719476736\nkernel.shmall = 4294967296\n#timewait的数量，默认180000\nnet.ipv4.tcp_max_tw_buckets = 6000\nnet.ipv4.tcp_sack = 1\nnet.ipv4.tcp_window_scaling = 1\nnet.ipv4.tcp_rmem = 4096 87380 4194304\nnet.ipv4.tcp_wmem = 4096 16384 4194304\nnet.core.wmem_default = 8388608\nnet.core.rmem_default = 8388608\nnet.core.rmem_max = 16777216\nnet.core.wmem_max = 16777216\n#每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目\nnet.core.netdev_max_backlog = 262144\n#限制仅仅是为了防止简单的DoS 攻击\nnet.ipv4.tcp_max_orphans = 3276800\n#未收到客户端确认信息的连接请求的最大值\nnet.ipv4.tcp_max_syn_backlog = 262144\nnet.ipv4.tcp_timestamps = 0\n#内核放弃建立连接之前发送SYNACK 包的数量\nnet.ipv4.tcp_synack_retries = 1\n#内核放弃建立连接之前发送SYN 包的数量\nnet.ipv4.tcp_syn_retries = 1\n#启用timewait 快速回收\nnet.ipv4.tcp_tw_recycle = 1\n#开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_mem = 94500000 915000000 927000000\nnet.ipv4.tcp_fin_timeout = 1\n#当keepalive 起用的时候，TCP 发送keepalive 消息的频度。缺省是2 小时\nnet.ipv4.tcp_keepalive_time = 30\n#允许系统打开的端口范围\nnet.ipv4.ip_local_port_range = 1024 65000\n#修改防火墙表大小，默认65536\n\n#系统级别的能够打开的文件句柄的数量,ulimit 是进程级别的\nfs.file-max = 265535\n#系统允许的最大跟踪连接条目。在/etc/sysctl.conf文件中增加此属性，并运行>/sbin/sysctl.conf –p\nnet.ipv4.ip_conntrack_max=265535\n\n# 确保无人能修改路由表\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.all.secure_redirects = 0\nnet.ipv4.conf.default.secure_redirects = 0\nnet.nf_conntrack_max = 6553600\n\n# 如果在sysctl -p的时候报error: 'net.ipv4.ip_conntrack_max' is an unknown key ,通过以下命令向内核中加入模块修正：\nmodprobe ip_conntrack\necho \"modprobe ip_conntrack\" >> /etc/rc.local\n# net.netfilter.nf_conntrack_max=655350\n# net.netfilter.nf_conntrack_tcp_timeout_established=1200\n####################### 自行添加 ###########################\nEOF\n\n# 从/etc/sysctl.conf加载内核参数\nsysctl -p\n\n```\n\n1.Disable the tuned Service(暂不进行)\n\n```\nsystemctl start tuned\ntuned-adm off\ntuned-adm list\n# 输出中应该包含如下字样\n# No current active profile\nsystemctl stop tuned\nsystemctl disable tuned\n\n```\n\n8.系统优化 ALL 禁用交换分区 sysctl -w vm.swappiness=0 禁用透明大页面 echo never > /sys/kernel/mm/transparent\\_hugepage/defrag\n\n1.  chrony时间同步存在问题,显示不可达\n2.  linux系统还有几项可以优化\n3.  脚本还需加入上面的修改项\n\nInstallCDH\\_SSH.sh 文件内容如下:\n\n```\n#!/bin/bash\n\n# 该脚本的参数有三个,username,password,hostnames-file:\n# hostnames-file 内容示例,如:\n# 192.168.181.128=foo-1.mycluster.com\n# 192.168.181.129=foo-2.mycluster.com\n# 192.168.181.130=foo-3.mycluster.com\n# 192.168.181.131=foo-4.mycluster.com\n# 192.168.181.132=foo-5.mycluster.com\n# 192.168.181.133=foo-6.mycluster.com\n# 192.168.181.134=foo-7.mycluster.com\n# 192.168.181.135=foo-8.mycluster.com\n# 192.168.181.136=foo-9.mycluster.com\n# \n# 该脚本执行前需要按说明文档中先完成前置工作:\n# 1.createhostfile()中,\n# 2.createssh()中,\n# 3.createssh()中,repo文件,jdk文件需要放到第一台机器的httpd服务器中,供其所有机器下载\n\nif [ $# -ne 3 ]; then # 如果传入的参数不是3个\n    echo \"Usage:\"\n    echo \"$0  linuxuser linuxpasswd hostsFile\"\n    exit 1\nfi\n\n# 获取参数\nlinuxuser=$1\nlinuxpasswd=$2\nhostfilename=$3\n\n# 创建/etc/hosts文件,这个函数仅操作第一台机器\ncreatehostfile()\n{\n# 读取变量1个字符的变量,并赋给answer\nread -n 1 -p \"需要重置host文件吗？(y/n)?\" answer\n\ncase $answer in\nY | y)\n        local hostfile=$1 # 局部变量\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 01 开始生成 /etc/hosts 文件\"\n        cat /dev/null>/etc/hosts # 清空hosts文件\n        echo \"127.0.0.1 localhost\"\n        for line in `cat $hostfile`\n        do \n            ip=`echo $line|awk -F'=' '{print $1}'`\n            hostname=`echo $line|awk -F'=' '{print $2}'`\n            echo \"$ip $hostname\">>/etc/hosts # 追加\n        done  \n        echo \"127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\">>/etc/hosts\n        echo \"::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\">>/etc/hosts\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 01 生成 /etc/hosts 文件完成，请查看\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" =========================\"\n        cat /etc/hosts\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" =========================\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\"\"\n        read -n1 -p \"请确认是否正确？(y/n)?\" answer\n        case $answer in\n        Y | y)\n              echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 01 生成 /etc/hosts 文件完成\"\n              echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\" \n              ;;\n        N | n)\n              echo \"请确认传入参数文件是否正确\"\n              exit 1\n              ;;\n        *)\n              echo \"error choice\"\n              exit 1\n              ;;\n        esac  \n      ;;\nN | n)\n      echo \"跳过\" \n      ;; \nesac  \n\n\n\n}\n\n\n\n# 免密登陆,这里只需在一个主机上信任自身,然后拷贝到其他机器上,即可完成整个集群的互信\ncreatessh()\n{\n\nread -n 1 -p \"需要重置SSH吗？(y/n)?\" answer\n\ncase $answer in\nY | y)\n               \n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 02 开始自动化建立SSH互信\"\n        local DEST_USER=$1\n        local PASSWORD=$2\n        local HOSTS_FILE=$3\n        if [ $# -ne 3 ]; then\n            echo \"Usage:\"\n            echo \"$0 remoteUser remotePassword hostsFile\"\n            exit 1\n        fi\n\n        SSH_DIR=~/.ssh\n        SCRIPT_PREFIX=./tmp\n        # 1. prepare  directory .ssh\n        mkdir $SSH_DIR\n        chmod 700 $SSH_DIR\n\n        # 2. generat ssh key\n        TMP_SCRIPT=$SCRIPT_PREFIX.sh # ./tmp.sh\n        echo  \"#!/usr/bin/expect\">$TMP_SCRIPT\n        echo  \"spawn ssh-keygen -b 1024 -t rsa\">>$TMP_SCRIPT\n        echo  \"expect *key*\">>$TMP_SCRIPT # 检测到'key'\n        echo  \"send \\r\">>$TMP_SCRIPT\n        if [ -f $SSH_DIR/id_rsa ]; then # 检测文件是否为普通文件\n            echo  \"expect *verwrite*\">>$TMP_SCRIPT\n            echo  \"send y\\r\">>$TMP_SCRIPT\n        fi\n        echo  \"expect *passphrase*\">>$TMP_SCRIPT\n        echo  \"send \\r\">>$TMP_SCRIPT\n        echo  \"expect *again:\">>$TMP_SCRIPT\n        echo  \"send \\r\">>$TMP_SCRIPT\n        echo  \"interact\">>$TMP_SCRIPT\n\n        chmod +x $TMP_SCRIPT\n\n        /usr/bin/expect $TMP_SCRIPT\n        rm $TMP_SCRIPT\n\n        ################### 3. generat file authorized_keys\n        cat $SSH_DIR/id_rsa.pub>>$SSH_DIR/authorized_keys # 将本机id加到信任列表\n\n        ################### 4. chmod 600 for file authorized_keys\n        chmod 600 $SSH_DIR/authorized_keys\n        echo \"===========================\"\n        \n        ################### 5. copy all files to other hosts\n        for ip in `cat $HOSTS_FILE|awk -F'=' '{print $2}'`  # 对每个主机搜索\n        do\n            if [ \"x$ip\" != \"x\" ]; then # ip不为空\n                echo -------------------------\n                TMP_SCRIPT=${SCRIPT_PREFIX}.$ip.sh\n                # check known_hosts\n                val=`ssh-keygen -F $ip` # 在 know_hosts 中 find 指定 hostname\n                if [ \"x$val\" == \"x\" ]; then # 没有搜索到\n                    echo \"$ip not in $SSH_DIR/known_hosts, need to add\"\n                    val=`ssh-keyscan $ip 2>/dev/null` # 扫描该主机中的公钥,标错输出到空\n                    if [ \"x$val\" == \"x\" ]; then # 如果没有扫描到\n                        echo \"ssh-keyscan $ip failed!\"\n                    else\n                        echo $val>>$SSH_DIR/known_hosts # 将扫描到的公钥添加到\n                    fi\n                fi\n                echo \"copy $SSH_DIR to $ip\" \n                        \n                echo  \"#!/usr/bin/expect\">$TMP_SCRIPT\n                echo  \"spawn scp -r  $SSH_DIR $DEST_USER@$ip:~/\">>$TMP_SCRIPT\n                echo  \"expect *assword*\">>$TMP_SCRIPT\n                echo  \"send $PASSWORD\\r\">>$TMP_SCRIPT\n                echo  \"interact\">>$TMP_SCRIPT # 执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了\n                \n                chmod +x $TMP_SCRIPT\n            \n                /usr/bin/expect $TMP_SCRIPT\n                rm $TMP_SCRIPT\n                echo \"copy done.\"                \n            fi\n        done\n\n        echo done.\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 02 建立SSH互信完成，开始验证互信情况\"\n\n        for ip in `cat $HOSTS_FILE|awk -F'=' '{print $2}'`\n        do\n           localDATE=`date +%Y%m%d`\n           REMOTEDATE=`ssh ${ip} date +%Y%m%d`\n           if [ ${localDATE}==${REMOTEDATE} ];then\n                echo \"主机与远程IP：${ip} 连通测试成功\"\n           else\n                echo \"主机与远程IP：${ip} 连通测试失败\"\n           fi\n        done\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 02 验证互信情况完成\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\"\n        read -n 1 -p \"请确认互信情况是否正确？(y/n)?\" answer\n        case $answer in\n        Y | y)\n              echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 02 建立SSH互信完成，验证互信成功\"\n              echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\"\n              ;;\n        N | n)\n              echo \"请定位问题\"\n              exit 1\n              ;;\n        *)\n              echo \"error choice\"\n              exit 1\n              ;;\n        esac \n      ;;\nN | n)\n      echo \"跳过SSH互信\" \n      ;; \nesac  \n\n \n\n}\n\n\n# 设置主机名\nchangeHostName()\n{\n\n\nread -n 1 -p \"需要对每台主机名进行配置吗？(y/n)?\" answer\n\n\ncase $answer in\nY | y)\n\n    local HOSTS_FILE=$1\n    echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ================================================\"\n    echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 03 开始修改主机名并分发host文件\"\n    cat>>/etc/profile<<EOF\n################################ 自行添加 ###########################\n\nexport JAVA_HOME=/usr/java/jdk1.8.0_162\nPATH=\\$PATH:\\$JAVA_HOME/bin/;\nexport PATH\n\n\n################################ 自行添加 ###########################\nEOF\n    for line in `cat $HOSTS_FILE`\n    do \n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \n        ip=`echo $line|awk -F'=' '{print $1}'` # =为分隔符\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" 开始处理 $ip\"\n        hostname=`echo $line|awk -F'=' '{print $2}'`\n        originhostsname=`ssh ${ip} hostnamectl --static`  \n        if [ ! ${hostname} == ${originhostsname} ];then\n            echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip 需要修改Host\" \n            ssh $ip \"hostnamectl set-hostname $hostname\"\n            echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip 修改完毕\"\n        else\n            echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip 不需要修改Hostname\" \n        fi\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始发送hosts文件\"\n        scp /etc/hosts root@$hostname:/etc/\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始发送repo文件\" \n        ######################## 这个http的repo需要实现准备好 #########################################\n        scp /etc/yum.repos.d/http.repo  root@$hostname:/etc/yum.repos.d \n        files=\"/etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-CR.repo /etc/yum.repos.d/CentOS-Debuginfo.repo /etc/yum.repos.d/CentOS-fasttrack.repo /etc/yum.repos.d/CentOS-Media.repo /etc/yum.repos.d/CentOS-Sources.repo /etc/yum.repos.d/CentOS-Vault.repo\"\n        for file in $files ;do ssh $ip \"mv $file ${file}bak\" ;done # 备份原有repo\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始处理yum\"\n        ssh $ip \"yum clean all\"\n        ssh $ip \"yum makecache\"\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始处理SELINUX\"\n        ssh $ip \"setenforce 0\"\n        ssh $ip \"sed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config\" # 将文本中的en..替换成dis..\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始处理防火墙\"\n        ssh $ip \"systemctl stop firewalld\"\n        ssh $ip \"systemctl disable firewalld\"\n        ssh $ip \"systemctl status firewalld\"\n        \n        ############################ 这里是不是跟 这里换用了chrony,而不是老的ntp ##################################\n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始处理NTP时钟同步\" \n        ssh $ip \"yum install -y chrony\"\n        scp /etc/chrony.conf root@$hostname:/etc/\n        ssh $ip \"systemctl restart chronyd\"\n        ssh $ip \"chronyc sources\"\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始下载JDK包并解压\" \n        # 从预先配置好的apache下载jdk,这里官方文档没有谈到环境变量的问题,但我们应该配置上环境变量,因为其他组件,或者一些自己安装的软件会使用java\n        ssh $ip \"mkdir -p /usr/java/\"\n        ssh $ip \"rm -rf  /usr/java/jdk-8u162*\"\n        ssh $ip \"curl http://192.168.181.128/softwares/jdk-8u162-linux-x64.tar.gz -o /opt/jdk-8u162-linux-x64.tar.gz --progress\"\n        ssh $ip \"tar -zxf /opt/jdk-8u162-linux-x64.tar.gz -C /usr/java/\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始卸载OPENJDK\"\n         # mini install 没有jdk,但不同的centos版本,要写在的软件包不同,下面列举的是centos7.4de1\n        ssh $ip \"rpm -e --nodeps java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64\" # 强制卸载\n        ssh $ip \"rpm -e --nodeps java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64\"\n        ssh $ip \"rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.141-2.6.10.5.el7.x86_64\"\n        ssh $ip \"rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.131-11.b12.el7.x86_64\" \n        ssh $ip \"rpm -e --nodeps tzdata-java-2017b-1.el7.noarch\" \n        ssh $ip \"rpm -e --nodeps icedtea-web-1.6.2-4.el7.x86_64\" \n        #ssh $ip \"yum -y install jline*\" # ?????????????????\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始发送环境变量\" # 如果要使用个命令,先要设置jdk环境变量\n        scp /etc/profile root@$ip:/etc/\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始发送环境生效并检查jdk版本信息\"\n        ssh $ip \"source /etc/profile && java -version\" \n        #echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 检查JDK版本信息\"\n        #ssh $ip \"java -version\"\n        \n        ############################################## 参数调优部分结束 ####################################################\n        \n        #echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 修改系统限制\"  \n        #scp /etc/systemd/system.conf root@$ip:/etc/systemd/\n        \n        echo -e \"\\n\\n\\n\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 关闭THP\" \n        scp /etc/rc.d/rc.local root@$ip:/etc/rc.d/\n        ssh $ip \"chmod +x /etc/rc.d/rc.local\"\n        ssh $ip \"echo never > /sys/kernel/mm/transparent_hugepage/enabled\"\n        ssh $ip \"echo never > /sys/kernel/mm/transparent_hugepage/defrag\"\n        \n        echo -e \"\\n\\n\\n\"\n        echo echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 关闭交换分区\" \n        ssh $ip \"swapoff -a\" \n        \n        echo -e \"\\n\\n\\n\"\n        echo echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 关闭tuned调优\" \n        ssh $ip \"systemctl start tuned\" \n        ssh $ip \"tuned-adm off\" \n        ssh $ip \"tuned-adm list\"\n        ssh $ip \"systemctl stop tuned\"\n        ssh $ip \"systemctl disable tuned\"\n        \n        echo -e \"\\n\\n\\n\"\n        echo echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 开始优化内核参数\"\n        scp /etc/sysctl.conf root@$ip:/etc/\n        ssh $ip \"sysctl -p\"\n        #ssh $ip \"ulimit –n 265535\"\n        \n        ############################################# 参数调优部分结束 ##################################################\n        \n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" $ip\"\" 处理结束\"\n        echo `date \"+%Y-%m-%d %H:%M:%S\"`\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \n        \n        \n    done    \n    echo `date \"+%Y-%m-%d %H:%M:%S\"`\" step 03 修改hostname成功\" \n\n    echo `date \"+%Y-%m-%d %H:%M:%S\"`\"================================================\"  \n     ;;\nN | n)\n      echo \"跳过对每台主机进行配置\" \n      ;; \nesac \n\n\n}\n\n\nmain()\n{\n\ncreatehostfile $hostfilename\ncreatessh $linuxuser $linuxpasswd $hostfilename\nchangeHostName $hostfilename\necho -e \"\\n\\n\\n处理完成\\n\\n\\n\"\n}\n\n\nmain\n\n\n```\n\nhostsname.txt 内容如下:\n\n```\n192.168.181.128=foo-1.mycluster.com\n192.168.181.129=foo-2.mycluster.com\n192.168.181.130=foo-3.mycluster.com\n```\n","slug":"Hadoop-CDH发行版-集群离线部署教程","published":1,"updated":"2021-08-23T00:38:38.690Z","_id":"cksfr6gz20001iqv9cgqy21k7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>为贴近真实环境,本文档假设以下条件:</p>\n<p>1.集群中各机器无法连接外网,只能通过内网向集群发送文件<br>2.集群内各机器间网络互通<br>3.操作者拥有集群内各机器的root权限</p>\n<span id=\"more\"></span>\n\n<ol>\n<li> jdk(这一步放到了脚本中) 从上面配置好的apache上下载,集群每个主机必须安装受支持的统一版本,Cloudera强烈建议安装在<code>/usr/java/jdk-version</code>目录下,这样可以自动检测到它</li>\n</ol>\n<p>1.挂载iso,并复制文件供http挂载(vm虚拟机上该方案有可能因inode不足而失败,提供备选方案)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 复制到大量文件到某一目录下可能出现inode节点数不足或空间不足的现象,需要预先处理</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /data/iso</span><br><span class=\"line\">mount -o loop -t iso9660 /home/yangzhaoyunfei/CentOS-7-x86_64-Everything-1804.iso  /data/iso</span><br><span class=\"line\">mkdir -p /data/centos7</span><br><span class=\"line\">cp -rf  /data/iso/*  /data/centos7</span><br><span class=\"line\">umount /data/iso/</span><br><span class=\"line\"></span><br><span class=\"line\"># vw虚拟机上使用如下脚本</span><br><span class=\"line\">mkdir -p /data/iso</span><br><span class=\"line\">mount /dev/cdrom  /data/iso</span><br><span class=\"line\">mkdir -p /data/centos7</span><br><span class=\"line\">cp -rf  /data/iso/*  /data/centos7</span><br><span class=\"line\">umount /data/iso/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.制作并只启用本地yum源(因为无法连接外网,所以必须使用本地源)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d/</span><br><span class=\"line\">ll</span><br><span class=\"line\"># 备份原repo文件</span><br><span class=\"line\">for file in `ls` ;do sudo mv $file $file&quot;bak&quot;;done</span><br><span class=\"line\">ll</span><br><span class=\"line\"></span><br><span class=\"line\">cat&gt;/etc/yum.repos.d/local.repo&lt;&lt;EOF</span><br><span class=\"line\">[local] </span><br><span class=\"line\">name=local</span><br><span class=\"line\">baseurl=file:///data/centos7</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0 </span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">#验证</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前置要求: local repo</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 禁用防火墙</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl disable firewalld.service</span><br><span class=\"line\"># 禁用selinux</span><br><span class=\"line\">sed -i &#x27;/SELINUX/s/enforcing/disabled/&#x27; /etc/selinux/config</span><br><span class=\"line\">reboot</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y httpd</span><br><span class=\"line\">systemctl enable httpd</span><br><span class=\"line\">systemctl start httpd</span><br><span class=\"line\"># 软链接挂载</span><br><span class=\"line\">cd /var/www/html &amp;&amp; ll</span><br><span class=\"line\">ln -s /data/centos7/ /var/www/html/centos7 &amp;&amp; ll</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>访问浏览器<a href=\"http://192.168.181.128/centos7\">http_yum</a>测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果无法访问,检查firewall,检查selinux,正确配置后重启</span><br><span class=\"line\"># service httpd restart</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上一步制作的local.repo可以启用,统一采用http.repo</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/local.repo /etc/yum.repos.d/local.repobak &amp;&amp; ll /etc/yum.repos.d/</span><br><span class=\"line\"></span><br><span class=\"line\">cat&gt;/etc/yum.repos.d/http.repo&lt;&lt;EOF</span><br><span class=\"line\">[http] </span><br><span class=\"line\">name=http</span><br><span class=\"line\">baseurl=http://192.168.181.128/centos7</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0 </span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">ll /etc/yum.repos.d/</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将下载的jdk也挂载到http中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/softwares/ </span><br><span class=\"line\"># 将jdk,jdbc驱动等放到这个文件夹中</span><br><span class=\"line\">ln -s /data/softwares/ /var/www/html/softwares</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>访问浏览器<a href=\"http://192.168.181.128/softwares\">http_softwares</a>验证</p>\n<p>1.下载Tarball</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloudera Manager 5: https://archive.cloudera.com/cm5/repo-as-tarball/</span><br></pre></td></tr></table></figure>\n\n<p>2.解压缩tarball，将文件移动到Web服务器目录，然后修改文件权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvfz cm5.15.1-centos7.tar.gz</span><br><span class=\"line\">sudo mv cm /var/www/html</span><br><span class=\"line\">sudo chmod -R ugo+rX /var/www/html/cm</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>访问<a href=\"http://192.168.181.128/cm\">cm_rpms</a>验证是否正确设置 3.创建repo文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat&gt;/etc/yum.repos.d/cloudera-repo.repo&lt;&lt;EOF</span><br><span class=\"line\">[cloudera-repo]</span><br><span class=\"line\">name=cloudera-repo</span><br><span class=\"line\">baseurl=http://192.168.181.128/cm/5</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>1.先从cloudera官网下载对应系统平台的 ***parcel and manifest.json and sha1 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CDH 5: Impala, Kudu, Spark 1, and Search are included in the CDH parcel.</span><br><span class=\"line\">    CDH - https://archive.cloudera.com/cdh5/parcels/</span><br><span class=\"line\">    Accumulo - - https://archive.cloudera.com/accumulo-c5/parcels/</span><br><span class=\"line\">    GPL Extras - https://archive.cloudera.com/gplextras5/parcels/</span><br><span class=\"line\">Cloudera Distribution of Apache Spark 2 for CDH 5:</span><br><span class=\"line\">    The exact parcel name is dependent on the OS. You can find all the parcels at https://archive.cloudera.com/spark2/parcels/.</span><br><span class=\"line\">Sqoop Connectors:</span><br><span class=\"line\">    https://archive.cloudera.com/sqoop-connectors/parcels/</span><br></pre></td></tr></table></figure>\n\n<p>1.移动<code>.parcel, .sha1 and manifest.json</code>文件到web server目录,然后修改权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /var/www/html/cloudera-parcels/cdh5/5.15.1/</span><br><span class=\"line\">sudo mv *.parcel* /var/www/html/cloudera-parcels/cdh5/5.15.1/</span><br><span class=\"line\">sudo mv manifest.json /var/www/html/cloudera-parcels/cdh5/5.15.1/</span><br><span class=\"line\">sudo chmod -R ugo+rX /var/www/html/cloudera-parcels/cdh5/5.15.1/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>5.15.1 替换为你的版本 (如 5.14.0)</p>\n</blockquote>\n<p>访问<a href=\"http://192.168.181.128/cloudera-parcels/cdh5/5.15.1\">cdh_parcels</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#服务端(master)</span><br><span class=\"line\">yum install -y chrony</span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/chrony.conf</span><br><span class=\"line\"># 注释以下四个外网时间同步服务器,并添加master机器为时间同步服务器</span><br><span class=\"line\"># Use public servers from the pool.ntp.org project.</span><br><span class=\"line\"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class=\"line\">#server 0.centos.pool.ntp.org iburst</span><br><span class=\"line\">#server 1.centos.pool.ntp.org iburst</span><br><span class=\"line\">#server 2.centos.pool.ntp.org iburst</span><br><span class=\"line\">#server 3.centos.pool.ntp.org iburst</span><br><span class=\"line\">server 192.168.181.128 iburst</span><br><span class=\"line\"></span><br><span class=\"line\"># 重启服务</span><br><span class=\"line\">systemctl restart chronyd</span><br><span class=\"line\">chronyc -a makestep</span><br><span class=\"line\">chronyc sources -v</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>cat»/etc/sysctl.conf«EOF ####################### 自行添加 ########################### #关闭ipv6 net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.default.disable_ipv6 = 1 ####################### 自行添加 ########################### EOF</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 安装expect, 执行脚本(仅master)</span><br><span class=\"line\">```bash</span><br><span class=\"line\"># 上传脚本及hostname文件</span><br><span class=\"line\">yum -y install expect</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x InstallCDH_SSH.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./InstallCDH_SSH.sh root root hostsname.txt </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前置要求: 配置cm,cdh的repo(rpm)库</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y cloudera-manager-daemons cloudera-manager-server</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为Cloudera Software安装和配置MariaDB<br>cloudera建议的配置文件在centos7.5自带5.x mariadb下无法启动,可能需要只适合10.x版本</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装,开机自启,启动</span><br><span class=\"line\">sudo yum install -y mariadb-server</span><br><span class=\"line\">sudo systemctl enable mariadb</span><br><span class=\"line\">sudo systemctl start mariadb</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止数据库服务,mariadb配置文件`/etc/my.cnf`,修改内容为</span><br><span class=\"line\">&gt;这个配置文件不适用与centos7自带5.x mariadb</span><br><span class=\"line\">sudo systemctl stop mariadb</span><br><span class=\"line\">mv /etc/my.cnf /etc/my.cnfbak</span><br><span class=\"line\">############################################# 这个配置文件不适用与5.x mariadb</span><br><span class=\"line\">cat&gt;/etc/my.cnf&lt;&lt;EOF</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">datadir=/var/lib/mysql</span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock</span><br><span class=\"line\">transaction-isolation = READ-COMMITTED</span><br><span class=\"line\"># Disabling symbolic-links is recommended to prevent assorted security risks;</span><br><span class=\"line\"># to do so, uncomment this line:</span><br><span class=\"line\">symbolic-links = 0</span><br><span class=\"line\"># Settings user and group are ignored when systemd is used.</span><br><span class=\"line\"># If you need to run mysqld under a different user or group,</span><br><span class=\"line\"># customize your systemd unit file for mariadb according to the</span><br><span class=\"line\"># instructions in http://fedoraproject.org/wiki/Systemd</span><br><span class=\"line\"></span><br><span class=\"line\">key_buffer = 16M</span><br><span class=\"line\">key_buffer_size = 32M</span><br><span class=\"line\">max_allowed_packet = 32M</span><br><span class=\"line\">thread_stack = 256K</span><br><span class=\"line\">thread_cache_size = 64</span><br><span class=\"line\">query_cache_limit = 8M</span><br><span class=\"line\">query_cache_size = 64M</span><br><span class=\"line\">query_cache_type = 1</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections = 550</span><br><span class=\"line\">#expire_logs_days = 10</span><br><span class=\"line\">#max_binlog_size = 100M</span><br><span class=\"line\"></span><br><span class=\"line\">#log_bin should be on a disk with enough free space.</span><br><span class=\"line\">#Replace &#x27;/var/lib/mysql/mysql_binary_log&#x27; with an appropriate path for your</span><br><span class=\"line\">#system and chown the specified folder to the mysql user.</span><br><span class=\"line\">log_bin=/var/lib/mysql/mysql_binary_log</span><br><span class=\"line\"></span><br><span class=\"line\">#In later versions of MariaDB, if you enable the binary log and do not set</span><br><span class=\"line\">#a server_id, MariaDB will not start. The server_id must be unique within</span><br><span class=\"line\">#the replicating group.</span><br><span class=\"line\">server_id=1</span><br><span class=\"line\"></span><br><span class=\"line\">binlog_format = mixed</span><br><span class=\"line\"></span><br><span class=\"line\">read_buffer_size = 2M</span><br><span class=\"line\">read_rnd_buffer_size = 16M</span><br><span class=\"line\">sort_buffer_size = 8M</span><br><span class=\"line\">join_buffer_size = 8M</span><br><span class=\"line\"></span><br><span class=\"line\"># InnoDB settings</span><br><span class=\"line\">innodb_file_per_table = 1</span><br><span class=\"line\">innodb_flush_log_at_trx_commit  = 2</span><br><span class=\"line\">innodb_log_buffer_size = 64M</span><br><span class=\"line\">innodb_buffer_pool_size = 4G</span><br><span class=\"line\">innodb_thread_concurrency = 8</span><br><span class=\"line\">innodb_flush_method = O_DIRECT</span><br><span class=\"line\">innodb_log_file_size = 512M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\">log-error=/var/log/mariadb/mariadb.log</span><br><span class=\"line\">pid-file=/var/run/mariadb/mariadb.pid</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"># include all files from the config directory</span><br><span class=\"line\">#</span><br><span class=\"line\">!includedir /etc/my.cnf.d</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改完配置后重新启动数据库</span><br><span class=\"line\">sudo systemctl start mariadb</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行脚本 为MariaDB进行初始化,包括设置root密码和一些选项:(^mariadbtxzpw01&amp;FR)</span><br><span class=\"line\">sudo /usr/bin/mysql_secure_installation</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输出如下</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Enter current password for root (enter for none):</span><br><span class=\"line\">OK, successfully used password, moving on...</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Set root password? [Y/n] Y</span><br><span class=\"line\">New password:</span><br><span class=\"line\">Re-enter new password:</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Remove anonymous users? [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Disallow root login remotely? [Y/n] N</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Remove test database and access to it [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Reload privilege tables now? [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">All done!  If you&#x27;ve completed all of the above steps, your MariaDB</span><br><span class=\"line\">installation should now be secure.</span><br><span class=\"line\"></span><br><span class=\"line\">Thanks for using MariaDB!</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 前置要求: 将下载的Connector上传到http的softwares目录中</span><br><span class=\"line\">curl http://192.168.181.128/softwares/mysql-connector-java-5.1.47.tar.gz -O --progress </span><br><span class=\"line\">tar zxvf mysql-connector-java-5.1.47.tar.gz</span><br><span class=\"line\">sudo mkdir -p /usr/share/java/</span><br><span class=\"line\">cd mysql-connector-java-5.1.47</span><br><span class=\"line\">sudo cp mysql-connector-java-5.1.47-bin.jar /usr/share/java/mysql-connector-java.jar</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 登陆mariadb</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"># 输入密码(^mariadbtxzpw01&amp;FR)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行以下sql,完成创建数据库,创建用户,授予权限</span><br><span class=\"line\">CREATE DATABASE scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON scm.* TO &#x27;scm&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE amon DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON amon.* TO &#x27;amon&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON rman.* TO &#x27;rman&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON hue.* TO &#x27;hue&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON metastore.* TO &#x27;hive&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON sentry.* TO &#x27;sentry&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON nav.* TO &#x27;nav&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON navms.* TO &#x27;navms&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON oozie.* TO &#x27;oozie&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">SHOW DATABASES;</span><br><span class=\"line\"># 查看所有用户</span><br><span class=\"line\">SELECT DISTINCT CONCAT(&#x27;User: &#x27;&#x27;&#x27;,user,&#x27;&#x27;&#x27;@&#x27;&#x27;&#x27;,host,&#x27;&#x27;&#x27;;&#x27;) AS query FROM mysql.user;</span><br><span class=\"line\"># 可以查看某用户的权限信息</span><br><span class=\"line\">SHOW GRANTS FOR &#x27;scm&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前置要求: 安装cms,创建cms数据库,mariadb与cms在同一主机上,如果不在,参考官方文档<br>备注: cms包含一个可以为自己创建和配置数据库的脚本scm_prepare_database.sh</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对上一步创建的数据库依次运行下面的命令</span><br><span class=\"line\">#sudo /usr/share/cmf/schema/scm_prepare_database.sh &lt;databaseType&gt; &lt;databaseName&gt; &lt;databaseUser&gt;</span><br><span class=\"line\"># &lt;databaseName&gt;是cms要使用的数据库,其会在其中创建一些表用来保存管理数据等,如果指定-p -u选项,这回创建这个数据库</span><br><span class=\"line\"># &lt;databaseType&gt;填mysql</span><br><span class=\"line\"># &lt;databaseUser&gt;要创建或使用scm数据库的用户名,[创建权限的时候已经默认创建了该用户]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 例如,出现提示后输入scm数据库的访问密码(^cdhtxzpw01&amp;FR)</span><br><span class=\"line\">sudo /usr/share/cmf/schema/scm_prepare_database.sh mysql scm scm</span><br><span class=\"line\"></span><br><span class=\"line\"># 上一步中,如果没有创建cms数据库,则必须使用 -u -p 选项来创建cms数据库,命令如下</span><br><span class=\"line\">sudo /usr/share/cmf/schema/scm_prepare_database.sh mysql -uroot -p</span><br></pre></td></tr></table></figure>\n\n<p>输出如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@foo-1 yangzhaoyunfei]# sudo /usr/share/cmf/schema/scm_prepare_database.sh mysql scm scm</span><br><span class=\"line\">Enter SCM password: </span><br><span class=\"line\">JAVA_HOME=/usr/java/jdk1.8.0_162</span><br><span class=\"line\">Verifying that we can write to /etc/cloudera-scm-server</span><br><span class=\"line\">Creating SCM configuration file in /etc/cloudera-scm-server</span><br><span class=\"line\">Executing:  /usr/java/jdk1.8.0_162/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/usr/share/java/postgresql-connector-java.jar:/usr/share/cmf/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.</span><br><span class=\"line\">[                          main] DbCommandExecutor              INFO  Successfully connected to database.</span><br><span class=\"line\">All done, your SCM database is configured correctly!</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前置要求: 系统环境,jdk,database,connector,元数据库,配置cdh的repo(rpm)/http(parcel)库;数据库;数据库连接驱动,cms</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动cms</span><br><span class=\"line\">sudo systemctl start cloudera-scm-server</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看启动日志</span><br><span class=\"line\">sudo tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输入如下, 日志出现 Started Jetty server. ,启动成功</span><br><span class=\"line\">[yangzhaoyunfei@foo-1 ~]$ sudo tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log</span><br><span class=\"line\">2018-08-29 14:00:36,582 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Generating entities:2018-08-29T06:00:36.582Z</span><br><span class=\"line\">2018-08-29 14:00:36,590 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Num entities:208</span><br><span class=\"line\">2018-08-29 14:00:36,590 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Generating documents:2018-08-29T06:00:36.590Z</span><br><span class=\"line\">2018-08-29 14:00:36,630 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Num docs:221</span><br><span class=\"line\">2018-08-29 14:00:36,630 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Constructing repo:2018-08-29T06:00:36.630Z</span><br><span class=\"line\">2018-08-29 14:00:37,249 INFO WebServerImpl:org.mortbay.log: jetty-6.1.26.cloudera.4</span><br><span class=\"line\">2018-08-29 14:00:37,261 INFO WebServerImpl:org.mortbay.log: Started SelectChannelConnector@0.0.0.0:7180</span><br><span class=\"line\">2018-08-29 14:00:37,261 INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server. #出现这句启动成功</span><br><span class=\"line\">2018-08-29 14:00:37,356 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Finished constructing repo:2018-08-29T06:00:37.356Z</span><br><span class=\"line\">2018-08-29 14:00:42,368 INFO ScmActive-0:com.cloudera.server.cmf.components.ScmActive: ScmActive completed successfully.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>浏览器打开<a href=\"http://192.168.181.128:7180/\">安装界面</a>进行安装</p>\n<ol>\n<li> <code>群集安装--&gt;选择存储库--&gt;选择方法</code></li>\n<li> <code>使用 Parcel (建议)</code> , <code>更多选项</code></li>\n<li> <code>删除所有远程 Parcel 存储库 URL</code></li>\n<li> 添加本地parcel库地址 <code>http://192.168.181.128/cloudera-parcels/cdh5/5.15.1/</code></li>\n<li> 其他 <code>Spark 2,Sqoop Connectors,cdh5</code> 等组件设置等同.</li>\n<li> 选择您要安装在主机上的 Cloudera Manager Agent 特定发行版,<code>自定义存储库</code></li>\n<li> agent存储库地址为上面配置过的cm repo地址 <code>http://192.168.181.128/cm/5/</code></li>\n<li> 因为配置过<code>ssh互信</code>,<code>提供 SSH 登录凭据</code> 选择 <code>接受相同私钥,把master的私钥下载后选中</code></li>\n</ol>\n<p>解决检查出的问题后继续</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloudera 建议将 /proc/sys/vm/swappiness 设置为最大值 10。当前设置为 60。使用 sysctl 命令在运行时更改该设置并编辑 /etc/sysctl.conf，以在重启后保存该设置。您可以继续进行安装，但 Cloudera Manager 可能会报告您的主机由于交换而运行状况不良。以下主机将受到影响： </span><br><span class=\"line\"> 查看详细信息</span><br><span class=\"line\">foo-[1-3].mycluster.com</span><br><span class=\"line\">已启用透明大页面压缩，可能会导致重大性能问题。请运行&quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag&quot;和&quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&quot;以禁用此设置，然后将同一命令添加到 /etc/rc.local 等初始化脚本中，以便在系统重启时予以设置。以下主机将受到影响: </span><br><span class=\"line\"> 查看详细信息</span><br><span class=\"line\">foo-[1-3].mycluster.com</span><br></pre></td></tr></table></figure>\n\n<p>查看前面相关的数据库设置</p>\n<p>保持默认即可</p>\n<p>等待部署完成</p>\n<ol>\n<li> 修改最大线程数IO等限制(暂不进行)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/systemd/system.conf</span><br><span class=\"line\"># 修改如下内容</span><br><span class=\"line\">DefaultLimitCORE=infinity</span><br><span class=\"line\">DefaultLimitNOFILE=100000</span><br><span class=\"line\">DefaultLimitNPROC=100000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li> 关闭THP(脚本中已有)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 检查状态</span><br><span class=\"line\">cat /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class=\"line\"># output: [always] madvise never</span><br><span class=\"line\">cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class=\"line\"># output: [always] madvise never</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改启动脚本,每次开机都禁用它们</span><br><span class=\"line\">cat&gt;&gt;/etc/rc.d/rc.local&lt;&lt;EOF</span><br><span class=\"line\">####################### 自行添加 ###########################</span><br><span class=\"line\">if test -f /sys/kernel/mm/transparent_hugepage/enabled; then</span><br><span class=\"line\">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class=\"line\">fi</span><br><span class=\"line\">if test -f /sys/kernel/mm/transparent_hugepage/defrag; then</span><br><span class=\"line\">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class=\"line\">fi</span><br><span class=\"line\">####################### 自行添加 ###########################</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x /etc/rc.d/rc.local</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li> 内核参数优化(暂不进行,应该由专业运维人员来做)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加以下内容</span><br><span class=\"line\">cat&gt;&gt;/etc/sysctl.conf&lt;&lt;EOF</span><br><span class=\"line\">####################### 自行添加 ###########################</span><br><span class=\"line\">#关闭ipv6</span><br><span class=\"line\">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class=\"line\">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class=\"line\"># 避免放大攻击</span><br><span class=\"line\">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><br><span class=\"line\"># 开启恶意icmp错误消息保护</span><br><span class=\"line\">net.ipv4.icmp_ignore_bogus_error_responses = 1</span><br><span class=\"line\">#关闭路由转发</span><br><span class=\"line\">net.ipv4.ip_forward = 0</span><br><span class=\"line\">net.ipv4.conf.all.send_redirects = 0</span><br><span class=\"line\">net.ipv4.conf.default.send_redirects = 0</span><br><span class=\"line\">#开启反向路径过滤</span><br><span class=\"line\">net.ipv4.conf.all.rp_filter = 1</span><br><span class=\"line\">net.ipv4.conf.default.rp_filter = 1</span><br><span class=\"line\">#处理无源路由的包</span><br><span class=\"line\">net.ipv4.conf.all.accept_source_route = 0</span><br><span class=\"line\">net.ipv4.conf.default.accept_source_route = 0</span><br><span class=\"line\">#关闭sysrq功能</span><br><span class=\"line\">kernel.sysrq = 0</span><br><span class=\"line\">#core文件名中添加pid作为扩展名</span><br><span class=\"line\">kernel.core_uses_pid = 1</span><br><span class=\"line\"># 开启SYN洪水攻击保护</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">#修改消息队列长度</span><br><span class=\"line\">kernel.msgmnb = 65536</span><br><span class=\"line\">kernel.msgmax = 65536</span><br><span class=\"line\">#设置最大内存共享段大小bytes</span><br><span class=\"line\">kernel.shmmax = 68719476736</span><br><span class=\"line\">kernel.shmall = 4294967296</span><br><span class=\"line\">#timewait的数量，默认180000</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 6000</span><br><span class=\"line\">net.ipv4.tcp_sack = 1</span><br><span class=\"line\">net.ipv4.tcp_window_scaling = 1</span><br><span class=\"line\">net.ipv4.tcp_rmem = 4096 87380 4194304</span><br><span class=\"line\">net.ipv4.tcp_wmem = 4096 16384 4194304</span><br><span class=\"line\">net.core.wmem_default = 8388608</span><br><span class=\"line\">net.core.rmem_default = 8388608</span><br><span class=\"line\">net.core.rmem_max = 16777216</span><br><span class=\"line\">net.core.wmem_max = 16777216</span><br><span class=\"line\">#每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</span><br><span class=\"line\">net.core.netdev_max_backlog = 262144</span><br><span class=\"line\">#限制仅仅是为了防止简单的DoS 攻击</span><br><span class=\"line\">net.ipv4.tcp_max_orphans = 3276800</span><br><span class=\"line\">#未收到客户端确认信息的连接请求的最大值</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class=\"line\">net.ipv4.tcp_timestamps = 0</span><br><span class=\"line\">#内核放弃建立连接之前发送SYNACK 包的数量</span><br><span class=\"line\">net.ipv4.tcp_synack_retries = 1</span><br><span class=\"line\">#内核放弃建立连接之前发送SYN 包的数量</span><br><span class=\"line\">net.ipv4.tcp_syn_retries = 1</span><br><span class=\"line\">#启用timewait 快速回收</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">#开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接</span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 1</span><br><span class=\"line\">#当keepalive 起用的时候，TCP 发送keepalive 消息的频度。缺省是2 小时</span><br><span class=\"line\">net.ipv4.tcp_keepalive_time = 30</span><br><span class=\"line\">#允许系统打开的端口范围</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 1024 65000</span><br><span class=\"line\">#修改防火墙表大小，默认65536</span><br><span class=\"line\"></span><br><span class=\"line\">#系统级别的能够打开的文件句柄的数量,ulimit 是进程级别的</span><br><span class=\"line\">fs.file-max = 265535</span><br><span class=\"line\">#系统允许的最大跟踪连接条目。在/etc/sysctl.conf文件中增加此属性，并运行&gt;/sbin/sysctl.conf –p</span><br><span class=\"line\">net.ipv4.ip_conntrack_max=265535</span><br><span class=\"line\"></span><br><span class=\"line\"># 确保无人能修改路由表</span><br><span class=\"line\">net.ipv4.conf.all.accept_redirects = 0</span><br><span class=\"line\">net.ipv4.conf.default.accept_redirects = 0</span><br><span class=\"line\">net.ipv4.conf.all.secure_redirects = 0</span><br><span class=\"line\">net.ipv4.conf.default.secure_redirects = 0</span><br><span class=\"line\">net.nf_conntrack_max = 6553600</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果在sysctl -p的时候报error: &#x27;net.ipv4.ip_conntrack_max&#x27; is an unknown key ,通过以下命令向内核中加入模块修正：</span><br><span class=\"line\">modprobe ip_conntrack</span><br><span class=\"line\">echo &quot;modprobe ip_conntrack&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\"># net.netfilter.nf_conntrack_max=655350</span><br><span class=\"line\"># net.netfilter.nf_conntrack_tcp_timeout_established=1200</span><br><span class=\"line\">####################### 自行添加 ###########################</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"># 从/etc/sysctl.conf加载内核参数</span><br><span class=\"line\">sysctl -p</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>1.Disable the tuned Service(暂不进行)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start tuned</span><br><span class=\"line\">tuned-adm off</span><br><span class=\"line\">tuned-adm list</span><br><span class=\"line\"># 输出中应该包含如下字样</span><br><span class=\"line\"># No current active profile</span><br><span class=\"line\">systemctl stop tuned</span><br><span class=\"line\">systemctl disable tuned</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>8.系统优化 ALL 禁用交换分区 sysctl -w vm.swappiness=0 禁用透明大页面 echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</p>\n<ol>\n<li> chrony时间同步存在问题,显示不可达</li>\n<li> linux系统还有几项可以优化</li>\n<li> 脚本还需加入上面的修改项</li>\n</ol>\n<p>InstallCDH_SSH.sh 文件内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 该脚本的参数有三个,username,password,hostnames-file:</span><br><span class=\"line\"># hostnames-file 内容示例,如:</span><br><span class=\"line\"># 192.168.181.128=foo-1.mycluster.com</span><br><span class=\"line\"># 192.168.181.129=foo-2.mycluster.com</span><br><span class=\"line\"># 192.168.181.130=foo-3.mycluster.com</span><br><span class=\"line\"># 192.168.181.131=foo-4.mycluster.com</span><br><span class=\"line\"># 192.168.181.132=foo-5.mycluster.com</span><br><span class=\"line\"># 192.168.181.133=foo-6.mycluster.com</span><br><span class=\"line\"># 192.168.181.134=foo-7.mycluster.com</span><br><span class=\"line\"># 192.168.181.135=foo-8.mycluster.com</span><br><span class=\"line\"># 192.168.181.136=foo-9.mycluster.com</span><br><span class=\"line\"># </span><br><span class=\"line\"># 该脚本执行前需要按说明文档中先完成前置工作:</span><br><span class=\"line\"># 1.createhostfile()中,</span><br><span class=\"line\"># 2.createssh()中,</span><br><span class=\"line\"># 3.createssh()中,repo文件,jdk文件需要放到第一台机器的httpd服务器中,供其所有机器下载</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $# -ne 3 ]; then # 如果传入的参数不是3个</span><br><span class=\"line\">    echo &quot;Usage:&quot;</span><br><span class=\"line\">    echo &quot;$0  linuxuser linuxpasswd hostsFile&quot;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取参数</span><br><span class=\"line\">linuxuser=$1</span><br><span class=\"line\">linuxpasswd=$2</span><br><span class=\"line\">hostfilename=$3</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建/etc/hosts文件,这个函数仅操作第一台机器</span><br><span class=\"line\">createhostfile()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"># 读取变量1个字符的变量,并赋给answer</span><br><span class=\"line\">read -n 1 -p &quot;需要重置host文件吗？(y/n)?&quot; answer</span><br><span class=\"line\"></span><br><span class=\"line\">case $answer in</span><br><span class=\"line\">Y | y)</span><br><span class=\"line\">        local hostfile=$1 # 局部变量</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 01 开始生成 /etc/hosts 文件&quot;</span><br><span class=\"line\">        cat /dev/null&gt;/etc/hosts # 清空hosts文件</span><br><span class=\"line\">        echo &quot;127.0.0.1 localhost&quot;</span><br><span class=\"line\">        for line in `cat $hostfile`</span><br><span class=\"line\">        do </span><br><span class=\"line\">            ip=`echo $line|awk -F&#x27;=&#x27; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">            hostname=`echo $line|awk -F&#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">            echo &quot;$ip $hostname&quot;&gt;&gt;/etc/hosts # 追加</span><br><span class=\"line\">        done  </span><br><span class=\"line\">        echo &quot;127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4&quot;&gt;&gt;/etc/hosts</span><br><span class=\"line\">        echo &quot;::1         localhost localhost.localdomain localhost6 localhost6.localdomain6&quot;&gt;&gt;/etc/hosts</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 01 生成 /etc/hosts 文件完成，请查看&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; =========================&quot;</span><br><span class=\"line\">        cat /etc/hosts</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; =========================&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot;&quot;</span><br><span class=\"line\">        read -n1 -p &quot;请确认是否正确？(y/n)?&quot; answer</span><br><span class=\"line\">        case $answer in</span><br><span class=\"line\">        Y | y)</span><br><span class=\"line\">              echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 01 生成 /etc/hosts 文件完成&quot;</span><br><span class=\"line\">              echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot; </span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        N | n)</span><br><span class=\"line\">              echo &quot;请确认传入参数文件是否正确&quot;</span><br><span class=\"line\">              exit 1</span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">              echo &quot;error choice&quot;</span><br><span class=\"line\">              exit 1</span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        esac  </span><br><span class=\"line\">      ;;</span><br><span class=\"line\">N | n)</span><br><span class=\"line\">      echo &quot;跳过&quot; </span><br><span class=\"line\">      ;; </span><br><span class=\"line\">esac  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 免密登陆,这里只需在一个主机上信任自身,然后拷贝到其他机器上,即可完成整个集群的互信</span><br><span class=\"line\">createssh()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">read -n 1 -p &quot;需要重置SSH吗？(y/n)?&quot; answer</span><br><span class=\"line\"></span><br><span class=\"line\">case $answer in</span><br><span class=\"line\">Y | y)</span><br><span class=\"line\">               </span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 02 开始自动化建立SSH互信&quot;</span><br><span class=\"line\">        local DEST_USER=$1</span><br><span class=\"line\">        local PASSWORD=$2</span><br><span class=\"line\">        local HOSTS_FILE=$3</span><br><span class=\"line\">        if [ $# -ne 3 ]; then</span><br><span class=\"line\">            echo &quot;Usage:&quot;</span><br><span class=\"line\">            echo &quot;$0 remoteUser remotePassword hostsFile&quot;</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">        fi</span><br><span class=\"line\"></span><br><span class=\"line\">        SSH_DIR=~/.ssh</span><br><span class=\"line\">        SCRIPT_PREFIX=./tmp</span><br><span class=\"line\">        # 1. prepare  directory .ssh</span><br><span class=\"line\">        mkdir $SSH_DIR</span><br><span class=\"line\">        chmod 700 $SSH_DIR</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. generat ssh key</span><br><span class=\"line\">        TMP_SCRIPT=$SCRIPT_PREFIX.sh # ./tmp.sh</span><br><span class=\"line\">        echo  &quot;#!/usr/bin/expect&quot;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;spawn ssh-keygen -b 1024 -t rsa&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;expect *key*&quot;&gt;&gt;$TMP_SCRIPT # 检测到&#x27;key&#x27;</span><br><span class=\"line\">        echo  &quot;send \\r&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        if [ -f $SSH_DIR/id_rsa ]; then # 检测文件是否为普通文件</span><br><span class=\"line\">            echo  &quot;expect *verwrite*&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">            echo  &quot;send y\\r&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        echo  &quot;expect *passphrase*&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;send \\r&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;expect *again:&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;send \\r&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;interact&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">        chmod +x $TMP_SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">        /usr/bin/expect $TMP_SCRIPT</span><br><span class=\"line\">        rm $TMP_SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">        ################### 3. generat file authorized_keys</span><br><span class=\"line\">        cat $SSH_DIR/id_rsa.pub&gt;&gt;$SSH_DIR/authorized_keys # 将本机id加到信任列表</span><br><span class=\"line\"></span><br><span class=\"line\">        ################### 4. chmod 600 for file authorized_keys</span><br><span class=\"line\">        chmod 600 $SSH_DIR/authorized_keys</span><br><span class=\"line\">        echo &quot;===========================&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ################### 5. copy all files to other hosts</span><br><span class=\"line\">        for ip in `cat $HOSTS_FILE|awk -F&#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`  # 对每个主机搜索</span><br><span class=\"line\">        do</span><br><span class=\"line\">            if [ &quot;x$ip&quot; != &quot;x&quot; ]; then # ip不为空</span><br><span class=\"line\">                echo -------------------------</span><br><span class=\"line\">                TMP_SCRIPT=$&#123;SCRIPT_PREFIX&#125;.$ip.sh</span><br><span class=\"line\">                # check known_hosts</span><br><span class=\"line\">                val=`ssh-keygen -F $ip` # 在 know_hosts 中 find 指定 hostname</span><br><span class=\"line\">                if [ &quot;x$val&quot; == &quot;x&quot; ]; then # 没有搜索到</span><br><span class=\"line\">                    echo &quot;$ip not in $SSH_DIR/known_hosts, need to add&quot;</span><br><span class=\"line\">                    val=`ssh-keyscan $ip 2&gt;/dev/null` # 扫描该主机中的公钥,标错输出到空</span><br><span class=\"line\">                    if [ &quot;x$val&quot; == &quot;x&quot; ]; then # 如果没有扫描到</span><br><span class=\"line\">                        echo &quot;ssh-keyscan $ip failed!&quot;</span><br><span class=\"line\">                    else</span><br><span class=\"line\">                        echo $val&gt;&gt;$SSH_DIR/known_hosts # 将扫描到的公钥添加到</span><br><span class=\"line\">                    fi</span><br><span class=\"line\">                fi</span><br><span class=\"line\">                echo &quot;copy $SSH_DIR to $ip&quot; </span><br><span class=\"line\">                        </span><br><span class=\"line\">                echo  &quot;#!/usr/bin/expect&quot;&gt;$TMP_SCRIPT</span><br><span class=\"line\">                echo  &quot;spawn scp -r  $SSH_DIR $DEST_USER@$ip:~/&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">                echo  &quot;expect *assword*&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">                echo  &quot;send $PASSWORD\\r&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">                echo  &quot;interact&quot;&gt;&gt;$TMP_SCRIPT # 执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了</span><br><span class=\"line\">                </span><br><span class=\"line\">                chmod +x $TMP_SCRIPT</span><br><span class=\"line\">            </span><br><span class=\"line\">                /usr/bin/expect $TMP_SCRIPT</span><br><span class=\"line\">                rm $TMP_SCRIPT</span><br><span class=\"line\">                echo &quot;copy done.&quot;                </span><br><span class=\"line\">            fi</span><br><span class=\"line\">        done</span><br><span class=\"line\"></span><br><span class=\"line\">        echo done.</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 02 建立SSH互信完成，开始验证互信情况&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        for ip in `cat $HOSTS_FILE|awk -F&#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">        do</span><br><span class=\"line\">           localDATE=`date +%Y%m%d`</span><br><span class=\"line\">           REMOTEDATE=`ssh $&#123;ip&#125; date +%Y%m%d`</span><br><span class=\"line\">           if [ $&#123;localDATE&#125;==$&#123;REMOTEDATE&#125; ];then</span><br><span class=\"line\">                echo &quot;主机与远程IP：$&#123;ip&#125; 连通测试成功&quot;</span><br><span class=\"line\">           else</span><br><span class=\"line\">                echo &quot;主机与远程IP：$&#123;ip&#125; 连通测试失败&quot;</span><br><span class=\"line\">           fi</span><br><span class=\"line\">        done</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 02 验证互信情况完成&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot;</span><br><span class=\"line\">        read -n 1 -p &quot;请确认互信情况是否正确？(y/n)?&quot; answer</span><br><span class=\"line\">        case $answer in</span><br><span class=\"line\">        Y | y)</span><br><span class=\"line\">              echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 02 建立SSH互信完成，验证互信成功&quot;</span><br><span class=\"line\">              echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot;</span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        N | n)</span><br><span class=\"line\">              echo &quot;请定位问题&quot;</span><br><span class=\"line\">              exit 1</span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">              echo &quot;error choice&quot;</span><br><span class=\"line\">              exit 1</span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        esac </span><br><span class=\"line\">      ;;</span><br><span class=\"line\">N | n)</span><br><span class=\"line\">      echo &quot;跳过SSH互信&quot; </span><br><span class=\"line\">      ;; </span><br><span class=\"line\">esac  </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 设置主机名</span><br><span class=\"line\">changeHostName()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">read -n 1 -p &quot;需要对每台主机名进行配置吗？(y/n)?&quot; answer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">case $answer in</span><br><span class=\"line\">Y | y)</span><br><span class=\"line\"></span><br><span class=\"line\">    local HOSTS_FILE=$1</span><br><span class=\"line\">    echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot;</span><br><span class=\"line\">    echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 03 开始修改主机名并分发host文件&quot;</span><br><span class=\"line\">    cat&gt;&gt;/etc/profile&lt;&lt;EOF</span><br><span class=\"line\">################################ 自行添加 ###########################</span><br><span class=\"line\"></span><br><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.8.0_162</span><br><span class=\"line\">PATH=\\$PATH:\\$JAVA_HOME/bin/;</span><br><span class=\"line\">export PATH</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">################################ 自行添加 ###########################</span><br><span class=\"line\">EOF</span><br><span class=\"line\">    for line in `cat $HOSTS_FILE`</span><br><span class=\"line\">    do </span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot; </span><br><span class=\"line\">        ip=`echo $line|awk -F&#x27;=&#x27; &#x27;&#123;print $1&#125;&#x27;` # =为分隔符</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; 开始处理 $ip&quot;</span><br><span class=\"line\">        hostname=`echo $line|awk -F&#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">        originhostsname=`ssh $&#123;ip&#125; hostnamectl --static`  </span><br><span class=\"line\">        if [ ! $&#123;hostname&#125; == $&#123;originhostsname&#125; ];then</span><br><span class=\"line\">            echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip 需要修改Host&quot; </span><br><span class=\"line\">            ssh $ip &quot;hostnamectl set-hostname $hostname&quot;</span><br><span class=\"line\">            echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip 修改完毕&quot;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip 不需要修改Hostname&quot; </span><br><span class=\"line\">        fi</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始发送hosts文件&quot;</span><br><span class=\"line\">        scp /etc/hosts root@$hostname:/etc/</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始发送repo文件&quot; </span><br><span class=\"line\">        ######################## 这个http的repo需要实现准备好 #########################################</span><br><span class=\"line\">        scp /etc/yum.repos.d/http.repo  root@$hostname:/etc/yum.repos.d </span><br><span class=\"line\">        files=&quot;/etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-CR.repo /etc/yum.repos.d/CentOS-Debuginfo.repo /etc/yum.repos.d/CentOS-fasttrack.repo /etc/yum.repos.d/CentOS-Media.repo /etc/yum.repos.d/CentOS-Sources.repo /etc/yum.repos.d/CentOS-Vault.repo&quot;</span><br><span class=\"line\">        for file in $files ;do ssh $ip &quot;mv $file $&#123;file&#125;bak&quot; ;done # 备份原有repo</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始处理yum&quot;</span><br><span class=\"line\">        ssh $ip &quot;yum clean all&quot;</span><br><span class=\"line\">        ssh $ip &quot;yum makecache&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始处理SELINUX&quot;</span><br><span class=\"line\">        ssh $ip &quot;setenforce 0&quot;</span><br><span class=\"line\">        ssh $ip &quot;sed -i &#x27;/SELINUX/s/enforcing/disabled/&#x27; /etc/selinux/config&quot; # 将文本中的en..替换成dis..</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始处理防火墙&quot;</span><br><span class=\"line\">        ssh $ip &quot;systemctl stop firewalld&quot;</span><br><span class=\"line\">        ssh $ip &quot;systemctl disable firewalld&quot;</span><br><span class=\"line\">        ssh $ip &quot;systemctl status firewalld&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ############################ 这里是不是跟 这里换用了chrony,而不是老的ntp ##################################</span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始处理NTP时钟同步&quot; </span><br><span class=\"line\">        ssh $ip &quot;yum install -y chrony&quot;</span><br><span class=\"line\">        scp /etc/chrony.conf root@$hostname:/etc/</span><br><span class=\"line\">        ssh $ip &quot;systemctl restart chronyd&quot;</span><br><span class=\"line\">        ssh $ip &quot;chronyc sources&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始下载JDK包并解压&quot; </span><br><span class=\"line\">        # 从预先配置好的apache下载jdk,这里官方文档没有谈到环境变量的问题,但我们应该配置上环境变量,因为其他组件,或者一些自己安装的软件会使用java</span><br><span class=\"line\">        ssh $ip &quot;mkdir -p /usr/java/&quot;</span><br><span class=\"line\">        ssh $ip &quot;rm -rf  /usr/java/jdk-8u162*&quot;</span><br><span class=\"line\">        ssh $ip &quot;curl http://192.168.181.128/softwares/jdk-8u162-linux-x64.tar.gz -o /opt/jdk-8u162-linux-x64.tar.gz --progress&quot;</span><br><span class=\"line\">        ssh $ip &quot;tar -zxf /opt/jdk-8u162-linux-x64.tar.gz -C /usr/java/&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始卸载OPENJDK&quot;</span><br><span class=\"line\">         # mini install 没有jdk,但不同的centos版本,要写在的软件包不同,下面列举的是centos7.4de1</span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64&quot; # 强制卸载</span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64&quot;</span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.141-2.6.10.5.el7.x86_64&quot;</span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.131-11.b12.el7.x86_64&quot; </span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps tzdata-java-2017b-1.el7.noarch&quot; </span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps icedtea-web-1.6.2-4.el7.x86_64&quot; </span><br><span class=\"line\">        #ssh $ip &quot;yum -y install jline*&quot; # ?????????????????</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始发送环境变量&quot; # 如果要使用个命令,先要设置jdk环境变量</span><br><span class=\"line\">        scp /etc/profile root@$ip:/etc/</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始发送环境生效并检查jdk版本信息&quot;</span><br><span class=\"line\">        ssh $ip &quot;source /etc/profile &amp;&amp; java -version&quot; </span><br><span class=\"line\">        #echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 检查JDK版本信息&quot;</span><br><span class=\"line\">        #ssh $ip &quot;java -version&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ############################################## 参数调优部分结束 ####################################################</span><br><span class=\"line\">        </span><br><span class=\"line\">        #echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 修改系统限制&quot;  </span><br><span class=\"line\">        #scp /etc/systemd/system.conf root@$ip:/etc/systemd/</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 关闭THP&quot; </span><br><span class=\"line\">        scp /etc/rc.d/rc.local root@$ip:/etc/rc.d/</span><br><span class=\"line\">        ssh $ip &quot;chmod +x /etc/rc.d/rc.local&quot;</span><br><span class=\"line\">        ssh $ip &quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&quot;</span><br><span class=\"line\">        ssh $ip &quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 关闭交换分区&quot; </span><br><span class=\"line\">        ssh $ip &quot;swapoff -a&quot; </span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 关闭tuned调优&quot; </span><br><span class=\"line\">        ssh $ip &quot;systemctl start tuned&quot; </span><br><span class=\"line\">        ssh $ip &quot;tuned-adm off&quot; </span><br><span class=\"line\">        ssh $ip &quot;tuned-adm list&quot;</span><br><span class=\"line\">        ssh $ip &quot;systemctl stop tuned&quot;</span><br><span class=\"line\">        ssh $ip &quot;systemctl disable tuned&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始优化内核参数&quot;</span><br><span class=\"line\">        scp /etc/sysctl.conf root@$ip:/etc/</span><br><span class=\"line\">        ssh $ip &quot;sysctl -p&quot;</span><br><span class=\"line\">        #ssh $ip &quot;ulimit –n 265535&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ############################################# 参数调优部分结束 ##################################################</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 处理结束&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot; </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    done    </span><br><span class=\"line\">    echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 03 修改hostname成功&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">    echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot;================================================&quot;  </span><br><span class=\"line\">     ;;</span><br><span class=\"line\">N | n)</span><br><span class=\"line\">      echo &quot;跳过对每台主机进行配置&quot; </span><br><span class=\"line\">      ;; </span><br><span class=\"line\">esac </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">createhostfile $hostfilename</span><br><span class=\"line\">createssh $linuxuser $linuxpasswd $hostfilename</span><br><span class=\"line\">changeHostName $hostfilename</span><br><span class=\"line\">echo -e &quot;\\n\\n\\n处理完成\\n\\n\\n&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>hostsname.txt 内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.181.128=foo-1.mycluster.com</span><br><span class=\"line\">192.168.181.129=foo-2.mycluster.com</span><br><span class=\"line\">192.168.181.130=foo-3.mycluster.com</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>为贴近真实环境,本文档假设以下条件:</p>\n<p>1.集群中各机器无法连接外网,只能通过内网向集群发送文件<br>2.集群内各机器间网络互通<br>3.操作者拥有集群内各机器的root权限</p>","more":"<ol>\n<li> jdk(这一步放到了脚本中) 从上面配置好的apache上下载,集群每个主机必须安装受支持的统一版本,Cloudera强烈建议安装在<code>/usr/java/jdk-version</code>目录下,这样可以自动检测到它</li>\n</ol>\n<p>1.挂载iso,并复制文件供http挂载(vm虚拟机上该方案有可能因inode不足而失败,提供备选方案)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 复制到大量文件到某一目录下可能出现inode节点数不足或空间不足的现象,需要预先处理</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /data/iso</span><br><span class=\"line\">mount -o loop -t iso9660 /home/yangzhaoyunfei/CentOS-7-x86_64-Everything-1804.iso  /data/iso</span><br><span class=\"line\">mkdir -p /data/centos7</span><br><span class=\"line\">cp -rf  /data/iso/*  /data/centos7</span><br><span class=\"line\">umount /data/iso/</span><br><span class=\"line\"></span><br><span class=\"line\"># vw虚拟机上使用如下脚本</span><br><span class=\"line\">mkdir -p /data/iso</span><br><span class=\"line\">mount /dev/cdrom  /data/iso</span><br><span class=\"line\">mkdir -p /data/centos7</span><br><span class=\"line\">cp -rf  /data/iso/*  /data/centos7</span><br><span class=\"line\">umount /data/iso/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.制作并只启用本地yum源(因为无法连接外网,所以必须使用本地源)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d/</span><br><span class=\"line\">ll</span><br><span class=\"line\"># 备份原repo文件</span><br><span class=\"line\">for file in `ls` ;do sudo mv $file $file&quot;bak&quot;;done</span><br><span class=\"line\">ll</span><br><span class=\"line\"></span><br><span class=\"line\">cat&gt;/etc/yum.repos.d/local.repo&lt;&lt;EOF</span><br><span class=\"line\">[local] </span><br><span class=\"line\">name=local</span><br><span class=\"line\">baseurl=file:///data/centos7</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0 </span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">#验证</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前置要求: local repo</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 禁用防火墙</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl disable firewalld.service</span><br><span class=\"line\"># 禁用selinux</span><br><span class=\"line\">sed -i &#x27;/SELINUX/s/enforcing/disabled/&#x27; /etc/selinux/config</span><br><span class=\"line\">reboot</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y httpd</span><br><span class=\"line\">systemctl enable httpd</span><br><span class=\"line\">systemctl start httpd</span><br><span class=\"line\"># 软链接挂载</span><br><span class=\"line\">cd /var/www/html &amp;&amp; ll</span><br><span class=\"line\">ln -s /data/centos7/ /var/www/html/centos7 &amp;&amp; ll</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>访问浏览器<a href=\"http://192.168.181.128/centos7\">http_yum</a>测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果无法访问,检查firewall,检查selinux,正确配置后重启</span><br><span class=\"line\"># service httpd restart</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上一步制作的local.repo可以启用,统一采用http.repo</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/local.repo /etc/yum.repos.d/local.repobak &amp;&amp; ll /etc/yum.repos.d/</span><br><span class=\"line\"></span><br><span class=\"line\">cat&gt;/etc/yum.repos.d/http.repo&lt;&lt;EOF</span><br><span class=\"line\">[http] </span><br><span class=\"line\">name=http</span><br><span class=\"line\">baseurl=http://192.168.181.128/centos7</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0 </span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">ll /etc/yum.repos.d/</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将下载的jdk也挂载到http中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/softwares/ </span><br><span class=\"line\"># 将jdk,jdbc驱动等放到这个文件夹中</span><br><span class=\"line\">ln -s /data/softwares/ /var/www/html/softwares</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>访问浏览器<a href=\"http://192.168.181.128/softwares\">http_softwares</a>验证</p>\n<p>1.下载Tarball</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloudera Manager 5: https://archive.cloudera.com/cm5/repo-as-tarball/</span><br></pre></td></tr></table></figure>\n\n<p>2.解压缩tarball，将文件移动到Web服务器目录，然后修改文件权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvfz cm5.15.1-centos7.tar.gz</span><br><span class=\"line\">sudo mv cm /var/www/html</span><br><span class=\"line\">sudo chmod -R ugo+rX /var/www/html/cm</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>访问<a href=\"http://192.168.181.128/cm\">cm_rpms</a>验证是否正确设置 3.创建repo文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat&gt;/etc/yum.repos.d/cloudera-repo.repo&lt;&lt;EOF</span><br><span class=\"line\">[cloudera-repo]</span><br><span class=\"line\">name=cloudera-repo</span><br><span class=\"line\">baseurl=http://192.168.181.128/cm/5</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>1.先从cloudera官网下载对应系统平台的 ***parcel and manifest.json and sha1 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CDH 5: Impala, Kudu, Spark 1, and Search are included in the CDH parcel.</span><br><span class=\"line\">    CDH - https://archive.cloudera.com/cdh5/parcels/</span><br><span class=\"line\">    Accumulo - - https://archive.cloudera.com/accumulo-c5/parcels/</span><br><span class=\"line\">    GPL Extras - https://archive.cloudera.com/gplextras5/parcels/</span><br><span class=\"line\">Cloudera Distribution of Apache Spark 2 for CDH 5:</span><br><span class=\"line\">    The exact parcel name is dependent on the OS. You can find all the parcels at https://archive.cloudera.com/spark2/parcels/.</span><br><span class=\"line\">Sqoop Connectors:</span><br><span class=\"line\">    https://archive.cloudera.com/sqoop-connectors/parcels/</span><br></pre></td></tr></table></figure>\n\n<p>1.移动<code>.parcel, .sha1 and manifest.json</code>文件到web server目录,然后修改权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /var/www/html/cloudera-parcels/cdh5/5.15.1/</span><br><span class=\"line\">sudo mv *.parcel* /var/www/html/cloudera-parcels/cdh5/5.15.1/</span><br><span class=\"line\">sudo mv manifest.json /var/www/html/cloudera-parcels/cdh5/5.15.1/</span><br><span class=\"line\">sudo chmod -R ugo+rX /var/www/html/cloudera-parcels/cdh5/5.15.1/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>5.15.1 替换为你的版本 (如 5.14.0)</p>\n</blockquote>\n<p>访问<a href=\"http://192.168.181.128/cloudera-parcels/cdh5/5.15.1\">cdh_parcels</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#服务端(master)</span><br><span class=\"line\">yum install -y chrony</span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/chrony.conf</span><br><span class=\"line\"># 注释以下四个外网时间同步服务器,并添加master机器为时间同步服务器</span><br><span class=\"line\"># Use public servers from the pool.ntp.org project.</span><br><span class=\"line\"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class=\"line\">#server 0.centos.pool.ntp.org iburst</span><br><span class=\"line\">#server 1.centos.pool.ntp.org iburst</span><br><span class=\"line\">#server 2.centos.pool.ntp.org iburst</span><br><span class=\"line\">#server 3.centos.pool.ntp.org iburst</span><br><span class=\"line\">server 192.168.181.128 iburst</span><br><span class=\"line\"></span><br><span class=\"line\"># 重启服务</span><br><span class=\"line\">systemctl restart chronyd</span><br><span class=\"line\">chronyc -a makestep</span><br><span class=\"line\">chronyc sources -v</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>cat»/etc/sysctl.conf«EOF ####################### 自行添加 ########################### #关闭ipv6 net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.default.disable_ipv6 = 1 ####################### 自行添加 ########################### EOF</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 安装expect, 执行脚本(仅master)</span><br><span class=\"line\">```bash</span><br><span class=\"line\"># 上传脚本及hostname文件</span><br><span class=\"line\">yum -y install expect</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x InstallCDH_SSH.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./InstallCDH_SSH.sh root root hostsname.txt </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前置要求: 配置cm,cdh的repo(rpm)库</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y cloudera-manager-daemons cloudera-manager-server</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为Cloudera Software安装和配置MariaDB<br>cloudera建议的配置文件在centos7.5自带5.x mariadb下无法启动,可能需要只适合10.x版本</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装,开机自启,启动</span><br><span class=\"line\">sudo yum install -y mariadb-server</span><br><span class=\"line\">sudo systemctl enable mariadb</span><br><span class=\"line\">sudo systemctl start mariadb</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止数据库服务,mariadb配置文件`/etc/my.cnf`,修改内容为</span><br><span class=\"line\">&gt;这个配置文件不适用与centos7自带5.x mariadb</span><br><span class=\"line\">sudo systemctl stop mariadb</span><br><span class=\"line\">mv /etc/my.cnf /etc/my.cnfbak</span><br><span class=\"line\">############################################# 这个配置文件不适用与5.x mariadb</span><br><span class=\"line\">cat&gt;/etc/my.cnf&lt;&lt;EOF</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">datadir=/var/lib/mysql</span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock</span><br><span class=\"line\">transaction-isolation = READ-COMMITTED</span><br><span class=\"line\"># Disabling symbolic-links is recommended to prevent assorted security risks;</span><br><span class=\"line\"># to do so, uncomment this line:</span><br><span class=\"line\">symbolic-links = 0</span><br><span class=\"line\"># Settings user and group are ignored when systemd is used.</span><br><span class=\"line\"># If you need to run mysqld under a different user or group,</span><br><span class=\"line\"># customize your systemd unit file for mariadb according to the</span><br><span class=\"line\"># instructions in http://fedoraproject.org/wiki/Systemd</span><br><span class=\"line\"></span><br><span class=\"line\">key_buffer = 16M</span><br><span class=\"line\">key_buffer_size = 32M</span><br><span class=\"line\">max_allowed_packet = 32M</span><br><span class=\"line\">thread_stack = 256K</span><br><span class=\"line\">thread_cache_size = 64</span><br><span class=\"line\">query_cache_limit = 8M</span><br><span class=\"line\">query_cache_size = 64M</span><br><span class=\"line\">query_cache_type = 1</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections = 550</span><br><span class=\"line\">#expire_logs_days = 10</span><br><span class=\"line\">#max_binlog_size = 100M</span><br><span class=\"line\"></span><br><span class=\"line\">#log_bin should be on a disk with enough free space.</span><br><span class=\"line\">#Replace &#x27;/var/lib/mysql/mysql_binary_log&#x27; with an appropriate path for your</span><br><span class=\"line\">#system and chown the specified folder to the mysql user.</span><br><span class=\"line\">log_bin=/var/lib/mysql/mysql_binary_log</span><br><span class=\"line\"></span><br><span class=\"line\">#In later versions of MariaDB, if you enable the binary log and do not set</span><br><span class=\"line\">#a server_id, MariaDB will not start. The server_id must be unique within</span><br><span class=\"line\">#the replicating group.</span><br><span class=\"line\">server_id=1</span><br><span class=\"line\"></span><br><span class=\"line\">binlog_format = mixed</span><br><span class=\"line\"></span><br><span class=\"line\">read_buffer_size = 2M</span><br><span class=\"line\">read_rnd_buffer_size = 16M</span><br><span class=\"line\">sort_buffer_size = 8M</span><br><span class=\"line\">join_buffer_size = 8M</span><br><span class=\"line\"></span><br><span class=\"line\"># InnoDB settings</span><br><span class=\"line\">innodb_file_per_table = 1</span><br><span class=\"line\">innodb_flush_log_at_trx_commit  = 2</span><br><span class=\"line\">innodb_log_buffer_size = 64M</span><br><span class=\"line\">innodb_buffer_pool_size = 4G</span><br><span class=\"line\">innodb_thread_concurrency = 8</span><br><span class=\"line\">innodb_flush_method = O_DIRECT</span><br><span class=\"line\">innodb_log_file_size = 512M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\">log-error=/var/log/mariadb/mariadb.log</span><br><span class=\"line\">pid-file=/var/run/mariadb/mariadb.pid</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"># include all files from the config directory</span><br><span class=\"line\">#</span><br><span class=\"line\">!includedir /etc/my.cnf.d</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改完配置后重新启动数据库</span><br><span class=\"line\">sudo systemctl start mariadb</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行脚本 为MariaDB进行初始化,包括设置root密码和一些选项:(^mariadbtxzpw01&amp;FR)</span><br><span class=\"line\">sudo /usr/bin/mysql_secure_installation</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输出如下</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Enter current password for root (enter for none):</span><br><span class=\"line\">OK, successfully used password, moving on...</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Set root password? [Y/n] Y</span><br><span class=\"line\">New password:</span><br><span class=\"line\">Re-enter new password:</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Remove anonymous users? [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Disallow root login remotely? [Y/n] N</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Remove test database and access to it [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">Reload privilege tables now? [Y/n] Y</span><br><span class=\"line\">[...]</span><br><span class=\"line\">All done!  If you&#x27;ve completed all of the above steps, your MariaDB</span><br><span class=\"line\">installation should now be secure.</span><br><span class=\"line\"></span><br><span class=\"line\">Thanks for using MariaDB!</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 前置要求: 将下载的Connector上传到http的softwares目录中</span><br><span class=\"line\">curl http://192.168.181.128/softwares/mysql-connector-java-5.1.47.tar.gz -O --progress </span><br><span class=\"line\">tar zxvf mysql-connector-java-5.1.47.tar.gz</span><br><span class=\"line\">sudo mkdir -p /usr/share/java/</span><br><span class=\"line\">cd mysql-connector-java-5.1.47</span><br><span class=\"line\">sudo cp mysql-connector-java-5.1.47-bin.jar /usr/share/java/mysql-connector-java.jar</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 登陆mariadb</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"># 输入密码(^mariadbtxzpw01&amp;FR)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行以下sql,完成创建数据库,创建用户,授予权限</span><br><span class=\"line\">CREATE DATABASE scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON scm.* TO &#x27;scm&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE amon DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON amon.* TO &#x27;amon&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON rman.* TO &#x27;rman&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON hue.* TO &#x27;hue&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON metastore.* TO &#x27;hive&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON sentry.* TO &#x27;sentry&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON nav.* TO &#x27;nav&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON navms.* TO &#x27;navms&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">CREATE DATABASE oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class=\"line\">GRANT ALL ON oozie.* TO &#x27;oozie&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;^cdhtxzpw01&amp;FR&#x27;;</span><br><span class=\"line\">SHOW DATABASES;</span><br><span class=\"line\"># 查看所有用户</span><br><span class=\"line\">SELECT DISTINCT CONCAT(&#x27;User: &#x27;&#x27;&#x27;,user,&#x27;&#x27;&#x27;@&#x27;&#x27;&#x27;,host,&#x27;&#x27;&#x27;;&#x27;) AS query FROM mysql.user;</span><br><span class=\"line\"># 可以查看某用户的权限信息</span><br><span class=\"line\">SHOW GRANTS FOR &#x27;scm&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前置要求: 安装cms,创建cms数据库,mariadb与cms在同一主机上,如果不在,参考官方文档<br>备注: cms包含一个可以为自己创建和配置数据库的脚本scm_prepare_database.sh</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对上一步创建的数据库依次运行下面的命令</span><br><span class=\"line\">#sudo /usr/share/cmf/schema/scm_prepare_database.sh &lt;databaseType&gt; &lt;databaseName&gt; &lt;databaseUser&gt;</span><br><span class=\"line\"># &lt;databaseName&gt;是cms要使用的数据库,其会在其中创建一些表用来保存管理数据等,如果指定-p -u选项,这回创建这个数据库</span><br><span class=\"line\"># &lt;databaseType&gt;填mysql</span><br><span class=\"line\"># &lt;databaseUser&gt;要创建或使用scm数据库的用户名,[创建权限的时候已经默认创建了该用户]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 例如,出现提示后输入scm数据库的访问密码(^cdhtxzpw01&amp;FR)</span><br><span class=\"line\">sudo /usr/share/cmf/schema/scm_prepare_database.sh mysql scm scm</span><br><span class=\"line\"></span><br><span class=\"line\"># 上一步中,如果没有创建cms数据库,则必须使用 -u -p 选项来创建cms数据库,命令如下</span><br><span class=\"line\">sudo /usr/share/cmf/schema/scm_prepare_database.sh mysql -uroot -p</span><br></pre></td></tr></table></figure>\n\n<p>输出如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@foo-1 yangzhaoyunfei]# sudo /usr/share/cmf/schema/scm_prepare_database.sh mysql scm scm</span><br><span class=\"line\">Enter SCM password: </span><br><span class=\"line\">JAVA_HOME=/usr/java/jdk1.8.0_162</span><br><span class=\"line\">Verifying that we can write to /etc/cloudera-scm-server</span><br><span class=\"line\">Creating SCM configuration file in /etc/cloudera-scm-server</span><br><span class=\"line\">Executing:  /usr/java/jdk1.8.0_162/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/usr/share/java/postgresql-connector-java.jar:/usr/share/cmf/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.</span><br><span class=\"line\">[                          main] DbCommandExecutor              INFO  Successfully connected to database.</span><br><span class=\"line\">All done, your SCM database is configured correctly!</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前置要求: 系统环境,jdk,database,connector,元数据库,配置cdh的repo(rpm)/http(parcel)库;数据库;数据库连接驱动,cms</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动cms</span><br><span class=\"line\">sudo systemctl start cloudera-scm-server</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看启动日志</span><br><span class=\"line\">sudo tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输入如下, 日志出现 Started Jetty server. ,启动成功</span><br><span class=\"line\">[yangzhaoyunfei@foo-1 ~]$ sudo tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log</span><br><span class=\"line\">2018-08-29 14:00:36,582 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Generating entities:2018-08-29T06:00:36.582Z</span><br><span class=\"line\">2018-08-29 14:00:36,590 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Num entities:208</span><br><span class=\"line\">2018-08-29 14:00:36,590 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Generating documents:2018-08-29T06:00:36.590Z</span><br><span class=\"line\">2018-08-29 14:00:36,630 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Num docs:221</span><br><span class=\"line\">2018-08-29 14:00:36,630 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Constructing repo:2018-08-29T06:00:36.630Z</span><br><span class=\"line\">2018-08-29 14:00:37,249 INFO WebServerImpl:org.mortbay.log: jetty-6.1.26.cloudera.4</span><br><span class=\"line\">2018-08-29 14:00:37,261 INFO WebServerImpl:org.mortbay.log: Started SelectChannelConnector@0.0.0.0:7180</span><br><span class=\"line\">2018-08-29 14:00:37,261 INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server. #出现这句启动成功</span><br><span class=\"line\">2018-08-29 14:00:37,356 INFO SearchRepositoryManager-0:com.cloudera.server.web.cmf.search.components.SearchRepositoryManager: Finished constructing repo:2018-08-29T06:00:37.356Z</span><br><span class=\"line\">2018-08-29 14:00:42,368 INFO ScmActive-0:com.cloudera.server.cmf.components.ScmActive: ScmActive completed successfully.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>浏览器打开<a href=\"http://192.168.181.128:7180/\">安装界面</a>进行安装</p>\n<ol>\n<li> <code>群集安装--&gt;选择存储库--&gt;选择方法</code></li>\n<li> <code>使用 Parcel (建议)</code> , <code>更多选项</code></li>\n<li> <code>删除所有远程 Parcel 存储库 URL</code></li>\n<li> 添加本地parcel库地址 <code>http://192.168.181.128/cloudera-parcels/cdh5/5.15.1/</code></li>\n<li> 其他 <code>Spark 2,Sqoop Connectors,cdh5</code> 等组件设置等同.</li>\n<li> 选择您要安装在主机上的 Cloudera Manager Agent 特定发行版,<code>自定义存储库</code></li>\n<li> agent存储库地址为上面配置过的cm repo地址 <code>http://192.168.181.128/cm/5/</code></li>\n<li> 因为配置过<code>ssh互信</code>,<code>提供 SSH 登录凭据</code> 选择 <code>接受相同私钥,把master的私钥下载后选中</code></li>\n</ol>\n<p>解决检查出的问题后继续</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloudera 建议将 /proc/sys/vm/swappiness 设置为最大值 10。当前设置为 60。使用 sysctl 命令在运行时更改该设置并编辑 /etc/sysctl.conf，以在重启后保存该设置。您可以继续进行安装，但 Cloudera Manager 可能会报告您的主机由于交换而运行状况不良。以下主机将受到影响： </span><br><span class=\"line\"> 查看详细信息</span><br><span class=\"line\">foo-[1-3].mycluster.com</span><br><span class=\"line\">已启用透明大页面压缩，可能会导致重大性能问题。请运行&quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag&quot;和&quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&quot;以禁用此设置，然后将同一命令添加到 /etc/rc.local 等初始化脚本中，以便在系统重启时予以设置。以下主机将受到影响: </span><br><span class=\"line\"> 查看详细信息</span><br><span class=\"line\">foo-[1-3].mycluster.com</span><br></pre></td></tr></table></figure>\n\n<p>查看前面相关的数据库设置</p>\n<p>保持默认即可</p>\n<p>等待部署完成</p>\n<ol>\n<li> 修改最大线程数IO等限制(暂不进行)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/systemd/system.conf</span><br><span class=\"line\"># 修改如下内容</span><br><span class=\"line\">DefaultLimitCORE=infinity</span><br><span class=\"line\">DefaultLimitNOFILE=100000</span><br><span class=\"line\">DefaultLimitNPROC=100000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li> 关闭THP(脚本中已有)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 检查状态</span><br><span class=\"line\">cat /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class=\"line\"># output: [always] madvise never</span><br><span class=\"line\">cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class=\"line\"># output: [always] madvise never</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改启动脚本,每次开机都禁用它们</span><br><span class=\"line\">cat&gt;&gt;/etc/rc.d/rc.local&lt;&lt;EOF</span><br><span class=\"line\">####################### 自行添加 ###########################</span><br><span class=\"line\">if test -f /sys/kernel/mm/transparent_hugepage/enabled; then</span><br><span class=\"line\">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class=\"line\">fi</span><br><span class=\"line\">if test -f /sys/kernel/mm/transparent_hugepage/defrag; then</span><br><span class=\"line\">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class=\"line\">fi</span><br><span class=\"line\">####################### 自行添加 ###########################</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x /etc/rc.d/rc.local</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li> 内核参数优化(暂不进行,应该由专业运维人员来做)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加以下内容</span><br><span class=\"line\">cat&gt;&gt;/etc/sysctl.conf&lt;&lt;EOF</span><br><span class=\"line\">####################### 自行添加 ###########################</span><br><span class=\"line\">#关闭ipv6</span><br><span class=\"line\">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class=\"line\">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class=\"line\"># 避免放大攻击</span><br><span class=\"line\">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><br><span class=\"line\"># 开启恶意icmp错误消息保护</span><br><span class=\"line\">net.ipv4.icmp_ignore_bogus_error_responses = 1</span><br><span class=\"line\">#关闭路由转发</span><br><span class=\"line\">net.ipv4.ip_forward = 0</span><br><span class=\"line\">net.ipv4.conf.all.send_redirects = 0</span><br><span class=\"line\">net.ipv4.conf.default.send_redirects = 0</span><br><span class=\"line\">#开启反向路径过滤</span><br><span class=\"line\">net.ipv4.conf.all.rp_filter = 1</span><br><span class=\"line\">net.ipv4.conf.default.rp_filter = 1</span><br><span class=\"line\">#处理无源路由的包</span><br><span class=\"line\">net.ipv4.conf.all.accept_source_route = 0</span><br><span class=\"line\">net.ipv4.conf.default.accept_source_route = 0</span><br><span class=\"line\">#关闭sysrq功能</span><br><span class=\"line\">kernel.sysrq = 0</span><br><span class=\"line\">#core文件名中添加pid作为扩展名</span><br><span class=\"line\">kernel.core_uses_pid = 1</span><br><span class=\"line\"># 开启SYN洪水攻击保护</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">#修改消息队列长度</span><br><span class=\"line\">kernel.msgmnb = 65536</span><br><span class=\"line\">kernel.msgmax = 65536</span><br><span class=\"line\">#设置最大内存共享段大小bytes</span><br><span class=\"line\">kernel.shmmax = 68719476736</span><br><span class=\"line\">kernel.shmall = 4294967296</span><br><span class=\"line\">#timewait的数量，默认180000</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 6000</span><br><span class=\"line\">net.ipv4.tcp_sack = 1</span><br><span class=\"line\">net.ipv4.tcp_window_scaling = 1</span><br><span class=\"line\">net.ipv4.tcp_rmem = 4096 87380 4194304</span><br><span class=\"line\">net.ipv4.tcp_wmem = 4096 16384 4194304</span><br><span class=\"line\">net.core.wmem_default = 8388608</span><br><span class=\"line\">net.core.rmem_default = 8388608</span><br><span class=\"line\">net.core.rmem_max = 16777216</span><br><span class=\"line\">net.core.wmem_max = 16777216</span><br><span class=\"line\">#每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</span><br><span class=\"line\">net.core.netdev_max_backlog = 262144</span><br><span class=\"line\">#限制仅仅是为了防止简单的DoS 攻击</span><br><span class=\"line\">net.ipv4.tcp_max_orphans = 3276800</span><br><span class=\"line\">#未收到客户端确认信息的连接请求的最大值</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class=\"line\">net.ipv4.tcp_timestamps = 0</span><br><span class=\"line\">#内核放弃建立连接之前发送SYNACK 包的数量</span><br><span class=\"line\">net.ipv4.tcp_synack_retries = 1</span><br><span class=\"line\">#内核放弃建立连接之前发送SYN 包的数量</span><br><span class=\"line\">net.ipv4.tcp_syn_retries = 1</span><br><span class=\"line\">#启用timewait 快速回收</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">#开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接</span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 1</span><br><span class=\"line\">#当keepalive 起用的时候，TCP 发送keepalive 消息的频度。缺省是2 小时</span><br><span class=\"line\">net.ipv4.tcp_keepalive_time = 30</span><br><span class=\"line\">#允许系统打开的端口范围</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 1024 65000</span><br><span class=\"line\">#修改防火墙表大小，默认65536</span><br><span class=\"line\"></span><br><span class=\"line\">#系统级别的能够打开的文件句柄的数量,ulimit 是进程级别的</span><br><span class=\"line\">fs.file-max = 265535</span><br><span class=\"line\">#系统允许的最大跟踪连接条目。在/etc/sysctl.conf文件中增加此属性，并运行&gt;/sbin/sysctl.conf –p</span><br><span class=\"line\">net.ipv4.ip_conntrack_max=265535</span><br><span class=\"line\"></span><br><span class=\"line\"># 确保无人能修改路由表</span><br><span class=\"line\">net.ipv4.conf.all.accept_redirects = 0</span><br><span class=\"line\">net.ipv4.conf.default.accept_redirects = 0</span><br><span class=\"line\">net.ipv4.conf.all.secure_redirects = 0</span><br><span class=\"line\">net.ipv4.conf.default.secure_redirects = 0</span><br><span class=\"line\">net.nf_conntrack_max = 6553600</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果在sysctl -p的时候报error: &#x27;net.ipv4.ip_conntrack_max&#x27; is an unknown key ,通过以下命令向内核中加入模块修正：</span><br><span class=\"line\">modprobe ip_conntrack</span><br><span class=\"line\">echo &quot;modprobe ip_conntrack&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\"># net.netfilter.nf_conntrack_max=655350</span><br><span class=\"line\"># net.netfilter.nf_conntrack_tcp_timeout_established=1200</span><br><span class=\"line\">####################### 自行添加 ###########################</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"># 从/etc/sysctl.conf加载内核参数</span><br><span class=\"line\">sysctl -p</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>1.Disable the tuned Service(暂不进行)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start tuned</span><br><span class=\"line\">tuned-adm off</span><br><span class=\"line\">tuned-adm list</span><br><span class=\"line\"># 输出中应该包含如下字样</span><br><span class=\"line\"># No current active profile</span><br><span class=\"line\">systemctl stop tuned</span><br><span class=\"line\">systemctl disable tuned</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>8.系统优化 ALL 禁用交换分区 sysctl -w vm.swappiness=0 禁用透明大页面 echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</p>\n<ol>\n<li> chrony时间同步存在问题,显示不可达</li>\n<li> linux系统还有几项可以优化</li>\n<li> 脚本还需加入上面的修改项</li>\n</ol>\n<p>InstallCDH_SSH.sh 文件内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 该脚本的参数有三个,username,password,hostnames-file:</span><br><span class=\"line\"># hostnames-file 内容示例,如:</span><br><span class=\"line\"># 192.168.181.128=foo-1.mycluster.com</span><br><span class=\"line\"># 192.168.181.129=foo-2.mycluster.com</span><br><span class=\"line\"># 192.168.181.130=foo-3.mycluster.com</span><br><span class=\"line\"># 192.168.181.131=foo-4.mycluster.com</span><br><span class=\"line\"># 192.168.181.132=foo-5.mycluster.com</span><br><span class=\"line\"># 192.168.181.133=foo-6.mycluster.com</span><br><span class=\"line\"># 192.168.181.134=foo-7.mycluster.com</span><br><span class=\"line\"># 192.168.181.135=foo-8.mycluster.com</span><br><span class=\"line\"># 192.168.181.136=foo-9.mycluster.com</span><br><span class=\"line\"># </span><br><span class=\"line\"># 该脚本执行前需要按说明文档中先完成前置工作:</span><br><span class=\"line\"># 1.createhostfile()中,</span><br><span class=\"line\"># 2.createssh()中,</span><br><span class=\"line\"># 3.createssh()中,repo文件,jdk文件需要放到第一台机器的httpd服务器中,供其所有机器下载</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $# -ne 3 ]; then # 如果传入的参数不是3个</span><br><span class=\"line\">    echo &quot;Usage:&quot;</span><br><span class=\"line\">    echo &quot;$0  linuxuser linuxpasswd hostsFile&quot;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取参数</span><br><span class=\"line\">linuxuser=$1</span><br><span class=\"line\">linuxpasswd=$2</span><br><span class=\"line\">hostfilename=$3</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建/etc/hosts文件,这个函数仅操作第一台机器</span><br><span class=\"line\">createhostfile()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"># 读取变量1个字符的变量,并赋给answer</span><br><span class=\"line\">read -n 1 -p &quot;需要重置host文件吗？(y/n)?&quot; answer</span><br><span class=\"line\"></span><br><span class=\"line\">case $answer in</span><br><span class=\"line\">Y | y)</span><br><span class=\"line\">        local hostfile=$1 # 局部变量</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 01 开始生成 /etc/hosts 文件&quot;</span><br><span class=\"line\">        cat /dev/null&gt;/etc/hosts # 清空hosts文件</span><br><span class=\"line\">        echo &quot;127.0.0.1 localhost&quot;</span><br><span class=\"line\">        for line in `cat $hostfile`</span><br><span class=\"line\">        do </span><br><span class=\"line\">            ip=`echo $line|awk -F&#x27;=&#x27; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">            hostname=`echo $line|awk -F&#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">            echo &quot;$ip $hostname&quot;&gt;&gt;/etc/hosts # 追加</span><br><span class=\"line\">        done  </span><br><span class=\"line\">        echo &quot;127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4&quot;&gt;&gt;/etc/hosts</span><br><span class=\"line\">        echo &quot;::1         localhost localhost.localdomain localhost6 localhost6.localdomain6&quot;&gt;&gt;/etc/hosts</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 01 生成 /etc/hosts 文件完成，请查看&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; =========================&quot;</span><br><span class=\"line\">        cat /etc/hosts</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; =========================&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot;&quot;</span><br><span class=\"line\">        read -n1 -p &quot;请确认是否正确？(y/n)?&quot; answer</span><br><span class=\"line\">        case $answer in</span><br><span class=\"line\">        Y | y)</span><br><span class=\"line\">              echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 01 生成 /etc/hosts 文件完成&quot;</span><br><span class=\"line\">              echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot; </span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        N | n)</span><br><span class=\"line\">              echo &quot;请确认传入参数文件是否正确&quot;</span><br><span class=\"line\">              exit 1</span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">              echo &quot;error choice&quot;</span><br><span class=\"line\">              exit 1</span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        esac  </span><br><span class=\"line\">      ;;</span><br><span class=\"line\">N | n)</span><br><span class=\"line\">      echo &quot;跳过&quot; </span><br><span class=\"line\">      ;; </span><br><span class=\"line\">esac  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 免密登陆,这里只需在一个主机上信任自身,然后拷贝到其他机器上,即可完成整个集群的互信</span><br><span class=\"line\">createssh()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">read -n 1 -p &quot;需要重置SSH吗？(y/n)?&quot; answer</span><br><span class=\"line\"></span><br><span class=\"line\">case $answer in</span><br><span class=\"line\">Y | y)</span><br><span class=\"line\">               </span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 02 开始自动化建立SSH互信&quot;</span><br><span class=\"line\">        local DEST_USER=$1</span><br><span class=\"line\">        local PASSWORD=$2</span><br><span class=\"line\">        local HOSTS_FILE=$3</span><br><span class=\"line\">        if [ $# -ne 3 ]; then</span><br><span class=\"line\">            echo &quot;Usage:&quot;</span><br><span class=\"line\">            echo &quot;$0 remoteUser remotePassword hostsFile&quot;</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">        fi</span><br><span class=\"line\"></span><br><span class=\"line\">        SSH_DIR=~/.ssh</span><br><span class=\"line\">        SCRIPT_PREFIX=./tmp</span><br><span class=\"line\">        # 1. prepare  directory .ssh</span><br><span class=\"line\">        mkdir $SSH_DIR</span><br><span class=\"line\">        chmod 700 $SSH_DIR</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. generat ssh key</span><br><span class=\"line\">        TMP_SCRIPT=$SCRIPT_PREFIX.sh # ./tmp.sh</span><br><span class=\"line\">        echo  &quot;#!/usr/bin/expect&quot;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;spawn ssh-keygen -b 1024 -t rsa&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;expect *key*&quot;&gt;&gt;$TMP_SCRIPT # 检测到&#x27;key&#x27;</span><br><span class=\"line\">        echo  &quot;send \\r&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        if [ -f $SSH_DIR/id_rsa ]; then # 检测文件是否为普通文件</span><br><span class=\"line\">            echo  &quot;expect *verwrite*&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">            echo  &quot;send y\\r&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        echo  &quot;expect *passphrase*&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;send \\r&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;expect *again:&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;send \\r&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">        echo  &quot;interact&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">        chmod +x $TMP_SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">        /usr/bin/expect $TMP_SCRIPT</span><br><span class=\"line\">        rm $TMP_SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">        ################### 3. generat file authorized_keys</span><br><span class=\"line\">        cat $SSH_DIR/id_rsa.pub&gt;&gt;$SSH_DIR/authorized_keys # 将本机id加到信任列表</span><br><span class=\"line\"></span><br><span class=\"line\">        ################### 4. chmod 600 for file authorized_keys</span><br><span class=\"line\">        chmod 600 $SSH_DIR/authorized_keys</span><br><span class=\"line\">        echo &quot;===========================&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ################### 5. copy all files to other hosts</span><br><span class=\"line\">        for ip in `cat $HOSTS_FILE|awk -F&#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`  # 对每个主机搜索</span><br><span class=\"line\">        do</span><br><span class=\"line\">            if [ &quot;x$ip&quot; != &quot;x&quot; ]; then # ip不为空</span><br><span class=\"line\">                echo -------------------------</span><br><span class=\"line\">                TMP_SCRIPT=$&#123;SCRIPT_PREFIX&#125;.$ip.sh</span><br><span class=\"line\">                # check known_hosts</span><br><span class=\"line\">                val=`ssh-keygen -F $ip` # 在 know_hosts 中 find 指定 hostname</span><br><span class=\"line\">                if [ &quot;x$val&quot; == &quot;x&quot; ]; then # 没有搜索到</span><br><span class=\"line\">                    echo &quot;$ip not in $SSH_DIR/known_hosts, need to add&quot;</span><br><span class=\"line\">                    val=`ssh-keyscan $ip 2&gt;/dev/null` # 扫描该主机中的公钥,标错输出到空</span><br><span class=\"line\">                    if [ &quot;x$val&quot; == &quot;x&quot; ]; then # 如果没有扫描到</span><br><span class=\"line\">                        echo &quot;ssh-keyscan $ip failed!&quot;</span><br><span class=\"line\">                    else</span><br><span class=\"line\">                        echo $val&gt;&gt;$SSH_DIR/known_hosts # 将扫描到的公钥添加到</span><br><span class=\"line\">                    fi</span><br><span class=\"line\">                fi</span><br><span class=\"line\">                echo &quot;copy $SSH_DIR to $ip&quot; </span><br><span class=\"line\">                        </span><br><span class=\"line\">                echo  &quot;#!/usr/bin/expect&quot;&gt;$TMP_SCRIPT</span><br><span class=\"line\">                echo  &quot;spawn scp -r  $SSH_DIR $DEST_USER@$ip:~/&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">                echo  &quot;expect *assword*&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">                echo  &quot;send $PASSWORD\\r&quot;&gt;&gt;$TMP_SCRIPT</span><br><span class=\"line\">                echo  &quot;interact&quot;&gt;&gt;$TMP_SCRIPT # 执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了</span><br><span class=\"line\">                </span><br><span class=\"line\">                chmod +x $TMP_SCRIPT</span><br><span class=\"line\">            </span><br><span class=\"line\">                /usr/bin/expect $TMP_SCRIPT</span><br><span class=\"line\">                rm $TMP_SCRIPT</span><br><span class=\"line\">                echo &quot;copy done.&quot;                </span><br><span class=\"line\">            fi</span><br><span class=\"line\">        done</span><br><span class=\"line\"></span><br><span class=\"line\">        echo done.</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 02 建立SSH互信完成，开始验证互信情况&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        for ip in `cat $HOSTS_FILE|awk -F&#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">        do</span><br><span class=\"line\">           localDATE=`date +%Y%m%d`</span><br><span class=\"line\">           REMOTEDATE=`ssh $&#123;ip&#125; date +%Y%m%d`</span><br><span class=\"line\">           if [ $&#123;localDATE&#125;==$&#123;REMOTEDATE&#125; ];then</span><br><span class=\"line\">                echo &quot;主机与远程IP：$&#123;ip&#125; 连通测试成功&quot;</span><br><span class=\"line\">           else</span><br><span class=\"line\">                echo &quot;主机与远程IP：$&#123;ip&#125; 连通测试失败&quot;</span><br><span class=\"line\">           fi</span><br><span class=\"line\">        done</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 02 验证互信情况完成&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot;</span><br><span class=\"line\">        read -n 1 -p &quot;请确认互信情况是否正确？(y/n)?&quot; answer</span><br><span class=\"line\">        case $answer in</span><br><span class=\"line\">        Y | y)</span><br><span class=\"line\">              echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 02 建立SSH互信完成，验证互信成功&quot;</span><br><span class=\"line\">              echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot;</span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        N | n)</span><br><span class=\"line\">              echo &quot;请定位问题&quot;</span><br><span class=\"line\">              exit 1</span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">              echo &quot;error choice&quot;</span><br><span class=\"line\">              exit 1</span><br><span class=\"line\">              ;;</span><br><span class=\"line\">        esac </span><br><span class=\"line\">      ;;</span><br><span class=\"line\">N | n)</span><br><span class=\"line\">      echo &quot;跳过SSH互信&quot; </span><br><span class=\"line\">      ;; </span><br><span class=\"line\">esac  </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 设置主机名</span><br><span class=\"line\">changeHostName()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">read -n 1 -p &quot;需要对每台主机名进行配置吗？(y/n)?&quot; answer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">case $answer in</span><br><span class=\"line\">Y | y)</span><br><span class=\"line\"></span><br><span class=\"line\">    local HOSTS_FILE=$1</span><br><span class=\"line\">    echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ================================================&quot;</span><br><span class=\"line\">    echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 03 开始修改主机名并分发host文件&quot;</span><br><span class=\"line\">    cat&gt;&gt;/etc/profile&lt;&lt;EOF</span><br><span class=\"line\">################################ 自行添加 ###########################</span><br><span class=\"line\"></span><br><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.8.0_162</span><br><span class=\"line\">PATH=\\$PATH:\\$JAVA_HOME/bin/;</span><br><span class=\"line\">export PATH</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">################################ 自行添加 ###########################</span><br><span class=\"line\">EOF</span><br><span class=\"line\">    for line in `cat $HOSTS_FILE`</span><br><span class=\"line\">    do </span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot; </span><br><span class=\"line\">        ip=`echo $line|awk -F&#x27;=&#x27; &#x27;&#123;print $1&#125;&#x27;` # =为分隔符</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; 开始处理 $ip&quot;</span><br><span class=\"line\">        hostname=`echo $line|awk -F&#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">        originhostsname=`ssh $&#123;ip&#125; hostnamectl --static`  </span><br><span class=\"line\">        if [ ! $&#123;hostname&#125; == $&#123;originhostsname&#125; ];then</span><br><span class=\"line\">            echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip 需要修改Host&quot; </span><br><span class=\"line\">            ssh $ip &quot;hostnamectl set-hostname $hostname&quot;</span><br><span class=\"line\">            echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip 修改完毕&quot;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip 不需要修改Hostname&quot; </span><br><span class=\"line\">        fi</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始发送hosts文件&quot;</span><br><span class=\"line\">        scp /etc/hosts root@$hostname:/etc/</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始发送repo文件&quot; </span><br><span class=\"line\">        ######################## 这个http的repo需要实现准备好 #########################################</span><br><span class=\"line\">        scp /etc/yum.repos.d/http.repo  root@$hostname:/etc/yum.repos.d </span><br><span class=\"line\">        files=&quot;/etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-CR.repo /etc/yum.repos.d/CentOS-Debuginfo.repo /etc/yum.repos.d/CentOS-fasttrack.repo /etc/yum.repos.d/CentOS-Media.repo /etc/yum.repos.d/CentOS-Sources.repo /etc/yum.repos.d/CentOS-Vault.repo&quot;</span><br><span class=\"line\">        for file in $files ;do ssh $ip &quot;mv $file $&#123;file&#125;bak&quot; ;done # 备份原有repo</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始处理yum&quot;</span><br><span class=\"line\">        ssh $ip &quot;yum clean all&quot;</span><br><span class=\"line\">        ssh $ip &quot;yum makecache&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始处理SELINUX&quot;</span><br><span class=\"line\">        ssh $ip &quot;setenforce 0&quot;</span><br><span class=\"line\">        ssh $ip &quot;sed -i &#x27;/SELINUX/s/enforcing/disabled/&#x27; /etc/selinux/config&quot; # 将文本中的en..替换成dis..</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始处理防火墙&quot;</span><br><span class=\"line\">        ssh $ip &quot;systemctl stop firewalld&quot;</span><br><span class=\"line\">        ssh $ip &quot;systemctl disable firewalld&quot;</span><br><span class=\"line\">        ssh $ip &quot;systemctl status firewalld&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ############################ 这里是不是跟 这里换用了chrony,而不是老的ntp ##################################</span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始处理NTP时钟同步&quot; </span><br><span class=\"line\">        ssh $ip &quot;yum install -y chrony&quot;</span><br><span class=\"line\">        scp /etc/chrony.conf root@$hostname:/etc/</span><br><span class=\"line\">        ssh $ip &quot;systemctl restart chronyd&quot;</span><br><span class=\"line\">        ssh $ip &quot;chronyc sources&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始下载JDK包并解压&quot; </span><br><span class=\"line\">        # 从预先配置好的apache下载jdk,这里官方文档没有谈到环境变量的问题,但我们应该配置上环境变量,因为其他组件,或者一些自己安装的软件会使用java</span><br><span class=\"line\">        ssh $ip &quot;mkdir -p /usr/java/&quot;</span><br><span class=\"line\">        ssh $ip &quot;rm -rf  /usr/java/jdk-8u162*&quot;</span><br><span class=\"line\">        ssh $ip &quot;curl http://192.168.181.128/softwares/jdk-8u162-linux-x64.tar.gz -o /opt/jdk-8u162-linux-x64.tar.gz --progress&quot;</span><br><span class=\"line\">        ssh $ip &quot;tar -zxf /opt/jdk-8u162-linux-x64.tar.gz -C /usr/java/&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始卸载OPENJDK&quot;</span><br><span class=\"line\">         # mini install 没有jdk,但不同的centos版本,要写在的软件包不同,下面列举的是centos7.4de1</span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64&quot; # 强制卸载</span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64&quot;</span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.141-2.6.10.5.el7.x86_64&quot;</span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.131-11.b12.el7.x86_64&quot; </span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps tzdata-java-2017b-1.el7.noarch&quot; </span><br><span class=\"line\">        ssh $ip &quot;rpm -e --nodeps icedtea-web-1.6.2-4.el7.x86_64&quot; </span><br><span class=\"line\">        #ssh $ip &quot;yum -y install jline*&quot; # ?????????????????</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始发送环境变量&quot; # 如果要使用个命令,先要设置jdk环境变量</span><br><span class=\"line\">        scp /etc/profile root@$ip:/etc/</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始发送环境生效并检查jdk版本信息&quot;</span><br><span class=\"line\">        ssh $ip &quot;source /etc/profile &amp;&amp; java -version&quot; </span><br><span class=\"line\">        #echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 检查JDK版本信息&quot;</span><br><span class=\"line\">        #ssh $ip &quot;java -version&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ############################################## 参数调优部分结束 ####################################################</span><br><span class=\"line\">        </span><br><span class=\"line\">        #echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 修改系统限制&quot;  </span><br><span class=\"line\">        #scp /etc/systemd/system.conf root@$ip:/etc/systemd/</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 关闭THP&quot; </span><br><span class=\"line\">        scp /etc/rc.d/rc.local root@$ip:/etc/rc.d/</span><br><span class=\"line\">        ssh $ip &quot;chmod +x /etc/rc.d/rc.local&quot;</span><br><span class=\"line\">        ssh $ip &quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&quot;</span><br><span class=\"line\">        ssh $ip &quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 关闭交换分区&quot; </span><br><span class=\"line\">        ssh $ip &quot;swapoff -a&quot; </span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 关闭tuned调优&quot; </span><br><span class=\"line\">        ssh $ip &quot;systemctl start tuned&quot; </span><br><span class=\"line\">        ssh $ip &quot;tuned-adm off&quot; </span><br><span class=\"line\">        ssh $ip &quot;tuned-adm list&quot;</span><br><span class=\"line\">        ssh $ip &quot;systemctl stop tuned&quot;</span><br><span class=\"line\">        ssh $ip &quot;systemctl disable tuned&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo -e &quot;\\n\\n\\n&quot;</span><br><span class=\"line\">        echo echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 开始优化内核参数&quot;</span><br><span class=\"line\">        scp /etc/sysctl.conf root@$ip:/etc/</span><br><span class=\"line\">        ssh $ip &quot;sysctl -p&quot;</span><br><span class=\"line\">        #ssh $ip &quot;ulimit –n 265535&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ############################################# 参数调优部分结束 ##################################################</span><br><span class=\"line\">        </span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; $ip&quot;&quot; 处理结束&quot;</span><br><span class=\"line\">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot; </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    done    </span><br><span class=\"line\">    echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot; step 03 修改hostname成功&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">    echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;`&quot;================================================&quot;  </span><br><span class=\"line\">     ;;</span><br><span class=\"line\">N | n)</span><br><span class=\"line\">      echo &quot;跳过对每台主机进行配置&quot; </span><br><span class=\"line\">      ;; </span><br><span class=\"line\">esac </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">createhostfile $hostfilename</span><br><span class=\"line\">createssh $linuxuser $linuxpasswd $hostfilename</span><br><span class=\"line\">changeHostName $hostfilename</span><br><span class=\"line\">echo -e &quot;\\n\\n\\n处理完成\\n\\n\\n&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>hostsname.txt 内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.181.128=foo-1.mycluster.com</span><br><span class=\"line\">192.168.181.129=foo-2.mycluster.com</span><br><span class=\"line\">192.168.181.130=foo-3.mycluster.com</span><br></pre></td></tr></table></figure>"},{"title":"django报错Authentication plugin 'caching_sha2_password)","date":"2021-08-17T03:58:28.000Z","_content":"\n1.报错如下：\n\n```\ndjango.db.utils.OperationalError: (2059, \"Authentication plugin 'caching_sha2_password' cannot be loaded: /usr/lib64/mysql/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory\")\n```\n<!--more-->\n\n2.报错原因:\n\n\n\nmysql8.0提供了一种新的认证加密方式caching_sha2_password，建议需要更新到最新的connector与client。不过它还给了另一种选择，即沿用之前版本的加密方式 mysql_native_password。\n\n3.解决方法：\n(1)：更换低版本mysql\n(2): 更改数据库加密的方式为：mysql_native_password\nmysql -uroot -p\n登录后\n\n```\nuse mysql\nALTER USER 'hue'@'%' IDENTIFIED WITH mysql_native_password BY 'hue';\n```\n\n","source":"_posts/django报错Authentication-plugin-caching-sha2-password.md","raw":"---\ntitle: django报错Authentication plugin 'caching_sha2_password)\ndate: 2021-08-17 11:58:28\ntags:\n- python\ncategories: \n- tools\n---\n\n1.报错如下：\n\n```\ndjango.db.utils.OperationalError: (2059, \"Authentication plugin 'caching_sha2_password' cannot be loaded: /usr/lib64/mysql/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory\")\n```\n<!--more-->\n\n2.报错原因:\n\n\n\nmysql8.0提供了一种新的认证加密方式caching_sha2_password，建议需要更新到最新的connector与client。不过它还给了另一种选择，即沿用之前版本的加密方式 mysql_native_password。\n\n3.解决方法：\n(1)：更换低版本mysql\n(2): 更改数据库加密的方式为：mysql_native_password\nmysql -uroot -p\n登录后\n\n```\nuse mysql\nALTER USER 'hue'@'%' IDENTIFIED WITH mysql_native_password BY 'hue';\n```\n\n","slug":"django报错Authentication-plugin-caching-sha2-password","published":1,"updated":"2021-08-23T00:38:38.705Z","_id":"cksfr6gzi0008iqv97hgt78ux","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.报错如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django.db.utils.OperationalError: (2059, &quot;Authentication plugin &#x27;caching_sha2_password&#x27; cannot be loaded: /usr/lib64/mysql/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory&quot;)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>2.报错原因:</p>\n<p>mysql8.0提供了一种新的认证加密方式caching_sha2_password，建议需要更新到最新的connector与client。不过它还给了另一种选择，即沿用之前版本的加密方式 mysql_native_password。</p>\n<p>3.解决方法：<br>(1)：更换低版本mysql<br>(2): 更改数据库加密的方式为：mysql_native_password<br>mysql -uroot -p<br>登录后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql</span><br><span class=\"line\">ALTER USER &#x27;hue&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;hue&#x27;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>1.报错如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django.db.utils.OperationalError: (2059, &quot;Authentication plugin &#x27;caching_sha2_password&#x27; cannot be loaded: /usr/lib64/mysql/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory&quot;)</span><br></pre></td></tr></table></figure>","more":"<p>2.报错原因:</p>\n<p>mysql8.0提供了一种新的认证加密方式caching_sha2_password，建议需要更新到最新的connector与client。不过它还给了另一种选择，即沿用之前版本的加密方式 mysql_native_password。</p>\n<p>3.解决方法：<br>(1)：更换低版本mysql<br>(2): 更改数据库加密的方式为：mysql_native_password<br>mysql -uroot -p<br>登录后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql</span><br><span class=\"line\">ALTER USER &#x27;hue&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;hue&#x27;;</span><br></pre></td></tr></table></figure>"},{"title":"Postgresql数据库cpu使用率高排查和解决","date":"2021-08-13T01:48:13.000Z","_content":"\n### 追踪慢SQL\n\nCPU使用率高，往往是因为数据库当时在执行比较耗时的SQL，所以处理问题的关键点就是找出执行慢的SQL。下面就介绍一些能追查到慢SQL的方法。\n\n <!--more-->\n\n\n**一. 直接定位进程法**，步骤如下：\n\n1. 通过`top`和`ps`命令，直接定位到是哪个进程占用cpu高，拿到进程ID\n\n2. 通过进程ID，结合pg_stat_activity得到该进程对应的SQL\n\n   ```\n    select * from pg_stat_activity where pid=进程ID\n   ```\n\n此方法不适用于云数据库，因为用户没有查看云数据库进程的权限。\n\n \n\n**二. 通过pg_stat_statements插件定位**\n\n在使用pg_stat_statements之前，数据需要先安装pg_stat_statements插件，安装方法简单概括如下：\n\n①编译安装\n\n②修改postgresql.conf的`shared_preload_libraries`增加pg_stat_statements来载入\n\n③执行SQL启动插件：`create extension pg_stat_statements;`\n\n一般云数据库已经预先安装了pg_stat_statements， 所以可以跳过安装步骤。一切就绪后，可通过如下步骤查找慢SQL：\n\n1. 重置计数器（可选操作）。\n\n   ```\n   select pg_stat_reset();\n   ```\n\n   ```\n   select pg_stat_statements_reset();\n   ```\n\n2. 使用命令查看最耗时的SQL\n\n   ```\n   select * from pg_stat_statements order by total_time desc limit 5;\n   ```\n\n3. 查询读取Buffer次数最多的SQL，buffer次数多，可能是因为没有索引，也同时导致了cpu高。\n\n   ```\n   select * from pg_stat_statements order by shared_blks_hit+shared_blks_read desc limit 5;\n   ```\n\n \n\n**三. 通过pg_stat_activity，查找当前正在执行且已经执行了很久的SQL**\n\n- 参考如下sql\n\n  ```\n  select datname,\n  ```\n\n  ```\n         usename,\n  ```\n\n  ```\n         client_addr,\n  ```\n\n  ```\n         application_name,\n  ```\n\n  ```\n         state,\n  ```\n\n  ```\n         backend_start,\n  ```\n\n  ```\n         xact_start,\n  ```\n\n  ```\n         xact_stay,\n  ```\n\n  ```\n         query_start,\n  ```\n\n  ```\n         query_stay,\n  ```\n\n  ```\n         replace(query, chr(10), ' ') as query\n  ```\n\n  ```\n  from\n  ```\n\n  ```\n    (select pgsa.datname as datname,\n  ```\n\n  ```\n            pgsa.usename as usename,\n  ```\n\n  ```\n            pgsa.client_addr client_addr,\n  ```\n\n  ```\n            pgsa.application_name as application_name,\n  ```\n\n  ```\n            pgsa.state as state,\n  ```\n\n  ```\n            pgsa.backend_start as backend_start,\n  ```\n\n  ```\n            pgsa.xact_start as xact_start,\n  ```\n\n  ```\n            extract(epoch\n  ```\n\n  ```\n                    from (now() - pgsa.xact_start)) as xact_stay,\n  ```\n\n  ```\n            pgsa.query_start as query_start,\n  ```\n\n  ```\n            extract(epoch\n  ```\n\n  ```\n                    from (now() - pgsa.query_start)) as query_stay,\n  ```\n\n  ```\n            pgsa.query as query\n  ```\n\n  ```\n     from pg_stat_activity as pgsa\n  ```\n\n  ```\n     where pgsa.state != 'idle'\n  ```\n\n  ```\n       and pgsa.state != 'idle in transaction'\n  ```\n\n  ```\n       and pgsa.state != 'idle in transaction (aborted)') idleconnections\n  ```\n\n  ```\n  order by query_stay desc\n  ```\n\n  ```\n  limit 5;\n  ```\n\n \n\n**四. 通过慢查询日志**\n\n在权限有限的情况下，日志或许是唯一能追踪问题的方式。但要注意的是，cpu使用率的时候，原本不慢的sql也会变慢，从而产生慢查询日志，对查错会产生一定误导性。\n\n \n\n**五. 找出全表扫描最多的表**\n\nCPU使用率高，有可能是因为没有建索引，导致大量的全表扫描。所以找出这些没索引，而且查询次数多的表，也是一种解决问题的思路。\n\n1. 参考如下SQL语句，查出使用表扫描最多的表。\n\n   ```\n   select * from pg_stat_user_tables where n_live_tup > 100000 and seq_scan > 0 order by seq_tup_read desc limit 10;\n   ```\n\n2. 参考如下SQL语句，查询当前正在运行的访问到上述表的慢查询。\n\n   ```\n   select * from pg_stat_activity where query ilike '%<table name>%' and query_start - now() > interval '10 seconds';\n   ```\n\n \n\n## 处理慢SQL\n\n1. 对于已经排查出来的慢SQL，可以先杀掉他们，让业务先恢复\n\n   ```\n   select pg_cancel_backend(pid)\n   ```\n\n   ```\n   select pg_terminate_backend(pid)\n   ```\n\n2. 使用explain查看sql执行过程，对其中显示慢的点进行优化。比如对其中的Table Scan涉及的表，建立索引。\n\n   ```\n   explain {sql}\n   ```\n\n   ```\n   explain (buffers true, analyze true, verbose true) {sql}\n   ```\n\n3. 对sql进行优化，去掉子查询、调整join顺序、去掉like模糊查询等等\n\n \n","source":"_posts/Postgresql数据库cpu使用率高排查和解决.md","raw":"---\ntitle: Postgresql数据库cpu使用率高排查和解决\ndate: 2021-08-13 09:48:13\ntags:\n- postgres\n- sql\ncategories: \n- 数据库\n---\n\n### 追踪慢SQL\n\nCPU使用率高，往往是因为数据库当时在执行比较耗时的SQL，所以处理问题的关键点就是找出执行慢的SQL。下面就介绍一些能追查到慢SQL的方法。\n\n <!--more-->\n\n\n**一. 直接定位进程法**，步骤如下：\n\n1. 通过`top`和`ps`命令，直接定位到是哪个进程占用cpu高，拿到进程ID\n\n2. 通过进程ID，结合pg_stat_activity得到该进程对应的SQL\n\n   ```\n    select * from pg_stat_activity where pid=进程ID\n   ```\n\n此方法不适用于云数据库，因为用户没有查看云数据库进程的权限。\n\n \n\n**二. 通过pg_stat_statements插件定位**\n\n在使用pg_stat_statements之前，数据需要先安装pg_stat_statements插件，安装方法简单概括如下：\n\n①编译安装\n\n②修改postgresql.conf的`shared_preload_libraries`增加pg_stat_statements来载入\n\n③执行SQL启动插件：`create extension pg_stat_statements;`\n\n一般云数据库已经预先安装了pg_stat_statements， 所以可以跳过安装步骤。一切就绪后，可通过如下步骤查找慢SQL：\n\n1. 重置计数器（可选操作）。\n\n   ```\n   select pg_stat_reset();\n   ```\n\n   ```\n   select pg_stat_statements_reset();\n   ```\n\n2. 使用命令查看最耗时的SQL\n\n   ```\n   select * from pg_stat_statements order by total_time desc limit 5;\n   ```\n\n3. 查询读取Buffer次数最多的SQL，buffer次数多，可能是因为没有索引，也同时导致了cpu高。\n\n   ```\n   select * from pg_stat_statements order by shared_blks_hit+shared_blks_read desc limit 5;\n   ```\n\n \n\n**三. 通过pg_stat_activity，查找当前正在执行且已经执行了很久的SQL**\n\n- 参考如下sql\n\n  ```\n  select datname,\n  ```\n\n  ```\n         usename,\n  ```\n\n  ```\n         client_addr,\n  ```\n\n  ```\n         application_name,\n  ```\n\n  ```\n         state,\n  ```\n\n  ```\n         backend_start,\n  ```\n\n  ```\n         xact_start,\n  ```\n\n  ```\n         xact_stay,\n  ```\n\n  ```\n         query_start,\n  ```\n\n  ```\n         query_stay,\n  ```\n\n  ```\n         replace(query, chr(10), ' ') as query\n  ```\n\n  ```\n  from\n  ```\n\n  ```\n    (select pgsa.datname as datname,\n  ```\n\n  ```\n            pgsa.usename as usename,\n  ```\n\n  ```\n            pgsa.client_addr client_addr,\n  ```\n\n  ```\n            pgsa.application_name as application_name,\n  ```\n\n  ```\n            pgsa.state as state,\n  ```\n\n  ```\n            pgsa.backend_start as backend_start,\n  ```\n\n  ```\n            pgsa.xact_start as xact_start,\n  ```\n\n  ```\n            extract(epoch\n  ```\n\n  ```\n                    from (now() - pgsa.xact_start)) as xact_stay,\n  ```\n\n  ```\n            pgsa.query_start as query_start,\n  ```\n\n  ```\n            extract(epoch\n  ```\n\n  ```\n                    from (now() - pgsa.query_start)) as query_stay,\n  ```\n\n  ```\n            pgsa.query as query\n  ```\n\n  ```\n     from pg_stat_activity as pgsa\n  ```\n\n  ```\n     where pgsa.state != 'idle'\n  ```\n\n  ```\n       and pgsa.state != 'idle in transaction'\n  ```\n\n  ```\n       and pgsa.state != 'idle in transaction (aborted)') idleconnections\n  ```\n\n  ```\n  order by query_stay desc\n  ```\n\n  ```\n  limit 5;\n  ```\n\n \n\n**四. 通过慢查询日志**\n\n在权限有限的情况下，日志或许是唯一能追踪问题的方式。但要注意的是，cpu使用率的时候，原本不慢的sql也会变慢，从而产生慢查询日志，对查错会产生一定误导性。\n\n \n\n**五. 找出全表扫描最多的表**\n\nCPU使用率高，有可能是因为没有建索引，导致大量的全表扫描。所以找出这些没索引，而且查询次数多的表，也是一种解决问题的思路。\n\n1. 参考如下SQL语句，查出使用表扫描最多的表。\n\n   ```\n   select * from pg_stat_user_tables where n_live_tup > 100000 and seq_scan > 0 order by seq_tup_read desc limit 10;\n   ```\n\n2. 参考如下SQL语句，查询当前正在运行的访问到上述表的慢查询。\n\n   ```\n   select * from pg_stat_activity where query ilike '%<table name>%' and query_start - now() > interval '10 seconds';\n   ```\n\n \n\n## 处理慢SQL\n\n1. 对于已经排查出来的慢SQL，可以先杀掉他们，让业务先恢复\n\n   ```\n   select pg_cancel_backend(pid)\n   ```\n\n   ```\n   select pg_terminate_backend(pid)\n   ```\n\n2. 使用explain查看sql执行过程，对其中显示慢的点进行优化。比如对其中的Table Scan涉及的表，建立索引。\n\n   ```\n   explain {sql}\n   ```\n\n   ```\n   explain (buffers true, analyze true, verbose true) {sql}\n   ```\n\n3. 对sql进行优化，去掉子查询、调整join顺序、去掉like模糊查询等等\n\n \n","slug":"Postgresql数据库cpu使用率高排查和解决","published":1,"updated":"2021-08-23T00:38:38.699Z","_id":"cksfr6gzj0009iqv92c9l16mn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"追踪慢SQL\"><a href=\"#追踪慢SQL\" class=\"headerlink\" title=\"追踪慢SQL\"></a>追踪慢SQL</h3><p>CPU使用率高，往往是因为数据库当时在执行比较耗时的SQL，所以处理问题的关键点就是找出执行慢的SQL。下面就介绍一些能追查到慢SQL的方法。</p>\n <span id=\"more\"></span>\n\n\n<p><strong>一. 直接定位进程法</strong>，步骤如下：</p>\n<ol>\n<li><p>通过<code>top</code>和<code>ps</code>命令，直接定位到是哪个进程占用cpu高，拿到进程ID</p>\n</li>\n<li><p>通过进程ID，结合pg_stat_activity得到该进程对应的SQL</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_stat_activity where pid=进程ID</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>此方法不适用于云数据库，因为用户没有查看云数据库进程的权限。</p>\n<p><strong>二. 通过pg_stat_statements插件定位</strong></p>\n<p>在使用pg_stat_statements之前，数据需要先安装pg_stat_statements插件，安装方法简单概括如下：</p>\n<p>①编译安装</p>\n<p>②修改postgresql.conf的<code>shared_preload_libraries</code>增加pg_stat_statements来载入</p>\n<p>③执行SQL启动插件：<code>create extension pg_stat_statements;</code></p>\n<p>一般云数据库已经预先安装了pg_stat_statements， 所以可以跳过安装步骤。一切就绪后，可通过如下步骤查找慢SQL：</p>\n<ol>\n<li><p>重置计数器（可选操作）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_stat_reset();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_stat_statements_reset();</span><br></pre></td></tr></table></figure></li>\n<li><p>使用命令查看最耗时的SQL</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_stat_statements order by total_time desc limit 5;</span><br></pre></td></tr></table></figure></li>\n<li><p>查询读取Buffer次数最多的SQL，buffer次数多，可能是因为没有索引，也同时导致了cpu高。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_stat_statements order by shared_blks_hit+shared_blks_read desc limit 5;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>三. 通过pg_stat_activity，查找当前正在执行且已经执行了很久的SQL</strong></p>\n<ul>\n<li><p>参考如下sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select datname,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usename,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client_addr,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application_name,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backend_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xact_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xact_stay,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query_stay,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace(query, chr(10), &#x27; &#x27;) as query</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(select pgsa.datname as datname,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.usename as usename,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.client_addr client_addr,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.application_name as application_name,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.state as state,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.backend_start as backend_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.xact_start as xact_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extract(epoch</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from (now() - pgsa.xact_start)) as xact_stay,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.query_start as query_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extract(epoch</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from (now() - pgsa.query_start)) as query_stay,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.query as query</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pg_stat_activity as pgsa</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">where pgsa.state != &#x27;idle&#x27;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and pgsa.state != &#x27;idle in transaction&#x27;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and pgsa.state != &#x27;idle in transaction (aborted)&#x27;) idleconnections</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by query_stay desc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit 5;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>四. 通过慢查询日志</strong></p>\n<p>在权限有限的情况下，日志或许是唯一能追踪问题的方式。但要注意的是，cpu使用率的时候，原本不慢的sql也会变慢，从而产生慢查询日志，对查错会产生一定误导性。</p>\n<p><strong>五. 找出全表扫描最多的表</strong></p>\n<p>CPU使用率高，有可能是因为没有建索引，导致大量的全表扫描。所以找出这些没索引，而且查询次数多的表，也是一种解决问题的思路。</p>\n<ol>\n<li><p>参考如下SQL语句，查出使用表扫描最多的表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_stat_user_tables where n_live_tup &gt; 100000 and seq_scan &gt; 0 order by seq_tup_read desc limit 10;</span><br></pre></td></tr></table></figure></li>\n<li><p>参考如下SQL语句，查询当前正在运行的访问到上述表的慢查询。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_stat_activity where query ilike &#x27;%&lt;table name&gt;%&#x27; and query_start - now() &gt; interval &#x27;10 seconds&#x27;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"处理慢SQL\"><a href=\"#处理慢SQL\" class=\"headerlink\" title=\"处理慢SQL\"></a>处理慢SQL</h2><ol>\n<li><p>对于已经排查出来的慢SQL，可以先杀掉他们，让业务先恢复</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_cancel_backend(pid)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_terminate_backend(pid)</span><br></pre></td></tr></table></figure></li>\n<li><p>使用explain查看sql执行过程，对其中显示慢的点进行优化。比如对其中的Table Scan涉及的表，建立索引。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explain &#123;sql&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explain (buffers true, analyze true, verbose true) &#123;sql&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>对sql进行优化，去掉子查询、调整join顺序、去掉like模糊查询等等</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"追踪慢SQL\"><a href=\"#追踪慢SQL\" class=\"headerlink\" title=\"追踪慢SQL\"></a>追踪慢SQL</h3><p>CPU使用率高，往往是因为数据库当时在执行比较耗时的SQL，所以处理问题的关键点就是找出执行慢的SQL。下面就介绍一些能追查到慢SQL的方法。</p>","more":"<p><strong>一. 直接定位进程法</strong>，步骤如下：</p>\n<ol>\n<li><p>通过<code>top</code>和<code>ps</code>命令，直接定位到是哪个进程占用cpu高，拿到进程ID</p>\n</li>\n<li><p>通过进程ID，结合pg_stat_activity得到该进程对应的SQL</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_stat_activity where pid=进程ID</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>此方法不适用于云数据库，因为用户没有查看云数据库进程的权限。</p>\n<p><strong>二. 通过pg_stat_statements插件定位</strong></p>\n<p>在使用pg_stat_statements之前，数据需要先安装pg_stat_statements插件，安装方法简单概括如下：</p>\n<p>①编译安装</p>\n<p>②修改postgresql.conf的<code>shared_preload_libraries</code>增加pg_stat_statements来载入</p>\n<p>③执行SQL启动插件：<code>create extension pg_stat_statements;</code></p>\n<p>一般云数据库已经预先安装了pg_stat_statements， 所以可以跳过安装步骤。一切就绪后，可通过如下步骤查找慢SQL：</p>\n<ol>\n<li><p>重置计数器（可选操作）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_stat_reset();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_stat_statements_reset();</span><br></pre></td></tr></table></figure></li>\n<li><p>使用命令查看最耗时的SQL</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_stat_statements order by total_time desc limit 5;</span><br></pre></td></tr></table></figure></li>\n<li><p>查询读取Buffer次数最多的SQL，buffer次数多，可能是因为没有索引，也同时导致了cpu高。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_stat_statements order by shared_blks_hit+shared_blks_read desc limit 5;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>三. 通过pg_stat_activity，查找当前正在执行且已经执行了很久的SQL</strong></p>\n<ul>\n<li><p>参考如下sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select datname,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usename,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client_addr,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application_name,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backend_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xact_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xact_stay,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query_stay,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace(query, chr(10), &#x27; &#x27;) as query</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(select pgsa.datname as datname,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.usename as usename,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.client_addr client_addr,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.application_name as application_name,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.state as state,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.backend_start as backend_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.xact_start as xact_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extract(epoch</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from (now() - pgsa.xact_start)) as xact_stay,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.query_start as query_start,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extract(epoch</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from (now() - pgsa.query_start)) as query_stay,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgsa.query as query</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pg_stat_activity as pgsa</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">where pgsa.state != &#x27;idle&#x27;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and pgsa.state != &#x27;idle in transaction&#x27;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and pgsa.state != &#x27;idle in transaction (aborted)&#x27;) idleconnections</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by query_stay desc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit 5;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>四. 通过慢查询日志</strong></p>\n<p>在权限有限的情况下，日志或许是唯一能追踪问题的方式。但要注意的是，cpu使用率的时候，原本不慢的sql也会变慢，从而产生慢查询日志，对查错会产生一定误导性。</p>\n<p><strong>五. 找出全表扫描最多的表</strong></p>\n<p>CPU使用率高，有可能是因为没有建索引，导致大量的全表扫描。所以找出这些没索引，而且查询次数多的表，也是一种解决问题的思路。</p>\n<ol>\n<li><p>参考如下SQL语句，查出使用表扫描最多的表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_stat_user_tables where n_live_tup &gt; 100000 and seq_scan &gt; 0 order by seq_tup_read desc limit 10;</span><br></pre></td></tr></table></figure></li>\n<li><p>参考如下SQL语句，查询当前正在运行的访问到上述表的慢查询。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_stat_activity where query ilike &#x27;%&lt;table name&gt;%&#x27; and query_start - now() &gt; interval &#x27;10 seconds&#x27;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"处理慢SQL\"><a href=\"#处理慢SQL\" class=\"headerlink\" title=\"处理慢SQL\"></a>处理慢SQL</h2><ol>\n<li><p>对于已经排查出来的慢SQL，可以先杀掉他们，让业务先恢复</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_cancel_backend(pid)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_terminate_backend(pid)</span><br></pre></td></tr></table></figure></li>\n<li><p>使用explain查看sql执行过程，对其中显示慢的点进行优化。比如对其中的Table Scan涉及的表，建立索引。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explain &#123;sql&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explain (buffers true, analyze true, verbose true) &#123;sql&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>对sql进行优化，去掉子查询、调整join顺序、去掉like模糊查询等等</p>\n</li>\n</ol>"},{"title":"gradle_解决error-unmappable-character-for-encoding-gbk","date":"2021-08-15T03:55:51.000Z","_content":"\n在学习某个项目时，`.\\gradlew build`总是遇到**error: unmappable character (0x80) for encoding GBK**。至少确定源文件至少会是UTF8的，所以尝试设置文件编码格式来解决这个问题。\n一般使用javac编译和java执行程序时，可以使用：\n\n<!--more-->\n\n\n```\njavac -encoding UTF-8 Test.java\njava -Dfile.encoding=UTF-8 Test\n```\n\n对于Gradle项目，可以设置gradlew.bat:\n\n```\nset DEFAULT_JVM_OPTS=\"-Dfile.encoding=UTF-8\"\n```\n\n对于IntelliJ Idea，可在配置文件vmoption文件底部添加一行：\n\n```\n-Dfile.encoding=UTF-8\n```\n\n经过上述尝试，问题依旧存在，仔细一看错误是发生在javadoc任务阶段，一个java文件注释中包含一个字符“ß”导致这个问题的出现。\n在build.gradle文件中添加：\n\n```\njavadoc {\n    options.encoding = 'UTF-8'\n}\n```\n\n搞定！！！\n","source":"_posts/gradle-解决error-unmappable-character-for-encoding-gbk.md","raw":"---\ntitle: gradle_解决error-unmappable-character-for-encoding-gbk\ndate: 2021-08-15 11:55:51\ntags:\n- gradle\ncategories: \n- tools\n---\n\n在学习某个项目时，`.\\gradlew build`总是遇到**error: unmappable character (0x80) for encoding GBK**。至少确定源文件至少会是UTF8的，所以尝试设置文件编码格式来解决这个问题。\n一般使用javac编译和java执行程序时，可以使用：\n\n<!--more-->\n\n\n```\njavac -encoding UTF-8 Test.java\njava -Dfile.encoding=UTF-8 Test\n```\n\n对于Gradle项目，可以设置gradlew.bat:\n\n```\nset DEFAULT_JVM_OPTS=\"-Dfile.encoding=UTF-8\"\n```\n\n对于IntelliJ Idea，可在配置文件vmoption文件底部添加一行：\n\n```\n-Dfile.encoding=UTF-8\n```\n\n经过上述尝试，问题依旧存在，仔细一看错误是发生在javadoc任务阶段，一个java文件注释中包含一个字符“ß”导致这个问题的出现。\n在build.gradle文件中添加：\n\n```\njavadoc {\n    options.encoding = 'UTF-8'\n}\n```\n\n搞定！！！\n","slug":"gradle-解决error-unmappable-character-for-encoding-gbk","published":1,"updated":"2021-08-23T00:38:38.712Z","_id":"cksfr6gzl000ciqv93llsdc1z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在学习某个项目时，<code>.\\gradlew build</code>总是遇到<strong>error: unmappable character (0x80) for encoding GBK</strong>。至少确定源文件至少会是UTF8的，所以尝试设置文件编码格式来解决这个问题。<br>一般使用javac编译和java执行程序时，可以使用：</p>\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -encoding UTF-8 Test.java</span><br><span class=\"line\">java -Dfile.encoding=UTF-8 Test</span><br></pre></td></tr></table></figure>\n\n<p>对于Gradle项目，可以设置gradlew.bat:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set DEFAULT_JVM_OPTS=&quot;-Dfile.encoding=UTF-8&quot;</span><br></pre></td></tr></table></figure>\n\n<p>对于IntelliJ Idea，可在配置文件vmoption文件底部添加一行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>经过上述尝试，问题依旧存在，仔细一看错误是发生在javadoc任务阶段，一个java文件注释中包含一个字符“ß”导致这个问题的出现。<br>在build.gradle文件中添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javadoc &#123;</span><br><span class=\"line\">    options.encoding = &#x27;UTF-8&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>搞定！！！</p>\n","site":{"data":{}},"excerpt":"<p>在学习某个项目时，<code>.\\gradlew build</code>总是遇到<strong>error: unmappable character (0x80) for encoding GBK</strong>。至少确定源文件至少会是UTF8的，所以尝试设置文件编码格式来解决这个问题。<br>一般使用javac编译和java执行程序时，可以使用：</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -encoding UTF-8 Test.java</span><br><span class=\"line\">java -Dfile.encoding=UTF-8 Test</span><br></pre></td></tr></table></figure>\n\n<p>对于Gradle项目，可以设置gradlew.bat:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set DEFAULT_JVM_OPTS=&quot;-Dfile.encoding=UTF-8&quot;</span><br></pre></td></tr></table></figure>\n\n<p>对于IntelliJ Idea，可在配置文件vmoption文件底部添加一行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>经过上述尝试，问题依旧存在，仔细一看错误是发生在javadoc任务阶段，一个java文件注释中包含一个字符“ß”导致这个问题的出现。<br>在build.gradle文件中添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javadoc &#123;</span><br><span class=\"line\">    options.encoding = &#x27;UTF-8&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>搞定！！！</p>"},{"title":"idea-plugins开发","date":"2021-08-15T03:59:26.000Z","_content":"\n## **01 新建一个基于 Gradle 的插件项目**\n\n这里我们基于 Gradle 进行插件开发，这也是 IntelliJ 官方的推荐的插件开发解决方案。\n\n**第一步，选择 Gradle 项目类型并勾选上相应的依赖。**\n\n选择java和Intelij idea Platform plugin。\n\n选择 Gradle 项目类型并勾选上相应的依赖\n\n**第二步，填写项目相关的属性比如 GroupId、ArtifactId。**\n\n<!--more-->\n\n\n填写项目相关的属性\n\n**第三步，静静等待项目下载相关依赖。**\n\n第一次创建 IDEA 插件项目的话，这一步会比较慢。因为要下载 IDEA 插件开发所需的 SDK 。\n\n插件项目结构概览\n\n这里需要额外注意的是下面这两个配置文件。\n\n**`plugin.xml` ：插件的核心配置文件。通过它可以配置插件名称、插件介绍、插件作者信息、Action 等信息。**\n\n```javascript\n<idea-plugin>\n    <id>github.javaguide.my-first-idea-plugin</id>\n    <!--插件的名称-->\n    <name>Beauty</name>\n    <!--插件的作者相关信息-->\n    <vendor email=\"koushuangbwcx@163.com\" url=\"https://github.com/Snailclimb\">JavaGuide</vendor>\n    <!--插件的介绍-->\n    <description><![CDATA[\n     Guide哥代码开发的第一款IDEA插件<br>\n    <em>这尼玛是什么垃圾插件！！！</em>\n    ]]></description>\n\n    <!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html\n         on how to target different products -->\n    <depends>com.intellij.modules.platform</depends>\n\n    <extensions defaultExtensionNs=\"com.intellij\">\n        <!-- Add your extensions here -->\n    </extensions>\n\n    <actions>\n        <!-- Add your actions here -->\n    </actions>\n</idea-plugin>\n```\n\n**`build.gradle` ：项目依赖配置文件。通过它可以配置项目第三方依赖、插件版本、插件版本更新记录等信息。**\n\n```javascript\nplugins {\n    id 'java'\n    id 'org.jetbrains.intellij' version '0.6.3'\n}\n\ngroup 'github.javaguide'\n// 当前插件版本\nversion '1.0-SNAPSHOT'\n\nrepositories {\n    mavenCentral()\n}\n\n// 项目依赖\ndependencies {\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n\n// See https://github.com/JetBrains/gradle-intellij-plugin/\n// 当前开发该插件的 IDEA 版本\nintellij {\n    version '2020.1.2'\n}\npatchPluginXml {\n    // 版本更新记录\n    changeNotes \"\"\"\n      Add change notes here.<br>\n      <em>most HTML tags may be used</em>\"\"\"\n}\n```\n\n没有开发过 IDEA 插件的小伙伴直接看这两个配置文件内容可能会有点蒙。所以，我专门找了一个 IDEA 插件市场提供的现成插件来说明一下。小伙伴们对照下面这张图来看下面的配置文件内容就非常非常清晰了。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/4cyv3rzqji.png?imageView2/2/w/1620)\n\n插件信息\n\n这就非常贴心了！如果这都不能让你点赞，我要这文章有何用!\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/dkxky0rkr2.gif)\n\n## **03 手动创建 Action**\n\n我们可以把 Action 看作是 IDEA 提高的事件响应处理器，通过 Action 我们可以自定义一些事件处理逻辑/动作。比如说你点击某个菜单的时候，我们进行一个展示对话框的操作。\n\n**第一步，右键`java`目录并选择 new 一个 Action**\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/sreasc70mz.png?imageView2/2/w/1620)\n\n**第二步，配置 Action 相关信息比如展示名称。**\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/cwk7p970mb.png?imageView2/2/w/1620)\n\n配置动作属性 (1)\n\n创建完成之后，我们的 `plugin.xml` 的 `<actions>`节点下会自动生成我们刚刚创建的 Action 信息：\n\n```javascript\n<actions>\n    <!-- Add your actions here -->\n    <action id=\"test.hello\" class=\"HelloAction\" text=\"Hello\" description=\"IDEA插件入门\">\n      <add-to-group group-id=\"ToolsMenu\" anchor=\"first\"/>\n    </action>\n</actions>\n```\n\n并且 `java` 目录下为生成一个叫做 `HelloAction` 的类。并且，这个类继承了 `AnAction` ，并覆盖了 `actionPerformed()` 方法。这个 `actionPerformed` 方法就好比 JS 中的 `onClick` 方法，会在你点击的时候被触发对应的动作。\n\n我简单对`actionPerformed` 方法进行了修改，添加了一行代码。这行代码很简单，就是显示 1 个对话框并展示一些信息。\n\n```javascript\npublic class HelloAction extends AnAction {\n\n    @Override\n    public void actionPerformed(AnActionEvent e) {\n        //显示对话框并展示对应的信息\n        Messages.showInfoMessage(\"素材不够，插件来凑！\", \"Hello\");\n    }\n}\n```\n\n另外，我们上面也说了，每个动作都会归属到一个 Group 中，这个 Group 可以简单看作 IDEA 中已经存在的菜单。\n\n举个例子。我上面创建的 Action 的所属 Group 是 **ToolsMenu(Tools)** 。这样的话，我们创建的 Action 所在的位置就在 Tools 这个菜单下。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/7ro1hm9whw.png?imageView2/2/w/1620)\n\n再举个例子。加入我上面创建的 Action 所属的 Group 是**MainMenu** （IDEA 最上方的主菜单栏）下的 **FileMenu(File)** 的话。\n\n```javascript\n<actions>\n    <!-- Add your actions here -->\n    <action id=\"test.hello\" class=\"HelloAction\" text=\"Hello\" description=\"IDEA插件入门\">\n      <add-to-group group-id=\"FileMenu\" anchor=\"first\"/>\n    </action>\n</actions>\n```\n\n我们创建的 Action 所在的位置就在 File 这个菜单下。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/mq4tgmty68.png?imageView2/2/w/1620)\n\n## **04 验收成果**\n\n点击 `Gradle -> runIde` 就会启动一个默认了这个插件的 IDEA。然后，你可以在这个 IDEA 上实际使用这个插件了。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/hv5jw3l3km.png?imageView2/2/w/1620)\n\n点击 runIde 就会启动一个默认了这个插件的 IDEA\n\n效果如下：\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/xqlgd0j63a.png?imageView2/2/w/1620)\n\n点击 runIde 就会启动一个默认了这个插件的 IDEA\n\n我们点击自定义的 Hello Action 的话就会弹出一个对话框并展示出我们自定义的信息。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/7a7mwo0wul.png?imageView2/2/w/1620)\n\nIDEA插件HelloWorld\n\n## **05 完善一下**\n\n想要弄点界面花里胡哨一下， 我们还可以通过 Swing 来写一个界面。\n\n这里我们简单实现一个聊天机器人。代码的话，我是直接参考的我大二刚学 Java 那会写的一个小项目（*当时写的代码实在太烂了！就很菜！*）。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/c8m7vpk3ur.png?imageView2/2/w/1620)\n\n首先，你需要在**图灵机器人官网[1]**申请一个机器人。（*其他机器人也一样，感觉这个图灵机器人没有原来好用了，并且免费调用次数也不多*）\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/tuf0l6b7qg.png?imageView2/2/w/1620)\n\n然后，简单写一个方法来请求调用机器人。由于代码比较简单，我这里就不放出来了，大家简单看一下效果就好。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/ftqbv8zm6r.png?imageView2/2/w/1620)\n\n代码地址：**https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin[2]** 。\n\n## **06 深入学习**\n\n如果你想要深入学习的 IDEA 插件的话，可以看一下官网文档：**https://jetbrains.org/intellij/sdk/docs/basics/basics.html [3]** 。\n\n这方面的资料还是比较少的。除了官方文档的话，你还可以简单看看下面这几篇文章：\n\n- **8 条经验轻松上手 IDEA 插件开发[4]**\n- **IDEA 插件开发入门教程[5]**\n\n## **07 后记**\n\n我们开发 IDEA 插件主要是为了让 IDEA 更加好用，比如有些框架使用之后可以减少重复代码的编写、有些主题类型的插件可以让你的 IDEA 更好看。\n\n我这篇文章的这个案例说实话只是为了让大家简单入门一下 IDEA 开发，没有任何实际应用意义。**如果你想要开发一个不错的 IDEA 插件的话，还要充分发挥想象，利用 IDEA 插件平台的能力。**\n\n*早起肝文，还要早点出门！觉得不错，大家三连一波鼓励一下这“货”？* （纯粹是为了押韵，不容易！年轻人讲啥武德！哈哈哈！）\n\n### **参考资料**\n\n[1]\n\n图灵机器人官网: *http://www.tuling123.com/*\n\n[2]\n\nhttps://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin: *https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin*\n\n[3]\n\nhttps://jetbrains.org/intellij/sdk/docs/basics/basics.html : *https://jetbrains.org/intellij/sdk/docs/basics/basics.html*\n\n[4]\n\n8 条经验轻松上手 IDEA 插件开发: *https://developer.aliyun.com/article/777850?spm=a2c6h.12873581.0.dArticle777850.118d6446r096V4&groupCode=alitech*\n\n[5]\n\nIDEA 插件开发入门教程: *https://blog.xiaohansong.com/idea-plugin-development.html*\n","source":"_posts/idea-plugins开发.md","raw":"---\ntitle: idea-plugins开发\ndate: 2021-08-15 11:59:26\ntags:\n- java\n- gradle\ncategories: \n- tools\n---\n\n## **01 新建一个基于 Gradle 的插件项目**\n\n这里我们基于 Gradle 进行插件开发，这也是 IntelliJ 官方的推荐的插件开发解决方案。\n\n**第一步，选择 Gradle 项目类型并勾选上相应的依赖。**\n\n选择java和Intelij idea Platform plugin。\n\n选择 Gradle 项目类型并勾选上相应的依赖\n\n**第二步，填写项目相关的属性比如 GroupId、ArtifactId。**\n\n<!--more-->\n\n\n填写项目相关的属性\n\n**第三步，静静等待项目下载相关依赖。**\n\n第一次创建 IDEA 插件项目的话，这一步会比较慢。因为要下载 IDEA 插件开发所需的 SDK 。\n\n插件项目结构概览\n\n这里需要额外注意的是下面这两个配置文件。\n\n**`plugin.xml` ：插件的核心配置文件。通过它可以配置插件名称、插件介绍、插件作者信息、Action 等信息。**\n\n```javascript\n<idea-plugin>\n    <id>github.javaguide.my-first-idea-plugin</id>\n    <!--插件的名称-->\n    <name>Beauty</name>\n    <!--插件的作者相关信息-->\n    <vendor email=\"koushuangbwcx@163.com\" url=\"https://github.com/Snailclimb\">JavaGuide</vendor>\n    <!--插件的介绍-->\n    <description><![CDATA[\n     Guide哥代码开发的第一款IDEA插件<br>\n    <em>这尼玛是什么垃圾插件！！！</em>\n    ]]></description>\n\n    <!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html\n         on how to target different products -->\n    <depends>com.intellij.modules.platform</depends>\n\n    <extensions defaultExtensionNs=\"com.intellij\">\n        <!-- Add your extensions here -->\n    </extensions>\n\n    <actions>\n        <!-- Add your actions here -->\n    </actions>\n</idea-plugin>\n```\n\n**`build.gradle` ：项目依赖配置文件。通过它可以配置项目第三方依赖、插件版本、插件版本更新记录等信息。**\n\n```javascript\nplugins {\n    id 'java'\n    id 'org.jetbrains.intellij' version '0.6.3'\n}\n\ngroup 'github.javaguide'\n// 当前插件版本\nversion '1.0-SNAPSHOT'\n\nrepositories {\n    mavenCentral()\n}\n\n// 项目依赖\ndependencies {\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n\n// See https://github.com/JetBrains/gradle-intellij-plugin/\n// 当前开发该插件的 IDEA 版本\nintellij {\n    version '2020.1.2'\n}\npatchPluginXml {\n    // 版本更新记录\n    changeNotes \"\"\"\n      Add change notes here.<br>\n      <em>most HTML tags may be used</em>\"\"\"\n}\n```\n\n没有开发过 IDEA 插件的小伙伴直接看这两个配置文件内容可能会有点蒙。所以，我专门找了一个 IDEA 插件市场提供的现成插件来说明一下。小伙伴们对照下面这张图来看下面的配置文件内容就非常非常清晰了。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/4cyv3rzqji.png?imageView2/2/w/1620)\n\n插件信息\n\n这就非常贴心了！如果这都不能让你点赞，我要这文章有何用!\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/dkxky0rkr2.gif)\n\n## **03 手动创建 Action**\n\n我们可以把 Action 看作是 IDEA 提高的事件响应处理器，通过 Action 我们可以自定义一些事件处理逻辑/动作。比如说你点击某个菜单的时候，我们进行一个展示对话框的操作。\n\n**第一步，右键`java`目录并选择 new 一个 Action**\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/sreasc70mz.png?imageView2/2/w/1620)\n\n**第二步，配置 Action 相关信息比如展示名称。**\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/cwk7p970mb.png?imageView2/2/w/1620)\n\n配置动作属性 (1)\n\n创建完成之后，我们的 `plugin.xml` 的 `<actions>`节点下会自动生成我们刚刚创建的 Action 信息：\n\n```javascript\n<actions>\n    <!-- Add your actions here -->\n    <action id=\"test.hello\" class=\"HelloAction\" text=\"Hello\" description=\"IDEA插件入门\">\n      <add-to-group group-id=\"ToolsMenu\" anchor=\"first\"/>\n    </action>\n</actions>\n```\n\n并且 `java` 目录下为生成一个叫做 `HelloAction` 的类。并且，这个类继承了 `AnAction` ，并覆盖了 `actionPerformed()` 方法。这个 `actionPerformed` 方法就好比 JS 中的 `onClick` 方法，会在你点击的时候被触发对应的动作。\n\n我简单对`actionPerformed` 方法进行了修改，添加了一行代码。这行代码很简单，就是显示 1 个对话框并展示一些信息。\n\n```javascript\npublic class HelloAction extends AnAction {\n\n    @Override\n    public void actionPerformed(AnActionEvent e) {\n        //显示对话框并展示对应的信息\n        Messages.showInfoMessage(\"素材不够，插件来凑！\", \"Hello\");\n    }\n}\n```\n\n另外，我们上面也说了，每个动作都会归属到一个 Group 中，这个 Group 可以简单看作 IDEA 中已经存在的菜单。\n\n举个例子。我上面创建的 Action 的所属 Group 是 **ToolsMenu(Tools)** 。这样的话，我们创建的 Action 所在的位置就在 Tools 这个菜单下。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/7ro1hm9whw.png?imageView2/2/w/1620)\n\n再举个例子。加入我上面创建的 Action 所属的 Group 是**MainMenu** （IDEA 最上方的主菜单栏）下的 **FileMenu(File)** 的话。\n\n```javascript\n<actions>\n    <!-- Add your actions here -->\n    <action id=\"test.hello\" class=\"HelloAction\" text=\"Hello\" description=\"IDEA插件入门\">\n      <add-to-group group-id=\"FileMenu\" anchor=\"first\"/>\n    </action>\n</actions>\n```\n\n我们创建的 Action 所在的位置就在 File 这个菜单下。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/mq4tgmty68.png?imageView2/2/w/1620)\n\n## **04 验收成果**\n\n点击 `Gradle -> runIde` 就会启动一个默认了这个插件的 IDEA。然后，你可以在这个 IDEA 上实际使用这个插件了。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/hv5jw3l3km.png?imageView2/2/w/1620)\n\n点击 runIde 就会启动一个默认了这个插件的 IDEA\n\n效果如下：\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/xqlgd0j63a.png?imageView2/2/w/1620)\n\n点击 runIde 就会启动一个默认了这个插件的 IDEA\n\n我们点击自定义的 Hello Action 的话就会弹出一个对话框并展示出我们自定义的信息。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/7a7mwo0wul.png?imageView2/2/w/1620)\n\nIDEA插件HelloWorld\n\n## **05 完善一下**\n\n想要弄点界面花里胡哨一下， 我们还可以通过 Swing 来写一个界面。\n\n这里我们简单实现一个聊天机器人。代码的话，我是直接参考的我大二刚学 Java 那会写的一个小项目（*当时写的代码实在太烂了！就很菜！*）。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/c8m7vpk3ur.png?imageView2/2/w/1620)\n\n首先，你需要在**图灵机器人官网[1]**申请一个机器人。（*其他机器人也一样，感觉这个图灵机器人没有原来好用了，并且免费调用次数也不多*）\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/tuf0l6b7qg.png?imageView2/2/w/1620)\n\n然后，简单写一个方法来请求调用机器人。由于代码比较简单，我这里就不放出来了，大家简单看一下效果就好。\n\n![img](https://ask.qcloudimg.com/http-save/yehe-7276705/ftqbv8zm6r.png?imageView2/2/w/1620)\n\n代码地址：**https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin[2]** 。\n\n## **06 深入学习**\n\n如果你想要深入学习的 IDEA 插件的话，可以看一下官网文档：**https://jetbrains.org/intellij/sdk/docs/basics/basics.html [3]** 。\n\n这方面的资料还是比较少的。除了官方文档的话，你还可以简单看看下面这几篇文章：\n\n- **8 条经验轻松上手 IDEA 插件开发[4]**\n- **IDEA 插件开发入门教程[5]**\n\n## **07 后记**\n\n我们开发 IDEA 插件主要是为了让 IDEA 更加好用，比如有些框架使用之后可以减少重复代码的编写、有些主题类型的插件可以让你的 IDEA 更好看。\n\n我这篇文章的这个案例说实话只是为了让大家简单入门一下 IDEA 开发，没有任何实际应用意义。**如果你想要开发一个不错的 IDEA 插件的话，还要充分发挥想象，利用 IDEA 插件平台的能力。**\n\n*早起肝文，还要早点出门！觉得不错，大家三连一波鼓励一下这“货”？* （纯粹是为了押韵，不容易！年轻人讲啥武德！哈哈哈！）\n\n### **参考资料**\n\n[1]\n\n图灵机器人官网: *http://www.tuling123.com/*\n\n[2]\n\nhttps://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin: *https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin*\n\n[3]\n\nhttps://jetbrains.org/intellij/sdk/docs/basics/basics.html : *https://jetbrains.org/intellij/sdk/docs/basics/basics.html*\n\n[4]\n\n8 条经验轻松上手 IDEA 插件开发: *https://developer.aliyun.com/article/777850?spm=a2c6h.12873581.0.dArticle777850.118d6446r096V4&groupCode=alitech*\n\n[5]\n\nIDEA 插件开发入门教程: *https://blog.xiaohansong.com/idea-plugin-development.html*\n","slug":"idea-plugins开发","published":1,"updated":"2021-08-23T00:38:38.717Z","_id":"cksfr6gzp000iiqv94e8h8ljp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"01-新建一个基于-Gradle-的插件项目\"><a href=\"#01-新建一个基于-Gradle-的插件项目\" class=\"headerlink\" title=\"01 新建一个基于 Gradle 的插件项目\"></a><strong>01 新建一个基于 Gradle 的插件项目</strong></h2><p>这里我们基于 Gradle 进行插件开发，这也是 IntelliJ 官方的推荐的插件开发解决方案。</p>\n<p><strong>第一步，选择 Gradle 项目类型并勾选上相应的依赖。</strong></p>\n<p>选择java和Intelij idea Platform plugin。</p>\n<p>选择 Gradle 项目类型并勾选上相应的依赖</p>\n<p><strong>第二步，填写项目相关的属性比如 GroupId、ArtifactId。</strong></p>\n<span id=\"more\"></span>\n\n\n<p>填写项目相关的属性</p>\n<p><strong>第三步，静静等待项目下载相关依赖。</strong></p>\n<p>第一次创建 IDEA 插件项目的话，这一步会比较慢。因为要下载 IDEA 插件开发所需的 SDK 。</p>\n<p>插件项目结构概览</p>\n<p>这里需要额外注意的是下面这两个配置文件。</p>\n<p><strong><code>plugin.xml</code> ：插件的核心配置文件。通过它可以配置插件名称、插件介绍、插件作者信息、Action 等信息。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;idea-plugin&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>github.javaguide.my-first-idea-plugin<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span></span><br><span class=\"line\">    &lt;!--插件的名称--&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Beauty<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span></span><br><span class=\"line\">    &lt;!--插件的作者相关信息--&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">vendor</span> <span class=\"attr\">email</span>=<span class=\"string\">&quot;koushuangbwcx@163.com&quot;</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;https://github.com/Snailclimb&quot;</span>&gt;</span>JavaGuide<span class=\"tag\">&lt;/<span class=\"name\">vendor</span>&gt;</span></span></span><br><span class=\"line\">    &lt;!--插件的介绍--&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>&lt;![CDATA[</span></span><br><span class=\"line\"><span class=\"xml\">     Guide哥代码开发的第一款IDEA插件&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    &lt;em&gt;这尼玛是什么垃圾插件！！！&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    ]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"comment\">&lt;!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"xml\">         on how to target different products --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">depends</span>&gt;</span>com.intellij.modules.platform<span class=\"tag\">&lt;/<span class=\"name\">depends</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">extensions</span> <span class=\"attr\">defaultExtensionNs</span>=<span class=\"string\">&quot;com.intellij&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- Add your extensions here --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">extensions</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">actions</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- Add your actions here --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">actions</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">idea-plugin</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>build.gradle</code> ：项目依赖配置文件。通过它可以配置项目第三方依赖、插件版本、插件版本更新记录等信息。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">&#x27;java&#x27;</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;org.jetbrains.intellij&#x27;</span> version <span class=\"string\">&#x27;0.6.3&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">group <span class=\"string\">&#x27;github.javaguide&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 当前插件版本</span></span><br><span class=\"line\">version <span class=\"string\">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 项目依赖</span></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    testCompile group: <span class=\"string\">&#x27;junit&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;junit&#x27;</span>, <span class=\"attr\">version</span>: <span class=\"string\">&#x27;4.12&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// See https://github.com/JetBrains/gradle-intellij-plugin/</span></span><br><span class=\"line\"><span class=\"comment\">// 当前开发该插件的 IDEA 版本</span></span><br><span class=\"line\">intellij &#123;</span><br><span class=\"line\">    version <span class=\"string\">&#x27;2020.1.2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">patchPluginXml &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 版本更新记录</span></span><br><span class=\"line\">    changeNotes <span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">      Add change notes here.&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;em&gt;most HTML tags may be used&lt;/em&gt;&quot;</span><span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>没有开发过 IDEA 插件的小伙伴直接看这两个配置文件内容可能会有点蒙。所以，我专门找了一个 IDEA 插件市场提供的现成插件来说明一下。小伙伴们对照下面这张图来看下面的配置文件内容就非常非常清晰了。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/4cyv3rzqji.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>插件信息</p>\n<p>这就非常贴心了！如果这都不能让你点赞，我要这文章有何用!</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/dkxky0rkr2.gif\" alt=\"img\"></p>\n<h2 id=\"03-手动创建-Action\"><a href=\"#03-手动创建-Action\" class=\"headerlink\" title=\"03 手动创建 Action\"></a><strong>03 手动创建 Action</strong></h2><p>我们可以把 Action 看作是 IDEA 提高的事件响应处理器，通过 Action 我们可以自定义一些事件处理逻辑/动作。比如说你点击某个菜单的时候，我们进行一个展示对话框的操作。</p>\n<p><strong>第一步，右键<code>java</code>目录并选择 new 一个 Action</strong></p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/sreasc70mz.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p><strong>第二步，配置 Action 相关信息比如展示名称。</strong></p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/cwk7p970mb.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>配置动作属性 (1)</p>\n<p>创建完成之后，我们的 <code>plugin.xml</code> 的 <code>&lt;actions&gt;</code>节点下会自动生成我们刚刚创建的 Action 信息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;actions&gt;</span><br><span class=\"line\">    &lt;!-- Add your actions here --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test.hello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;HelloAction&quot;</span> <span class=\"attr\">text</span>=<span class=\"string\">&quot;Hello&quot;</span> <span class=\"attr\">description</span>=<span class=\"string\">&quot;IDEA插件入门&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">add-to-group</span> <span class=\"attr\">group-id</span>=<span class=\"string\">&quot;ToolsMenu&quot;</span> <span class=\"attr\">anchor</span>=<span class=\"string\">&quot;first&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span></span><br><span class=\"line\">&lt;/actions&gt;</span><br></pre></td></tr></table></figure>\n\n<p>并且 <code>java</code> 目录下为生成一个叫做 <code>HelloAction</code> 的类。并且，这个类继承了 <code>AnAction</code> ，并覆盖了 <code>actionPerformed()</code> 方法。这个 <code>actionPerformed</code> 方法就好比 JS 中的 <code>onClick</code> 方法，会在你点击的时候被触发对应的动作。</p>\n<p>我简单对<code>actionPerformed</code> 方法进行了修改，添加了一行代码。这行代码很简单，就是显示 1 个对话框并展示一些信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnAction</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">actionPerformed</span>(<span class=\"params\">AnActionEvent e</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//显示对话框并展示对应的信息</span></span><br><span class=\"line\">        Messages.showInfoMessage(<span class=\"string\">&quot;素材不够，插件来凑！&quot;</span>, <span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外，我们上面也说了，每个动作都会归属到一个 Group 中，这个 Group 可以简单看作 IDEA 中已经存在的菜单。</p>\n<p>举个例子。我上面创建的 Action 的所属 Group 是 <strong>ToolsMenu(Tools)</strong> 。这样的话，我们创建的 Action 所在的位置就在 Tools 这个菜单下。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/7ro1hm9whw.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>再举个例子。加入我上面创建的 Action 所属的 Group 是<strong>MainMenu</strong> （IDEA 最上方的主菜单栏）下的 <strong>FileMenu(File)</strong> 的话。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;actions&gt;</span><br><span class=\"line\">    &lt;!-- Add your actions here --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test.hello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;HelloAction&quot;</span> <span class=\"attr\">text</span>=<span class=\"string\">&quot;Hello&quot;</span> <span class=\"attr\">description</span>=<span class=\"string\">&quot;IDEA插件入门&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">add-to-group</span> <span class=\"attr\">group-id</span>=<span class=\"string\">&quot;FileMenu&quot;</span> <span class=\"attr\">anchor</span>=<span class=\"string\">&quot;first&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span></span><br><span class=\"line\">&lt;/actions&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我们创建的 Action 所在的位置就在 File 这个菜单下。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/mq4tgmty68.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<h2 id=\"04-验收成果\"><a href=\"#04-验收成果\" class=\"headerlink\" title=\"04 验收成果\"></a><strong>04 验收成果</strong></h2><p>点击 <code>Gradle -&gt; runIde</code> 就会启动一个默认了这个插件的 IDEA。然后，你可以在这个 IDEA 上实际使用这个插件了。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/hv5jw3l3km.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>点击 runIde 就会启动一个默认了这个插件的 IDEA</p>\n<p>效果如下：</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/xqlgd0j63a.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>点击 runIde 就会启动一个默认了这个插件的 IDEA</p>\n<p>我们点击自定义的 Hello Action 的话就会弹出一个对话框并展示出我们自定义的信息。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/7a7mwo0wul.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>IDEA插件HelloWorld</p>\n<h2 id=\"05-完善一下\"><a href=\"#05-完善一下\" class=\"headerlink\" title=\"05 完善一下\"></a><strong>05 完善一下</strong></h2><p>想要弄点界面花里胡哨一下， 我们还可以通过 Swing 来写一个界面。</p>\n<p>这里我们简单实现一个聊天机器人。代码的话，我是直接参考的我大二刚学 Java 那会写的一个小项目（<em>当时写的代码实在太烂了！就很菜！</em>）。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/c8m7vpk3ur.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>首先，你需要在**图灵机器人官网[1]*<em>申请一个机器人。（</em>其他机器人也一样，感觉这个图灵机器人没有原来好用了，并且免费调用次数也不多*）</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/tuf0l6b7qg.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>然后，简单写一个方法来请求调用机器人。由于代码比较简单，我这里就不放出来了，大家简单看一下效果就好。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/ftqbv8zm6r.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>代码地址：<strong><a href=\"https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin[2]\">https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin[2]</a></strong> 。</p>\n<h2 id=\"06-深入学习\"><a href=\"#06-深入学习\" class=\"headerlink\" title=\"06 深入学习\"></a><strong>06 深入学习</strong></h2><p>如果你想要深入学习的 IDEA 插件的话，可以看一下官网文档：<strong><a href=\"https://jetbrains.org/intellij/sdk/docs/basics/basics.html\">https://jetbrains.org/intellij/sdk/docs/basics/basics.html</a> [3]</strong> 。</p>\n<p>这方面的资料还是比较少的。除了官方文档的话，你还可以简单看看下面这几篇文章：</p>\n<ul>\n<li><strong>8 条经验轻松上手 IDEA 插件开发[4]</strong></li>\n<li><strong>IDEA 插件开发入门教程[5]</strong></li>\n</ul>\n<h2 id=\"07-后记\"><a href=\"#07-后记\" class=\"headerlink\" title=\"07 后记\"></a><strong>07 后记</strong></h2><p>我们开发 IDEA 插件主要是为了让 IDEA 更加好用，比如有些框架使用之后可以减少重复代码的编写、有些主题类型的插件可以让你的 IDEA 更好看。</p>\n<p>我这篇文章的这个案例说实话只是为了让大家简单入门一下 IDEA 开发，没有任何实际应用意义。<strong>如果你想要开发一个不错的 IDEA 插件的话，还要充分发挥想象，利用 IDEA 插件平台的能力。</strong></p>\n<p><em>早起肝文，还要早点出门！觉得不错，大家三连一波鼓励一下这“货”？</em> （纯粹是为了押韵，不容易！年轻人讲啥武德！哈哈哈！）</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><strong>参考资料</strong></h3><p>[1]</p>\n<p>图灵机器人官网: <em><a href=\"http://www.tuling123.com/\">http://www.tuling123.com/</a></em></p>\n<p>[2]</p>\n<p><a href=\"https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin\">https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin</a>: <em><a href=\"https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin\">https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin</a></em></p>\n<p>[3]</p>\n<p><a href=\"https://jetbrains.org/intellij/sdk/docs/basics/basics.html\">https://jetbrains.org/intellij/sdk/docs/basics/basics.html</a> : <em><a href=\"https://jetbrains.org/intellij/sdk/docs/basics/basics.html\">https://jetbrains.org/intellij/sdk/docs/basics/basics.html</a></em></p>\n<p>[4]</p>\n<p>8 条经验轻松上手 IDEA 插件开发: <em><a href=\"https://developer.aliyun.com/article/777850?spm=a2c6h.12873581.0.dArticle777850.118d6446r096V4&amp;groupCode=alitech\">https://developer.aliyun.com/article/777850?spm=a2c6h.12873581.0.dArticle777850.118d6446r096V4&amp;groupCode=alitech</a></em></p>\n<p>[5]</p>\n<p>IDEA 插件开发入门教程: <em><a href=\"https://blog.xiaohansong.com/idea-plugin-development.html\">https://blog.xiaohansong.com/idea-plugin-development.html</a></em></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"01-新建一个基于-Gradle-的插件项目\"><a href=\"#01-新建一个基于-Gradle-的插件项目\" class=\"headerlink\" title=\"01 新建一个基于 Gradle 的插件项目\"></a><strong>01 新建一个基于 Gradle 的插件项目</strong></h2><p>这里我们基于 Gradle 进行插件开发，这也是 IntelliJ 官方的推荐的插件开发解决方案。</p>\n<p><strong>第一步，选择 Gradle 项目类型并勾选上相应的依赖。</strong></p>\n<p>选择java和Intelij idea Platform plugin。</p>\n<p>选择 Gradle 项目类型并勾选上相应的依赖</p>\n<p><strong>第二步，填写项目相关的属性比如 GroupId、ArtifactId。</strong></p>","more":"<p>填写项目相关的属性</p>\n<p><strong>第三步，静静等待项目下载相关依赖。</strong></p>\n<p>第一次创建 IDEA 插件项目的话，这一步会比较慢。因为要下载 IDEA 插件开发所需的 SDK 。</p>\n<p>插件项目结构概览</p>\n<p>这里需要额外注意的是下面这两个配置文件。</p>\n<p><strong><code>plugin.xml</code> ：插件的核心配置文件。通过它可以配置插件名称、插件介绍、插件作者信息、Action 等信息。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;idea-plugin&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>github.javaguide.my-first-idea-plugin<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span></span><br><span class=\"line\">    &lt;!--插件的名称--&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Beauty<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span></span><br><span class=\"line\">    &lt;!--插件的作者相关信息--&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">vendor</span> <span class=\"attr\">email</span>=<span class=\"string\">&quot;koushuangbwcx@163.com&quot;</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;https://github.com/Snailclimb&quot;</span>&gt;</span>JavaGuide<span class=\"tag\">&lt;/<span class=\"name\">vendor</span>&gt;</span></span></span><br><span class=\"line\">    &lt;!--插件的介绍--&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>&lt;![CDATA[</span></span><br><span class=\"line\"><span class=\"xml\">     Guide哥代码开发的第一款IDEA插件&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    &lt;em&gt;这尼玛是什么垃圾插件！！！&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    ]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"comment\">&lt;!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"xml\">         on how to target different products --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">depends</span>&gt;</span>com.intellij.modules.platform<span class=\"tag\">&lt;/<span class=\"name\">depends</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">extensions</span> <span class=\"attr\">defaultExtensionNs</span>=<span class=\"string\">&quot;com.intellij&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- Add your extensions here --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">extensions</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">actions</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- Add your actions here --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">actions</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">idea-plugin</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>build.gradle</code> ：项目依赖配置文件。通过它可以配置项目第三方依赖、插件版本、插件版本更新记录等信息。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">&#x27;java&#x27;</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;org.jetbrains.intellij&#x27;</span> version <span class=\"string\">&#x27;0.6.3&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">group <span class=\"string\">&#x27;github.javaguide&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 当前插件版本</span></span><br><span class=\"line\">version <span class=\"string\">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 项目依赖</span></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    testCompile group: <span class=\"string\">&#x27;junit&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;junit&#x27;</span>, <span class=\"attr\">version</span>: <span class=\"string\">&#x27;4.12&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// See https://github.com/JetBrains/gradle-intellij-plugin/</span></span><br><span class=\"line\"><span class=\"comment\">// 当前开发该插件的 IDEA 版本</span></span><br><span class=\"line\">intellij &#123;</span><br><span class=\"line\">    version <span class=\"string\">&#x27;2020.1.2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">patchPluginXml &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 版本更新记录</span></span><br><span class=\"line\">    changeNotes <span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">      Add change notes here.&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;em&gt;most HTML tags may be used&lt;/em&gt;&quot;</span><span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>没有开发过 IDEA 插件的小伙伴直接看这两个配置文件内容可能会有点蒙。所以，我专门找了一个 IDEA 插件市场提供的现成插件来说明一下。小伙伴们对照下面这张图来看下面的配置文件内容就非常非常清晰了。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/4cyv3rzqji.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>插件信息</p>\n<p>这就非常贴心了！如果这都不能让你点赞，我要这文章有何用!</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/dkxky0rkr2.gif\" alt=\"img\"></p>\n<h2 id=\"03-手动创建-Action\"><a href=\"#03-手动创建-Action\" class=\"headerlink\" title=\"03 手动创建 Action\"></a><strong>03 手动创建 Action</strong></h2><p>我们可以把 Action 看作是 IDEA 提高的事件响应处理器，通过 Action 我们可以自定义一些事件处理逻辑/动作。比如说你点击某个菜单的时候，我们进行一个展示对话框的操作。</p>\n<p><strong>第一步，右键<code>java</code>目录并选择 new 一个 Action</strong></p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/sreasc70mz.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p><strong>第二步，配置 Action 相关信息比如展示名称。</strong></p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/cwk7p970mb.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>配置动作属性 (1)</p>\n<p>创建完成之后，我们的 <code>plugin.xml</code> 的 <code>&lt;actions&gt;</code>节点下会自动生成我们刚刚创建的 Action 信息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;actions&gt;</span><br><span class=\"line\">    &lt;!-- Add your actions here --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test.hello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;HelloAction&quot;</span> <span class=\"attr\">text</span>=<span class=\"string\">&quot;Hello&quot;</span> <span class=\"attr\">description</span>=<span class=\"string\">&quot;IDEA插件入门&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">add-to-group</span> <span class=\"attr\">group-id</span>=<span class=\"string\">&quot;ToolsMenu&quot;</span> <span class=\"attr\">anchor</span>=<span class=\"string\">&quot;first&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span></span><br><span class=\"line\">&lt;/actions&gt;</span><br></pre></td></tr></table></figure>\n\n<p>并且 <code>java</code> 目录下为生成一个叫做 <code>HelloAction</code> 的类。并且，这个类继承了 <code>AnAction</code> ，并覆盖了 <code>actionPerformed()</code> 方法。这个 <code>actionPerformed</code> 方法就好比 JS 中的 <code>onClick</code> 方法，会在你点击的时候被触发对应的动作。</p>\n<p>我简单对<code>actionPerformed</code> 方法进行了修改，添加了一行代码。这行代码很简单，就是显示 1 个对话框并展示一些信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnAction</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">actionPerformed</span>(<span class=\"params\">AnActionEvent e</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//显示对话框并展示对应的信息</span></span><br><span class=\"line\">        Messages.showInfoMessage(<span class=\"string\">&quot;素材不够，插件来凑！&quot;</span>, <span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外，我们上面也说了，每个动作都会归属到一个 Group 中，这个 Group 可以简单看作 IDEA 中已经存在的菜单。</p>\n<p>举个例子。我上面创建的 Action 的所属 Group 是 <strong>ToolsMenu(Tools)</strong> 。这样的话，我们创建的 Action 所在的位置就在 Tools 这个菜单下。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/7ro1hm9whw.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>再举个例子。加入我上面创建的 Action 所属的 Group 是<strong>MainMenu</strong> （IDEA 最上方的主菜单栏）下的 <strong>FileMenu(File)</strong> 的话。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;actions&gt;</span><br><span class=\"line\">    &lt;!-- Add your actions here --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test.hello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;HelloAction&quot;</span> <span class=\"attr\">text</span>=<span class=\"string\">&quot;Hello&quot;</span> <span class=\"attr\">description</span>=<span class=\"string\">&quot;IDEA插件入门&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">add-to-group</span> <span class=\"attr\">group-id</span>=<span class=\"string\">&quot;FileMenu&quot;</span> <span class=\"attr\">anchor</span>=<span class=\"string\">&quot;first&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span></span><br><span class=\"line\">&lt;/actions&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我们创建的 Action 所在的位置就在 File 这个菜单下。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/mq4tgmty68.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<h2 id=\"04-验收成果\"><a href=\"#04-验收成果\" class=\"headerlink\" title=\"04 验收成果\"></a><strong>04 验收成果</strong></h2><p>点击 <code>Gradle -&gt; runIde</code> 就会启动一个默认了这个插件的 IDEA。然后，你可以在这个 IDEA 上实际使用这个插件了。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/hv5jw3l3km.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>点击 runIde 就会启动一个默认了这个插件的 IDEA</p>\n<p>效果如下：</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/xqlgd0j63a.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>点击 runIde 就会启动一个默认了这个插件的 IDEA</p>\n<p>我们点击自定义的 Hello Action 的话就会弹出一个对话框并展示出我们自定义的信息。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/7a7mwo0wul.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>IDEA插件HelloWorld</p>\n<h2 id=\"05-完善一下\"><a href=\"#05-完善一下\" class=\"headerlink\" title=\"05 完善一下\"></a><strong>05 完善一下</strong></h2><p>想要弄点界面花里胡哨一下， 我们还可以通过 Swing 来写一个界面。</p>\n<p>这里我们简单实现一个聊天机器人。代码的话，我是直接参考的我大二刚学 Java 那会写的一个小项目（<em>当时写的代码实在太烂了！就很菜！</em>）。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/c8m7vpk3ur.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>首先，你需要在**图灵机器人官网[1]*<em>申请一个机器人。（</em>其他机器人也一样，感觉这个图灵机器人没有原来好用了，并且免费调用次数也不多*）</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/tuf0l6b7qg.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>然后，简单写一个方法来请求调用机器人。由于代码比较简单，我这里就不放出来了，大家简单看一下效果就好。</p>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-7276705/ftqbv8zm6r.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>代码地址：<strong><a href=\"https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin[2]\">https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin[2]</a></strong> 。</p>\n<h2 id=\"06-深入学习\"><a href=\"#06-深入学习\" class=\"headerlink\" title=\"06 深入学习\"></a><strong>06 深入学习</strong></h2><p>如果你想要深入学习的 IDEA 插件的话，可以看一下官网文档：<strong><a href=\"https://jetbrains.org/intellij/sdk/docs/basics/basics.html\">https://jetbrains.org/intellij/sdk/docs/basics/basics.html</a> [3]</strong> 。</p>\n<p>这方面的资料还是比较少的。除了官方文档的话，你还可以简单看看下面这几篇文章：</p>\n<ul>\n<li><strong>8 条经验轻松上手 IDEA 插件开发[4]</strong></li>\n<li><strong>IDEA 插件开发入门教程[5]</strong></li>\n</ul>\n<h2 id=\"07-后记\"><a href=\"#07-后记\" class=\"headerlink\" title=\"07 后记\"></a><strong>07 后记</strong></h2><p>我们开发 IDEA 插件主要是为了让 IDEA 更加好用，比如有些框架使用之后可以减少重复代码的编写、有些主题类型的插件可以让你的 IDEA 更好看。</p>\n<p>我这篇文章的这个案例说实话只是为了让大家简单入门一下 IDEA 开发，没有任何实际应用意义。<strong>如果你想要开发一个不错的 IDEA 插件的话，还要充分发挥想象，利用 IDEA 插件平台的能力。</strong></p>\n<p><em>早起肝文，还要早点出门！觉得不错，大家三连一波鼓励一下这“货”？</em> （纯粹是为了押韵，不容易！年轻人讲啥武德！哈哈哈！）</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><strong>参考资料</strong></h3><p>[1]</p>\n<p>图灵机器人官网: <em><a href=\"http://www.tuling123.com/\">http://www.tuling123.com/</a></em></p>\n<p>[2]</p>\n<p><a href=\"https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin\">https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin</a>: <em><a href=\"https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin\">https://github.com/Snailclimb/awesome-idea/tree/master/code/first-idea-plugin</a></em></p>\n<p>[3]</p>\n<p><a href=\"https://jetbrains.org/intellij/sdk/docs/basics/basics.html\">https://jetbrains.org/intellij/sdk/docs/basics/basics.html</a> : <em><a href=\"https://jetbrains.org/intellij/sdk/docs/basics/basics.html\">https://jetbrains.org/intellij/sdk/docs/basics/basics.html</a></em></p>\n<p>[4]</p>\n<p>8 条经验轻松上手 IDEA 插件开发: <em><a href=\"https://developer.aliyun.com/article/777850?spm=a2c6h.12873581.0.dArticle777850.118d6446r096V4&amp;groupCode=alitech\">https://developer.aliyun.com/article/777850?spm=a2c6h.12873581.0.dArticle777850.118d6446r096V4&amp;groupCode=alitech</a></em></p>\n<p>[5]</p>\n<p>IDEA 插件开发入门教程: <em><a href=\"https://blog.xiaohansong.com/idea-plugin-development.html\">https://blog.xiaohansong.com/idea-plugin-development.html</a></em></p>"},{"title":"开发人员必知的SQL优化技巧","date":"2021-08-13T06:23:16.000Z","_content":"\n#### 不会命中索引的情况\n<!--more-->\n\n1. 负向条件不会命中索引\n\n   ```\n   SELECT id FROM user WHERE status !=1 AND status != 2;  /* 不会命中 */\n   ```\n\n   负向条件有`!=`、`<>`、`not in`、`not exists`、`not like`等\n\n   \n\n2. 前导模糊查询不会命中索引\n\n   ```\n   select id from user where name like '%xx'  /* 不会命中 */\n   ```\n\n   ```\n   select id from user where name like 'xx%'  /* 会命中 */\n   ```\n\n3. 数据类型存在隐形转换的不会命中索引\n\n   ```\n   SELECT id FROM user WHERE name=1;     /* 不会命中 */\n   ```\n\n   ```\n   SELECT id FROM user WHERE name='1';   /* 会命中 */\n   ```\n\n4. 复合索引最左原则\n\n   对于复合索引（(username, passwd)\n\n   ```\n   select id from user where username=? and passwd=?      /* 能命中 */\n   ```\n\n   ```\n   select id from user where passwd=? and username=?  /* 能命中 */\n   ```\n\n   ```\n   select id from user where username=?                   /* 能命中 */\n   ```\n\n   ```\n   select id from user where passwd=?                     /* 不能，不满足复合索引最左原则 */\n   ```\n\n5. 用OR分割的条件，如果其中有一个不是索引字段，则都不会走索引\n\n   ```\n   SELECT id FROM user WHERE username = 'aa' OR age = 12; \n   ```\n\n   因为or后面的条件列中没有索引，那么后面的查询肯定要走全表扫描，在存在全表扫描的情况下，就没有必要多一次索引扫描增加IO访问。\n\n6. 在字段上做计算，不会使用索引\n\n   ```\n   select id from user where YEAR(create_date) < = '2020'\n   ```\n\n   即使create_date建了索引，也不会命中。\n\n \n\n#### 索引规范\n\n1. 数据区分度不大的字段不宜使用索引，或者说字段的值的差异性不大或重复性高\n\n   ```\n   select id from user where sex=1\n   ```\n\n   原因：性别只有两个值，每次过滤掉的数据很少，不宜使用索引。\n\n2. 如果单条查询更频繁，使用Hash索引性能更好\n\n   ```\n   select id from user where username=?\n   ```\n\n   原因：B-Tree时间复杂度O(logn)，Hash索引时间复杂度O(1)\n\n3. 对于索引字段，应该不允许为null，否则查询存在大坑，可能得到不是预期的结果集\n\n   ```\n   select id from user where username != 'aaa'\n   ```\n\n   如果username允许为null，索引不存储null值，结果集中不会包含这些记录。\n\n \n\n#### 最佳实践\n\n1. SELECT语句务必指明字段名称\n\n   原因有三：\n\n   - SELECT * 增加很多不必要的消耗（CPU、IO、内存、网络带宽）\n\n   - 增加了使用覆盖索引的可能性；\n\n     ```\n     select name, password FROM user \n     ```\n\n     假如已经有复合索引(name, password)，那么数据只用从索引中就能够取得，不必去读取数据行。大大提升性能。\n\n   - 当表结构发生改变时，调用端代码也需要跟着调整。\n\n2. 如果明确知道只有一条结果返回，limit 1能够提高效率。\n\n   ```\n   select * from user where username=?;\n   ```\n\n   ```\n   /* 可以优化为 */\n   ```\n\n   ```\n   select * from user where username=? limit 1\n   ```\n\n   原因：明确告诉数据库有一条数据，它会在找到数据后，停止继续往下查找，从而提高效率\n\n3. 把计算放到业务层，而不是放在数据库端。\n\n   把计算放到业务层，传给数据库一条静态SQL，才有可能利用上数据库内部的缓存，从而得到意想不到优化效果。\n\n   ```\n   select * from where create_date < = CURDATE()\n   ```\n\n   并不是好的实践\n\n   ```\n   # Python代码\n   ```\n\n   ```\n   sql = \"select * from order where create_date < = \" + date.today.strftime(\"%Y-%m-%d\") cursor.execute(sql)\n   ```\n\n4. 尽量用union all代替union\n\n   union和union all的差异主要是前者需要将结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。当然，union all的前提条件是两个结果集没有重复数据。\n\n5. 灵活使用in、exists\n\n   对于以下两条SQL语句：\n\n   ```\n   select * from A where id in (select id from B);\n   ```\n\n   ```\n   select * from A where exists (select 1 from B where A.id=B.id);\n   ```\n\n   - IN()只执行一次，它查出B表中的所有id字段并缓存起来。之后，检查A表的id是否与B表中的id相等，如果相等则将A表的记录加入结果集中，直到遍历完A表的所有记录。\n   - exists()会执行A.length次，它并不缓存exists()结果集，因为exists()结果集的内容并不重要，重要的是其内查询语句的结果集空或者非空，空则返回false，非空则返回true。\n   - 所以当A表比B表大时，IN效率更优，反之exists更优\n","source":"_posts/开发人员必知的SQL优化技巧.md","raw":"---\ntitle: 开发人员必知的SQL优化技巧\ndate: 2021-08-13 14:23:16\ntags:\n- sql\ncategories: \n- 数据库\n---\n\n#### 不会命中索引的情况\n<!--more-->\n\n1. 负向条件不会命中索引\n\n   ```\n   SELECT id FROM user WHERE status !=1 AND status != 2;  /* 不会命中 */\n   ```\n\n   负向条件有`!=`、`<>`、`not in`、`not exists`、`not like`等\n\n   \n\n2. 前导模糊查询不会命中索引\n\n   ```\n   select id from user where name like '%xx'  /* 不会命中 */\n   ```\n\n   ```\n   select id from user where name like 'xx%'  /* 会命中 */\n   ```\n\n3. 数据类型存在隐形转换的不会命中索引\n\n   ```\n   SELECT id FROM user WHERE name=1;     /* 不会命中 */\n   ```\n\n   ```\n   SELECT id FROM user WHERE name='1';   /* 会命中 */\n   ```\n\n4. 复合索引最左原则\n\n   对于复合索引（(username, passwd)\n\n   ```\n   select id from user where username=? and passwd=?      /* 能命中 */\n   ```\n\n   ```\n   select id from user where passwd=? and username=?  /* 能命中 */\n   ```\n\n   ```\n   select id from user where username=?                   /* 能命中 */\n   ```\n\n   ```\n   select id from user where passwd=?                     /* 不能，不满足复合索引最左原则 */\n   ```\n\n5. 用OR分割的条件，如果其中有一个不是索引字段，则都不会走索引\n\n   ```\n   SELECT id FROM user WHERE username = 'aa' OR age = 12; \n   ```\n\n   因为or后面的条件列中没有索引，那么后面的查询肯定要走全表扫描，在存在全表扫描的情况下，就没有必要多一次索引扫描增加IO访问。\n\n6. 在字段上做计算，不会使用索引\n\n   ```\n   select id from user where YEAR(create_date) < = '2020'\n   ```\n\n   即使create_date建了索引，也不会命中。\n\n \n\n#### 索引规范\n\n1. 数据区分度不大的字段不宜使用索引，或者说字段的值的差异性不大或重复性高\n\n   ```\n   select id from user where sex=1\n   ```\n\n   原因：性别只有两个值，每次过滤掉的数据很少，不宜使用索引。\n\n2. 如果单条查询更频繁，使用Hash索引性能更好\n\n   ```\n   select id from user where username=?\n   ```\n\n   原因：B-Tree时间复杂度O(logn)，Hash索引时间复杂度O(1)\n\n3. 对于索引字段，应该不允许为null，否则查询存在大坑，可能得到不是预期的结果集\n\n   ```\n   select id from user where username != 'aaa'\n   ```\n\n   如果username允许为null，索引不存储null值，结果集中不会包含这些记录。\n\n \n\n#### 最佳实践\n\n1. SELECT语句务必指明字段名称\n\n   原因有三：\n\n   - SELECT * 增加很多不必要的消耗（CPU、IO、内存、网络带宽）\n\n   - 增加了使用覆盖索引的可能性；\n\n     ```\n     select name, password FROM user \n     ```\n\n     假如已经有复合索引(name, password)，那么数据只用从索引中就能够取得，不必去读取数据行。大大提升性能。\n\n   - 当表结构发生改变时，调用端代码也需要跟着调整。\n\n2. 如果明确知道只有一条结果返回，limit 1能够提高效率。\n\n   ```\n   select * from user where username=?;\n   ```\n\n   ```\n   /* 可以优化为 */\n   ```\n\n   ```\n   select * from user where username=? limit 1\n   ```\n\n   原因：明确告诉数据库有一条数据，它会在找到数据后，停止继续往下查找，从而提高效率\n\n3. 把计算放到业务层，而不是放在数据库端。\n\n   把计算放到业务层，传给数据库一条静态SQL，才有可能利用上数据库内部的缓存，从而得到意想不到优化效果。\n\n   ```\n   select * from where create_date < = CURDATE()\n   ```\n\n   并不是好的实践\n\n   ```\n   # Python代码\n   ```\n\n   ```\n   sql = \"select * from order where create_date < = \" + date.today.strftime(\"%Y-%m-%d\") cursor.execute(sql)\n   ```\n\n4. 尽量用union all代替union\n\n   union和union all的差异主要是前者需要将结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。当然，union all的前提条件是两个结果集没有重复数据。\n\n5. 灵活使用in、exists\n\n   对于以下两条SQL语句：\n\n   ```\n   select * from A where id in (select id from B);\n   ```\n\n   ```\n   select * from A where exists (select 1 from B where A.id=B.id);\n   ```\n\n   - IN()只执行一次，它查出B表中的所有id字段并缓存起来。之后，检查A表的id是否与B表中的id相等，如果相等则将A表的记录加入结果集中，直到遍历完A表的所有记录。\n   - exists()会执行A.length次，它并不缓存exists()结果集，因为exists()结果集的内容并不重要，重要的是其内查询语句的结果集空或者非空，空则返回false，非空则返回true。\n   - 所以当A表比B表大时，IN效率更优，反之exists更优\n","slug":"开发人员必知的SQL优化技巧","published":1,"updated":"2021-08-23T00:38:38.748Z","_id":"cksfr6gzr000liqv9hz2y585g","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"不会命中索引的情况\"><a href=\"#不会命中索引的情况\" class=\"headerlink\" title=\"不会命中索引的情况\"></a>不会命中索引的情况</h4><span id=\"more\"></span>\n\n<ol>\n<li><p>负向条件不会命中索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id FROM user WHERE status !=1 AND status != 2;  /* 不会命中 */</span><br></pre></td></tr></table></figure>\n\n<p>负向条件有<code>!=</code>、<code>&lt;&gt;</code>、<code>not in</code>、<code>not exists</code>、<code>not like</code>等</p>\n</li>\n<li><p>前导模糊查询不会命中索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where name like &#x27;%xx&#x27;  /* 不会命中 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where name like &#x27;xx%&#x27;  /* 会命中 */</span><br></pre></td></tr></table></figure></li>\n<li><p>数据类型存在隐形转换的不会命中索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id FROM user WHERE name=1;     /* 不会命中 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id FROM user WHERE name=&#x27;1&#x27;;   /* 会命中 */</span><br></pre></td></tr></table></figure></li>\n<li><p>复合索引最左原则</p>\n<p>对于复合索引（(username, passwd)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where username=? and passwd=?      /* 能命中 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where passwd=? and username=?  /* 能命中 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where username=?                   /* 能命中 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where passwd=?                     /* 不能，不满足复合索引最左原则 */</span><br></pre></td></tr></table></figure></li>\n<li><p>用OR分割的条件，如果其中有一个不是索引字段，则都不会走索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id FROM user WHERE username = &#x27;aa&#x27; OR age = 12; </span><br></pre></td></tr></table></figure>\n\n<p>因为or后面的条件列中没有索引，那么后面的查询肯定要走全表扫描，在存在全表扫描的情况下，就没有必要多一次索引扫描增加IO访问。</p>\n</li>\n<li><p>在字段上做计算，不会使用索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where YEAR(create_date) &lt; = &#x27;2020&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>即使create_date建了索引，也不会命中。</p>\n</li>\n</ol>\n<h4 id=\"索引规范\"><a href=\"#索引规范\" class=\"headerlink\" title=\"索引规范\"></a>索引规范</h4><ol>\n<li><p>数据区分度不大的字段不宜使用索引，或者说字段的值的差异性不大或重复性高</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where sex=1</span><br></pre></td></tr></table></figure>\n\n<p>原因：性别只有两个值，每次过滤掉的数据很少，不宜使用索引。</p>\n</li>\n<li><p>如果单条查询更频繁，使用Hash索引性能更好</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where username=?</span><br></pre></td></tr></table></figure>\n\n<p>原因：B-Tree时间复杂度O(logn)，Hash索引时间复杂度O(1)</p>\n</li>\n<li><p>对于索引字段，应该不允许为null，否则查询存在大坑，可能得到不是预期的结果集</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where username != &#x27;aaa&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>如果username允许为null，索引不存储null值，结果集中不会包含这些记录。</p>\n</li>\n</ol>\n<h4 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h4><ol>\n<li><p>SELECT语句务必指明字段名称</p>\n<p>原因有三：</p>\n<ul>\n<li><p>SELECT * 增加很多不必要的消耗（CPU、IO、内存、网络带宽）</p>\n</li>\n<li><p>增加了使用覆盖索引的可能性；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select name, password FROM user </span><br></pre></td></tr></table></figure>\n\n<p>假如已经有复合索引(name, password)，那么数据只用从索引中就能够取得，不必去读取数据行。大大提升性能。</p>\n</li>\n<li><p>当表结构发生改变时，调用端代码也需要跟着调整。</p>\n</li>\n</ul>\n</li>\n<li><p>如果明确知道只有一条结果返回，limit 1能够提高效率。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from user where username=?;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 可以优化为 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from user where username=? limit 1</span><br></pre></td></tr></table></figure>\n\n<p>原因：明确告诉数据库有一条数据，它会在找到数据后，停止继续往下查找，从而提高效率</p>\n</li>\n<li><p>把计算放到业务层，而不是放在数据库端。</p>\n<p>把计算放到业务层，传给数据库一条静态SQL，才有可能利用上数据库内部的缓存，从而得到意想不到优化效果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from where create_date &lt; = CURDATE()</span><br></pre></td></tr></table></figure>\n\n<p>并不是好的实践</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python代码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = &quot;select * from order where create_date &lt; = &quot; + date.today.strftime(&quot;%Y-%m-%d&quot;) cursor.execute(sql)</span><br></pre></td></tr></table></figure></li>\n<li><p>尽量用union all代替union</p>\n<p>union和union all的差异主要是前者需要将结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。当然，union all的前提条件是两个结果集没有重复数据。</p>\n</li>\n<li><p>灵活使用in、exists</p>\n<p>对于以下两条SQL语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from A where id in (select id from B);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from A where exists (select 1 from B where A.id=B.id);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>IN()只执行一次，它查出B表中的所有id字段并缓存起来。之后，检查A表的id是否与B表中的id相等，如果相等则将A表的记录加入结果集中，直到遍历完A表的所有记录。</li>\n<li>exists()会执行A.length次，它并不缓存exists()结果集，因为exists()结果集的内容并不重要，重要的是其内查询语句的结果集空或者非空，空则返回false，非空则返回true。</li>\n<li>所以当A表比B表大时，IN效率更优，反之exists更优</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"不会命中索引的情况\"><a href=\"#不会命中索引的情况\" class=\"headerlink\" title=\"不会命中索引的情况\"></a>不会命中索引的情况</h4>","more":"<ol>\n<li><p>负向条件不会命中索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id FROM user WHERE status !=1 AND status != 2;  /* 不会命中 */</span><br></pre></td></tr></table></figure>\n\n<p>负向条件有<code>!=</code>、<code>&lt;&gt;</code>、<code>not in</code>、<code>not exists</code>、<code>not like</code>等</p>\n</li>\n<li><p>前导模糊查询不会命中索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where name like &#x27;%xx&#x27;  /* 不会命中 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where name like &#x27;xx%&#x27;  /* 会命中 */</span><br></pre></td></tr></table></figure></li>\n<li><p>数据类型存在隐形转换的不会命中索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id FROM user WHERE name=1;     /* 不会命中 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id FROM user WHERE name=&#x27;1&#x27;;   /* 会命中 */</span><br></pre></td></tr></table></figure></li>\n<li><p>复合索引最左原则</p>\n<p>对于复合索引（(username, passwd)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where username=? and passwd=?      /* 能命中 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where passwd=? and username=?  /* 能命中 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where username=?                   /* 能命中 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where passwd=?                     /* 不能，不满足复合索引最左原则 */</span><br></pre></td></tr></table></figure></li>\n<li><p>用OR分割的条件，如果其中有一个不是索引字段，则都不会走索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id FROM user WHERE username = &#x27;aa&#x27; OR age = 12; </span><br></pre></td></tr></table></figure>\n\n<p>因为or后面的条件列中没有索引，那么后面的查询肯定要走全表扫描，在存在全表扫描的情况下，就没有必要多一次索引扫描增加IO访问。</p>\n</li>\n<li><p>在字段上做计算，不会使用索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where YEAR(create_date) &lt; = &#x27;2020&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>即使create_date建了索引，也不会命中。</p>\n</li>\n</ol>\n<h4 id=\"索引规范\"><a href=\"#索引规范\" class=\"headerlink\" title=\"索引规范\"></a>索引规范</h4><ol>\n<li><p>数据区分度不大的字段不宜使用索引，或者说字段的值的差异性不大或重复性高</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where sex=1</span><br></pre></td></tr></table></figure>\n\n<p>原因：性别只有两个值，每次过滤掉的数据很少，不宜使用索引。</p>\n</li>\n<li><p>如果单条查询更频繁，使用Hash索引性能更好</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where username=?</span><br></pre></td></tr></table></figure>\n\n<p>原因：B-Tree时间复杂度O(logn)，Hash索引时间复杂度O(1)</p>\n</li>\n<li><p>对于索引字段，应该不允许为null，否则查询存在大坑，可能得到不是预期的结果集</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from user where username != &#x27;aaa&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>如果username允许为null，索引不存储null值，结果集中不会包含这些记录。</p>\n</li>\n</ol>\n<h4 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h4><ol>\n<li><p>SELECT语句务必指明字段名称</p>\n<p>原因有三：</p>\n<ul>\n<li><p>SELECT * 增加很多不必要的消耗（CPU、IO、内存、网络带宽）</p>\n</li>\n<li><p>增加了使用覆盖索引的可能性；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select name, password FROM user </span><br></pre></td></tr></table></figure>\n\n<p>假如已经有复合索引(name, password)，那么数据只用从索引中就能够取得，不必去读取数据行。大大提升性能。</p>\n</li>\n<li><p>当表结构发生改变时，调用端代码也需要跟着调整。</p>\n</li>\n</ul>\n</li>\n<li><p>如果明确知道只有一条结果返回，limit 1能够提高效率。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from user where username=?;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 可以优化为 */</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from user where username=? limit 1</span><br></pre></td></tr></table></figure>\n\n<p>原因：明确告诉数据库有一条数据，它会在找到数据后，停止继续往下查找，从而提高效率</p>\n</li>\n<li><p>把计算放到业务层，而不是放在数据库端。</p>\n<p>把计算放到业务层，传给数据库一条静态SQL，才有可能利用上数据库内部的缓存，从而得到意想不到优化效果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from where create_date &lt; = CURDATE()</span><br></pre></td></tr></table></figure>\n\n<p>并不是好的实践</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python代码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = &quot;select * from order where create_date &lt; = &quot; + date.today.strftime(&quot;%Y-%m-%d&quot;) cursor.execute(sql)</span><br></pre></td></tr></table></figure></li>\n<li><p>尽量用union all代替union</p>\n<p>union和union all的差异主要是前者需要将结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。当然，union all的前提条件是两个结果集没有重复数据。</p>\n</li>\n<li><p>灵活使用in、exists</p>\n<p>对于以下两条SQL语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from A where id in (select id from B);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from A where exists (select 1 from B where A.id=B.id);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>IN()只执行一次，它查出B表中的所有id字段并缓存起来。之后，检查A表的id是否与B表中的id相等，如果相等则将A表的记录加入结果集中，直到遍历完A表的所有记录。</li>\n<li>exists()会执行A.length次，它并不缓存exists()结果集，因为exists()结果集的内容并不重要，重要的是其内查询语句的结果集空或者非空，空则返回false，非空则返回true。</li>\n<li>所以当A表比B表大时，IN效率更优，反之exists更优</li>\n</ul>\n</li>\n</ol>"},{"title":"cdh集成flink1.12.5","date":"2021-08-17T09:21:10.000Z","_content":"\n参考：https://blog.csdn.net/sinat_37690778/article/details/112533647\n<!--more-->\n\n<!--more-->\n\n```\nwget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.12.5/flink-1.12.5-src.tgz \n```\n\n```\n<profile>\n    <id>vendor-repos</id>\n    <activation>\n        <property>\n            <name>vendor-repos</name>\n        </property>\n    </activation>\n\n    <!-- Add vendor maven repositories -->\n    <repositories>\n        <!-- Cloudera -->\n        <repository>\n            <id>cloudera-releases</id>\n            <url>https://repository.cloudera.com/artifactory/cloudera-repos</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <!-- Hortonworks -->\n        <repository>\n            <id>HDPReleases</id>\n            <name>HDP Releases</name>\n            <url>https://repo.hortonworks.com/content/repositories/releases/</url>\n            <snapshots><enabled>false</enabled></snapshots>\n            <releases><enabled>true</enabled></releases>\n        </repository>\n        <repository>\n            <id>HortonworksJettyHadoop</id>\n            <name>HDP Jetty</name>\n            <url>https://repo.hortonworks.com/content/repositories/jetty-hadoop</url>\n            <snapshots><enabled>false</enabled></snapshots>\n            <releases><enabled>true</enabled></releases>\n        </repository>\n        <!-- MapR -->\n        <repository>\n            <id>mapr-releases</id>\n            <url>https://repository.mapr.com/maven/</url>\n            <snapshots><enabled>false</enabled></snapshots>\n            <releases><enabled>true</enabled></releases>\n        </repository>\n    </repositories>\n\n</profile>\n```\n\n```\n mvn  clean install -DskipTests -Pvendor-repos -Dhadoop.version=3.0.0-cdh6.0.1 -Dscala-2.11 -Drat.skip=true -T10C\n\n 解释一下命令：\n -T10C 以10个线程执行。\n```\n\n配置修改.m2/settings.xml文件(需要注销调mirror)不然编译会报错\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <!-- localRepository\n   | The path to the local repository maven will use to store artifacts.\n   |\n   | Default: ${user.home}/.m2/repository\n  <localRepository>/path/to/local/repo</localRepository>\n  -->\n    <localRepository>D:\\software\\maven\\repo</localRepository>\n  <mirrors>\n   <!--<mirror>\n     <id>huaweicloud</id>\n     <mirrorOf>*</mirrorOf>\n     <url>https://mirrors.huaweicloud.com/repository/maven/</url>\n  </mirror>-->\n  </mirrors>\n</settings>\n```\n\n编译存储占用极高：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818104409176.png\" alt=\"image-20210818104409176\" style=\"zoom:80%;\" />\n\n##  制作parcel安装包\n\n1. 下载项目\n\n```shell\ngit clone https://github.com/pkeropen/flink-parcel.git\n```\n\n1. cd flink-parcel\n2. 修改配置文件\n   vim flink-parcel.properties\n\n```\n#FLINK 下载地址\nFLINK_URL=https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.12.5/flink-1.12.5-bin-scala_2.11.tgz\n\n#flink版本号\nFLINK_VERSION=1.12.5\n\n#扩展版本号\nEXTENS_VERSION=BIN-SCALA_2.11\n\n#操作系统版本，以centos为例\nOS_VERSION=7\n\n#CDH 小版本\nCDH_MIN_FULL=5.16.1\nCDH_MAX_FULL=6.3.2\n\n#CDH大版本\nCDH_MIN=5\nCDH_MAX=6\n```\n\n生成的文件都在FLINK-1.12.5-BIN-SCALA_2.11_build目录下\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818123120140.png\" alt=\"image-20210818123120140\" style=\"zoom:80%;\" />\n\n- 生成csd文件，生成文件FLINK_ON_YARN-1.12.5.jar\n  a) on yarn 版本：\n\n  ```\n  ./build.sh csd_on_yarn\n  \n  ```\n\n  b) standalone版本：\n\n  ```\n  - ./build.sh csd_standalone\n  - \n  ```\n\n  \n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818123414976.png\" alt=\"image-20210818123414976\" style=\"zoom:80%;\" />\n\n- 配置flink环境变量\n\n```shell\nexport FLINK_HOME=/usr/local/flink-parcel/FLINK-1.12.5-BIN-SCALA_2.11/lib/flink\nexport PATH=$PATH:$FLINK_HOME/bin\n```\n\n3.5 CDH集成Flink\n将生成的csd的jar包文件放入指定目录中\n\n```\ncp FLINK_ON_YARN-1.12.5.jar /opt/cloudera/csd/\nchown cloudera-scm:cloudera-scm /opt/cloudera/csd/FLINK_ON_YARN-1.12.5.jar\nsystemctl restart cloudera-scm-server\n```\n\n将生成的parcel三个文件通过httpd服务配置下载路径\nmkdir /var/www/html/flink-1.12.5\ncp /usr/local/flink-parcel/FLINK-1.12.5-BIN-SCALA_2.11_build/* /var/www/html/flink-1.12.5\n\n测试访问\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124445073.png\" alt=\"image-20210818124445073\" style=\"zoom:80%;\" />\n\n登录cdh管理界面，点击集群->Parcel\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124710536.png\" alt=\"image-20210818124710536\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124824881.png\" alt=\"image-20210818124824881\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130102552.png\" alt=\"image-20210818130102552\" style=\"zoom:80%;\" />\n\n针对上面的报错，为httpd服务的问题\n\n![image-20210818130138545](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130138545.png)\n\n解决方法\n所以排除是hash值导致的，后来查阅资料是发现是httpd服务的问题，在配置文件中需要加上parcel选项，需要修改httpd.conf配置文件，添加parcel。\nhttpd.conf目录在\n\n在<IfModule mime_module>模块添加 parcel选项\n\n\n```/etc/httpd/conf/httpd.conf\n<IfModule mime_module>\n    #\n    # TypesConfig points to the file containing the list of mappings from\n    # filename extension to MIME-type.\n    #\n    TypesConfig /etc/mime.types\n\n    #\n    # AddType allows you to add to or override the MIME configuration\n    # file specified in TypesConfig for specific file types.\n    #\n    #AddType application/x-gzip .tgz\n    #\n    # AddEncoding allows you to have certain browsers uncompress\n    # information on the fly. Note: Not all browsers support this.\n    #\n    #AddEncoding x-compress .Z\n    #AddEncoding x-gzip .gz .tgz\n    #\n    # If the AddEncoding directives above are commented-out, then you\n    # probably should define those extensions to indicate media types:\n    #\n    AddType application/x-compress .Z\n    AddType application/x-gzip .gz .tgz .parcel #此处添加.parcel\n\n    #\n\n#重启http服务\n[root@localhost bigdata]#systemctl restart httpd\n然后重新进行下载parcel，发现就可以进行下载了，问题解决，然后载根据教程进行parcel的安装就OK。希望对你有帮助。\n```\n\n\n```/etc/httpd/conf/httpd.conf\n\n<IfModule mime_module>\n    #\n    # TypesConfig points to the file containing the list of mappings from\n    # filename extension to MIME-type.\n    #\n    TypesConfig /etc/mime.types\n\n    #\n    # AddType allows you to add to or override the MIME configuration\n    # file specified in TypesConfig for specific file types.\n    #\n    #AddType application/x-gzip .tgz\n    #\n    # AddEncoding allows you to have certain browsers uncompress\n    # information on the fly. Note: Not all browsers support this.\n    #\n    #AddEncoding x-compress .Z\n    #AddEncoding x-gzip .gz .tgz\n    #\n    # If the AddEncoding directives above are commented-out, then you\n    # probably should define those extensions to indicate media types:\n    #\n    AddType application/x-compress .Z\n    AddType application/x-gzip .gz .tgz .parcel #此处添加.parcel\n\n    #\n\n#重启http服务\n[root@localhost bigdata]#systemctl restart httpd\n然后重新进行下载parcel，发现就可以进行下载了，问题解决\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130330585.png\" alt=\"image-20210818130330585\" style=\"zoom:80%;\" />\n\n启动flink会报错误：\n\nrotateLogFilesWithPrefix command not found。\n\n查看原因，网上说是因为没有flink-shaded-hadoop-2-uber-2.7.5-10.0.jar，经过测试不是这个原因。\n\n1. ：flink-yarn.sh: line 17: rotateLogFilesWithPrefix: command not found，网友也遇到了此问题：https://download.csdn.net/download/orangelzc/15936248，最终的解决方案：\n\n```python\n[root@cdh632-master01 ~]# scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-worker03:/opt/cloudera/parcels/FLINK/lib/flink/lib/\n[root@cdh632-master01 ~]# scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-worker02:/opt/cloudera/parcels/FLINK/lib/flink/lib/\n[root@cdh632-master01 ~]# scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-master01:/opt/cloudera/parcels/FLINK/lib/flink/lib/\n```\n\n 通过查看flink-1.12.5 是因为此命令已经被去掉了，所以直接修改flink-yarn.sh中这行代码即可。去掉17行代码即可。\n\nflink 运行实例:\n\n```\n/opt/cloudera/parcels/FLINK/lib/flink/bin/flink run -m 10.11.5.11:8081  /opt/cloudera/parcels/FLINK/lib/flink/examples/batch/WordCount.jar –input hdfs://10.11.5.11/syt/input/ –output hdfs://10.11.5.11/syt/flinkoutput\n```\n\n参考文档：\n\nhttps://blog.csdn.net/benpaodexiaowoniu/article/details/115500230\n\n","source":"_posts/cdh集成flink1-12.md","raw":"---\ntitle: cdh集成flink1.12.5\ndate: 2021-08-17 17:21:10\ntags:\n- flink\ncategories: \n- bigdata\n---\n\n参考：https://blog.csdn.net/sinat_37690778/article/details/112533647\n<!--more-->\n\n<!--more-->\n\n```\nwget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.12.5/flink-1.12.5-src.tgz \n```\n\n```\n<profile>\n    <id>vendor-repos</id>\n    <activation>\n        <property>\n            <name>vendor-repos</name>\n        </property>\n    </activation>\n\n    <!-- Add vendor maven repositories -->\n    <repositories>\n        <!-- Cloudera -->\n        <repository>\n            <id>cloudera-releases</id>\n            <url>https://repository.cloudera.com/artifactory/cloudera-repos</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <!-- Hortonworks -->\n        <repository>\n            <id>HDPReleases</id>\n            <name>HDP Releases</name>\n            <url>https://repo.hortonworks.com/content/repositories/releases/</url>\n            <snapshots><enabled>false</enabled></snapshots>\n            <releases><enabled>true</enabled></releases>\n        </repository>\n        <repository>\n            <id>HortonworksJettyHadoop</id>\n            <name>HDP Jetty</name>\n            <url>https://repo.hortonworks.com/content/repositories/jetty-hadoop</url>\n            <snapshots><enabled>false</enabled></snapshots>\n            <releases><enabled>true</enabled></releases>\n        </repository>\n        <!-- MapR -->\n        <repository>\n            <id>mapr-releases</id>\n            <url>https://repository.mapr.com/maven/</url>\n            <snapshots><enabled>false</enabled></snapshots>\n            <releases><enabled>true</enabled></releases>\n        </repository>\n    </repositories>\n\n</profile>\n```\n\n```\n mvn  clean install -DskipTests -Pvendor-repos -Dhadoop.version=3.0.0-cdh6.0.1 -Dscala-2.11 -Drat.skip=true -T10C\n\n 解释一下命令：\n -T10C 以10个线程执行。\n```\n\n配置修改.m2/settings.xml文件(需要注销调mirror)不然编译会报错\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <!-- localRepository\n   | The path to the local repository maven will use to store artifacts.\n   |\n   | Default: ${user.home}/.m2/repository\n  <localRepository>/path/to/local/repo</localRepository>\n  -->\n    <localRepository>D:\\software\\maven\\repo</localRepository>\n  <mirrors>\n   <!--<mirror>\n     <id>huaweicloud</id>\n     <mirrorOf>*</mirrorOf>\n     <url>https://mirrors.huaweicloud.com/repository/maven/</url>\n  </mirror>-->\n  </mirrors>\n</settings>\n```\n\n编译存储占用极高：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818104409176.png\" alt=\"image-20210818104409176\" style=\"zoom:80%;\" />\n\n##  制作parcel安装包\n\n1. 下载项目\n\n```shell\ngit clone https://github.com/pkeropen/flink-parcel.git\n```\n\n1. cd flink-parcel\n2. 修改配置文件\n   vim flink-parcel.properties\n\n```\n#FLINK 下载地址\nFLINK_URL=https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.12.5/flink-1.12.5-bin-scala_2.11.tgz\n\n#flink版本号\nFLINK_VERSION=1.12.5\n\n#扩展版本号\nEXTENS_VERSION=BIN-SCALA_2.11\n\n#操作系统版本，以centos为例\nOS_VERSION=7\n\n#CDH 小版本\nCDH_MIN_FULL=5.16.1\nCDH_MAX_FULL=6.3.2\n\n#CDH大版本\nCDH_MIN=5\nCDH_MAX=6\n```\n\n生成的文件都在FLINK-1.12.5-BIN-SCALA_2.11_build目录下\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818123120140.png\" alt=\"image-20210818123120140\" style=\"zoom:80%;\" />\n\n- 生成csd文件，生成文件FLINK_ON_YARN-1.12.5.jar\n  a) on yarn 版本：\n\n  ```\n  ./build.sh csd_on_yarn\n  \n  ```\n\n  b) standalone版本：\n\n  ```\n  - ./build.sh csd_standalone\n  - \n  ```\n\n  \n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818123414976.png\" alt=\"image-20210818123414976\" style=\"zoom:80%;\" />\n\n- 配置flink环境变量\n\n```shell\nexport FLINK_HOME=/usr/local/flink-parcel/FLINK-1.12.5-BIN-SCALA_2.11/lib/flink\nexport PATH=$PATH:$FLINK_HOME/bin\n```\n\n3.5 CDH集成Flink\n将生成的csd的jar包文件放入指定目录中\n\n```\ncp FLINK_ON_YARN-1.12.5.jar /opt/cloudera/csd/\nchown cloudera-scm:cloudera-scm /opt/cloudera/csd/FLINK_ON_YARN-1.12.5.jar\nsystemctl restart cloudera-scm-server\n```\n\n将生成的parcel三个文件通过httpd服务配置下载路径\nmkdir /var/www/html/flink-1.12.5\ncp /usr/local/flink-parcel/FLINK-1.12.5-BIN-SCALA_2.11_build/* /var/www/html/flink-1.12.5\n\n测试访问\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124445073.png\" alt=\"image-20210818124445073\" style=\"zoom:80%;\" />\n\n登录cdh管理界面，点击集群->Parcel\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124710536.png\" alt=\"image-20210818124710536\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124824881.png\" alt=\"image-20210818124824881\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130102552.png\" alt=\"image-20210818130102552\" style=\"zoom:80%;\" />\n\n针对上面的报错，为httpd服务的问题\n\n![image-20210818130138545](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130138545.png)\n\n解决方法\n所以排除是hash值导致的，后来查阅资料是发现是httpd服务的问题，在配置文件中需要加上parcel选项，需要修改httpd.conf配置文件，添加parcel。\nhttpd.conf目录在\n\n在<IfModule mime_module>模块添加 parcel选项\n\n\n```/etc/httpd/conf/httpd.conf\n<IfModule mime_module>\n    #\n    # TypesConfig points to the file containing the list of mappings from\n    # filename extension to MIME-type.\n    #\n    TypesConfig /etc/mime.types\n\n    #\n    # AddType allows you to add to or override the MIME configuration\n    # file specified in TypesConfig for specific file types.\n    #\n    #AddType application/x-gzip .tgz\n    #\n    # AddEncoding allows you to have certain browsers uncompress\n    # information on the fly. Note: Not all browsers support this.\n    #\n    #AddEncoding x-compress .Z\n    #AddEncoding x-gzip .gz .tgz\n    #\n    # If the AddEncoding directives above are commented-out, then you\n    # probably should define those extensions to indicate media types:\n    #\n    AddType application/x-compress .Z\n    AddType application/x-gzip .gz .tgz .parcel #此处添加.parcel\n\n    #\n\n#重启http服务\n[root@localhost bigdata]#systemctl restart httpd\n然后重新进行下载parcel，发现就可以进行下载了，问题解决，然后载根据教程进行parcel的安装就OK。希望对你有帮助。\n```\n\n\n```/etc/httpd/conf/httpd.conf\n\n<IfModule mime_module>\n    #\n    # TypesConfig points to the file containing the list of mappings from\n    # filename extension to MIME-type.\n    #\n    TypesConfig /etc/mime.types\n\n    #\n    # AddType allows you to add to or override the MIME configuration\n    # file specified in TypesConfig for specific file types.\n    #\n    #AddType application/x-gzip .tgz\n    #\n    # AddEncoding allows you to have certain browsers uncompress\n    # information on the fly. Note: Not all browsers support this.\n    #\n    #AddEncoding x-compress .Z\n    #AddEncoding x-gzip .gz .tgz\n    #\n    # If the AddEncoding directives above are commented-out, then you\n    # probably should define those extensions to indicate media types:\n    #\n    AddType application/x-compress .Z\n    AddType application/x-gzip .gz .tgz .parcel #此处添加.parcel\n\n    #\n\n#重启http服务\n[root@localhost bigdata]#systemctl restart httpd\n然后重新进行下载parcel，发现就可以进行下载了，问题解决\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130330585.png\" alt=\"image-20210818130330585\" style=\"zoom:80%;\" />\n\n启动flink会报错误：\n\nrotateLogFilesWithPrefix command not found。\n\n查看原因，网上说是因为没有flink-shaded-hadoop-2-uber-2.7.5-10.0.jar，经过测试不是这个原因。\n\n1. ：flink-yarn.sh: line 17: rotateLogFilesWithPrefix: command not found，网友也遇到了此问题：https://download.csdn.net/download/orangelzc/15936248，最终的解决方案：\n\n```python\n[root@cdh632-master01 ~]# scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-worker03:/opt/cloudera/parcels/FLINK/lib/flink/lib/\n[root@cdh632-master01 ~]# scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-worker02:/opt/cloudera/parcels/FLINK/lib/flink/lib/\n[root@cdh632-master01 ~]# scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-master01:/opt/cloudera/parcels/FLINK/lib/flink/lib/\n```\n\n 通过查看flink-1.12.5 是因为此命令已经被去掉了，所以直接修改flink-yarn.sh中这行代码即可。去掉17行代码即可。\n\nflink 运行实例:\n\n```\n/opt/cloudera/parcels/FLINK/lib/flink/bin/flink run -m 10.11.5.11:8081  /opt/cloudera/parcels/FLINK/lib/flink/examples/batch/WordCount.jar –input hdfs://10.11.5.11/syt/input/ –output hdfs://10.11.5.11/syt/flinkoutput\n```\n\n参考文档：\n\nhttps://blog.csdn.net/benpaodexiaowoniu/article/details/115500230\n\n","slug":"cdh集成flink1-12","published":1,"updated":"2021-08-23T00:38:38.703Z","_id":"cksgt5ai30000adv98xnzer6p","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考：<a href=\"https://blog.csdn.net/sinat_37690778/article/details/112533647\">https://blog.csdn.net/sinat_37690778/article/details/112533647</a></p>\n<span id=\"more\"></span>\n\n<!--more-->\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.12.5/flink-1.12.5-src.tgz </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;profile&gt;</span><br><span class=\"line\">    &lt;id&gt;vendor-repos&lt;/id&gt;</span><br><span class=\"line\">    &lt;activation&gt;</span><br><span class=\"line\">        &lt;property&gt;</span><br><span class=\"line\">            &lt;name&gt;vendor-repos&lt;/name&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">    &lt;/activation&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Add vendor maven repositories --&gt;</span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;!-- Cloudera --&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;cloudera-releases&lt;/id&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repository.cloudera.com/artifactory/cloudera-repos&lt;/url&gt;</span><br><span class=\"line\">            &lt;releases&gt;</span><br><span class=\"line\">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">            &lt;/releases&gt;</span><br><span class=\"line\">            &lt;snapshots&gt;</span><br><span class=\"line\">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class=\"line\">            &lt;/snapshots&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">        &lt;!-- Hortonworks --&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;HDPReleases&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;HDP Releases&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.hortonworks.com/content/repositories/releases/&lt;/url&gt;</span><br><span class=\"line\">            &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;</span><br><span class=\"line\">            &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;HortonworksJettyHadoop&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;HDP Jetty&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.hortonworks.com/content/repositories/jetty-hadoop&lt;/url&gt;</span><br><span class=\"line\">            &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;</span><br><span class=\"line\">            &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">        &lt;!-- MapR --&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;mapr-releases&lt;/id&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repository.mapr.com/maven/&lt;/url&gt;</span><br><span class=\"line\">            &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;</span><br><span class=\"line\">            &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/profile&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn  clean install -DskipTests -Pvendor-repos -Dhadoop.version=3.0.0-cdh6.0.1 -Dscala-2.11 -Drat.skip=true -T10C</span><br><span class=\"line\"></span><br><span class=\"line\">解释一下命令：</span><br><span class=\"line\">-T10C 以10个线程执行。</span><br></pre></td></tr></table></figure>\n\n<p>配置修改.m2/settings.xml文件(需要注销调mirror)不然编译会报错</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- localRepository</span></span><br><span class=\"line\"><span class=\"comment\">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class=\"line\"><span class=\"comment\">   |</span></span><br><span class=\"line\"><span class=\"comment\">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:\\software\\maven\\repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--&lt;mirror&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     &lt;id&gt;huaweicloud&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     &lt;url&gt;https://mirrors.huaweicloud.com/repository/maven/&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/mirror&gt;--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>编译存储占用极高：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818104409176.png\" alt=\"image-20210818104409176\" style=\"zoom:80%;\" />\n\n<h2 id=\"制作parcel安装包\"><a href=\"#制作parcel安装包\" class=\"headerlink\" title=\"制作parcel安装包\"></a>制作parcel安装包</h2><ol>\n<li>下载项目</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/pkeropen/flink-parcel.git</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>cd flink-parcel</li>\n<li>修改配置文件<br>vim flink-parcel.properties</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#FLINK 下载地址</span><br><span class=\"line\">FLINK_URL=https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.12.5/flink-1.12.5-bin-scala_2.11.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">#flink版本号</span><br><span class=\"line\">FLINK_VERSION=1.12.5</span><br><span class=\"line\"></span><br><span class=\"line\">#扩展版本号</span><br><span class=\"line\">EXTENS_VERSION=BIN-SCALA_2.11</span><br><span class=\"line\"></span><br><span class=\"line\">#操作系统版本，以centos为例</span><br><span class=\"line\">OS_VERSION=7</span><br><span class=\"line\"></span><br><span class=\"line\">#CDH 小版本</span><br><span class=\"line\">CDH_MIN_FULL=5.16.1</span><br><span class=\"line\">CDH_MAX_FULL=6.3.2</span><br><span class=\"line\"></span><br><span class=\"line\">#CDH大版本</span><br><span class=\"line\">CDH_MIN=5</span><br><span class=\"line\">CDH_MAX=6</span><br></pre></td></tr></table></figure>\n\n<p>生成的文件都在FLINK-1.12.5-BIN-SCALA_2.11_build目录下</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818123120140.png\" alt=\"image-20210818123120140\" style=\"zoom:80%;\" />\n\n<ul>\n<li><p>生成csd文件，生成文件FLINK_ON_YARN-1.12.5.jar<br>a) on yarn 版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./build.sh csd_on_yarn</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>b) standalone版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- ./build.sh csd_standalone</span><br><span class=\"line\">- </span><br></pre></td></tr></table></figure></li>\n</ul>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818123414976.png\" alt=\"image-20210818123414976\" style=\"zoom:80%;\" />\n\n<ul>\n<li>配置flink环境变量</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export FLINK_HOME=/usr/local/flink-parcel/FLINK-1.12.5-BIN-SCALA_2.11/lib/flink</span><br><span class=\"line\">export PATH=$PATH:$FLINK_HOME/bin</span><br></pre></td></tr></table></figure>\n\n<p>3.5 CDH集成Flink<br>将生成的csd的jar包文件放入指定目录中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp FLINK_ON_YARN-1.12.5.jar /opt/cloudera/csd/</span><br><span class=\"line\">chown cloudera-scm:cloudera-scm /opt/cloudera/csd/FLINK_ON_YARN-1.12.5.jar</span><br><span class=\"line\">systemctl restart cloudera-scm-server</span><br></pre></td></tr></table></figure>\n\n<p>将生成的parcel三个文件通过httpd服务配置下载路径<br>mkdir /var/www/html/flink-1.12.5<br>cp /usr/local/flink-parcel/FLINK-1.12.5-BIN-SCALA_2.11_build/* /var/www/html/flink-1.12.5</p>\n<p>测试访问</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124445073.png\" alt=\"image-20210818124445073\" style=\"zoom:80%;\" />\n\n<p>登录cdh管理界面，点击集群-&gt;Parcel</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124710536.png\" alt=\"image-20210818124710536\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124824881.png\" alt=\"image-20210818124824881\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130102552.png\" alt=\"image-20210818130102552\" style=\"zoom:80%;\" />\n\n<p>针对上面的报错，为httpd服务的问题</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130138545.png\" alt=\"image-20210818130138545\"></p>\n<p>解决方法<br>所以排除是hash值导致的，后来查阅资料是发现是httpd服务的问题，在配置文件中需要加上parcel选项，需要修改httpd.conf配置文件，添加parcel。<br>httpd.conf目录在</p>\n<p>在<IfModule mime_module>模块添加 parcel选项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mime_module&gt;</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # TypesConfig points to the file containing the list of mappings from</span><br><span class=\"line\">    # filename extension to MIME-type.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    TypesConfig /etc/mime.types</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # AddType allows you to add to or override the MIME configuration</span><br><span class=\"line\">    # file specified in TypesConfig for specific file types.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #AddType application/x-gzip .tgz</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # AddEncoding allows you to have certain browsers uncompress</span><br><span class=\"line\">    # information on the fly. Note: Not all browsers support this.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #AddEncoding x-compress .Z</span><br><span class=\"line\">    #AddEncoding x-gzip .gz .tgz</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # If the AddEncoding directives above are commented-out, then you</span><br><span class=\"line\">    # probably should define those extensions to indicate media types:</span><br><span class=\"line\">    #</span><br><span class=\"line\">    AddType application/x-compress .Z</span><br><span class=\"line\">    AddType application/x-gzip .gz .tgz .parcel #此处添加.parcel</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\"></span><br><span class=\"line\">#重启http服务</span><br><span class=\"line\">[root@localhost bigdata]#systemctl restart httpd</span><br><span class=\"line\">然后重新进行下载parcel，发现就可以进行下载了，问题解决，然后载根据教程进行parcel的安装就OK。希望对你有帮助。</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;IfModule mime_module&gt;</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # TypesConfig points to the file containing the list of mappings from</span><br><span class=\"line\">    # filename extension to MIME-type.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    TypesConfig /etc/mime.types</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # AddType allows you to add to or override the MIME configuration</span><br><span class=\"line\">    # file specified in TypesConfig for specific file types.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #AddType application/x-gzip .tgz</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # AddEncoding allows you to have certain browsers uncompress</span><br><span class=\"line\">    # information on the fly. Note: Not all browsers support this.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #AddEncoding x-compress .Z</span><br><span class=\"line\">    #AddEncoding x-gzip .gz .tgz</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # If the AddEncoding directives above are commented-out, then you</span><br><span class=\"line\">    # probably should define those extensions to indicate media types:</span><br><span class=\"line\">    #</span><br><span class=\"line\">    AddType application/x-compress .Z</span><br><span class=\"line\">    AddType application/x-gzip .gz .tgz .parcel #此处添加.parcel</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\"></span><br><span class=\"line\">#重启http服务</span><br><span class=\"line\">[root@localhost bigdata]#systemctl restart httpd</span><br><span class=\"line\">然后重新进行下载parcel，发现就可以进行下载了，问题解决</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130330585.png\" alt=\"image-20210818130330585\" style=\"zoom:80%;\" />\n\n<p>启动flink会报错误：</p>\n<p>rotateLogFilesWithPrefix command not found。</p>\n<p>查看原因，网上说是因为没有flink-shaded-hadoop-2-uber-2.7.5-10.0.jar，经过测试不是这个原因。</p>\n<ol>\n<li>：flink-yarn.sh: line 17: rotateLogFilesWithPrefix: command not found，网友也遇到了此问题：<a href=\"https://download.csdn.net/download/orangelzc/15936248%EF%BC%8C%E6%9C%80%E7%BB%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A\">https://download.csdn.net/download/orangelzc/15936248，最终的解决方案：</a></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@cdh632-master01 ~]<span class=\"comment\"># scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-worker03:/opt/cloudera/parcels/FLINK/lib/flink/lib/</span></span><br><span class=\"line\">[root@cdh632-master01 ~]<span class=\"comment\"># scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-worker02:/opt/cloudera/parcels/FLINK/lib/flink/lib/</span></span><br><span class=\"line\">[root@cdh632-master01 ~]<span class=\"comment\"># scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-master01:/opt/cloudera/parcels/FLINK/lib/flink/lib/</span></span><br></pre></td></tr></table></figure>\n\n<p> 通过查看flink-1.12.5 是因为此命令已经被去掉了，所以直接修改flink-yarn.sh中这行代码即可。去掉17行代码即可。</p>\n<p>flink 运行实例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/cloudera/parcels/FLINK/lib/flink/bin/flink run -m 10.11.5.11:8081  /opt/cloudera/parcels/FLINK/lib/flink/examples/batch/WordCount.jar –input hdfs://10.11.5.11/syt/input/ –output hdfs://10.11.5.11/syt/flinkoutput</span><br></pre></td></tr></table></figure>\n\n<p>参考文档：</p>\n<p><a href=\"https://blog.csdn.net/benpaodexiaowoniu/article/details/115500230\">https://blog.csdn.net/benpaodexiaowoniu/article/details/115500230</a></p>\n","site":{"data":{}},"excerpt":"<p>参考：<a href=\"https://blog.csdn.net/sinat_37690778/article/details/112533647\">https://blog.csdn.net/sinat_37690778/article/details/112533647</a></p>","more":"<!--more-->\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.12.5/flink-1.12.5-src.tgz </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;profile&gt;</span><br><span class=\"line\">    &lt;id&gt;vendor-repos&lt;/id&gt;</span><br><span class=\"line\">    &lt;activation&gt;</span><br><span class=\"line\">        &lt;property&gt;</span><br><span class=\"line\">            &lt;name&gt;vendor-repos&lt;/name&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">    &lt;/activation&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Add vendor maven repositories --&gt;</span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;!-- Cloudera --&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;cloudera-releases&lt;/id&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repository.cloudera.com/artifactory/cloudera-repos&lt;/url&gt;</span><br><span class=\"line\">            &lt;releases&gt;</span><br><span class=\"line\">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">            &lt;/releases&gt;</span><br><span class=\"line\">            &lt;snapshots&gt;</span><br><span class=\"line\">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class=\"line\">            &lt;/snapshots&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">        &lt;!-- Hortonworks --&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;HDPReleases&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;HDP Releases&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.hortonworks.com/content/repositories/releases/&lt;/url&gt;</span><br><span class=\"line\">            &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;</span><br><span class=\"line\">            &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;HortonworksJettyHadoop&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;HDP Jetty&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.hortonworks.com/content/repositories/jetty-hadoop&lt;/url&gt;</span><br><span class=\"line\">            &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;</span><br><span class=\"line\">            &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">        &lt;!-- MapR --&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;mapr-releases&lt;/id&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repository.mapr.com/maven/&lt;/url&gt;</span><br><span class=\"line\">            &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;</span><br><span class=\"line\">            &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/profile&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn  clean install -DskipTests -Pvendor-repos -Dhadoop.version=3.0.0-cdh6.0.1 -Dscala-2.11 -Drat.skip=true -T10C</span><br><span class=\"line\"></span><br><span class=\"line\">解释一下命令：</span><br><span class=\"line\">-T10C 以10个线程执行。</span><br></pre></td></tr></table></figure>\n\n<p>配置修改.m2/settings.xml文件(需要注销调mirror)不然编译会报错</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- localRepository</span></span><br><span class=\"line\"><span class=\"comment\">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class=\"line\"><span class=\"comment\">   |</span></span><br><span class=\"line\"><span class=\"comment\">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:\\software\\maven\\repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--&lt;mirror&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     &lt;id&gt;huaweicloud&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     &lt;url&gt;https://mirrors.huaweicloud.com/repository/maven/&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/mirror&gt;--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>编译存储占用极高：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818104409176.png\" alt=\"image-20210818104409176\" style=\"zoom:80%;\" />\n\n<h2 id=\"制作parcel安装包\"><a href=\"#制作parcel安装包\" class=\"headerlink\" title=\"制作parcel安装包\"></a>制作parcel安装包</h2><ol>\n<li>下载项目</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/pkeropen/flink-parcel.git</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>cd flink-parcel</li>\n<li>修改配置文件<br>vim flink-parcel.properties</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#FLINK 下载地址</span><br><span class=\"line\">FLINK_URL=https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.12.5/flink-1.12.5-bin-scala_2.11.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">#flink版本号</span><br><span class=\"line\">FLINK_VERSION=1.12.5</span><br><span class=\"line\"></span><br><span class=\"line\">#扩展版本号</span><br><span class=\"line\">EXTENS_VERSION=BIN-SCALA_2.11</span><br><span class=\"line\"></span><br><span class=\"line\">#操作系统版本，以centos为例</span><br><span class=\"line\">OS_VERSION=7</span><br><span class=\"line\"></span><br><span class=\"line\">#CDH 小版本</span><br><span class=\"line\">CDH_MIN_FULL=5.16.1</span><br><span class=\"line\">CDH_MAX_FULL=6.3.2</span><br><span class=\"line\"></span><br><span class=\"line\">#CDH大版本</span><br><span class=\"line\">CDH_MIN=5</span><br><span class=\"line\">CDH_MAX=6</span><br></pre></td></tr></table></figure>\n\n<p>生成的文件都在FLINK-1.12.5-BIN-SCALA_2.11_build目录下</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818123120140.png\" alt=\"image-20210818123120140\" style=\"zoom:80%;\" />\n\n<ul>\n<li><p>生成csd文件，生成文件FLINK_ON_YARN-1.12.5.jar<br>a) on yarn 版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./build.sh csd_on_yarn</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>b) standalone版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- ./build.sh csd_standalone</span><br><span class=\"line\">- </span><br></pre></td></tr></table></figure></li>\n</ul>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818123414976.png\" alt=\"image-20210818123414976\" style=\"zoom:80%;\" />\n\n<ul>\n<li>配置flink环境变量</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export FLINK_HOME=/usr/local/flink-parcel/FLINK-1.12.5-BIN-SCALA_2.11/lib/flink</span><br><span class=\"line\">export PATH=$PATH:$FLINK_HOME/bin</span><br></pre></td></tr></table></figure>\n\n<p>3.5 CDH集成Flink<br>将生成的csd的jar包文件放入指定目录中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp FLINK_ON_YARN-1.12.5.jar /opt/cloudera/csd/</span><br><span class=\"line\">chown cloudera-scm:cloudera-scm /opt/cloudera/csd/FLINK_ON_YARN-1.12.5.jar</span><br><span class=\"line\">systemctl restart cloudera-scm-server</span><br></pre></td></tr></table></figure>\n\n<p>将生成的parcel三个文件通过httpd服务配置下载路径<br>mkdir /var/www/html/flink-1.12.5<br>cp /usr/local/flink-parcel/FLINK-1.12.5-BIN-SCALA_2.11_build/* /var/www/html/flink-1.12.5</p>\n<p>测试访问</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124445073.png\" alt=\"image-20210818124445073\" style=\"zoom:80%;\" />\n\n<p>登录cdh管理界面，点击集群-&gt;Parcel</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124710536.png\" alt=\"image-20210818124710536\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818124824881.png\" alt=\"image-20210818124824881\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130102552.png\" alt=\"image-20210818130102552\" style=\"zoom:80%;\" />\n\n<p>针对上面的报错，为httpd服务的问题</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130138545.png\" alt=\"image-20210818130138545\"></p>\n<p>解决方法<br>所以排除是hash值导致的，后来查阅资料是发现是httpd服务的问题，在配置文件中需要加上parcel选项，需要修改httpd.conf配置文件，添加parcel。<br>httpd.conf目录在</p>\n<p>在<IfModule mime_module>模块添加 parcel选项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mime_module&gt;</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # TypesConfig points to the file containing the list of mappings from</span><br><span class=\"line\">    # filename extension to MIME-type.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    TypesConfig /etc/mime.types</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # AddType allows you to add to or override the MIME configuration</span><br><span class=\"line\">    # file specified in TypesConfig for specific file types.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #AddType application/x-gzip .tgz</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # AddEncoding allows you to have certain browsers uncompress</span><br><span class=\"line\">    # information on the fly. Note: Not all browsers support this.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #AddEncoding x-compress .Z</span><br><span class=\"line\">    #AddEncoding x-gzip .gz .tgz</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # If the AddEncoding directives above are commented-out, then you</span><br><span class=\"line\">    # probably should define those extensions to indicate media types:</span><br><span class=\"line\">    #</span><br><span class=\"line\">    AddType application/x-compress .Z</span><br><span class=\"line\">    AddType application/x-gzip .gz .tgz .parcel #此处添加.parcel</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\"></span><br><span class=\"line\">#重启http服务</span><br><span class=\"line\">[root@localhost bigdata]#systemctl restart httpd</span><br><span class=\"line\">然后重新进行下载parcel，发现就可以进行下载了，问题解决，然后载根据教程进行parcel的安装就OK。希望对你有帮助。</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;IfModule mime_module&gt;</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # TypesConfig points to the file containing the list of mappings from</span><br><span class=\"line\">    # filename extension to MIME-type.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    TypesConfig /etc/mime.types</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # AddType allows you to add to or override the MIME configuration</span><br><span class=\"line\">    # file specified in TypesConfig for specific file types.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #AddType application/x-gzip .tgz</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # AddEncoding allows you to have certain browsers uncompress</span><br><span class=\"line\">    # information on the fly. Note: Not all browsers support this.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #AddEncoding x-compress .Z</span><br><span class=\"line\">    #AddEncoding x-gzip .gz .tgz</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # If the AddEncoding directives above are commented-out, then you</span><br><span class=\"line\">    # probably should define those extensions to indicate media types:</span><br><span class=\"line\">    #</span><br><span class=\"line\">    AddType application/x-compress .Z</span><br><span class=\"line\">    AddType application/x-gzip .gz .tgz .parcel #此处添加.parcel</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\"></span><br><span class=\"line\">#重启http服务</span><br><span class=\"line\">[root@localhost bigdata]#systemctl restart httpd</span><br><span class=\"line\">然后重新进行下载parcel，发现就可以进行下载了，问题解决</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210818130330585.png\" alt=\"image-20210818130330585\" style=\"zoom:80%;\" />\n\n<p>启动flink会报错误：</p>\n<p>rotateLogFilesWithPrefix command not found。</p>\n<p>查看原因，网上说是因为没有flink-shaded-hadoop-2-uber-2.7.5-10.0.jar，经过测试不是这个原因。</p>\n<ol>\n<li>：flink-yarn.sh: line 17: rotateLogFilesWithPrefix: command not found，网友也遇到了此问题：<a href=\"https://download.csdn.net/download/orangelzc/15936248%EF%BC%8C%E6%9C%80%E7%BB%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A\">https://download.csdn.net/download/orangelzc/15936248，最终的解决方案：</a></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@cdh632-master01 ~]<span class=\"comment\"># scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-worker03:/opt/cloudera/parcels/FLINK/lib/flink/lib/</span></span><br><span class=\"line\">[root@cdh632-master01 ~]<span class=\"comment\"># scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-worker02:/opt/cloudera/parcels/FLINK/lib/flink/lib/</span></span><br><span class=\"line\">[root@cdh632-master01 ~]<span class=\"comment\"># scp /opt/module/repository/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar root@cdh632-master01:/opt/cloudera/parcels/FLINK/lib/flink/lib/</span></span><br></pre></td></tr></table></figure>\n\n<p> 通过查看flink-1.12.5 是因为此命令已经被去掉了，所以直接修改flink-yarn.sh中这行代码即可。去掉17行代码即可。</p>\n<p>flink 运行实例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/cloudera/parcels/FLINK/lib/flink/bin/flink run -m 10.11.5.11:8081  /opt/cloudera/parcels/FLINK/lib/flink/examples/batch/WordCount.jar –input hdfs://10.11.5.11/syt/input/ –output hdfs://10.11.5.11/syt/flinkoutput</span><br></pre></td></tr></table></figure>\n\n<p>参考文档：</p>\n<p><a href=\"https://blog.csdn.net/benpaodexiaowoniu/article/details/115500230\">https://blog.csdn.net/benpaodexiaowoniu/article/details/115500230</a></p>"},{"title":"Node.js 依赖镜像加速","date":"2021-08-20T02:36:39.000Z","_content":"\n## [](https://gera2ld.space/posts/nodejs-mirror/#%E8%83%8C%E6%99%AF)背景\n\n由于一些众所周知的原因，我们在安装 Node.js 依赖的时候，速度可能会很慢。\n<!--more-->\n\n感谢国内的一些镜像服务，比如[阿里云NPM镜像](https://developer.aliyun.com/mirror/NPM)，让我们可以通过切换下载源来缩短下载时间。然而不同包的加载方式也不一样，使得整个加速过程并不是那么顺利。\n\n然而还有很多包是依赖二进制文件的，这些文件可能会很大，可能由不同的服务器提供，可能以国内的网络条件很难下载成功。\n\n正是这些包导致我们的安装一直卡住，像这样：\n\n [![hang](https://gitee.com/hxf88/imgrepo/raw/master/img/hang.png \"hang\")](https://gera2ld.space/static/01e36218d448a320d4c0107984ca66c5/1abaa/hang.png) \n\n## [](https://gera2ld.space/posts/nodejs-mirror/#%E7%BA%AFjs%E5%8C%85%E5%8A%A0%E9%80%9F)纯JS包加速\n\n这个比较简单，镜像的文档里一般都会有，直接指定 `registry` 就可以了，如：\n\n```\n$ npm i --registry=https://registry.npm.taobao.org\n\n$ yarn --registry=https://registry.npm.taobao.org\n```\n\n上面这种方式是临时指定 `registry`，然而我们并不希望每次安装依赖都加上这一串配置，所以可以通过修改全局配置来实现：\n\n```\n$ yarn config set registry https://registry.npm.taobao.org/\n```\n\n但是这样修改和切换也会比较麻烦，可以使用现成的工具 YRM 来辅助：\n\n```\n\n$ yarn global add yrm\n\n\n$ yrm use taobao\n```\n\n这时再安装依赖，纯 JavaScript 实现的包的加载速度会得到明显的提升。\n\n## [](https://gera2ld.space/posts/nodejs-mirror/#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%8A%A0%E9%80%9F)二进制包加速\n\n除了纯JS的包以外，我们经常还会用到一些二进制的包，比如 Electron、SQLite3、图像处理相关的库等等。\n\n这些包在不同的平台上对应不同的二进制文件，所以需要在安装时根据当前环境下载对应的文件。而很多包的二进制文件都放在 GitHub 上，国内下载非常困难。\n\n实际上[阿里云NPM镜像](https://developer.aliyun.com/mirror/NPM)不仅提供了NPM包的镜像，同时也提供了一些二进制包的镜像。这里分几种类别介绍一下各种类型的二进制包如何加速。\n\n### [](https://gera2ld.space/posts/nodejs-mirror/#%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91)源码编译\n\n部分包的二进制文件早已过时，只能通过源码编译，这时需要我们提前安装编译所需的各种依赖，然后在安装时编译。SQLite3 就是这种情况。\n\n编译安装的好处是需下载的源码较小，不用花费太多时间在网络请求上。但是每次都需重新编译，依赖的环境比较复杂，首次安装时比较容易遇到一些疑难杂症，处理好之后就比较简单了。\n\n一般来说，Windows 上搭建编译环境可以通过以下命令安装一个封装好的包来完成：\n\n```\n$ PYTHON_MIRROR=http://npm.taobao.org/mirrors/python npm install --global --production windows-build-tools\n```\n\nLinux / Mac OS 一般都有现成的工具链支持，这里就不深入展开了。\n\n### [](https://gera2ld.space/posts/nodejs-mirror/#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%94%AF%E6%8C%81)环境变量支持\n\n某些包因为低速网络用户众多，一开始就特意考虑了镜像支持，会优先从环境变量读取镜像地址，然后拼接完整链接下载。\n\n比如 Electron 的二进制文件通过 `@electron/get` 下载，可以通过配置 `ELECTRON_MIRROR` 进行提速：\n\n```\nexport ELECTRON_MIRROR=https://cdn.npm.taobao.org/dist/electron/\n```\n\n### [](https://gera2ld.space/posts/nodejs-mirror/#bin-wrapper)bin-wrapper\n\n还有很多包依赖的是第三方的二进制文件，和 Node.js 版本无关，没必要随 Node.js 编译。\n\n比如图像处理相关的库，[cwebp-bin](https://github.com/imagemin/cwebp-bin)、[mozjpeg-bin](https://github.com/imagemin/mozjpeg-bin)、[pngquant-bin](https://github.com/imagemin/pngquant-bin)，都是采用以下流程安装的：\n\n1.  使用 [bin-wrapper](https://github.com/kevva/bin-wrapper) 检测二进制文件是否已经安装成功；\n2.  使用 [download](https://github.com/kevva/download) 尝试下载二进制文件；\n3.  如果二进制文件下载失败，则从源码开始编译。\n\n这种安装方式在低速网络下存在比较严重的问题：\n\n-   [bin-wrapper](https://github.com/kevva/bin-wrapper) 内部写死了二进制文件的地址，导致无法使用镜像。\n    \n    虽然可以使用代理加速，但是可用性以及速度还是远不如镜像的。毕竟不是人人都能拥有可以从国外高速下载资源的代理，而且全局使用代理的话，那些支持国内镜像的资源反而速度会更慢。\n    \n-   源码下载很慢。\n    \n    早期的版本中，源码是从各种第三方网站下载的，失败率很高；后来在最新的版本改成了直接内置源码，从源码编译就拥有了上面所述的源码编译的优点和缺点。但是直到现在，很多用到这些工具的包依然引用的是早期的版本，所以即使使用源码编译，也经常因为下载太慢导致安装失败。\n    \n-   进度不明确。\n    \n    安装进度卡在 postinstall 时，我们是很绝望的，因为完全不知道后台在做什么。\n    \n\n[bin-wrapper](https://github.com/kevva/bin-wrapper) 内部使用的是 [download](https://github.com/kevva/download)，这个库最初的设计思想就是尽量简单，且避免留下副作用，所以它一直拒绝使用缓存，再加上硬编码的下载地址，使我们很难通过镜像进行优化。\n\n### [](https://gera2ld.space/posts/nodejs-mirror/#download--rewrite)download + rewrite\n\n为了解决不能使用镜像的问题，我 [fork了一份download](https://github.com/gera2ld/download)，通过 cosmiconfig 读取 rewrite 配置，然后在下载之前对 URL 做一次 rewrite，这样就有机会把原始链接替换成镜像的下载链接。\n\n得益于 [yarn指定依赖版本的能力](https://classic.yarnpkg.com/en/docs/selective-version-resolutions/)，我们可以直接将依赖中的 [download](https://github.com/kevva/download) 强行替换成我改造的版本：\n\n```\n\n{\n  \"resolutions\": {\n    \"download\": \"https://registry.npm.taobao.org/downloadex/download/downloadex-8.1.0.tgz\"\n  }\n}\n```\n\n然后配置镜像链接：\n\n```\n\n{\n  \"rewrite\": {\n    \"https://raw.githubusercontent.com/imagemin/cwebp-bin/\": \"https://npm.taobao.org/mirrors/cwebp-bin/\",\n    \"https://raw.githubusercontent.com/imagemin/mozjpeg-bin/\": \"https://npm.taobao.org/mirrors/mozjpeg-bin/\",\n    \"https://raw.githubusercontent.com/imagemin/pngquant-bin/\": \"https://npm.taobao.org/mirrors/pngquant-bin/\"\n  }\n}\n```\n\n然后再下载依赖，速度杠杠的，瞬间就安装好了。\n","source":"_posts/Node-js-依赖镜像加速.md","raw":"---\ntitle: Node.js 依赖镜像加速\ndate: 2021-08-20 10:36:39\ntags:\n- nodejs\ncategories: \n- nodejs\n---\n\n## [](https://gera2ld.space/posts/nodejs-mirror/#%E8%83%8C%E6%99%AF)背景\n\n由于一些众所周知的原因，我们在安装 Node.js 依赖的时候，速度可能会很慢。\n<!--more-->\n\n感谢国内的一些镜像服务，比如[阿里云NPM镜像](https://developer.aliyun.com/mirror/NPM)，让我们可以通过切换下载源来缩短下载时间。然而不同包的加载方式也不一样，使得整个加速过程并不是那么顺利。\n\n然而还有很多包是依赖二进制文件的，这些文件可能会很大，可能由不同的服务器提供，可能以国内的网络条件很难下载成功。\n\n正是这些包导致我们的安装一直卡住，像这样：\n\n [![hang](https://gitee.com/hxf88/imgrepo/raw/master/img/hang.png \"hang\")](https://gera2ld.space/static/01e36218d448a320d4c0107984ca66c5/1abaa/hang.png) \n\n## [](https://gera2ld.space/posts/nodejs-mirror/#%E7%BA%AFjs%E5%8C%85%E5%8A%A0%E9%80%9F)纯JS包加速\n\n这个比较简单，镜像的文档里一般都会有，直接指定 `registry` 就可以了，如：\n\n```\n$ npm i --registry=https://registry.npm.taobao.org\n\n$ yarn --registry=https://registry.npm.taobao.org\n```\n\n上面这种方式是临时指定 `registry`，然而我们并不希望每次安装依赖都加上这一串配置，所以可以通过修改全局配置来实现：\n\n```\n$ yarn config set registry https://registry.npm.taobao.org/\n```\n\n但是这样修改和切换也会比较麻烦，可以使用现成的工具 YRM 来辅助：\n\n```\n\n$ yarn global add yrm\n\n\n$ yrm use taobao\n```\n\n这时再安装依赖，纯 JavaScript 实现的包的加载速度会得到明显的提升。\n\n## [](https://gera2ld.space/posts/nodejs-mirror/#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%8A%A0%E9%80%9F)二进制包加速\n\n除了纯JS的包以外，我们经常还会用到一些二进制的包，比如 Electron、SQLite3、图像处理相关的库等等。\n\n这些包在不同的平台上对应不同的二进制文件，所以需要在安装时根据当前环境下载对应的文件。而很多包的二进制文件都放在 GitHub 上，国内下载非常困难。\n\n实际上[阿里云NPM镜像](https://developer.aliyun.com/mirror/NPM)不仅提供了NPM包的镜像，同时也提供了一些二进制包的镜像。这里分几种类别介绍一下各种类型的二进制包如何加速。\n\n### [](https://gera2ld.space/posts/nodejs-mirror/#%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91)源码编译\n\n部分包的二进制文件早已过时，只能通过源码编译，这时需要我们提前安装编译所需的各种依赖，然后在安装时编译。SQLite3 就是这种情况。\n\n编译安装的好处是需下载的源码较小，不用花费太多时间在网络请求上。但是每次都需重新编译，依赖的环境比较复杂，首次安装时比较容易遇到一些疑难杂症，处理好之后就比较简单了。\n\n一般来说，Windows 上搭建编译环境可以通过以下命令安装一个封装好的包来完成：\n\n```\n$ PYTHON_MIRROR=http://npm.taobao.org/mirrors/python npm install --global --production windows-build-tools\n```\n\nLinux / Mac OS 一般都有现成的工具链支持，这里就不深入展开了。\n\n### [](https://gera2ld.space/posts/nodejs-mirror/#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%94%AF%E6%8C%81)环境变量支持\n\n某些包因为低速网络用户众多，一开始就特意考虑了镜像支持，会优先从环境变量读取镜像地址，然后拼接完整链接下载。\n\n比如 Electron 的二进制文件通过 `@electron/get` 下载，可以通过配置 `ELECTRON_MIRROR` 进行提速：\n\n```\nexport ELECTRON_MIRROR=https://cdn.npm.taobao.org/dist/electron/\n```\n\n### [](https://gera2ld.space/posts/nodejs-mirror/#bin-wrapper)bin-wrapper\n\n还有很多包依赖的是第三方的二进制文件，和 Node.js 版本无关，没必要随 Node.js 编译。\n\n比如图像处理相关的库，[cwebp-bin](https://github.com/imagemin/cwebp-bin)、[mozjpeg-bin](https://github.com/imagemin/mozjpeg-bin)、[pngquant-bin](https://github.com/imagemin/pngquant-bin)，都是采用以下流程安装的：\n\n1.  使用 [bin-wrapper](https://github.com/kevva/bin-wrapper) 检测二进制文件是否已经安装成功；\n2.  使用 [download](https://github.com/kevva/download) 尝试下载二进制文件；\n3.  如果二进制文件下载失败，则从源码开始编译。\n\n这种安装方式在低速网络下存在比较严重的问题：\n\n-   [bin-wrapper](https://github.com/kevva/bin-wrapper) 内部写死了二进制文件的地址，导致无法使用镜像。\n    \n    虽然可以使用代理加速，但是可用性以及速度还是远不如镜像的。毕竟不是人人都能拥有可以从国外高速下载资源的代理，而且全局使用代理的话，那些支持国内镜像的资源反而速度会更慢。\n    \n-   源码下载很慢。\n    \n    早期的版本中，源码是从各种第三方网站下载的，失败率很高；后来在最新的版本改成了直接内置源码，从源码编译就拥有了上面所述的源码编译的优点和缺点。但是直到现在，很多用到这些工具的包依然引用的是早期的版本，所以即使使用源码编译，也经常因为下载太慢导致安装失败。\n    \n-   进度不明确。\n    \n    安装进度卡在 postinstall 时，我们是很绝望的，因为完全不知道后台在做什么。\n    \n\n[bin-wrapper](https://github.com/kevva/bin-wrapper) 内部使用的是 [download](https://github.com/kevva/download)，这个库最初的设计思想就是尽量简单，且避免留下副作用，所以它一直拒绝使用缓存，再加上硬编码的下载地址，使我们很难通过镜像进行优化。\n\n### [](https://gera2ld.space/posts/nodejs-mirror/#download--rewrite)download + rewrite\n\n为了解决不能使用镜像的问题，我 [fork了一份download](https://github.com/gera2ld/download)，通过 cosmiconfig 读取 rewrite 配置，然后在下载之前对 URL 做一次 rewrite，这样就有机会把原始链接替换成镜像的下载链接。\n\n得益于 [yarn指定依赖版本的能力](https://classic.yarnpkg.com/en/docs/selective-version-resolutions/)，我们可以直接将依赖中的 [download](https://github.com/kevva/download) 强行替换成我改造的版本：\n\n```\n\n{\n  \"resolutions\": {\n    \"download\": \"https://registry.npm.taobao.org/downloadex/download/downloadex-8.1.0.tgz\"\n  }\n}\n```\n\n然后配置镜像链接：\n\n```\n\n{\n  \"rewrite\": {\n    \"https://raw.githubusercontent.com/imagemin/cwebp-bin/\": \"https://npm.taobao.org/mirrors/cwebp-bin/\",\n    \"https://raw.githubusercontent.com/imagemin/mozjpeg-bin/\": \"https://npm.taobao.org/mirrors/mozjpeg-bin/\",\n    \"https://raw.githubusercontent.com/imagemin/pngquant-bin/\": \"https://npm.taobao.org/mirrors/pngquant-bin/\"\n  }\n}\n```\n\n然后再下载依赖，速度杠杠的，瞬间就安装好了。\n","slug":"Node-js-依赖镜像加速","published":1,"updated":"2021-08-23T02:55:53.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6o80004cmv90p5teh26","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#%E8%83%8C%E6%99%AF\"></a>背景</h2><p>由于一些众所周知的原因，我们在安装 Node.js 依赖的时候，速度可能会很慢。</p>\n<span id=\"more\"></span>\n\n<p>感谢国内的一些镜像服务，比如<a href=\"https://developer.aliyun.com/mirror/NPM\">阿里云NPM镜像</a>，让我们可以通过切换下载源来缩短下载时间。然而不同包的加载方式也不一样，使得整个加速过程并不是那么顺利。</p>\n<p>然而还有很多包是依赖二进制文件的，这些文件可能会很大，可能由不同的服务器提供，可能以国内的网络条件很难下载成功。</p>\n<p>正是这些包导致我们的安装一直卡住，像这样：</p>\n<p> <a href=\"https://gera2ld.space/static/01e36218d448a320d4c0107984ca66c5/1abaa/hang.png\"><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/hang.png\" alt=\"hang\" title=\"hang\"></a> </p>\n<h2 id=\"纯JS包加速\"><a href=\"#纯JS包加速\" class=\"headerlink\" title=\"纯JS包加速\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#%E7%BA%AFjs%E5%8C%85%E5%8A%A0%E9%80%9F\"></a>纯JS包加速</h2><p>这个比较简单，镜像的文档里一般都会有，直接指定 <code>registry</code> 就可以了，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">$ yarn --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>上面这种方式是临时指定 <code>registry</code>，然而我们并不希望每次安装依赖都加上这一串配置，所以可以通过修改全局配置来实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<p>但是这样修改和切换也会比较麻烦，可以使用现成的工具 YRM 来辅助：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ yarn global add yrm</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ yrm use taobao</span><br></pre></td></tr></table></figure>\n\n<p>这时再安装依赖，纯 JavaScript 实现的包的加载速度会得到明显的提升。</p>\n<h2 id=\"二进制包加速\"><a href=\"#二进制包加速\" class=\"headerlink\" title=\"二进制包加速\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%8A%A0%E9%80%9F\"></a>二进制包加速</h2><p>除了纯JS的包以外，我们经常还会用到一些二进制的包，比如 Electron、SQLite3、图像处理相关的库等等。</p>\n<p>这些包在不同的平台上对应不同的二进制文件，所以需要在安装时根据当前环境下载对应的文件。而很多包的二进制文件都放在 GitHub 上，国内下载非常困难。</p>\n<p>实际上<a href=\"https://developer.aliyun.com/mirror/NPM\">阿里云NPM镜像</a>不仅提供了NPM包的镜像，同时也提供了一些二进制包的镜像。这里分几种类别介绍一下各种类型的二进制包如何加速。</p>\n<h3 id=\"源码编译\"><a href=\"#源码编译\" class=\"headerlink\" title=\"源码编译\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91\"></a>源码编译</h3><p>部分包的二进制文件早已过时，只能通过源码编译，这时需要我们提前安装编译所需的各种依赖，然后在安装时编译。SQLite3 就是这种情况。</p>\n<p>编译安装的好处是需下载的源码较小，不用花费太多时间在网络请求上。但是每次都需重新编译，依赖的环境比较复杂，首次安装时比较容易遇到一些疑难杂症，处理好之后就比较简单了。</p>\n<p>一般来说，Windows 上搭建编译环境可以通过以下命令安装一个封装好的包来完成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ PYTHON_MIRROR=http://npm.taobao.org/mirrors/python npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure>\n\n<p>Linux / Mac OS 一般都有现成的工具链支持，这里就不深入展开了。</p>\n<h3 id=\"环境变量支持\"><a href=\"#环境变量支持\" class=\"headerlink\" title=\"环境变量支持\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%94%AF%E6%8C%81\"></a>环境变量支持</h3><p>某些包因为低速网络用户众多，一开始就特意考虑了镜像支持，会优先从环境变量读取镜像地址，然后拼接完整链接下载。</p>\n<p>比如 Electron 的二进制文件通过 <code>@electron/get</code> 下载，可以通过配置 <code>ELECTRON_MIRROR</code> 进行提速：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ELECTRON_MIRROR=https://cdn.npm.taobao.org/dist/electron/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bin-wrapper\"><a href=\"#bin-wrapper\" class=\"headerlink\" title=\"bin-wrapper\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#bin-wrapper\"></a>bin-wrapper</h3><p>还有很多包依赖的是第三方的二进制文件，和 Node.js 版本无关，没必要随 Node.js 编译。</p>\n<p>比如图像处理相关的库，<a href=\"https://github.com/imagemin/cwebp-bin\">cwebp-bin</a>、<a href=\"https://github.com/imagemin/mozjpeg-bin\">mozjpeg-bin</a>、<a href=\"https://github.com/imagemin/pngquant-bin\">pngquant-bin</a>，都是采用以下流程安装的：</p>\n<ol>\n<li> 使用 <a href=\"https://github.com/kevva/bin-wrapper\">bin-wrapper</a> 检测二进制文件是否已经安装成功；</li>\n<li> 使用 <a href=\"https://github.com/kevva/download\">download</a> 尝试下载二进制文件；</li>\n<li> 如果二进制文件下载失败，则从源码开始编译。</li>\n</ol>\n<p>这种安装方式在低速网络下存在比较严重的问题：</p>\n<ul>\n<li><a href=\"https://github.com/kevva/bin-wrapper\">bin-wrapper</a> 内部写死了二进制文件的地址，导致无法使用镜像。  虽然可以使用代理加速，但是可用性以及速度还是远不如镜像的。毕竟不是人人都能拥有可以从国外高速下载资源的代理，而且全局使用代理的话，那些支持国内镜像的资源反而速度会更慢。</li>\n<li>源码下载很慢。  早期的版本中，源码是从各种第三方网站下载的，失败率很高；后来在最新的版本改成了直接内置源码，从源码编译就拥有了上面所述的源码编译的优点和缺点。但是直到现在，很多用到这些工具的包依然引用的是早期的版本，所以即使使用源码编译，也经常因为下载太慢导致安装失败。</li>\n<li>进度不明确。  安装进度卡在 postinstall 时，我们是很绝望的，因为完全不知道后台在做什么。</li>\n</ul>\n<p><a href=\"https://github.com/kevva/bin-wrapper\">bin-wrapper</a> 内部使用的是 <a href=\"https://github.com/kevva/download\">download</a>，这个库最初的设计思想就是尽量简单，且避免留下副作用，所以它一直拒绝使用缓存，再加上硬编码的下载地址，使我们很难通过镜像进行优化。</p>\n<h3 id=\"download-rewrite\"><a href=\"#download-rewrite\" class=\"headerlink\" title=\"download + rewrite\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#download--rewrite\"></a>download + rewrite</h3><p>为了解决不能使用镜像的问题，我 <a href=\"https://github.com/gera2ld/download\">fork了一份download</a>，通过 cosmiconfig 读取 rewrite 配置，然后在下载之前对 URL 做一次 rewrite，这样就有机会把原始链接替换成镜像的下载链接。</p>\n<p>得益于 <a href=\"https://classic.yarnpkg.com/en/docs/selective-version-resolutions/\">yarn指定依赖版本的能力</a>，我们可以直接将依赖中的 <a href=\"https://github.com/kevva/download\">download</a> 强行替换成我改造的版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;resolutions&quot;: &#123;</span><br><span class=\"line\">    &quot;download&quot;: &quot;https://registry.npm.taobao.org/downloadex/download/downloadex-8.1.0.tgz&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后配置镜像链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rewrite&quot;: &#123;</span><br><span class=\"line\">    &quot;https://raw.githubusercontent.com/imagemin/cwebp-bin/&quot;: &quot;https://npm.taobao.org/mirrors/cwebp-bin/&quot;,</span><br><span class=\"line\">    &quot;https://raw.githubusercontent.com/imagemin/mozjpeg-bin/&quot;: &quot;https://npm.taobao.org/mirrors/mozjpeg-bin/&quot;,</span><br><span class=\"line\">    &quot;https://raw.githubusercontent.com/imagemin/pngquant-bin/&quot;: &quot;https://npm.taobao.org/mirrors/pngquant-bin/&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后再下载依赖，速度杠杠的，瞬间就安装好了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#%E8%83%8C%E6%99%AF\"></a>背景</h2><p>由于一些众所周知的原因，我们在安装 Node.js 依赖的时候，速度可能会很慢。</p>","more":"<p>感谢国内的一些镜像服务，比如<a href=\"https://developer.aliyun.com/mirror/NPM\">阿里云NPM镜像</a>，让我们可以通过切换下载源来缩短下载时间。然而不同包的加载方式也不一样，使得整个加速过程并不是那么顺利。</p>\n<p>然而还有很多包是依赖二进制文件的，这些文件可能会很大，可能由不同的服务器提供，可能以国内的网络条件很难下载成功。</p>\n<p>正是这些包导致我们的安装一直卡住，像这样：</p>\n<p> <a href=\"https://gera2ld.space/static/01e36218d448a320d4c0107984ca66c5/1abaa/hang.png\"><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/hang.png\" alt=\"hang\" title=\"hang\"></a> </p>\n<h2 id=\"纯JS包加速\"><a href=\"#纯JS包加速\" class=\"headerlink\" title=\"纯JS包加速\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#%E7%BA%AFjs%E5%8C%85%E5%8A%A0%E9%80%9F\"></a>纯JS包加速</h2><p>这个比较简单，镜像的文档里一般都会有，直接指定 <code>registry</code> 就可以了，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">$ yarn --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>上面这种方式是临时指定 <code>registry</code>，然而我们并不希望每次安装依赖都加上这一串配置，所以可以通过修改全局配置来实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<p>但是这样修改和切换也会比较麻烦，可以使用现成的工具 YRM 来辅助：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ yarn global add yrm</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ yrm use taobao</span><br></pre></td></tr></table></figure>\n\n<p>这时再安装依赖，纯 JavaScript 实现的包的加载速度会得到明显的提升。</p>\n<h2 id=\"二进制包加速\"><a href=\"#二进制包加速\" class=\"headerlink\" title=\"二进制包加速\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%8A%A0%E9%80%9F\"></a>二进制包加速</h2><p>除了纯JS的包以外，我们经常还会用到一些二进制的包，比如 Electron、SQLite3、图像处理相关的库等等。</p>\n<p>这些包在不同的平台上对应不同的二进制文件，所以需要在安装时根据当前环境下载对应的文件。而很多包的二进制文件都放在 GitHub 上，国内下载非常困难。</p>\n<p>实际上<a href=\"https://developer.aliyun.com/mirror/NPM\">阿里云NPM镜像</a>不仅提供了NPM包的镜像，同时也提供了一些二进制包的镜像。这里分几种类别介绍一下各种类型的二进制包如何加速。</p>\n<h3 id=\"源码编译\"><a href=\"#源码编译\" class=\"headerlink\" title=\"源码编译\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91\"></a>源码编译</h3><p>部分包的二进制文件早已过时，只能通过源码编译，这时需要我们提前安装编译所需的各种依赖，然后在安装时编译。SQLite3 就是这种情况。</p>\n<p>编译安装的好处是需下载的源码较小，不用花费太多时间在网络请求上。但是每次都需重新编译，依赖的环境比较复杂，首次安装时比较容易遇到一些疑难杂症，处理好之后就比较简单了。</p>\n<p>一般来说，Windows 上搭建编译环境可以通过以下命令安装一个封装好的包来完成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ PYTHON_MIRROR=http://npm.taobao.org/mirrors/python npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure>\n\n<p>Linux / Mac OS 一般都有现成的工具链支持，这里就不深入展开了。</p>\n<h3 id=\"环境变量支持\"><a href=\"#环境变量支持\" class=\"headerlink\" title=\"环境变量支持\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%94%AF%E6%8C%81\"></a>环境变量支持</h3><p>某些包因为低速网络用户众多，一开始就特意考虑了镜像支持，会优先从环境变量读取镜像地址，然后拼接完整链接下载。</p>\n<p>比如 Electron 的二进制文件通过 <code>@electron/get</code> 下载，可以通过配置 <code>ELECTRON_MIRROR</code> 进行提速：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ELECTRON_MIRROR=https://cdn.npm.taobao.org/dist/electron/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bin-wrapper\"><a href=\"#bin-wrapper\" class=\"headerlink\" title=\"bin-wrapper\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#bin-wrapper\"></a>bin-wrapper</h3><p>还有很多包依赖的是第三方的二进制文件，和 Node.js 版本无关，没必要随 Node.js 编译。</p>\n<p>比如图像处理相关的库，<a href=\"https://github.com/imagemin/cwebp-bin\">cwebp-bin</a>、<a href=\"https://github.com/imagemin/mozjpeg-bin\">mozjpeg-bin</a>、<a href=\"https://github.com/imagemin/pngquant-bin\">pngquant-bin</a>，都是采用以下流程安装的：</p>\n<ol>\n<li> 使用 <a href=\"https://github.com/kevva/bin-wrapper\">bin-wrapper</a> 检测二进制文件是否已经安装成功；</li>\n<li> 使用 <a href=\"https://github.com/kevva/download\">download</a> 尝试下载二进制文件；</li>\n<li> 如果二进制文件下载失败，则从源码开始编译。</li>\n</ol>\n<p>这种安装方式在低速网络下存在比较严重的问题：</p>\n<ul>\n<li><a href=\"https://github.com/kevva/bin-wrapper\">bin-wrapper</a> 内部写死了二进制文件的地址，导致无法使用镜像。  虽然可以使用代理加速，但是可用性以及速度还是远不如镜像的。毕竟不是人人都能拥有可以从国外高速下载资源的代理，而且全局使用代理的话，那些支持国内镜像的资源反而速度会更慢。</li>\n<li>源码下载很慢。  早期的版本中，源码是从各种第三方网站下载的，失败率很高；后来在最新的版本改成了直接内置源码，从源码编译就拥有了上面所述的源码编译的优点和缺点。但是直到现在，很多用到这些工具的包依然引用的是早期的版本，所以即使使用源码编译，也经常因为下载太慢导致安装失败。</li>\n<li>进度不明确。  安装进度卡在 postinstall 时，我们是很绝望的，因为完全不知道后台在做什么。</li>\n</ul>\n<p><a href=\"https://github.com/kevva/bin-wrapper\">bin-wrapper</a> 内部使用的是 <a href=\"https://github.com/kevva/download\">download</a>，这个库最初的设计思想就是尽量简单，且避免留下副作用，所以它一直拒绝使用缓存，再加上硬编码的下载地址，使我们很难通过镜像进行优化。</p>\n<h3 id=\"download-rewrite\"><a href=\"#download-rewrite\" class=\"headerlink\" title=\"download + rewrite\"></a><a href=\"https://gera2ld.space/posts/nodejs-mirror/#download--rewrite\"></a>download + rewrite</h3><p>为了解决不能使用镜像的问题，我 <a href=\"https://github.com/gera2ld/download\">fork了一份download</a>，通过 cosmiconfig 读取 rewrite 配置，然后在下载之前对 URL 做一次 rewrite，这样就有机会把原始链接替换成镜像的下载链接。</p>\n<p>得益于 <a href=\"https://classic.yarnpkg.com/en/docs/selective-version-resolutions/\">yarn指定依赖版本的能力</a>，我们可以直接将依赖中的 <a href=\"https://github.com/kevva/download\">download</a> 强行替换成我改造的版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;resolutions&quot;: &#123;</span><br><span class=\"line\">    &quot;download&quot;: &quot;https://registry.npm.taobao.org/downloadex/download/downloadex-8.1.0.tgz&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后配置镜像链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rewrite&quot;: &#123;</span><br><span class=\"line\">    &quot;https://raw.githubusercontent.com/imagemin/cwebp-bin/&quot;: &quot;https://npm.taobao.org/mirrors/cwebp-bin/&quot;,</span><br><span class=\"line\">    &quot;https://raw.githubusercontent.com/imagemin/mozjpeg-bin/&quot;: &quot;https://npm.taobao.org/mirrors/mozjpeg-bin/&quot;,</span><br><span class=\"line\">    &quot;https://raw.githubusercontent.com/imagemin/pngquant-bin/&quot;: &quot;https://npm.taobao.org/mirrors/pngquant-bin/&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后再下载依赖，速度杠杠的，瞬间就安装好了。</p>"},{"title":"cdh集成es","date":"2021-08-23T03:35:57.000Z","_content":"\n\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823124604096.png\" alt=\"image-20210823124604096\" style=\"zoom:80%;\" />\n\n此前Elasticsearch我一直是单独搭建的，后来偶然发现可以在Cloudera Manager中添加ES服务,在搭建过程中这篇博客给了我很多帮助\n\n[https://www.cnblogs.com/zhangrui153169/p/11447423.html](https://www.cnblogs.com/zhangrui153169/p/11447423.html)\n\n但存在一些问题,在这里记录下来以作为这篇文章的补充,也希望能帮助大家减少踩坑。\n\n目前对应的cdh环境是cdh6.2。所有运行命令都是在linux下进行的，推荐linux，不然会因为文件系统造成出错。\n\n<!--more-->\n\n## 一、制作Elasticsearch的Parcel包和csd文件\n\n**1.配置java，maven等环境变量**\n\n **java:**\n\n```\nexport JAVA_HOME=/usr/local/java\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tool.jar:$CLASSPATH\n```\n\n **maven:**\n\n```\nexport MVN_HOME=/home/plugin/apache-maven-3.3.9\nexport PATH=$MVN_HOME/bin:$PATH\n```\n\n**2.下载cm\\_ext**\n\nCloudera提供的cm\\_ext工具,对生成的csd和parcel进行校验\n\n-   Cloudera提供的cm\\_ext工具,对生成的csd和parcel进行校验\n\n如果mvn package出现如下的报错，两种解决方法：\n\n第一种方法(推荐)：\n\n将mvn package改为执行：mvn clean package -Dmaven.test.skip=true\n\n![](https://gitee.com/hxf88/imgrepo/raw/master/img/2020051311421835.png)\n\n第二种方法：\n\n在GitHub中下载完整的cm\\_ext包：[https://github.com/guoliduo3/cm\\_ext](https://github.com/guoliduo3/cm_ext) ，上传到 /github/cloudera 目录中，然后解压，将解压文件改名为cm\\_ext，进入cm\\_ext，再执行mvn package\n\n-   **下载Elasticsearch安装包**\n\n将elasticsearch包上传到 /github/cloudera/elasticsearch 目录下，我用的elasticsearch-7.14.0版本，贴上下载地址：\n\n[https://www.elastic.co/cn/downloads/past-releases#elasticsearch](https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.14.0-linux-x86_64.tar.gz)\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135707485.png\" alt=\"image-20210823135707485\" style=\"zoom:80%;\" />\n\n-   **下载制作Parcel包和CSD文件的脚本**\n\n```shell\nworkspace/github/cloudera\n➜ git clone git@github.com:kedong2014/elasticsearch-parcel-1.git\n```\n\n 注意：这里是 /github/cloudera 目录\n\n下面是CDH6.X版本需要修改之处：\n\n```\n1.将elasticsearch-parcel文件夹下的 /parcel-src/meta/parcel.json文件 中 \"depends\": \"CDH (>= 5.0), CDH (<< 6.0)\" 修改为 \"depends\": \"CDH (>= 5.0), CDH (<< 10.0)\",\n2.将elasticsearch-parcel文件夹下的 /csd-src/descriptor/service.sd1 文件中 \"cdhVersion\": {\"min\":5} 修改为：\"cdhVersion\": {\"min\":6}\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135822708.png\" alt=\"image-20210823135822708\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135850675.png\" alt=\"image-20210823135850675\" style=\"zoom:80%;\" />\n\n-   **制作 Elasticsearch 的Parcel包和CSD文件并校验**\n\n```shell\nPOINT_VERSION=5 VALIDATOR_DIR=/mnt/d/workspace/github/cloudera/cm_ext OS_VER=el7 PARCEL_NAME=ElasticSearch ./build-parcel.sh /mnt/d/workspace/github/cloudera/elasticsearch/elasticsearch-7.14.0-linux-x86_64.tar.gz\n VALIDATOR_DIR=/mnt/d/workspace/github/cloudera/cm_ext CSD_NAME=ElasticSearch ./build-csd.sh\n```\n\n OS\\_VER=el7 是指 linux 使用的Centos7.X版本\n\n值得一提的是 路径一定要正确，pwd命令确认一下路径是有必要的\n\n制作完成之后，elasticsearch-parcel 新增了build-parcel 和 build-csd文件夹，查看：\n\n![image-20210823140425220](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823140425220.png)\n\n![image-20210823140456243](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823140456243.png)\n\n## 二、在Cloudrea Manager中安装部署Elasticsearch服务\n\n**1.将Parcel包:ELASTICSEARCH-0.0.5.elasticsearch.p0.5-el7.parcel 和 manifest.json 文件部署到httpd服务中**\n\n\n\n```\n\n```\n\n 2.**重启cloudera-scm-server服务**点击分配->激活\n\n![image-20210823130157822](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130157822.png)\n\n重启cm-server即可安装服务\n\n```\nsystemctl restart cloudera-scm-server\n\n```\n\n点击安装服务：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130424284.png\" alt=\"image-20210823130424284\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130506203.png\" alt=\"image-20210823130506203\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130719379.png\" alt=\"image-20210823130719379\" style=\"zoom:80%;\" />\n\n在/etc/profile中设置\n\n```\nexport ES_JAVA_HOME=/usr/lib/jvm/java-openjdk/jre\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823133903593.png\" alt=\"image-20210823133903593\" style=\"zoom:80%;\" />\n\n访问如下网址，看es是否正常\n\n```\nhttp://cdh2:9200/_nodes/process?pretty\n\n\n```\n\n![image-20210823134950762](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823134950762.png)\n\n另外需要加入以下配置，cluster.initial_master_nodes: [\"bigdata2\",\"bigdata3\",\"bigdata4\"]注意此处，节点名称一定要和discovery中的节点一致\n\n![image-20210823151045735](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823151045735.png)\n\n否则es集群访问集群会出现：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823142420941.png\" alt=\"image-20210823142420941\" style=\"zoom:67%;\" />\n\n![image-20210823142329505](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823142329505.png)\n\n启动依然出错：\n\n```log\norg.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: failed to obtain node locks, tried [[/var/lib/elasticsearch]] with lock id [0]; maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])?\n\tat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:163) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:150) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:75) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:116) ~[elasticsearch-cli-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.cli.Command.main(Command.java:79) ~[elasticsearch-cli-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:115) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:81) ~[elasticsearch-7.14.0.jar:7.14.0]\nCaused by: java.lang.IllegalStateException: failed to obtain node locks, tried [[/var/lib/elasticsearch]] with lock id [0]; maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])?\n\tat org.elasticsearch.env.NodeEnvironment.<init>(NodeEnvironment.java:292) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.node.Node.<init>(Node.java:376) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.node.Node.<init>(Node.java:281) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Bootstrap$5.<init>(Bootstrap.java:219) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:219) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:399) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159) ~[elasticsearch-7.14.0.jar:7.14.0]\n\t... 6 more\n```\n\n解决方式如下：\n\n在elasticsearch.yml中增加\n\n```\nnode.max_local_storage_nodes: 100\n\n\n```\n\n![image-20210823143802566](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823143802566.png)\n\n![image-20210823150824337](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823150824337.png)\n\n当出现上图代表es才表示安装成功\n\n出现问题：\n\n# master not discovered yet, this node has not previously joined a bootstrapped (v7+) cluster\n\n这个是表示因为配置的节点名称不一致，造成无法让其成为主节点。\n\n解决方式：（elasticsearch.yml）\n\n```yml\ncluster.initial_master_nodes: [\"BIGDATA2\",\"BIGDATA3\",\"BIGDATA4\"]#要和下面的discovery保持一致\nnode.max_local_storage_nodes: 100\ndiscovery.zen.ping.unicast.hosts: [BIGDATA2, BIGDATA3, BIGDATA4, localhost]#与cluster.initial_master_nodes保持一致\n```\n\n","source":"_posts/cdh集成es.md","raw":"---\ntitle: cdh集成es\ndate: 2021-08-23 11:35:57\ntags:\n- es\ncategories: \n- bigdata\n---\n\n\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823124604096.png\" alt=\"image-20210823124604096\" style=\"zoom:80%;\" />\n\n此前Elasticsearch我一直是单独搭建的，后来偶然发现可以在Cloudera Manager中添加ES服务,在搭建过程中这篇博客给了我很多帮助\n\n[https://www.cnblogs.com/zhangrui153169/p/11447423.html](https://www.cnblogs.com/zhangrui153169/p/11447423.html)\n\n但存在一些问题,在这里记录下来以作为这篇文章的补充,也希望能帮助大家减少踩坑。\n\n目前对应的cdh环境是cdh6.2。所有运行命令都是在linux下进行的，推荐linux，不然会因为文件系统造成出错。\n\n<!--more-->\n\n## 一、制作Elasticsearch的Parcel包和csd文件\n\n**1.配置java，maven等环境变量**\n\n **java:**\n\n```\nexport JAVA_HOME=/usr/local/java\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tool.jar:$CLASSPATH\n```\n\n **maven:**\n\n```\nexport MVN_HOME=/home/plugin/apache-maven-3.3.9\nexport PATH=$MVN_HOME/bin:$PATH\n```\n\n**2.下载cm\\_ext**\n\nCloudera提供的cm\\_ext工具,对生成的csd和parcel进行校验\n\n-   Cloudera提供的cm\\_ext工具,对生成的csd和parcel进行校验\n\n如果mvn package出现如下的报错，两种解决方法：\n\n第一种方法(推荐)：\n\n将mvn package改为执行：mvn clean package -Dmaven.test.skip=true\n\n![](https://gitee.com/hxf88/imgrepo/raw/master/img/2020051311421835.png)\n\n第二种方法：\n\n在GitHub中下载完整的cm\\_ext包：[https://github.com/guoliduo3/cm\\_ext](https://github.com/guoliduo3/cm_ext) ，上传到 /github/cloudera 目录中，然后解压，将解压文件改名为cm\\_ext，进入cm\\_ext，再执行mvn package\n\n-   **下载Elasticsearch安装包**\n\n将elasticsearch包上传到 /github/cloudera/elasticsearch 目录下，我用的elasticsearch-7.14.0版本，贴上下载地址：\n\n[https://www.elastic.co/cn/downloads/past-releases#elasticsearch](https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.14.0-linux-x86_64.tar.gz)\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135707485.png\" alt=\"image-20210823135707485\" style=\"zoom:80%;\" />\n\n-   **下载制作Parcel包和CSD文件的脚本**\n\n```shell\nworkspace/github/cloudera\n➜ git clone git@github.com:kedong2014/elasticsearch-parcel-1.git\n```\n\n 注意：这里是 /github/cloudera 目录\n\n下面是CDH6.X版本需要修改之处：\n\n```\n1.将elasticsearch-parcel文件夹下的 /parcel-src/meta/parcel.json文件 中 \"depends\": \"CDH (>= 5.0), CDH (<< 6.0)\" 修改为 \"depends\": \"CDH (>= 5.0), CDH (<< 10.0)\",\n2.将elasticsearch-parcel文件夹下的 /csd-src/descriptor/service.sd1 文件中 \"cdhVersion\": {\"min\":5} 修改为：\"cdhVersion\": {\"min\":6}\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135822708.png\" alt=\"image-20210823135822708\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135850675.png\" alt=\"image-20210823135850675\" style=\"zoom:80%;\" />\n\n-   **制作 Elasticsearch 的Parcel包和CSD文件并校验**\n\n```shell\nPOINT_VERSION=5 VALIDATOR_DIR=/mnt/d/workspace/github/cloudera/cm_ext OS_VER=el7 PARCEL_NAME=ElasticSearch ./build-parcel.sh /mnt/d/workspace/github/cloudera/elasticsearch/elasticsearch-7.14.0-linux-x86_64.tar.gz\n VALIDATOR_DIR=/mnt/d/workspace/github/cloudera/cm_ext CSD_NAME=ElasticSearch ./build-csd.sh\n```\n\n OS\\_VER=el7 是指 linux 使用的Centos7.X版本\n\n值得一提的是 路径一定要正确，pwd命令确认一下路径是有必要的\n\n制作完成之后，elasticsearch-parcel 新增了build-parcel 和 build-csd文件夹，查看：\n\n![image-20210823140425220](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823140425220.png)\n\n![image-20210823140456243](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823140456243.png)\n\n## 二、在Cloudrea Manager中安装部署Elasticsearch服务\n\n**1.将Parcel包:ELASTICSEARCH-0.0.5.elasticsearch.p0.5-el7.parcel 和 manifest.json 文件部署到httpd服务中**\n\n\n\n```\n\n```\n\n 2.**重启cloudera-scm-server服务**点击分配->激活\n\n![image-20210823130157822](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130157822.png)\n\n重启cm-server即可安装服务\n\n```\nsystemctl restart cloudera-scm-server\n\n```\n\n点击安装服务：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130424284.png\" alt=\"image-20210823130424284\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130506203.png\" alt=\"image-20210823130506203\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130719379.png\" alt=\"image-20210823130719379\" style=\"zoom:80%;\" />\n\n在/etc/profile中设置\n\n```\nexport ES_JAVA_HOME=/usr/lib/jvm/java-openjdk/jre\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823133903593.png\" alt=\"image-20210823133903593\" style=\"zoom:80%;\" />\n\n访问如下网址，看es是否正常\n\n```\nhttp://cdh2:9200/_nodes/process?pretty\n\n\n```\n\n![image-20210823134950762](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823134950762.png)\n\n另外需要加入以下配置，cluster.initial_master_nodes: [\"bigdata2\",\"bigdata3\",\"bigdata4\"]注意此处，节点名称一定要和discovery中的节点一致\n\n![image-20210823151045735](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823151045735.png)\n\n否则es集群访问集群会出现：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823142420941.png\" alt=\"image-20210823142420941\" style=\"zoom:67%;\" />\n\n![image-20210823142329505](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823142329505.png)\n\n启动依然出错：\n\n```log\norg.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: failed to obtain node locks, tried [[/var/lib/elasticsearch]] with lock id [0]; maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])?\n\tat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:163) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:150) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:75) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:116) ~[elasticsearch-cli-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.cli.Command.main(Command.java:79) ~[elasticsearch-cli-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:115) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:81) ~[elasticsearch-7.14.0.jar:7.14.0]\nCaused by: java.lang.IllegalStateException: failed to obtain node locks, tried [[/var/lib/elasticsearch]] with lock id [0]; maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])?\n\tat org.elasticsearch.env.NodeEnvironment.<init>(NodeEnvironment.java:292) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.node.Node.<init>(Node.java:376) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.node.Node.<init>(Node.java:281) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Bootstrap$5.<init>(Bootstrap.java:219) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:219) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:399) ~[elasticsearch-7.14.0.jar:7.14.0]\n\tat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159) ~[elasticsearch-7.14.0.jar:7.14.0]\n\t... 6 more\n```\n\n解决方式如下：\n\n在elasticsearch.yml中增加\n\n```\nnode.max_local_storage_nodes: 100\n\n\n```\n\n![image-20210823143802566](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823143802566.png)\n\n![image-20210823150824337](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823150824337.png)\n\n当出现上图代表es才表示安装成功\n\n出现问题：\n\n# master not discovered yet, this node has not previously joined a bootstrapped (v7+) cluster\n\n这个是表示因为配置的节点名称不一致，造成无法让其成为主节点。\n\n解决方式：（elasticsearch.yml）\n\n```yml\ncluster.initial_master_nodes: [\"BIGDATA2\",\"BIGDATA3\",\"BIGDATA4\"]#要和下面的discovery保持一致\nnode.max_local_storage_nodes: 100\ndiscovery.zen.ping.unicast.hosts: [BIGDATA2, BIGDATA3, BIGDATA4, localhost]#与cluster.initial_master_nodes保持一致\n```\n\n","slug":"cdh集成es","published":1,"updated":"2021-08-23T07:16:04.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6of0008cmv9deifgzwj","content":"<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823124604096.png\" alt=\"image-20210823124604096\" style=\"zoom:80%;\" />\n\n<p>此前Elasticsearch我一直是单独搭建的，后来偶然发现可以在Cloudera Manager中添加ES服务,在搭建过程中这篇博客给了我很多帮助</p>\n<p><a href=\"https://www.cnblogs.com/zhangrui153169/p/11447423.html\">https://www.cnblogs.com/zhangrui153169/p/11447423.html</a></p>\n<p>但存在一些问题,在这里记录下来以作为这篇文章的补充,也希望能帮助大家减少踩坑。</p>\n<p>目前对应的cdh环境是cdh6.2。所有运行命令都是在linux下进行的，推荐linux，不然会因为文件系统造成出错。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、制作Elasticsearch的Parcel包和csd文件\"><a href=\"#一、制作Elasticsearch的Parcel包和csd文件\" class=\"headerlink\" title=\"一、制作Elasticsearch的Parcel包和csd文件\"></a>一、制作Elasticsearch的Parcel包和csd文件</h2><p><strong>1.配置java，maven等环境变量</strong></p>\n<p> <strong>java:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/java</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tool.jar:$CLASSPATH</span><br></pre></td></tr></table></figure>\n\n<p> <strong>maven:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MVN_HOME=/home/plugin/apache-maven-3.3.9</span><br><span class=\"line\">export PATH=$MVN_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.下载cm_ext</strong></p>\n<p>Cloudera提供的cm_ext工具,对生成的csd和parcel进行校验</p>\n<ul>\n<li>  Cloudera提供的cm_ext工具,对生成的csd和parcel进行校验</li>\n</ul>\n<p>如果mvn package出现如下的报错，两种解决方法：</p>\n<p>第一种方法(推荐)：</p>\n<p>将mvn package改为执行：mvn clean package -Dmaven.test.skip=true</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/2020051311421835.png\"></p>\n<p>第二种方法：</p>\n<p>在GitHub中下载完整的cm_ext包：<a href=\"https://github.com/guoliduo3/cm_ext\">https://github.com/guoliduo3/cm_ext</a> ，上传到 /github/cloudera 目录中，然后解压，将解压文件改名为cm_ext，进入cm_ext，再执行mvn package</p>\n<ul>\n<li>  <strong>下载Elasticsearch安装包</strong></li>\n</ul>\n<p>将elasticsearch包上传到 /github/cloudera/elasticsearch 目录下，我用的elasticsearch-7.14.0版本，贴上下载地址：</p>\n<p><a href=\"https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.14.0-linux-x86_64.tar.gz\">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135707485.png\" alt=\"image-20210823135707485\" style=\"zoom:80%;\" />\n\n<ul>\n<li>  <strong>下载制作Parcel包和CSD文件的脚本</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workspace/github/cloudera</span><br><span class=\"line\">➜ git clone git@github.com:kedong2014/elasticsearch-parcel-1.git</span><br></pre></td></tr></table></figure>\n\n<p> 注意：这里是 /github/cloudera 目录</p>\n<p>下面是CDH6.X版本需要修改之处：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.将elasticsearch-parcel文件夹下的 /parcel-src/meta/parcel.json文件 中 &quot;depends&quot;: &quot;CDH (&gt;= 5.0), CDH (&lt;&lt; 6.0)&quot; 修改为 &quot;depends&quot;: &quot;CDH (&gt;= 5.0), CDH (&lt;&lt; 10.0)&quot;,</span><br><span class=\"line\">2.将elasticsearch-parcel文件夹下的 /csd-src/descriptor/service.sd1 文件中 &quot;cdhVersion&quot;: &#123;&quot;min&quot;:5&#125; 修改为：&quot;cdhVersion&quot;: &#123;&quot;min&quot;:6&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135822708.png\" alt=\"image-20210823135822708\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135850675.png\" alt=\"image-20210823135850675\" style=\"zoom:80%;\" />\n\n<ul>\n<li>  <strong>制作 Elasticsearch 的Parcel包和CSD文件并校验</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POINT_VERSION=5 VALIDATOR_DIR=/mnt/d/workspace/github/cloudera/cm_ext OS_VER=el7 PARCEL_NAME=ElasticSearch ./build-parcel.sh /mnt/d/workspace/github/cloudera/elasticsearch/elasticsearch-7.14.0-linux-x86_64.tar.gz</span><br><span class=\"line\"> VALIDATOR_DIR=/mnt/d/workspace/github/cloudera/cm_ext CSD_NAME=ElasticSearch ./build-csd.sh</span><br></pre></td></tr></table></figure>\n\n<p> OS_VER=el7 是指 linux 使用的Centos7.X版本</p>\n<p>值得一提的是 路径一定要正确，pwd命令确认一下路径是有必要的</p>\n<p>制作完成之后，elasticsearch-parcel 新增了build-parcel 和 build-csd文件夹，查看：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823140425220.png\" alt=\"image-20210823140425220\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823140456243.png\" alt=\"image-20210823140456243\"></p>\n<h2 id=\"二、在Cloudrea-Manager中安装部署Elasticsearch服务\"><a href=\"#二、在Cloudrea-Manager中安装部署Elasticsearch服务\" class=\"headerlink\" title=\"二、在Cloudrea Manager中安装部署Elasticsearch服务\"></a>二、在Cloudrea Manager中安装部署Elasticsearch服务</h2><p><strong>1.将Parcel包:ELASTICSEARCH-0.0.5.elasticsearch.p0.5-el7.parcel 和 manifest.json 文件部署到httpd服务中</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 2.<strong>重启cloudera-scm-server服务</strong>点击分配-&gt;激活</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130157822.png\" alt=\"image-20210823130157822\"></p>\n<p>重启cm-server即可安装服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart cloudera-scm-server</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>点击安装服务：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130424284.png\" alt=\"image-20210823130424284\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130506203.png\" alt=\"image-20210823130506203\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130719379.png\" alt=\"image-20210823130719379\" style=\"zoom:80%;\" />\n\n<p>在/etc/profile中设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ES_JAVA_HOME=/usr/lib/jvm/java-openjdk/jre</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823133903593.png\" alt=\"image-20210823133903593\" style=\"zoom:80%;\" />\n\n<p>访问如下网址，看es是否正常</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://cdh2:9200/_nodes/process?pretty</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823134950762.png\" alt=\"image-20210823134950762\"></p>\n<p>另外需要加入以下配置，cluster.initial_master_nodes: [“bigdata2”,”bigdata3”,”bigdata4”]注意此处，节点名称一定要和discovery中的节点一致</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823151045735.png\" alt=\"image-20210823151045735\"></p>\n<p>否则es集群访问集群会出现：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823142420941.png\" alt=\"image-20210823142420941\" style=\"zoom:67%;\" />\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823142329505.png\" alt=\"image-20210823142329505\"></p>\n<p>启动依然出错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: failed to obtain node locks, tried [[/var/lib/elasticsearch]] with lock id [0]; maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])?</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:163) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:150) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:75) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:116) ~[elasticsearch-cli-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.cli.Command.main(Command.java:79) ~[elasticsearch-cli-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:115) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:81) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">Caused by: java.lang.IllegalStateException: failed to obtain node locks, tried [[/var/lib/elasticsearch]] with lock id [0]; maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])?</span><br><span class=\"line\">\tat org.elasticsearch.env.NodeEnvironment.&lt;init&gt;(NodeEnvironment.java:292) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.node.Node.&lt;init&gt;(Node.java:376) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.node.Node.&lt;init&gt;(Node.java:281) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Bootstrap$5.&lt;init&gt;(Bootstrap.java:219) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:219) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:399) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\t... 6 more</span><br></pre></td></tr></table></figure>\n\n<p>解决方式如下：</p>\n<p>在elasticsearch.yml中增加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.max_local_storage_nodes: 100</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823143802566.png\" alt=\"image-20210823143802566\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823150824337.png\" alt=\"image-20210823150824337\"></p>\n<p>当出现上图代表es才表示安装成功</p>\n<p>出现问题：</p>\n<h1 id=\"master-not-discovered-yet-this-node-has-not-previously-joined-a-bootstrapped-v7-cluster\"><a href=\"#master-not-discovered-yet-this-node-has-not-previously-joined-a-bootstrapped-v7-cluster\" class=\"headerlink\" title=\"master not discovered yet, this node has not previously joined a bootstrapped (v7+) cluster\"></a>master not discovered yet, this node has not previously joined a bootstrapped (v7+) cluster</h1><p>这个是表示因为配置的节点名称不一致，造成无法让其成为主节点。</p>\n<p>解决方式：（elasticsearch.yml）</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;BIGDATA2&quot;</span>,<span class=\"string\">&quot;BIGDATA3&quot;</span>,<span class=\"string\">&quot;BIGDATA4&quot;</span>]<span class=\"comment\">#要和下面的discovery保持一致</span></span><br><span class=\"line\"><span class=\"attr\">node.max_local_storage_nodes:</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attr\">discovery.zen.ping.unicast.hosts:</span> [<span class=\"string\">BIGDATA2</span>, <span class=\"string\">BIGDATA3</span>, <span class=\"string\">BIGDATA4</span>, <span class=\"string\">localhost</span>]<span class=\"comment\">#与cluster.initial_master_nodes保持一致</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823124604096.png\" alt=\"image-20210823124604096\" style=\"zoom:80%;\" />\n\n<p>此前Elasticsearch我一直是单独搭建的，后来偶然发现可以在Cloudera Manager中添加ES服务,在搭建过程中这篇博客给了我很多帮助</p>\n<p><a href=\"https://www.cnblogs.com/zhangrui153169/p/11447423.html\">https://www.cnblogs.com/zhangrui153169/p/11447423.html</a></p>\n<p>但存在一些问题,在这里记录下来以作为这篇文章的补充,也希望能帮助大家减少踩坑。</p>\n<p>目前对应的cdh环境是cdh6.2。所有运行命令都是在linux下进行的，推荐linux，不然会因为文件系统造成出错。</p>","more":"<h2 id=\"一、制作Elasticsearch的Parcel包和csd文件\"><a href=\"#一、制作Elasticsearch的Parcel包和csd文件\" class=\"headerlink\" title=\"一、制作Elasticsearch的Parcel包和csd文件\"></a>一、制作Elasticsearch的Parcel包和csd文件</h2><p><strong>1.配置java，maven等环境变量</strong></p>\n<p> <strong>java:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/java</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tool.jar:$CLASSPATH</span><br></pre></td></tr></table></figure>\n\n<p> <strong>maven:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MVN_HOME=/home/plugin/apache-maven-3.3.9</span><br><span class=\"line\">export PATH=$MVN_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.下载cm_ext</strong></p>\n<p>Cloudera提供的cm_ext工具,对生成的csd和parcel进行校验</p>\n<ul>\n<li>  Cloudera提供的cm_ext工具,对生成的csd和parcel进行校验</li>\n</ul>\n<p>如果mvn package出现如下的报错，两种解决方法：</p>\n<p>第一种方法(推荐)：</p>\n<p>将mvn package改为执行：mvn clean package -Dmaven.test.skip=true</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/2020051311421835.png\"></p>\n<p>第二种方法：</p>\n<p>在GitHub中下载完整的cm_ext包：<a href=\"https://github.com/guoliduo3/cm_ext\">https://github.com/guoliduo3/cm_ext</a> ，上传到 /github/cloudera 目录中，然后解压，将解压文件改名为cm_ext，进入cm_ext，再执行mvn package</p>\n<ul>\n<li>  <strong>下载Elasticsearch安装包</strong></li>\n</ul>\n<p>将elasticsearch包上传到 /github/cloudera/elasticsearch 目录下，我用的elasticsearch-7.14.0版本，贴上下载地址：</p>\n<p><a href=\"https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.14.0-linux-x86_64.tar.gz\">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135707485.png\" alt=\"image-20210823135707485\" style=\"zoom:80%;\" />\n\n<ul>\n<li>  <strong>下载制作Parcel包和CSD文件的脚本</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workspace/github/cloudera</span><br><span class=\"line\">➜ git clone git@github.com:kedong2014/elasticsearch-parcel-1.git</span><br></pre></td></tr></table></figure>\n\n<p> 注意：这里是 /github/cloudera 目录</p>\n<p>下面是CDH6.X版本需要修改之处：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.将elasticsearch-parcel文件夹下的 /parcel-src/meta/parcel.json文件 中 &quot;depends&quot;: &quot;CDH (&gt;= 5.0), CDH (&lt;&lt; 6.0)&quot; 修改为 &quot;depends&quot;: &quot;CDH (&gt;= 5.0), CDH (&lt;&lt; 10.0)&quot;,</span><br><span class=\"line\">2.将elasticsearch-parcel文件夹下的 /csd-src/descriptor/service.sd1 文件中 &quot;cdhVersion&quot;: &#123;&quot;min&quot;:5&#125; 修改为：&quot;cdhVersion&quot;: &#123;&quot;min&quot;:6&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135822708.png\" alt=\"image-20210823135822708\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823135850675.png\" alt=\"image-20210823135850675\" style=\"zoom:80%;\" />\n\n<ul>\n<li>  <strong>制作 Elasticsearch 的Parcel包和CSD文件并校验</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POINT_VERSION=5 VALIDATOR_DIR=/mnt/d/workspace/github/cloudera/cm_ext OS_VER=el7 PARCEL_NAME=ElasticSearch ./build-parcel.sh /mnt/d/workspace/github/cloudera/elasticsearch/elasticsearch-7.14.0-linux-x86_64.tar.gz</span><br><span class=\"line\"> VALIDATOR_DIR=/mnt/d/workspace/github/cloudera/cm_ext CSD_NAME=ElasticSearch ./build-csd.sh</span><br></pre></td></tr></table></figure>\n\n<p> OS_VER=el7 是指 linux 使用的Centos7.X版本</p>\n<p>值得一提的是 路径一定要正确，pwd命令确认一下路径是有必要的</p>\n<p>制作完成之后，elasticsearch-parcel 新增了build-parcel 和 build-csd文件夹，查看：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823140425220.png\" alt=\"image-20210823140425220\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823140456243.png\" alt=\"image-20210823140456243\"></p>\n<h2 id=\"二、在Cloudrea-Manager中安装部署Elasticsearch服务\"><a href=\"#二、在Cloudrea-Manager中安装部署Elasticsearch服务\" class=\"headerlink\" title=\"二、在Cloudrea Manager中安装部署Elasticsearch服务\"></a>二、在Cloudrea Manager中安装部署Elasticsearch服务</h2><p><strong>1.将Parcel包:ELASTICSEARCH-0.0.5.elasticsearch.p0.5-el7.parcel 和 manifest.json 文件部署到httpd服务中</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 2.<strong>重启cloudera-scm-server服务</strong>点击分配-&gt;激活</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130157822.png\" alt=\"image-20210823130157822\"></p>\n<p>重启cm-server即可安装服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart cloudera-scm-server</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>点击安装服务：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130424284.png\" alt=\"image-20210823130424284\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130506203.png\" alt=\"image-20210823130506203\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823130719379.png\" alt=\"image-20210823130719379\" style=\"zoom:80%;\" />\n\n<p>在/etc/profile中设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ES_JAVA_HOME=/usr/lib/jvm/java-openjdk/jre</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823133903593.png\" alt=\"image-20210823133903593\" style=\"zoom:80%;\" />\n\n<p>访问如下网址，看es是否正常</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://cdh2:9200/_nodes/process?pretty</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823134950762.png\" alt=\"image-20210823134950762\"></p>\n<p>另外需要加入以下配置，cluster.initial_master_nodes: [“bigdata2”,”bigdata3”,”bigdata4”]注意此处，节点名称一定要和discovery中的节点一致</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823151045735.png\" alt=\"image-20210823151045735\"></p>\n<p>否则es集群访问集群会出现：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823142420941.png\" alt=\"image-20210823142420941\" style=\"zoom:67%;\" />\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823142329505.png\" alt=\"image-20210823142329505\"></p>\n<p>启动依然出错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: failed to obtain node locks, tried [[/var/lib/elasticsearch]] with lock id [0]; maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])?</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:163) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:150) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:75) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:116) ~[elasticsearch-cli-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.cli.Command.main(Command.java:79) ~[elasticsearch-cli-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:115) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:81) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">Caused by: java.lang.IllegalStateException: failed to obtain node locks, tried [[/var/lib/elasticsearch]] with lock id [0]; maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])?</span><br><span class=\"line\">\tat org.elasticsearch.env.NodeEnvironment.&lt;init&gt;(NodeEnvironment.java:292) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.node.Node.&lt;init&gt;(Node.java:376) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.node.Node.&lt;init&gt;(Node.java:281) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Bootstrap$5.&lt;init&gt;(Bootstrap.java:219) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:219) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:399) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\tat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159) ~[elasticsearch-7.14.0.jar:7.14.0]</span><br><span class=\"line\">\t... 6 more</span><br></pre></td></tr></table></figure>\n\n<p>解决方式如下：</p>\n<p>在elasticsearch.yml中增加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.max_local_storage_nodes: 100</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823143802566.png\" alt=\"image-20210823143802566\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210823150824337.png\" alt=\"image-20210823150824337\"></p>\n<p>当出现上图代表es才表示安装成功</p>\n<p>出现问题：</p>\n<h1 id=\"master-not-discovered-yet-this-node-has-not-previously-joined-a-bootstrapped-v7-cluster\"><a href=\"#master-not-discovered-yet-this-node-has-not-previously-joined-a-bootstrapped-v7-cluster\" class=\"headerlink\" title=\"master not discovered yet, this node has not previously joined a bootstrapped (v7+) cluster\"></a>master not discovered yet, this node has not previously joined a bootstrapped (v7+) cluster</h1><p>这个是表示因为配置的节点名称不一致，造成无法让其成为主节点。</p>\n<p>解决方式：（elasticsearch.yml）</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;BIGDATA2&quot;</span>,<span class=\"string\">&quot;BIGDATA3&quot;</span>,<span class=\"string\">&quot;BIGDATA4&quot;</span>]<span class=\"comment\">#要和下面的discovery保持一致</span></span><br><span class=\"line\"><span class=\"attr\">node.max_local_storage_nodes:</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attr\">discovery.zen.ping.unicast.hosts:</span> [<span class=\"string\">BIGDATA2</span>, <span class=\"string\">BIGDATA3</span>, <span class=\"string\">BIGDATA4</span>, <span class=\"string\">localhost</span>]<span class=\"comment\">#与cluster.initial_master_nodes保持一致</span></span><br></pre></td></tr></table></figure>"},{"title":"drone升级到2.0","date":"2021-08-24T08:07:48.000Z","_content":"\n## 前言\n\n提过hexo来记录日志，不用每天构建，来一个devops(drone ci+gitea+nginx)的网站，美美的\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163110820.png\" alt=\"image-20210824163110820\" style=\"zoom:50%;\" />\n\n<!--more-->\n\n___\n\n## Traefik\n\nTraefik 是一款开源的反向代理与负载均衡工具，很多人会拿它和Nginx 进行对比，其实个人觉得两者各有千秋。像我使用时，由于traefik 对静态网站的支持不好，所以还是会配合Nginx 使用。但这也不妨碍它是一款优秀的反向代理工具的事实。\n\n### 配置与启动\n\nTraefik 的配置括静态配置和动态配置两种，静态配置是Traefik自身启动时的配置，需要重启才能生效，动态配置则可以视为被代理服务的配置，修改后不需要重启。无论是动态或静态配置都支持`Cli` 形式和配置文件形式，但配置文件与cli 参数是不能叠加的。\n\n-   静态配置\n    \n    以在docker-compose 启动Traefik 服务为例，我们可以看下cli 和配置文件的方式：\n    \n    ```\n    services:\n      traefik:\n        restart: always\n        image: traefik:latest\n        ports:\n          - \"80:80\"\n          - \"443:443\"\n        # command:\n        #  - \"--providers.docker=true\"\n        #  - \"--providers.docker.exposedbydefault=false\"\n        volumes:\n          - /var/run/docker.sock:/var/run/docker.sock\n          - ./acme.json:/acme.json\n          - ./traefik/:/etc/traefik # 如果有配置文件了，则command 失效 \n      who:\n        image: containous/whoami\n        labels:\n          - \"traefik.enable=true\"\n          - \"traefik.http.routers.whoa.rule=Host(`who.nefelibata.art)\"\n    复制代码\n    ```\n    \n    我们配置了traefik 容器，并把将包含了`traefik.toml`和`dynamic.toml`文件的`./traefik` 目录映射到容器的`/etc/traefik`目录中，traefik 会在启动时读取`/etc/traefik`目录下的`traefik.toml`， 如果想以cli 的方式，则是通过command 将配置参数传入。\n    \n-   动态配置\n    \n    -   配置文件形式\n        \n        首先我们需要在`traefik.toml` 中有如下配置：\n        \n        ```\n        [providers]\n          ## ...\n          [providers.file]\n            filename = \"/etc/traefik/dynamic_conf.toml\"\n            watch = true\n        复制代码\n        ```\n        \n        然后在 `dynamic_conf.toml` 中配置`routers`和`services`\n        \n        ```\n        [http.routers]\n          [http.routers.https-egg]\n            rule = \"Host(`egg.nefelibata.art`)\"\n            service = \"egg-service\"\n            [http.routers.https-egg.tls] ## 开启https\n               certresolver = \"le\"\n          [http.routers.http-egg]\n            rule = \"Host(`egg.nefelibata.art`)\"\n            service = \"egg-service\"\n        \n        [http.services]\n          [[http.services.egg-service.loadBalancer.servers]]\n            url = \"http://egg_server:9000\"\n        复制代码\n        ```\n        \n        `http.routers` 后面跟着的是自定义的名字，没有硬性要求规则，但子级都要在这个名字基础上拓展，如：`http.routers.https-egg`下开启tls 时，用的是 `http.routers.https-egg.tls`\n        \n        需要注意的是，我们为`egg.nefelibata.art`定义了 两个routers，这是因为，如果设置了`tls`为true，则不再支持http访问，如果希望同时支持`http`和`https`，则需要再定义一个`不同名`的路由\n        \n    -   Docker labels形式\n        \n        如果我们不想都在动态配置文件中配置，可以在`traefik.toml` 里面的`providers` 下写入如下配置：\n        \n        ```\n        [providers]\n          [providers.docker]\n            # 以下均为可选项\n            network = \"traefik\"\n            exposedByDefault = false\n            defaultRule = \"Host(`{{ normalize .Name }}.nefelibata.localhost`)\"\n            watch = true\n          ## ... 其他配置\n        复制代码\n        ```\n        \n        以上述的egg 服务为例，将上面的动态配置改为以labels的方式的话，会如下：\n        \n        ```\n        egg_server:\n            build: ./egg_server\n            expose:\n              - \"9000\"\n            networks:\n              - default\n            labels:\n              - \"traefik.enable=true\"\n              - \"traefik.http.routes.egg_server.rule=Host(`egg.nefelibata.art`)\"\n        复制代码\n        ```\n        \n        这时就不再需要配置`services`了，只需要把端口暴露给容器即可。\n        \n        注意，如果在配置中关闭了`exposedByDefault` 选项，则在其他容器的labels 中如果不定义`traefik.enable=true`的话，该容器服务会被traefik 忽略\n        \n\n### 开启Dashboard\n\nTraefik 带有一个Dashboard，如果你想要开启该服务并为其配置一个域名的话，可以以上述的动态配置方式配置，以配置文件形式为例：\n\n```\n## traefik.toml\n### 其他配置...\n[api]\n### 其他配置... providers, ping .etc\n\n## dynamic.toml\n[http.routers.api]\n    rule = \"Host(`traefik.nefelibata.art`)\"\n    service = \"api@internal\"\n    middlewares = [\"dashboard-auth\"]\n\n[http.middlewares]\n   [http.middlewares.dashboard-auth.basicAuth]\n   users = [\n     \"evont: $xxxxxxxxxxx\"\n   ]\n复制代码\n```\n\n在`traefik.toml`中开启`api`选项后(或cli 中`--api=true`) ，traefik 会有一个特殊的service 叫`api@internal`，将其配置完成后，一般为了防止别人访问，会进行身份验证，所以加了一个`middlewares`，使用traefik 提供的`basicAuth`中间件，使用`htpasswd` 生成一个用户密钥，注意，比如你的名字叫`evont`，密码是`123456`，最终生成的是`evont:$apr1$bL6G3wl2$HllalTsbNwJ/zhoBMhx541`，打开Dashboard 登录时，填入的密码仍旧是123456而不是密钥串。\n\n配置成功后重启服务，打开该服务的域名，就可以看到登陆界面\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa7d60a28b6a97~tplv-t2oaga2asx-watermark.image)\n\n登陆成功之后就可以进入到管理界面中，看到我们配置的路由规则了。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa7d691b2336f5~tplv-t2oaga2asx-watermark.image)\n\n### 静态网站支持\n\nTraefik 对静态网站并没有很好的支持（至少我没有找到使用方法），所以我只能搭配Nginx 作为静态网站的服务器，但443和80端口不能同时给两个反向代理工具，所以只能通过Traefik 转发请求给Nginx 的方法，我们通过启动一个Nginx 服务，指定networks让Nginx 和Traefik 处在同一networks 下，然后通过labels 的方式，将限定的域名分配给Nginx 处理即可\n\n```\nservices:\n  nginx:\n    restart: always\n    image: nginx\n    networks:\n      - default\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./html:/usr/share/nginx/html/\n    labels:\n      - traefik.enable=true\n      - traefik.http.routers.w3.rule=Host(`www.nefelibata.art`) || Host(`mock.nefelibata.art`)\n      - traefik.http.routers.w3.tls=true\n      - traefik.http.routers.w3.tls.certresolver=le\n      - traefik.http.routers.w3-http.rule=Host(`www.nefelibata.art`) || Host(`mock.nefelibata.art`)\n\n复制代码\n```\n\n在Nginx 的`nginx.conf` 文件中，依然使用80端口，根据server\\_name 分配静态网站的目录即可\n\n```\nhttp {\n  server {\n    listen       80;\n    server_name  www.nefelibata.art;\n    root /usr/share/nginx/html/www1;\n    location / {\n      index index.html;\n    }\n  }\n  server {\n    listen       80;\n    server_name  mock.nefelibata.art;\n    root /usr/share/nginx/html/www2;\n    location / {\n      index index.html;\n    }\n  }\n}\n复制代码\n```\n\n### https 支持（同时支持http）\n\n在前面我们提及到了tls和https，有个`certresolver = \"le\"`，那这个`le` 是哪里来的呢，网站的证书又是怎么生成的呢？\n\n如果你想要使用`Let's Encrypt`自动生成证书，traefik 为我们提供了很方便的方案，我们只需要在静态配置中使用如下配置:\n\n```\n## traefik.toml\n### 其他配置...\n[certificatesResolvers.le.acme]\n  email = \"evontgoh@foxmail.com\" # 你自己的邮箱\n  storage = \"acme.json\"\n\n  [certificatesResolvers.le.acme.httpChallenge]\n    entryPoint = \"http\"\n复制代码\n```\n\n并在docker-compose 中配置`volumes`映射一个本地`acme.json`到容器中即可\n\n如果你有自己的证书，你也可以忽略到上述步骤，在`dynamic.toml`中配置\n\n```\n[[tls.certificates]]\n  certFile = \"/path/to/domain.cert\"\n  keyFile = \"/path/to/domain.key\"\n复制代码\n```\n\n这部分可以参考[traefik 的tls 配置](https://link.juejin.cn/?target=https%3A%2F%2Fdocs.traefik.io%2Fhttps%2Ftls%2F \"https://docs.traefik.io/https/tls/\")\n\n### 版本坑\n\n刚开始配置的时候，网上多数教程都还是基于v1，于是一直配置不成功，后来发现是因为v1 和v2版本差异过大，配置项都不相同，甚至连[traefik 中文文档](https://link.juejin.cn/?target=https%3A%2F%2Fdocs.traefik.cn%2F \"https://docs.traefik.cn/\") 都还是基于v1的配置，比如在定义路由规则时\n\n```\n## v1 规则如下：\n[frontends] ## 规定前端进入规则\n   [frontends.frontend1]\n   backend = \"backend1\" # 指定后端服务\n   [frontends.frontend1.routes]  ## 定义路由\n      [frontends.frontend1.routes.route0]\n        rule = \"Host:test.localhost\"  ## 注意，这里写法也变了\n[backends] ## 定义后端服务\n  [backends.backend1]\n    [backends.backend1.servers.server0]\n        url = \"http://xx.xx.xx.xx:80\"\n  \n## v2 规则弃用了frontend & backend \n[http.routers] ## 用routers 规定路由规则\n  [http.routers.router0]\n    rule = \"Host(`test.localhost`)\" ## 写法变了\n    service = \"my-service\"\n\n[http.services]\n  [[http.services.my-service.loadBalancer.servers]]\n    url = \"http://xx.xx.xx.xx:80\"\n复制代码\n```\n\n同时，以上规则在v1 时是定义在`[file]` 字段下的，在v2 时，则是在`[providers]` 下的`[providers.file]` 下定义的且变成了独立的动态配置文件\n\n关于这方面，我建议阅读[官方版本迁移文档](https://link.juejin.cn/?target=https%3A%2F%2Fdocs.traefik.io%2Fmigration%2Fv1-to-v2%2F \"https://docs.traefik.io/migration/v1-to-v2/\")，并且以官方文档为基准（虽然也写得比较松散，也对英语差的人不是很友好）。\n\n___\n\n## Drone CI\n\n以前一直用Jenkins 这一业界标准的CI 工具，但是一直觉得因为功能太丰富而稍显笨重，而Drone 对Docker、K8s 这些容器环境又有优化，也足够轻便和灵活，如果你在两者中不知如何挑选可以看看[这篇文章](https://link.juejin.cn/?target=https%3A%2F%2Fblog.51cto.com%2F12462495%2F2108263 \"https://blog.51cto.com/12462495/2108263\")\n\n### OAuth\n\n首先，Drone 只支持Git，以Github 为例，为了拉取代码，你需要先在Github 的[Developer settings](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fsettings%2Fdevelopers \"https://github.com/settings/developers\")中（你可以用其他的git 仓）新建一个OAuth 应用，填入你的Drone 服务的域名，注意 callback URL 需要填login\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa88d4263a2d3a~tplv-t2oaga2asx-watermark.image)\n\n### 安装\n\n依然是基于服务器所有服务都在Docker 里的理念，在`docker-compose.yml`中新建Drone 服务，很多教程会配置drone-runner 代理客户端(agents) ，但它不是必须的，实际上你可以完全单独使用drone-server 完成服务\n\n```\nversion: \"3\"\n\nservices:\n  drone-server:\n    image: drone/drone:latest\n    labels:\n      - traefik.http.routers.drone.rule=Host(`ci.nefelibata.art`)\n      - traefik.enable=true\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /etc/docker/:/etc/docker\n      - ./drone:/var/lib/drone/ # 注意设置这一目录，用于放置sqlite文件，如果用mysql 或其他数据库，酌情处理\n    restart: always\n    networks:\n      - default\n    environment:\n      - DRONE_OPEN=TRUE    \n      - DRONE_ADMIN=xxx\n      - DRONE_USER_CREATE=username:xxx,admin:true\n      - DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite # 指向该目录\n      - DRONE_DATABASE_DRIVER=sqlite3 # 数据库引擎\n      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}\n      - DRONE_RPC_PROTO=${DRONE_RPC_PROTO}\n      - DRONE_AGENTS_DISABLED=true \n      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}\n      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}\n      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}\n      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}\nnetworks:\n  default:\n    external:\n      name: traefik\n复制代码\n```\n\n在配置中，为了不希望我们的一些密钥之类的暴露出去，我们可以将这部分变量写入`.env` 文件中，docker 会读取同目录的这一文件的变量写入上述${xxx} 的变量中：\n\n```\nDRONE_GITHUB_CLIENT_ID=xxxxx  # 填入OAuth 生成的client id\nDRONE_GITHUB_CLIENT_SECRET=xxxxx # 填入OAuth 生成的client secret\nDRONE_RPC_SECRET=xxxxx  # 可以通过openssl rand -hex 16 生成\nDRONE_SERVER_HOST=ci.nefelibata.art\nDRONE_SERVER_PROTO=http\nDRONE_RPC_PROTO=http\n复制代码\n```\n\nDrone 的注册默认是公开的，也就是说，所有能够访问你CI地址的人都能注册并使用你的CI 系统，如果你想要限制使用的用户，你可以在environment 中配置`- DRONE_USER_FILTER=evont, xxx`的方式，添加允许加入的用户（但先前已注册过的用户不会被限制住，真是奇怪的逻辑）。\n\n启动服务，访问服务域名，跳转到Github 进行登录，如果上一步中限制了登录用户且当前Github 账户名不在允许账户中时，回到服务时会显示登录失败。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa9cfa2a1008ee~tplv-t2oaga2asx-watermark.image)\n\n如果成功，就可以看到你的Github 仓库项目列表了\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa9dd031ef70c2~tplv-t2oaga2asx-watermark.image)\n\n进入项目并激活该项目，如果登录用户是管理员，会在`Project settings` 中出现`Trusted` 选项，否则就只有一个`Protected` 选项，只有被`Trusted` 的仓库才能在构建过程中和宿主机进行`Volumes` 映射。\n\n![](https://gitee.com/hxf88/imgrepo/raw/master/img/16fa9de780e8e6e9~tplv-t2oaga2asx-watermark.image)\n\n### 项目构建\n\n以我的项目为例，我希望提交代码后，Drone 帮我构建镜像然后推送到镜像仓库。\n\n新建一个项目，完成基础的代码后，在项目根目录下新建一个如下的 `.drone.yml`，使用Drone 的[Docker](https://link.juejin.cn/?target=http%3A%2F%2Fplugins.drone.io%2Fdrone-plugins%2Fdrone-docker%2F \"http://plugins.drone.io/drone-plugins/drone-docker/\") 插件，指定了镜像仓库地址和分支。\n\n由于用的是私有的仓库，需要登录。这时候我们就可以在CI 界面的`Secrets` 一栏中可以填入一些变量供构建过程使用，就不会暴露在`.drone.yml` 中了。如前面图中所示，在`Secrets` 部分添加自定义的`DOCKER_USERNAME` 和`DOCKER_PASSWORD`字段，然后在`.drone.yml` 中通过`from_secret` 传入`username` 和`password`，就不需要写在配置文件中从而不会被其他能够访问到代码的人所看到了。\n\n另外，由于拉取Docker 镜像的速度很缓慢，这时候你可以通过设置`mirror` 指定Docker 加速源。\n\n```\n---\nkind: pipeline\ntype: docker\nname: default\n\n\nsteps:\n  - name: egg-docker\n    image: plugins/docker\n    settings: \n      mirror: https://xxxx(自己的用户id).mirror.aliyuncs.com\n      username: \n        from_secret: DOCKER_USERNAME\n      password:\n        from_secret: DOCKER_PASSWORD \n      repo: registry.cn-hangzhou.aliyuncs.com/nefelibata/egg\n      registry: registry.cn-hangzhou.aliyuncs.com\n      auto_tag: true\n\ntrigger:\n  branch:\n    - master\n  event:\n    - push\n复制代码\n```\n\n确认无误后，提交代码到该项目触发构建。如果Drone 版本大于1.4.0 且没有开启Agent 时，你很可能会和我一样一直卡在Pending 状态，这是由于默认情况下Drone 是多机模式(`multi-machine mode`)，如果是单个服务器下，你不需要设置代理服务器。网上很多配置是教`DRONE_AGENTS_ENABLED=false` ，然而实际上应该是通过`DRONE_AGENTS_DISABLED=true` 来开启单机模式(`single-machine mode`)\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa8b8043dbe7b1~tplv-t2oaga2asx-watermark.image)\n\n设置妥当后并触发构建就可以看到项目出现了构建过程，它会拉取项目代码到一个临时目录中，构建完成后该目录就会被销毁。\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162701085.png\" alt=\"image-20210824162701085\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162728313.png\" alt=\"image-20210824162728313\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162751745.png\" alt=\"image-20210824162751745\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163153943.png\" alt=\"image-20210824163153943\" style=\"zoom:50%;\" />\n\n\n\n构建完成，推送到了镜像仓库，撒花！\n\n新界面还是挺好看的，撒花\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163226140.png\" alt=\"image-20210824163226140\" style=\"zoom:50%;\" />\n\n___\n\n## Docker\n\n-   networks\n    \n    不同Docker Compose 之间的容器是互不相同的，每个Docker Compose 都有属于自己的networks，上述的服务是分离在不同的`docker-compose.yml` 文件中的，为了让它们互联，我们需要让它们处在同一个networks中，这时候可以先通过执行`docker network create treaefik` 建立一个共享的networks，然后在各个`docker-compose.yml` 中配置networks 指向这个新建的networks，最后在容器中指定其networks即可\n    \n    ```\n      services:\n         nginx:\n          # ...\n          image: nginx\n          networks:\n            - default\n          # ...\n      networks:\n        default:\n          external:\n            name: treaefik\n    复制代码\n    ```\n    \n-   其他\n    \n    docker 相关文章很多，暂时没有在项目中遇到什么这方面的坑，待记录。\n\n","source":"_posts/drone升级到2-0.md","raw":"---\ntitle: drone升级到2.0\ndate: 2021-08-24 16:07:48\ntags:\n- drone\n- ci \ncategories: \n- devops\n---\n\n## 前言\n\n提过hexo来记录日志，不用每天构建，来一个devops(drone ci+gitea+nginx)的网站，美美的\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163110820.png\" alt=\"image-20210824163110820\" style=\"zoom:50%;\" />\n\n<!--more-->\n\n___\n\n## Traefik\n\nTraefik 是一款开源的反向代理与负载均衡工具，很多人会拿它和Nginx 进行对比，其实个人觉得两者各有千秋。像我使用时，由于traefik 对静态网站的支持不好，所以还是会配合Nginx 使用。但这也不妨碍它是一款优秀的反向代理工具的事实。\n\n### 配置与启动\n\nTraefik 的配置括静态配置和动态配置两种，静态配置是Traefik自身启动时的配置，需要重启才能生效，动态配置则可以视为被代理服务的配置，修改后不需要重启。无论是动态或静态配置都支持`Cli` 形式和配置文件形式，但配置文件与cli 参数是不能叠加的。\n\n-   静态配置\n    \n    以在docker-compose 启动Traefik 服务为例，我们可以看下cli 和配置文件的方式：\n    \n    ```\n    services:\n      traefik:\n        restart: always\n        image: traefik:latest\n        ports:\n          - \"80:80\"\n          - \"443:443\"\n        # command:\n        #  - \"--providers.docker=true\"\n        #  - \"--providers.docker.exposedbydefault=false\"\n        volumes:\n          - /var/run/docker.sock:/var/run/docker.sock\n          - ./acme.json:/acme.json\n          - ./traefik/:/etc/traefik # 如果有配置文件了，则command 失效 \n      who:\n        image: containous/whoami\n        labels:\n          - \"traefik.enable=true\"\n          - \"traefik.http.routers.whoa.rule=Host(`who.nefelibata.art)\"\n    复制代码\n    ```\n    \n    我们配置了traefik 容器，并把将包含了`traefik.toml`和`dynamic.toml`文件的`./traefik` 目录映射到容器的`/etc/traefik`目录中，traefik 会在启动时读取`/etc/traefik`目录下的`traefik.toml`， 如果想以cli 的方式，则是通过command 将配置参数传入。\n    \n-   动态配置\n    \n    -   配置文件形式\n        \n        首先我们需要在`traefik.toml` 中有如下配置：\n        \n        ```\n        [providers]\n          ## ...\n          [providers.file]\n            filename = \"/etc/traefik/dynamic_conf.toml\"\n            watch = true\n        复制代码\n        ```\n        \n        然后在 `dynamic_conf.toml` 中配置`routers`和`services`\n        \n        ```\n        [http.routers]\n          [http.routers.https-egg]\n            rule = \"Host(`egg.nefelibata.art`)\"\n            service = \"egg-service\"\n            [http.routers.https-egg.tls] ## 开启https\n               certresolver = \"le\"\n          [http.routers.http-egg]\n            rule = \"Host(`egg.nefelibata.art`)\"\n            service = \"egg-service\"\n        \n        [http.services]\n          [[http.services.egg-service.loadBalancer.servers]]\n            url = \"http://egg_server:9000\"\n        复制代码\n        ```\n        \n        `http.routers` 后面跟着的是自定义的名字，没有硬性要求规则，但子级都要在这个名字基础上拓展，如：`http.routers.https-egg`下开启tls 时，用的是 `http.routers.https-egg.tls`\n        \n        需要注意的是，我们为`egg.nefelibata.art`定义了 两个routers，这是因为，如果设置了`tls`为true，则不再支持http访问，如果希望同时支持`http`和`https`，则需要再定义一个`不同名`的路由\n        \n    -   Docker labels形式\n        \n        如果我们不想都在动态配置文件中配置，可以在`traefik.toml` 里面的`providers` 下写入如下配置：\n        \n        ```\n        [providers]\n          [providers.docker]\n            # 以下均为可选项\n            network = \"traefik\"\n            exposedByDefault = false\n            defaultRule = \"Host(`{{ normalize .Name }}.nefelibata.localhost`)\"\n            watch = true\n          ## ... 其他配置\n        复制代码\n        ```\n        \n        以上述的egg 服务为例，将上面的动态配置改为以labels的方式的话，会如下：\n        \n        ```\n        egg_server:\n            build: ./egg_server\n            expose:\n              - \"9000\"\n            networks:\n              - default\n            labels:\n              - \"traefik.enable=true\"\n              - \"traefik.http.routes.egg_server.rule=Host(`egg.nefelibata.art`)\"\n        复制代码\n        ```\n        \n        这时就不再需要配置`services`了，只需要把端口暴露给容器即可。\n        \n        注意，如果在配置中关闭了`exposedByDefault` 选项，则在其他容器的labels 中如果不定义`traefik.enable=true`的话，该容器服务会被traefik 忽略\n        \n\n### 开启Dashboard\n\nTraefik 带有一个Dashboard，如果你想要开启该服务并为其配置一个域名的话，可以以上述的动态配置方式配置，以配置文件形式为例：\n\n```\n## traefik.toml\n### 其他配置...\n[api]\n### 其他配置... providers, ping .etc\n\n## dynamic.toml\n[http.routers.api]\n    rule = \"Host(`traefik.nefelibata.art`)\"\n    service = \"api@internal\"\n    middlewares = [\"dashboard-auth\"]\n\n[http.middlewares]\n   [http.middlewares.dashboard-auth.basicAuth]\n   users = [\n     \"evont: $xxxxxxxxxxx\"\n   ]\n复制代码\n```\n\n在`traefik.toml`中开启`api`选项后(或cli 中`--api=true`) ，traefik 会有一个特殊的service 叫`api@internal`，将其配置完成后，一般为了防止别人访问，会进行身份验证，所以加了一个`middlewares`，使用traefik 提供的`basicAuth`中间件，使用`htpasswd` 生成一个用户密钥，注意，比如你的名字叫`evont`，密码是`123456`，最终生成的是`evont:$apr1$bL6G3wl2$HllalTsbNwJ/zhoBMhx541`，打开Dashboard 登录时，填入的密码仍旧是123456而不是密钥串。\n\n配置成功后重启服务，打开该服务的域名，就可以看到登陆界面\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa7d60a28b6a97~tplv-t2oaga2asx-watermark.image)\n\n登陆成功之后就可以进入到管理界面中，看到我们配置的路由规则了。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa7d691b2336f5~tplv-t2oaga2asx-watermark.image)\n\n### 静态网站支持\n\nTraefik 对静态网站并没有很好的支持（至少我没有找到使用方法），所以我只能搭配Nginx 作为静态网站的服务器，但443和80端口不能同时给两个反向代理工具，所以只能通过Traefik 转发请求给Nginx 的方法，我们通过启动一个Nginx 服务，指定networks让Nginx 和Traefik 处在同一networks 下，然后通过labels 的方式，将限定的域名分配给Nginx 处理即可\n\n```\nservices:\n  nginx:\n    restart: always\n    image: nginx\n    networks:\n      - default\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./html:/usr/share/nginx/html/\n    labels:\n      - traefik.enable=true\n      - traefik.http.routers.w3.rule=Host(`www.nefelibata.art`) || Host(`mock.nefelibata.art`)\n      - traefik.http.routers.w3.tls=true\n      - traefik.http.routers.w3.tls.certresolver=le\n      - traefik.http.routers.w3-http.rule=Host(`www.nefelibata.art`) || Host(`mock.nefelibata.art`)\n\n复制代码\n```\n\n在Nginx 的`nginx.conf` 文件中，依然使用80端口，根据server\\_name 分配静态网站的目录即可\n\n```\nhttp {\n  server {\n    listen       80;\n    server_name  www.nefelibata.art;\n    root /usr/share/nginx/html/www1;\n    location / {\n      index index.html;\n    }\n  }\n  server {\n    listen       80;\n    server_name  mock.nefelibata.art;\n    root /usr/share/nginx/html/www2;\n    location / {\n      index index.html;\n    }\n  }\n}\n复制代码\n```\n\n### https 支持（同时支持http）\n\n在前面我们提及到了tls和https，有个`certresolver = \"le\"`，那这个`le` 是哪里来的呢，网站的证书又是怎么生成的呢？\n\n如果你想要使用`Let's Encrypt`自动生成证书，traefik 为我们提供了很方便的方案，我们只需要在静态配置中使用如下配置:\n\n```\n## traefik.toml\n### 其他配置...\n[certificatesResolvers.le.acme]\n  email = \"evontgoh@foxmail.com\" # 你自己的邮箱\n  storage = \"acme.json\"\n\n  [certificatesResolvers.le.acme.httpChallenge]\n    entryPoint = \"http\"\n复制代码\n```\n\n并在docker-compose 中配置`volumes`映射一个本地`acme.json`到容器中即可\n\n如果你有自己的证书，你也可以忽略到上述步骤，在`dynamic.toml`中配置\n\n```\n[[tls.certificates]]\n  certFile = \"/path/to/domain.cert\"\n  keyFile = \"/path/to/domain.key\"\n复制代码\n```\n\n这部分可以参考[traefik 的tls 配置](https://link.juejin.cn/?target=https%3A%2F%2Fdocs.traefik.io%2Fhttps%2Ftls%2F \"https://docs.traefik.io/https/tls/\")\n\n### 版本坑\n\n刚开始配置的时候，网上多数教程都还是基于v1，于是一直配置不成功，后来发现是因为v1 和v2版本差异过大，配置项都不相同，甚至连[traefik 中文文档](https://link.juejin.cn/?target=https%3A%2F%2Fdocs.traefik.cn%2F \"https://docs.traefik.cn/\") 都还是基于v1的配置，比如在定义路由规则时\n\n```\n## v1 规则如下：\n[frontends] ## 规定前端进入规则\n   [frontends.frontend1]\n   backend = \"backend1\" # 指定后端服务\n   [frontends.frontend1.routes]  ## 定义路由\n      [frontends.frontend1.routes.route0]\n        rule = \"Host:test.localhost\"  ## 注意，这里写法也变了\n[backends] ## 定义后端服务\n  [backends.backend1]\n    [backends.backend1.servers.server0]\n        url = \"http://xx.xx.xx.xx:80\"\n  \n## v2 规则弃用了frontend & backend \n[http.routers] ## 用routers 规定路由规则\n  [http.routers.router0]\n    rule = \"Host(`test.localhost`)\" ## 写法变了\n    service = \"my-service\"\n\n[http.services]\n  [[http.services.my-service.loadBalancer.servers]]\n    url = \"http://xx.xx.xx.xx:80\"\n复制代码\n```\n\n同时，以上规则在v1 时是定义在`[file]` 字段下的，在v2 时，则是在`[providers]` 下的`[providers.file]` 下定义的且变成了独立的动态配置文件\n\n关于这方面，我建议阅读[官方版本迁移文档](https://link.juejin.cn/?target=https%3A%2F%2Fdocs.traefik.io%2Fmigration%2Fv1-to-v2%2F \"https://docs.traefik.io/migration/v1-to-v2/\")，并且以官方文档为基准（虽然也写得比较松散，也对英语差的人不是很友好）。\n\n___\n\n## Drone CI\n\n以前一直用Jenkins 这一业界标准的CI 工具，但是一直觉得因为功能太丰富而稍显笨重，而Drone 对Docker、K8s 这些容器环境又有优化，也足够轻便和灵活，如果你在两者中不知如何挑选可以看看[这篇文章](https://link.juejin.cn/?target=https%3A%2F%2Fblog.51cto.com%2F12462495%2F2108263 \"https://blog.51cto.com/12462495/2108263\")\n\n### OAuth\n\n首先，Drone 只支持Git，以Github 为例，为了拉取代码，你需要先在Github 的[Developer settings](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fsettings%2Fdevelopers \"https://github.com/settings/developers\")中（你可以用其他的git 仓）新建一个OAuth 应用，填入你的Drone 服务的域名，注意 callback URL 需要填login\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa88d4263a2d3a~tplv-t2oaga2asx-watermark.image)\n\n### 安装\n\n依然是基于服务器所有服务都在Docker 里的理念，在`docker-compose.yml`中新建Drone 服务，很多教程会配置drone-runner 代理客户端(agents) ，但它不是必须的，实际上你可以完全单独使用drone-server 完成服务\n\n```\nversion: \"3\"\n\nservices:\n  drone-server:\n    image: drone/drone:latest\n    labels:\n      - traefik.http.routers.drone.rule=Host(`ci.nefelibata.art`)\n      - traefik.enable=true\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /etc/docker/:/etc/docker\n      - ./drone:/var/lib/drone/ # 注意设置这一目录，用于放置sqlite文件，如果用mysql 或其他数据库，酌情处理\n    restart: always\n    networks:\n      - default\n    environment:\n      - DRONE_OPEN=TRUE    \n      - DRONE_ADMIN=xxx\n      - DRONE_USER_CREATE=username:xxx,admin:true\n      - DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite # 指向该目录\n      - DRONE_DATABASE_DRIVER=sqlite3 # 数据库引擎\n      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}\n      - DRONE_RPC_PROTO=${DRONE_RPC_PROTO}\n      - DRONE_AGENTS_DISABLED=true \n      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}\n      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}\n      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}\n      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}\nnetworks:\n  default:\n    external:\n      name: traefik\n复制代码\n```\n\n在配置中，为了不希望我们的一些密钥之类的暴露出去，我们可以将这部分变量写入`.env` 文件中，docker 会读取同目录的这一文件的变量写入上述${xxx} 的变量中：\n\n```\nDRONE_GITHUB_CLIENT_ID=xxxxx  # 填入OAuth 生成的client id\nDRONE_GITHUB_CLIENT_SECRET=xxxxx # 填入OAuth 生成的client secret\nDRONE_RPC_SECRET=xxxxx  # 可以通过openssl rand -hex 16 生成\nDRONE_SERVER_HOST=ci.nefelibata.art\nDRONE_SERVER_PROTO=http\nDRONE_RPC_PROTO=http\n复制代码\n```\n\nDrone 的注册默认是公开的，也就是说，所有能够访问你CI地址的人都能注册并使用你的CI 系统，如果你想要限制使用的用户，你可以在environment 中配置`- DRONE_USER_FILTER=evont, xxx`的方式，添加允许加入的用户（但先前已注册过的用户不会被限制住，真是奇怪的逻辑）。\n\n启动服务，访问服务域名，跳转到Github 进行登录，如果上一步中限制了登录用户且当前Github 账户名不在允许账户中时，回到服务时会显示登录失败。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa9cfa2a1008ee~tplv-t2oaga2asx-watermark.image)\n\n如果成功，就可以看到你的Github 仓库项目列表了\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa9dd031ef70c2~tplv-t2oaga2asx-watermark.image)\n\n进入项目并激活该项目，如果登录用户是管理员，会在`Project settings` 中出现`Trusted` 选项，否则就只有一个`Protected` 选项，只有被`Trusted` 的仓库才能在构建过程中和宿主机进行`Volumes` 映射。\n\n![](https://gitee.com/hxf88/imgrepo/raw/master/img/16fa9de780e8e6e9~tplv-t2oaga2asx-watermark.image)\n\n### 项目构建\n\n以我的项目为例，我希望提交代码后，Drone 帮我构建镜像然后推送到镜像仓库。\n\n新建一个项目，完成基础的代码后，在项目根目录下新建一个如下的 `.drone.yml`，使用Drone 的[Docker](https://link.juejin.cn/?target=http%3A%2F%2Fplugins.drone.io%2Fdrone-plugins%2Fdrone-docker%2F \"http://plugins.drone.io/drone-plugins/drone-docker/\") 插件，指定了镜像仓库地址和分支。\n\n由于用的是私有的仓库，需要登录。这时候我们就可以在CI 界面的`Secrets` 一栏中可以填入一些变量供构建过程使用，就不会暴露在`.drone.yml` 中了。如前面图中所示，在`Secrets` 部分添加自定义的`DOCKER_USERNAME` 和`DOCKER_PASSWORD`字段，然后在`.drone.yml` 中通过`from_secret` 传入`username` 和`password`，就不需要写在配置文件中从而不会被其他能够访问到代码的人所看到了。\n\n另外，由于拉取Docker 镜像的速度很缓慢，这时候你可以通过设置`mirror` 指定Docker 加速源。\n\n```\n---\nkind: pipeline\ntype: docker\nname: default\n\n\nsteps:\n  - name: egg-docker\n    image: plugins/docker\n    settings: \n      mirror: https://xxxx(自己的用户id).mirror.aliyuncs.com\n      username: \n        from_secret: DOCKER_USERNAME\n      password:\n        from_secret: DOCKER_PASSWORD \n      repo: registry.cn-hangzhou.aliyuncs.com/nefelibata/egg\n      registry: registry.cn-hangzhou.aliyuncs.com\n      auto_tag: true\n\ntrigger:\n  branch:\n    - master\n  event:\n    - push\n复制代码\n```\n\n确认无误后，提交代码到该项目触发构建。如果Drone 版本大于1.4.0 且没有开启Agent 时，你很可能会和我一样一直卡在Pending 状态，这是由于默认情况下Drone 是多机模式(`multi-machine mode`)，如果是单个服务器下，你不需要设置代理服务器。网上很多配置是教`DRONE_AGENTS_ENABLED=false` ，然而实际上应该是通过`DRONE_AGENTS_DISABLED=true` 来开启单机模式(`single-machine mode`)\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa8b8043dbe7b1~tplv-t2oaga2asx-watermark.image)\n\n设置妥当后并触发构建就可以看到项目出现了构建过程，它会拉取项目代码到一个临时目录中，构建完成后该目录就会被销毁。\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162701085.png\" alt=\"image-20210824162701085\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162728313.png\" alt=\"image-20210824162728313\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162751745.png\" alt=\"image-20210824162751745\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163153943.png\" alt=\"image-20210824163153943\" style=\"zoom:50%;\" />\n\n\n\n构建完成，推送到了镜像仓库，撒花！\n\n新界面还是挺好看的，撒花\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163226140.png\" alt=\"image-20210824163226140\" style=\"zoom:50%;\" />\n\n___\n\n## Docker\n\n-   networks\n    \n    不同Docker Compose 之间的容器是互不相同的，每个Docker Compose 都有属于自己的networks，上述的服务是分离在不同的`docker-compose.yml` 文件中的，为了让它们互联，我们需要让它们处在同一个networks中，这时候可以先通过执行`docker network create treaefik` 建立一个共享的networks，然后在各个`docker-compose.yml` 中配置networks 指向这个新建的networks，最后在容器中指定其networks即可\n    \n    ```\n      services:\n         nginx:\n          # ...\n          image: nginx\n          networks:\n            - default\n          # ...\n      networks:\n        default:\n          external:\n            name: treaefik\n    复制代码\n    ```\n    \n-   其他\n    \n    docker 相关文章很多，暂时没有在项目中遇到什么这方面的坑，待记录。\n\n","slug":"drone升级到2-0","published":1,"updated":"2021-08-24T08:56:29.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6oh000bcmv9fz0e14nl","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>提过hexo来记录日志，不用每天构建，来一个devops(drone ci+gitea+nginx)的网站，美美的</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163110820.png\" alt=\"image-20210824163110820\" style=\"zoom:50%;\" />\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"Traefik\"><a href=\"#Traefik\" class=\"headerlink\" title=\"Traefik\"></a>Traefik</h2><p>Traefik 是一款开源的反向代理与负载均衡工具，很多人会拿它和Nginx 进行对比，其实个人觉得两者各有千秋。像我使用时，由于traefik 对静态网站的支持不好，所以还是会配合Nginx 使用。但这也不妨碍它是一款优秀的反向代理工具的事实。</p>\n<h3 id=\"配置与启动\"><a href=\"#配置与启动\" class=\"headerlink\" title=\"配置与启动\"></a>配置与启动</h3><p>Traefik 的配置括静态配置和动态配置两种，静态配置是Traefik自身启动时的配置，需要重启才能生效，动态配置则可以视为被代理服务的配置，修改后不需要重启。无论是动态或静态配置都支持<code>Cli</code> 形式和配置文件形式，但配置文件与cli 参数是不能叠加的。</p>\n<ul>\n<li>静态配置  以在docker-compose 启动Traefik 服务为例，我们可以看下cli 和配置文件的方式：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">  traefik:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: traefik:latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;80:80&quot;</span><br><span class=\"line\">      - &quot;443:443&quot;</span><br><span class=\"line\">    # command:</span><br><span class=\"line\">    #  - &quot;--providers.docker=true&quot;</span><br><span class=\"line\">    #  - &quot;--providers.docker.exposedbydefault=false&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class=\"line\">      - ./acme.json:/acme.json</span><br><span class=\"line\">      - ./traefik/:/etc/traefik # 如果有配置文件了，则command 失效 </span><br><span class=\"line\">  who:</span><br><span class=\"line\">    image: containous/whoami</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      - &quot;traefik.enable=true&quot;</span><br><span class=\"line\">      - &quot;traefik.http.routers.whoa.rule=Host(`who.nefelibata.art)&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n  我们配置了traefik 容器，并把将包含了<code>traefik.toml</code>和<code>dynamic.toml</code>文件的<code>./traefik</code> 目录映射到容器的<code>/etc/traefik</code>目录中，traefik 会在启动时读取<code>/etc/traefik</code>目录下的<code>traefik.toml</code>， 如果想以cli 的方式，则是通过command 将配置参数传入。</li>\n<li>动态配置<ul>\n<li>配置文件形式  首先我们需要在<code>traefik.toml</code> 中有如下配置：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[providers]</span><br><span class=\"line\">  ## ...</span><br><span class=\"line\">  [providers.file]</span><br><span class=\"line\">    filename = &quot;/etc/traefik/dynamic_conf.toml&quot;</span><br><span class=\"line\">    watch = true</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n  然后在 <code>dynamic_conf.toml</code> 中配置<code>routers</code>和<code>services</code>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[http.routers]</span><br><span class=\"line\">  [http.routers.https-egg]</span><br><span class=\"line\">    rule = &quot;Host(`egg.nefelibata.art`)&quot;</span><br><span class=\"line\">    service = &quot;egg-service&quot;</span><br><span class=\"line\">    [http.routers.https-egg.tls] ## 开启https</span><br><span class=\"line\">       certresolver = &quot;le&quot;</span><br><span class=\"line\">  [http.routers.http-egg]</span><br><span class=\"line\">    rule = &quot;Host(`egg.nefelibata.art`)&quot;</span><br><span class=\"line\">    service = &quot;egg-service&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[http.services]</span><br><span class=\"line\">  [[http.services.egg-service.loadBalancer.servers]]</span><br><span class=\"line\">    url = &quot;http://egg_server:9000&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n  <code>http.routers</code> 后面跟着的是自定义的名字，没有硬性要求规则，但子级都要在这个名字基础上拓展，如：<code>http.routers.https-egg</code>下开启tls 时，用的是 <code>http.routers.https-egg.tls</code>  需要注意的是，我们为<code>egg.nefelibata.art</code>定义了 两个routers，这是因为，如果设置了<code>tls</code>为true，则不再支持http访问，如果希望同时支持<code>http</code>和<code>https</code>，则需要再定义一个<code>不同名</code>的路由</li>\n<li>Docker labels形式  如果我们不想都在动态配置文件中配置，可以在<code>traefik.toml</code> 里面的<code>providers</code> 下写入如下配置：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[providers]</span><br><span class=\"line\">  [providers.docker]</span><br><span class=\"line\">    # 以下均为可选项</span><br><span class=\"line\">    network = &quot;traefik&quot;</span><br><span class=\"line\">    exposedByDefault = false</span><br><span class=\"line\">    defaultRule = &quot;Host(`&#123;&#123; normalize .Name &#125;&#125;.nefelibata.localhost`)&quot;</span><br><span class=\"line\">    watch = true</span><br><span class=\"line\">  ## ... 其他配置</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n  以上述的egg 服务为例，将上面的动态配置改为以labels的方式的话，会如下：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egg_server:</span><br><span class=\"line\">    build: ./egg_server</span><br><span class=\"line\">    expose:</span><br><span class=\"line\">      - &quot;9000&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - default</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      - &quot;traefik.enable=true&quot;</span><br><span class=\"line\">      - &quot;traefik.http.routes.egg_server.rule=Host(`egg.nefelibata.art`)&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n  这时就不再需要配置<code>services</code>了，只需要把端口暴露给容器即可。  注意，如果在配置中关闭了<code>exposedByDefault</code> 选项，则在其他容器的labels 中如果不定义<code>traefik.enable=true</code>的话，该容器服务会被traefik 忽略</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"开启Dashboard\"><a href=\"#开启Dashboard\" class=\"headerlink\" title=\"开启Dashboard\"></a>开启Dashboard</h3><p>Traefik 带有一个Dashboard，如果你想要开启该服务并为其配置一个域名的话，可以以上述的动态配置方式配置，以配置文件形式为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## traefik.toml</span><br><span class=\"line\">### 其他配置...</span><br><span class=\"line\">[api]</span><br><span class=\"line\">### 其他配置... providers, ping .etc</span><br><span class=\"line\"></span><br><span class=\"line\">## dynamic.toml</span><br><span class=\"line\">[http.routers.api]</span><br><span class=\"line\">    rule = &quot;Host(`traefik.nefelibata.art`)&quot;</span><br><span class=\"line\">    service = &quot;api@internal&quot;</span><br><span class=\"line\">    middlewares = [&quot;dashboard-auth&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">[http.middlewares]</span><br><span class=\"line\">   [http.middlewares.dashboard-auth.basicAuth]</span><br><span class=\"line\">   users = [</span><br><span class=\"line\">     &quot;evont: $xxxxxxxxxxx&quot;</span><br><span class=\"line\">   ]</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>在<code>traefik.toml</code>中开启<code>api</code>选项后(或cli 中<code>--api=true</code>) ，traefik 会有一个特殊的service 叫<code>api@internal</code>，将其配置完成后，一般为了防止别人访问，会进行身份验证，所以加了一个<code>middlewares</code>，使用traefik 提供的<code>basicAuth</code>中间件，使用<code>htpasswd</code> 生成一个用户密钥，注意，比如你的名字叫<code>evont</code>，密码是<code>123456</code>，最终生成的是<code>evont:$apr1$bL6G3wl2$HllalTsbNwJ/zhoBMhx541</code>，打开Dashboard 登录时，填入的密码仍旧是123456而不是密钥串。</p>\n<p>配置成功后重启服务，打开该服务的域名，就可以看到登陆界面</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa7d60a28b6a97~tplv-t2oaga2asx-watermark.image\"></p>\n<p>登陆成功之后就可以进入到管理界面中，看到我们配置的路由规则了。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa7d691b2336f5~tplv-t2oaga2asx-watermark.image\"></p>\n<h3 id=\"静态网站支持\"><a href=\"#静态网站支持\" class=\"headerlink\" title=\"静态网站支持\"></a>静态网站支持</h3><p>Traefik 对静态网站并没有很好的支持（至少我没有找到使用方法），所以我只能搭配Nginx 作为静态网站的服务器，但443和80端口不能同时给两个反向代理工具，所以只能通过Traefik 转发请求给Nginx 的方法，我们通过启动一个Nginx 服务，指定networks让Nginx 和Traefik 处在同一networks 下，然后通过labels 的方式，将限定的域名分配给Nginx 处理即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: nginx</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - default</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./nginx.conf:/etc/nginx/nginx.conf</span><br><span class=\"line\">      - ./html:/usr/share/nginx/html/</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      - traefik.enable=true</span><br><span class=\"line\">      - traefik.http.routers.w3.rule=Host(`www.nefelibata.art`) || Host(`mock.nefelibata.art`)</span><br><span class=\"line\">      - traefik.http.routers.w3.tls=true</span><br><span class=\"line\">      - traefik.http.routers.w3.tls.certresolver=le</span><br><span class=\"line\">      - traefik.http.routers.w3-http.rule=Host(`www.nefelibata.art`) || Host(`mock.nefelibata.art`)</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>在Nginx 的<code>nginx.conf</code> 文件中，依然使用80端口，根据server_name 分配静态网站的目录即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  www.nefelibata.art;</span><br><span class=\"line\">    root /usr/share/nginx/html/www1;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  mock.nefelibata.art;</span><br><span class=\"line\">    root /usr/share/nginx/html/www2;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"https-支持（同时支持http）\"><a href=\"#https-支持（同时支持http）\" class=\"headerlink\" title=\"https 支持（同时支持http）\"></a>https 支持（同时支持http）</h3><p>在前面我们提及到了tls和https，有个<code>certresolver = &quot;le&quot;</code>，那这个<code>le</code> 是哪里来的呢，网站的证书又是怎么生成的呢？</p>\n<p>如果你想要使用<code>Let&#39;s Encrypt</code>自动生成证书，traefik 为我们提供了很方便的方案，我们只需要在静态配置中使用如下配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## traefik.toml</span><br><span class=\"line\">### 其他配置...</span><br><span class=\"line\">[certificatesResolvers.le.acme]</span><br><span class=\"line\">  email = &quot;evontgoh@foxmail.com&quot; # 你自己的邮箱</span><br><span class=\"line\">  storage = &quot;acme.json&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  [certificatesResolvers.le.acme.httpChallenge]</span><br><span class=\"line\">    entryPoint = &quot;http&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>并在docker-compose 中配置<code>volumes</code>映射一个本地<code>acme.json</code>到容器中即可</p>\n<p>如果你有自己的证书，你也可以忽略到上述步骤，在<code>dynamic.toml</code>中配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[tls.certificates]]</span><br><span class=\"line\">  certFile = &quot;/path/to/domain.cert&quot;</span><br><span class=\"line\">  keyFile = &quot;/path/to/domain.key&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这部分可以参考<a href=\"https://link.juejin.cn/?target=https://docs.traefik.io/https/tls/\" title=\"https://docs.traefik.io/https/tls/\">traefik 的tls 配置</a></p>\n<h3 id=\"版本坑\"><a href=\"#版本坑\" class=\"headerlink\" title=\"版本坑\"></a>版本坑</h3><p>刚开始配置的时候，网上多数教程都还是基于v1，于是一直配置不成功，后来发现是因为v1 和v2版本差异过大，配置项都不相同，甚至连<a href=\"https://link.juejin.cn/?target=https://docs.traefik.cn/\" title=\"https://docs.traefik.cn/\">traefik 中文文档</a> 都还是基于v1的配置，比如在定义路由规则时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## v1 规则如下：</span><br><span class=\"line\">[frontends] ## 规定前端进入规则</span><br><span class=\"line\">   [frontends.frontend1]</span><br><span class=\"line\">   backend = &quot;backend1&quot; # 指定后端服务</span><br><span class=\"line\">   [frontends.frontend1.routes]  ## 定义路由</span><br><span class=\"line\">      [frontends.frontend1.routes.route0]</span><br><span class=\"line\">        rule = &quot;Host:test.localhost&quot;  ## 注意，这里写法也变了</span><br><span class=\"line\">[backends] ## 定义后端服务</span><br><span class=\"line\">  [backends.backend1]</span><br><span class=\"line\">    [backends.backend1.servers.server0]</span><br><span class=\"line\">        url = &quot;http://xx.xx.xx.xx:80&quot;</span><br><span class=\"line\">  </span><br><span class=\"line\">## v2 规则弃用了frontend &amp; backend </span><br><span class=\"line\">[http.routers] ## 用routers 规定路由规则</span><br><span class=\"line\">  [http.routers.router0]</span><br><span class=\"line\">    rule = &quot;Host(`test.localhost`)&quot; ## 写法变了</span><br><span class=\"line\">    service = &quot;my-service&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[http.services]</span><br><span class=\"line\">  [[http.services.my-service.loadBalancer.servers]]</span><br><span class=\"line\">    url = &quot;http://xx.xx.xx.xx:80&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>同时，以上规则在v1 时是定义在<code>[file]</code> 字段下的，在v2 时，则是在<code>[providers]</code> 下的<code>[providers.file]</code> 下定义的且变成了独立的动态配置文件</p>\n<p>关于这方面，我建议阅读<a href=\"https://link.juejin.cn/?target=https://docs.traefik.io/migration/v1-to-v2/\" title=\"https://docs.traefik.io/migration/v1-to-v2/\">官方版本迁移文档</a>，并且以官方文档为基准（虽然也写得比较松散，也对英语差的人不是很友好）。</p>\n<hr>\n<h2 id=\"Drone-CI\"><a href=\"#Drone-CI\" class=\"headerlink\" title=\"Drone CI\"></a>Drone CI</h2><p>以前一直用Jenkins 这一业界标准的CI 工具，但是一直觉得因为功能太丰富而稍显笨重，而Drone 对Docker、K8s 这些容器环境又有优化，也足够轻便和灵活，如果你在两者中不知如何挑选可以看看<a href=\"https://link.juejin.cn/?target=https://blog.51cto.com/12462495/2108263\" title=\"https://blog.51cto.com/12462495/2108263\">这篇文章</a></p>\n<h3 id=\"OAuth\"><a href=\"#OAuth\" class=\"headerlink\" title=\"OAuth\"></a>OAuth</h3><p>首先，Drone 只支持Git，以Github 为例，为了拉取代码，你需要先在Github 的<a href=\"https://link.juejin.cn/?target=https://github.com/settings/developers\" title=\"https://github.com/settings/developers\">Developer settings</a>中（你可以用其他的git 仓）新建一个OAuth 应用，填入你的Drone 服务的域名，注意 callback URL 需要填login</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa88d4263a2d3a~tplv-t2oaga2asx-watermark.image\"></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>依然是基于服务器所有服务都在Docker 里的理念，在<code>docker-compose.yml</code>中新建Drone 服务，很多教程会配置drone-runner 代理客户端(agents) ，但它不是必须的，实际上你可以完全单独使用drone-server 完成服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  drone-server:</span><br><span class=\"line\">    image: drone/drone:latest</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      - traefik.http.routers.drone.rule=Host(`ci.nefelibata.art`)</span><br><span class=\"line\">      - traefik.enable=true</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class=\"line\">      - /etc/docker/:/etc/docker</span><br><span class=\"line\">      - ./drone:/var/lib/drone/ # 注意设置这一目录，用于放置sqlite文件，如果用mysql 或其他数据库，酌情处理</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - default</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - DRONE_OPEN=TRUE    </span><br><span class=\"line\">      - DRONE_ADMIN=xxx</span><br><span class=\"line\">      - DRONE_USER_CREATE=username:xxx,admin:true</span><br><span class=\"line\">      - DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite # 指向该目录</span><br><span class=\"line\">      - DRONE_DATABASE_DRIVER=sqlite3 # 数据库引擎</span><br><span class=\"line\">      - DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET&#125;</span><br><span class=\"line\">      - DRONE_RPC_PROTO=$&#123;DRONE_RPC_PROTO&#125;</span><br><span class=\"line\">      - DRONE_AGENTS_DISABLED=true </span><br><span class=\"line\">      - DRONE_GITHUB_CLIENT_ID=$&#123;DRONE_GITHUB_CLIENT_ID&#125;</span><br><span class=\"line\">      - DRONE_GITHUB_CLIENT_SECRET=$&#123;DRONE_GITHUB_CLIENT_SECRET&#125;</span><br><span class=\"line\">      - DRONE_SERVER_HOST=$&#123;DRONE_SERVER_HOST&#125;</span><br><span class=\"line\">      - DRONE_SERVER_PROTO=$&#123;DRONE_SERVER_PROTO&#125;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  default:</span><br><span class=\"line\">    external:</span><br><span class=\"line\">      name: traefik</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>在配置中，为了不希望我们的一些密钥之类的暴露出去，我们可以将这部分变量写入<code>.env</code> 文件中，docker 会读取同目录的这一文件的变量写入上述${xxx} 的变量中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DRONE_GITHUB_CLIENT_ID=xxxxx  # 填入OAuth 生成的client id</span><br><span class=\"line\">DRONE_GITHUB_CLIENT_SECRET=xxxxx # 填入OAuth 生成的client secret</span><br><span class=\"line\">DRONE_RPC_SECRET=xxxxx  # 可以通过openssl rand -hex 16 生成</span><br><span class=\"line\">DRONE_SERVER_HOST=ci.nefelibata.art</span><br><span class=\"line\">DRONE_SERVER_PROTO=http</span><br><span class=\"line\">DRONE_RPC_PROTO=http</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>Drone 的注册默认是公开的，也就是说，所有能够访问你CI地址的人都能注册并使用你的CI 系统，如果你想要限制使用的用户，你可以在environment 中配置<code>- DRONE_USER_FILTER=evont, xxx</code>的方式，添加允许加入的用户（但先前已注册过的用户不会被限制住，真是奇怪的逻辑）。</p>\n<p>启动服务，访问服务域名，跳转到Github 进行登录，如果上一步中限制了登录用户且当前Github 账户名不在允许账户中时，回到服务时会显示登录失败。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa9cfa2a1008ee~tplv-t2oaga2asx-watermark.image\"></p>\n<p>如果成功，就可以看到你的Github 仓库项目列表了</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa9dd031ef70c2~tplv-t2oaga2asx-watermark.image\"></p>\n<p>进入项目并激活该项目，如果登录用户是管理员，会在<code>Project settings</code> 中出现<code>Trusted</code> 选项，否则就只有一个<code>Protected</code> 选项，只有被<code>Trusted</code> 的仓库才能在构建过程中和宿主机进行<code>Volumes</code> 映射。</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/16fa9de780e8e6e9~tplv-t2oaga2asx-watermark.image\"></p>\n<h3 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h3><p>以我的项目为例，我希望提交代码后，Drone 帮我构建镜像然后推送到镜像仓库。</p>\n<p>新建一个项目，完成基础的代码后，在项目根目录下新建一个如下的 <code>.drone.yml</code>，使用Drone 的<a href=\"https://link.juejin.cn/?target=http://plugins.drone.io/drone-plugins/drone-docker/\" title=\"http://plugins.drone.io/drone-plugins/drone-docker/\">Docker</a> 插件，指定了镜像仓库地址和分支。</p>\n<p>由于用的是私有的仓库，需要登录。这时候我们就可以在CI 界面的<code>Secrets</code> 一栏中可以填入一些变量供构建过程使用，就不会暴露在<code>.drone.yml</code> 中了。如前面图中所示，在<code>Secrets</code> 部分添加自定义的<code>DOCKER_USERNAME</code> 和<code>DOCKER_PASSWORD</code>字段，然后在<code>.drone.yml</code> 中通过<code>from_secret</code> 传入<code>username</code> 和<code>password</code>，就不需要写在配置文件中从而不会被其他能够访问到代码的人所看到了。</p>\n<p>另外，由于拉取Docker 镜像的速度很缓慢，这时候你可以通过设置<code>mirror</code> 指定Docker 加速源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">kind: pipeline</span><br><span class=\"line\">type: docker</span><br><span class=\"line\">name: default</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">steps:</span><br><span class=\"line\">  - name: egg-docker</span><br><span class=\"line\">    image: plugins/docker</span><br><span class=\"line\">    settings: </span><br><span class=\"line\">      mirror: https://xxxx(自己的用户id).mirror.aliyuncs.com</span><br><span class=\"line\">      username: </span><br><span class=\"line\">        from_secret: DOCKER_USERNAME</span><br><span class=\"line\">      password:</span><br><span class=\"line\">        from_secret: DOCKER_PASSWORD </span><br><span class=\"line\">      repo: registry.cn-hangzhou.aliyuncs.com/nefelibata/egg</span><br><span class=\"line\">      registry: registry.cn-hangzhou.aliyuncs.com</span><br><span class=\"line\">      auto_tag: true</span><br><span class=\"line\"></span><br><span class=\"line\">trigger:</span><br><span class=\"line\">  branch:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">  event:</span><br><span class=\"line\">    - push</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>确认无误后，提交代码到该项目触发构建。如果Drone 版本大于1.4.0 且没有开启Agent 时，你很可能会和我一样一直卡在Pending 状态，这是由于默认情况下Drone 是多机模式(<code>multi-machine mode</code>)，如果是单个服务器下，你不需要设置代理服务器。网上很多配置是教<code>DRONE_AGENTS_ENABLED=false</code> ，然而实际上应该是通过<code>DRONE_AGENTS_DISABLED=true</code> 来开启单机模式(<code>single-machine mode</code>)</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa8b8043dbe7b1~tplv-t2oaga2asx-watermark.image\"></p>\n<p>设置妥当后并触发构建就可以看到项目出现了构建过程，它会拉取项目代码到一个临时目录中，构建完成后该目录就会被销毁。</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162701085.png\" alt=\"image-20210824162701085\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162728313.png\" alt=\"image-20210824162728313\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162751745.png\" alt=\"image-20210824162751745\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163153943.png\" alt=\"image-20210824163153943\" style=\"zoom:50%;\" />\n\n\n\n<p>构建完成，推送到了镜像仓库，撒花！</p>\n<p>新界面还是挺好看的，撒花</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163226140.png\" alt=\"image-20210824163226140\" style=\"zoom:50%;\" />\n\n<hr>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><ul>\n<li>networks  不同Docker Compose 之间的容器是互不相同的，每个Docker Compose 都有属于自己的networks，上述的服务是分离在不同的<code>docker-compose.yml</code> 文件中的，为了让它们互联，我们需要让它们处在同一个networks中，这时候可以先通过执行<code>docker network create treaefik</code> 建立一个共享的networks，然后在各个<code>docker-compose.yml</code> 中配置networks 指向这个新建的networks，最后在容器中指定其networks即可  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  services:</span><br><span class=\"line\">     nginx:</span><br><span class=\"line\">      # ...</span><br><span class=\"line\">      image: nginx</span><br><span class=\"line\">      networks:</span><br><span class=\"line\">        - default</span><br><span class=\"line\">      # ...</span><br><span class=\"line\">  networks:</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      external:</span><br><span class=\"line\">        name: treaefik</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n</li>\n<li>其他  docker 相关文章很多，暂时没有在项目中遇到什么这方面的坑，待记录。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>提过hexo来记录日志，不用每天构建，来一个devops(drone ci+gitea+nginx)的网站，美美的</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163110820.png\" alt=\"image-20210824163110820\" style=\"zoom:50%;\" />","more":"<hr>\n<h2 id=\"Traefik\"><a href=\"#Traefik\" class=\"headerlink\" title=\"Traefik\"></a>Traefik</h2><p>Traefik 是一款开源的反向代理与负载均衡工具，很多人会拿它和Nginx 进行对比，其实个人觉得两者各有千秋。像我使用时，由于traefik 对静态网站的支持不好，所以还是会配合Nginx 使用。但这也不妨碍它是一款优秀的反向代理工具的事实。</p>\n<h3 id=\"配置与启动\"><a href=\"#配置与启动\" class=\"headerlink\" title=\"配置与启动\"></a>配置与启动</h3><p>Traefik 的配置括静态配置和动态配置两种，静态配置是Traefik自身启动时的配置，需要重启才能生效，动态配置则可以视为被代理服务的配置，修改后不需要重启。无论是动态或静态配置都支持<code>Cli</code> 形式和配置文件形式，但配置文件与cli 参数是不能叠加的。</p>\n<ul>\n<li>静态配置  以在docker-compose 启动Traefik 服务为例，我们可以看下cli 和配置文件的方式：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">  traefik:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: traefik:latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;80:80&quot;</span><br><span class=\"line\">      - &quot;443:443&quot;</span><br><span class=\"line\">    # command:</span><br><span class=\"line\">    #  - &quot;--providers.docker=true&quot;</span><br><span class=\"line\">    #  - &quot;--providers.docker.exposedbydefault=false&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class=\"line\">      - ./acme.json:/acme.json</span><br><span class=\"line\">      - ./traefik/:/etc/traefik # 如果有配置文件了，则command 失效 </span><br><span class=\"line\">  who:</span><br><span class=\"line\">    image: containous/whoami</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      - &quot;traefik.enable=true&quot;</span><br><span class=\"line\">      - &quot;traefik.http.routers.whoa.rule=Host(`who.nefelibata.art)&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n  我们配置了traefik 容器，并把将包含了<code>traefik.toml</code>和<code>dynamic.toml</code>文件的<code>./traefik</code> 目录映射到容器的<code>/etc/traefik</code>目录中，traefik 会在启动时读取<code>/etc/traefik</code>目录下的<code>traefik.toml</code>， 如果想以cli 的方式，则是通过command 将配置参数传入。</li>\n<li>动态配置<ul>\n<li>配置文件形式  首先我们需要在<code>traefik.toml</code> 中有如下配置：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[providers]</span><br><span class=\"line\">  ## ...</span><br><span class=\"line\">  [providers.file]</span><br><span class=\"line\">    filename = &quot;/etc/traefik/dynamic_conf.toml&quot;</span><br><span class=\"line\">    watch = true</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n  然后在 <code>dynamic_conf.toml</code> 中配置<code>routers</code>和<code>services</code>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[http.routers]</span><br><span class=\"line\">  [http.routers.https-egg]</span><br><span class=\"line\">    rule = &quot;Host(`egg.nefelibata.art`)&quot;</span><br><span class=\"line\">    service = &quot;egg-service&quot;</span><br><span class=\"line\">    [http.routers.https-egg.tls] ## 开启https</span><br><span class=\"line\">       certresolver = &quot;le&quot;</span><br><span class=\"line\">  [http.routers.http-egg]</span><br><span class=\"line\">    rule = &quot;Host(`egg.nefelibata.art`)&quot;</span><br><span class=\"line\">    service = &quot;egg-service&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[http.services]</span><br><span class=\"line\">  [[http.services.egg-service.loadBalancer.servers]]</span><br><span class=\"line\">    url = &quot;http://egg_server:9000&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n  <code>http.routers</code> 后面跟着的是自定义的名字，没有硬性要求规则，但子级都要在这个名字基础上拓展，如：<code>http.routers.https-egg</code>下开启tls 时，用的是 <code>http.routers.https-egg.tls</code>  需要注意的是，我们为<code>egg.nefelibata.art</code>定义了 两个routers，这是因为，如果设置了<code>tls</code>为true，则不再支持http访问，如果希望同时支持<code>http</code>和<code>https</code>，则需要再定义一个<code>不同名</code>的路由</li>\n<li>Docker labels形式  如果我们不想都在动态配置文件中配置，可以在<code>traefik.toml</code> 里面的<code>providers</code> 下写入如下配置：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[providers]</span><br><span class=\"line\">  [providers.docker]</span><br><span class=\"line\">    # 以下均为可选项</span><br><span class=\"line\">    network = &quot;traefik&quot;</span><br><span class=\"line\">    exposedByDefault = false</span><br><span class=\"line\">    defaultRule = &quot;Host(`&#123;&#123; normalize .Name &#125;&#125;.nefelibata.localhost`)&quot;</span><br><span class=\"line\">    watch = true</span><br><span class=\"line\">  ## ... 其他配置</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n  以上述的egg 服务为例，将上面的动态配置改为以labels的方式的话，会如下：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egg_server:</span><br><span class=\"line\">    build: ./egg_server</span><br><span class=\"line\">    expose:</span><br><span class=\"line\">      - &quot;9000&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - default</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      - &quot;traefik.enable=true&quot;</span><br><span class=\"line\">      - &quot;traefik.http.routes.egg_server.rule=Host(`egg.nefelibata.art`)&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n  这时就不再需要配置<code>services</code>了，只需要把端口暴露给容器即可。  注意，如果在配置中关闭了<code>exposedByDefault</code> 选项，则在其他容器的labels 中如果不定义<code>traefik.enable=true</code>的话，该容器服务会被traefik 忽略</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"开启Dashboard\"><a href=\"#开启Dashboard\" class=\"headerlink\" title=\"开启Dashboard\"></a>开启Dashboard</h3><p>Traefik 带有一个Dashboard，如果你想要开启该服务并为其配置一个域名的话，可以以上述的动态配置方式配置，以配置文件形式为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## traefik.toml</span><br><span class=\"line\">### 其他配置...</span><br><span class=\"line\">[api]</span><br><span class=\"line\">### 其他配置... providers, ping .etc</span><br><span class=\"line\"></span><br><span class=\"line\">## dynamic.toml</span><br><span class=\"line\">[http.routers.api]</span><br><span class=\"line\">    rule = &quot;Host(`traefik.nefelibata.art`)&quot;</span><br><span class=\"line\">    service = &quot;api@internal&quot;</span><br><span class=\"line\">    middlewares = [&quot;dashboard-auth&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">[http.middlewares]</span><br><span class=\"line\">   [http.middlewares.dashboard-auth.basicAuth]</span><br><span class=\"line\">   users = [</span><br><span class=\"line\">     &quot;evont: $xxxxxxxxxxx&quot;</span><br><span class=\"line\">   ]</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>在<code>traefik.toml</code>中开启<code>api</code>选项后(或cli 中<code>--api=true</code>) ，traefik 会有一个特殊的service 叫<code>api@internal</code>，将其配置完成后，一般为了防止别人访问，会进行身份验证，所以加了一个<code>middlewares</code>，使用traefik 提供的<code>basicAuth</code>中间件，使用<code>htpasswd</code> 生成一个用户密钥，注意，比如你的名字叫<code>evont</code>，密码是<code>123456</code>，最终生成的是<code>evont:$apr1$bL6G3wl2$HllalTsbNwJ/zhoBMhx541</code>，打开Dashboard 登录时，填入的密码仍旧是123456而不是密钥串。</p>\n<p>配置成功后重启服务，打开该服务的域名，就可以看到登陆界面</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa7d60a28b6a97~tplv-t2oaga2asx-watermark.image\"></p>\n<p>登陆成功之后就可以进入到管理界面中，看到我们配置的路由规则了。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa7d691b2336f5~tplv-t2oaga2asx-watermark.image\"></p>\n<h3 id=\"静态网站支持\"><a href=\"#静态网站支持\" class=\"headerlink\" title=\"静态网站支持\"></a>静态网站支持</h3><p>Traefik 对静态网站并没有很好的支持（至少我没有找到使用方法），所以我只能搭配Nginx 作为静态网站的服务器，但443和80端口不能同时给两个反向代理工具，所以只能通过Traefik 转发请求给Nginx 的方法，我们通过启动一个Nginx 服务，指定networks让Nginx 和Traefik 处在同一networks 下，然后通过labels 的方式，将限定的域名分配给Nginx 处理即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: nginx</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - default</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./nginx.conf:/etc/nginx/nginx.conf</span><br><span class=\"line\">      - ./html:/usr/share/nginx/html/</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      - traefik.enable=true</span><br><span class=\"line\">      - traefik.http.routers.w3.rule=Host(`www.nefelibata.art`) || Host(`mock.nefelibata.art`)</span><br><span class=\"line\">      - traefik.http.routers.w3.tls=true</span><br><span class=\"line\">      - traefik.http.routers.w3.tls.certresolver=le</span><br><span class=\"line\">      - traefik.http.routers.w3-http.rule=Host(`www.nefelibata.art`) || Host(`mock.nefelibata.art`)</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>在Nginx 的<code>nginx.conf</code> 文件中，依然使用80端口，根据server_name 分配静态网站的目录即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  www.nefelibata.art;</span><br><span class=\"line\">    root /usr/share/nginx/html/www1;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  mock.nefelibata.art;</span><br><span class=\"line\">    root /usr/share/nginx/html/www2;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"https-支持（同时支持http）\"><a href=\"#https-支持（同时支持http）\" class=\"headerlink\" title=\"https 支持（同时支持http）\"></a>https 支持（同时支持http）</h3><p>在前面我们提及到了tls和https，有个<code>certresolver = &quot;le&quot;</code>，那这个<code>le</code> 是哪里来的呢，网站的证书又是怎么生成的呢？</p>\n<p>如果你想要使用<code>Let&#39;s Encrypt</code>自动生成证书，traefik 为我们提供了很方便的方案，我们只需要在静态配置中使用如下配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## traefik.toml</span><br><span class=\"line\">### 其他配置...</span><br><span class=\"line\">[certificatesResolvers.le.acme]</span><br><span class=\"line\">  email = &quot;evontgoh@foxmail.com&quot; # 你自己的邮箱</span><br><span class=\"line\">  storage = &quot;acme.json&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  [certificatesResolvers.le.acme.httpChallenge]</span><br><span class=\"line\">    entryPoint = &quot;http&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>并在docker-compose 中配置<code>volumes</code>映射一个本地<code>acme.json</code>到容器中即可</p>\n<p>如果你有自己的证书，你也可以忽略到上述步骤，在<code>dynamic.toml</code>中配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[tls.certificates]]</span><br><span class=\"line\">  certFile = &quot;/path/to/domain.cert&quot;</span><br><span class=\"line\">  keyFile = &quot;/path/to/domain.key&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这部分可以参考<a href=\"https://link.juejin.cn/?target=https://docs.traefik.io/https/tls/\" title=\"https://docs.traefik.io/https/tls/\">traefik 的tls 配置</a></p>\n<h3 id=\"版本坑\"><a href=\"#版本坑\" class=\"headerlink\" title=\"版本坑\"></a>版本坑</h3><p>刚开始配置的时候，网上多数教程都还是基于v1，于是一直配置不成功，后来发现是因为v1 和v2版本差异过大，配置项都不相同，甚至连<a href=\"https://link.juejin.cn/?target=https://docs.traefik.cn/\" title=\"https://docs.traefik.cn/\">traefik 中文文档</a> 都还是基于v1的配置，比如在定义路由规则时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## v1 规则如下：</span><br><span class=\"line\">[frontends] ## 规定前端进入规则</span><br><span class=\"line\">   [frontends.frontend1]</span><br><span class=\"line\">   backend = &quot;backend1&quot; # 指定后端服务</span><br><span class=\"line\">   [frontends.frontend1.routes]  ## 定义路由</span><br><span class=\"line\">      [frontends.frontend1.routes.route0]</span><br><span class=\"line\">        rule = &quot;Host:test.localhost&quot;  ## 注意，这里写法也变了</span><br><span class=\"line\">[backends] ## 定义后端服务</span><br><span class=\"line\">  [backends.backend1]</span><br><span class=\"line\">    [backends.backend1.servers.server0]</span><br><span class=\"line\">        url = &quot;http://xx.xx.xx.xx:80&quot;</span><br><span class=\"line\">  </span><br><span class=\"line\">## v2 规则弃用了frontend &amp; backend </span><br><span class=\"line\">[http.routers] ## 用routers 规定路由规则</span><br><span class=\"line\">  [http.routers.router0]</span><br><span class=\"line\">    rule = &quot;Host(`test.localhost`)&quot; ## 写法变了</span><br><span class=\"line\">    service = &quot;my-service&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[http.services]</span><br><span class=\"line\">  [[http.services.my-service.loadBalancer.servers]]</span><br><span class=\"line\">    url = &quot;http://xx.xx.xx.xx:80&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>同时，以上规则在v1 时是定义在<code>[file]</code> 字段下的，在v2 时，则是在<code>[providers]</code> 下的<code>[providers.file]</code> 下定义的且变成了独立的动态配置文件</p>\n<p>关于这方面，我建议阅读<a href=\"https://link.juejin.cn/?target=https://docs.traefik.io/migration/v1-to-v2/\" title=\"https://docs.traefik.io/migration/v1-to-v2/\">官方版本迁移文档</a>，并且以官方文档为基准（虽然也写得比较松散，也对英语差的人不是很友好）。</p>\n<hr>\n<h2 id=\"Drone-CI\"><a href=\"#Drone-CI\" class=\"headerlink\" title=\"Drone CI\"></a>Drone CI</h2><p>以前一直用Jenkins 这一业界标准的CI 工具，但是一直觉得因为功能太丰富而稍显笨重，而Drone 对Docker、K8s 这些容器环境又有优化，也足够轻便和灵活，如果你在两者中不知如何挑选可以看看<a href=\"https://link.juejin.cn/?target=https://blog.51cto.com/12462495/2108263\" title=\"https://blog.51cto.com/12462495/2108263\">这篇文章</a></p>\n<h3 id=\"OAuth\"><a href=\"#OAuth\" class=\"headerlink\" title=\"OAuth\"></a>OAuth</h3><p>首先，Drone 只支持Git，以Github 为例，为了拉取代码，你需要先在Github 的<a href=\"https://link.juejin.cn/?target=https://github.com/settings/developers\" title=\"https://github.com/settings/developers\">Developer settings</a>中（你可以用其他的git 仓）新建一个OAuth 应用，填入你的Drone 服务的域名，注意 callback URL 需要填login</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa88d4263a2d3a~tplv-t2oaga2asx-watermark.image\"></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>依然是基于服务器所有服务都在Docker 里的理念，在<code>docker-compose.yml</code>中新建Drone 服务，很多教程会配置drone-runner 代理客户端(agents) ，但它不是必须的，实际上你可以完全单独使用drone-server 完成服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  drone-server:</span><br><span class=\"line\">    image: drone/drone:latest</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      - traefik.http.routers.drone.rule=Host(`ci.nefelibata.art`)</span><br><span class=\"line\">      - traefik.enable=true</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class=\"line\">      - /etc/docker/:/etc/docker</span><br><span class=\"line\">      - ./drone:/var/lib/drone/ # 注意设置这一目录，用于放置sqlite文件，如果用mysql 或其他数据库，酌情处理</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - default</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - DRONE_OPEN=TRUE    </span><br><span class=\"line\">      - DRONE_ADMIN=xxx</span><br><span class=\"line\">      - DRONE_USER_CREATE=username:xxx,admin:true</span><br><span class=\"line\">      - DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite # 指向该目录</span><br><span class=\"line\">      - DRONE_DATABASE_DRIVER=sqlite3 # 数据库引擎</span><br><span class=\"line\">      - DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET&#125;</span><br><span class=\"line\">      - DRONE_RPC_PROTO=$&#123;DRONE_RPC_PROTO&#125;</span><br><span class=\"line\">      - DRONE_AGENTS_DISABLED=true </span><br><span class=\"line\">      - DRONE_GITHUB_CLIENT_ID=$&#123;DRONE_GITHUB_CLIENT_ID&#125;</span><br><span class=\"line\">      - DRONE_GITHUB_CLIENT_SECRET=$&#123;DRONE_GITHUB_CLIENT_SECRET&#125;</span><br><span class=\"line\">      - DRONE_SERVER_HOST=$&#123;DRONE_SERVER_HOST&#125;</span><br><span class=\"line\">      - DRONE_SERVER_PROTO=$&#123;DRONE_SERVER_PROTO&#125;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  default:</span><br><span class=\"line\">    external:</span><br><span class=\"line\">      name: traefik</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>在配置中，为了不希望我们的一些密钥之类的暴露出去，我们可以将这部分变量写入<code>.env</code> 文件中，docker 会读取同目录的这一文件的变量写入上述${xxx} 的变量中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DRONE_GITHUB_CLIENT_ID=xxxxx  # 填入OAuth 生成的client id</span><br><span class=\"line\">DRONE_GITHUB_CLIENT_SECRET=xxxxx # 填入OAuth 生成的client secret</span><br><span class=\"line\">DRONE_RPC_SECRET=xxxxx  # 可以通过openssl rand -hex 16 生成</span><br><span class=\"line\">DRONE_SERVER_HOST=ci.nefelibata.art</span><br><span class=\"line\">DRONE_SERVER_PROTO=http</span><br><span class=\"line\">DRONE_RPC_PROTO=http</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>Drone 的注册默认是公开的，也就是说，所有能够访问你CI地址的人都能注册并使用你的CI 系统，如果你想要限制使用的用户，你可以在environment 中配置<code>- DRONE_USER_FILTER=evont, xxx</code>的方式，添加允许加入的用户（但先前已注册过的用户不会被限制住，真是奇怪的逻辑）。</p>\n<p>启动服务，访问服务域名，跳转到Github 进行登录，如果上一步中限制了登录用户且当前Github 账户名不在允许账户中时，回到服务时会显示登录失败。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa9cfa2a1008ee~tplv-t2oaga2asx-watermark.image\"></p>\n<p>如果成功，就可以看到你的Github 仓库项目列表了</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa9dd031ef70c2~tplv-t2oaga2asx-watermark.image\"></p>\n<p>进入项目并激活该项目，如果登录用户是管理员，会在<code>Project settings</code> 中出现<code>Trusted</code> 选项，否则就只有一个<code>Protected</code> 选项，只有被<code>Trusted</code> 的仓库才能在构建过程中和宿主机进行<code>Volumes</code> 映射。</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/16fa9de780e8e6e9~tplv-t2oaga2asx-watermark.image\"></p>\n<h3 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h3><p>以我的项目为例，我希望提交代码后，Drone 帮我构建镜像然后推送到镜像仓库。</p>\n<p>新建一个项目，完成基础的代码后，在项目根目录下新建一个如下的 <code>.drone.yml</code>，使用Drone 的<a href=\"https://link.juejin.cn/?target=http://plugins.drone.io/drone-plugins/drone-docker/\" title=\"http://plugins.drone.io/drone-plugins/drone-docker/\">Docker</a> 插件，指定了镜像仓库地址和分支。</p>\n<p>由于用的是私有的仓库，需要登录。这时候我们就可以在CI 界面的<code>Secrets</code> 一栏中可以填入一些变量供构建过程使用，就不会暴露在<code>.drone.yml</code> 中了。如前面图中所示，在<code>Secrets</code> 部分添加自定义的<code>DOCKER_USERNAME</code> 和<code>DOCKER_PASSWORD</code>字段，然后在<code>.drone.yml</code> 中通过<code>from_secret</code> 传入<code>username</code> 和<code>password</code>，就不需要写在配置文件中从而不会被其他能够访问到代码的人所看到了。</p>\n<p>另外，由于拉取Docker 镜像的速度很缓慢，这时候你可以通过设置<code>mirror</code> 指定Docker 加速源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">kind: pipeline</span><br><span class=\"line\">type: docker</span><br><span class=\"line\">name: default</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">steps:</span><br><span class=\"line\">  - name: egg-docker</span><br><span class=\"line\">    image: plugins/docker</span><br><span class=\"line\">    settings: </span><br><span class=\"line\">      mirror: https://xxxx(自己的用户id).mirror.aliyuncs.com</span><br><span class=\"line\">      username: </span><br><span class=\"line\">        from_secret: DOCKER_USERNAME</span><br><span class=\"line\">      password:</span><br><span class=\"line\">        from_secret: DOCKER_PASSWORD </span><br><span class=\"line\">      repo: registry.cn-hangzhou.aliyuncs.com/nefelibata/egg</span><br><span class=\"line\">      registry: registry.cn-hangzhou.aliyuncs.com</span><br><span class=\"line\">      auto_tag: true</span><br><span class=\"line\"></span><br><span class=\"line\">trigger:</span><br><span class=\"line\">  branch:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">  event:</span><br><span class=\"line\">    - push</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>确认无误后，提交代码到该项目触发构建。如果Drone 版本大于1.4.0 且没有开启Agent 时，你很可能会和我一样一直卡在Pending 状态，这是由于默认情况下Drone 是多机模式(<code>multi-machine mode</code>)，如果是单个服务器下，你不需要设置代理服务器。网上很多配置是教<code>DRONE_AGENTS_ENABLED=false</code> ，然而实际上应该是通过<code>DRONE_AGENTS_DISABLED=true</code> 来开启单机模式(<code>single-machine mode</code>)</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa8b8043dbe7b1~tplv-t2oaga2asx-watermark.image\"></p>\n<p>设置妥当后并触发构建就可以看到项目出现了构建过程，它会拉取项目代码到一个临时目录中，构建完成后该目录就会被销毁。</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162701085.png\" alt=\"image-20210824162701085\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162728313.png\" alt=\"image-20210824162728313\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824162751745.png\" alt=\"image-20210824162751745\" style=\"zoom:50%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163153943.png\" alt=\"image-20210824163153943\" style=\"zoom:50%;\" />\n\n\n\n<p>构建完成，推送到了镜像仓库，撒花！</p>\n<p>新界面还是挺好看的，撒花</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824163226140.png\" alt=\"image-20210824163226140\" style=\"zoom:50%;\" />\n\n<hr>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><ul>\n<li>networks  不同Docker Compose 之间的容器是互不相同的，每个Docker Compose 都有属于自己的networks，上述的服务是分离在不同的<code>docker-compose.yml</code> 文件中的，为了让它们互联，我们需要让它们处在同一个networks中，这时候可以先通过执行<code>docker network create treaefik</code> 建立一个共享的networks，然后在各个<code>docker-compose.yml</code> 中配置networks 指向这个新建的networks，最后在容器中指定其networks即可  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  services:</span><br><span class=\"line\">     nginx:</span><br><span class=\"line\">      # ...</span><br><span class=\"line\">      image: nginx</span><br><span class=\"line\">      networks:</span><br><span class=\"line\">        - default</span><br><span class=\"line\">      # ...</span><br><span class=\"line\">  networks:</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      external:</span><br><span class=\"line\">        name: treaefik</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n</li>\n<li>其他  docker 相关文章很多，暂时没有在项目中遇到什么这方面的坑，待记录。</li>\n</ul>"},{"title":"flink-sql-streaming平台搭建记录","date":"2021-08-19T00:54:47.000Z","_content":"\n第一步下载flink-sql-streaming代码：\n\n```shell\ngit clone git@github.com:zhp8341/flink-streaming-platform-web.git\n```\n<!--more-->\n\n第二步进行编译\n\n```java\nmvn clean install -T10C\n```\n\n第三步 进入部署包目录\n\n![image-20210819113656910](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819113656910.png)\n\nflink-streaming-platform-web.tar.gz即为可以安装的包\n\n第三步 解压安装包进行安装\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114023990.png\" alt=\"image-20210819114023990\" style=\"zoom:80%;\" />\n\n修改conf/application.properties\n\n指定其中的数据库配置和用户名和密码\n\n![image-20210819114121701](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114121701.png)\n\n见下图出现，则是启动成功：\n\n![image-20210819114229338](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114229338.png)\n\n打开界面地址为：\n\nhttp://10.11.5.11:9084/admin/listPage\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115349257.png\" alt=\"image-20210819115349257\" style=\"zoom:80%;\" />\n\n输入用户名和密码 admin 123456\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115436650.png\" alt=\"image-20210819115436650\" style=\"zoom:80%;\" />\n\n点击系统配置\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115522521.png\" alt=\"image-20210819115522521\" style=\"zoom:80%;\" />\n\n根据界面上需要的配置填入参数。\n\n新建任务开始\n\n选择配置管理=》SQL流任务列表\n\n\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115705031.png\" alt=\"image-20210819115705031\" style=\"zoom:80%;\" />\n\n```\nscp -r  mysql-connector-java-8.0.21.jar  root@cdh2:/opt/cloudera/parcels/FLINK/lib/flink/lib\n\n\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133240273.png\" alt=\"image-20210819133240273\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133306637.png\" alt=\"image-20210819133306637\" style=\"zoom:80%;\" />\n\n```sql\ncreate table flink_test_1 ( \n  id BIGINT,\n  day_time VARCHAR,\n  amnount BIGINT,\n  proctime AS PROCTIME ()\n)\n with ( \n  'connector' = 'kafka',\n  'topic' = 'flink_test',\n  'properties.bootstrap.servers' = '10.11.5.11:9092,10.11.5.12:9092,10.11.5.13:9092', \n  'properties.group.id' = 'flink_gp_test1',\n  'scan.startup.mode' = 'earliest-offset',\n  'format' = 'json',\n  'json.fail-on-missing-field' = 'false',\n  'json.ignore-parse-errors' = 'true',\n  'properties.zookeeper.connect' = '10.11.5.10:2181/kafka'\n );\n\nCREATE TABLE sync_test_1 (\n                   day_time string,\n                   total_gmv bigint,\n                   PRIMARY KEY (day_time) NOT ENFORCED\n ) WITH (\n   'connector' = 'jdbc',\n   'url' = 'jdbc:mysql://10.11.5.10:3306/flink_web?characterEncoding=UTF-8',\n   'table-name' = 'sync_test_1',\n   'driver' = 'com.mysql.cj.jdbc.Driver',\n   'username' = 'root',\n   'password' = 'root'\n );\n\nINSERT INTO sync_test_1 \nSELECT day_time,SUM(amnount) AS total_gmv\nFROM flink_test_1\nGROUP BY day_time;\n```\n\n点击开启配置，再点击提交任务，即可看到任务的状态。\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819125700736.png\" alt=\"image-20210819125700736\" style=\"zoom:80%;\" />\n\n点击日志详情：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133632674.png\" alt=\"image-20210819133632674\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133657807.png\" alt=\"image-20210819133657807\" style=\"zoom:80%;\" />\n\n查看flink集群日志，即可看到yarn上运行的flink任务：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133757431.png\" alt=\"image-20210819133757431\" style=\"zoom:80%;\" />\n\n当dbear链接mysql报Public Key Retrieval is not allowe\n\n解决方法如下allowPublicKeyRetrieval为true即可\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819135150508.png\" alt=\"image-20210819135150508\" style=\"zoom:80%;\" />\n\n执行造数据：\n\n```java\nkafka-console-producer --broker-list cdh2:9092,cdh3:9092,cdh4:9092 --topic flink_test \n{\"day_time\": \"20201009\",\"id\": 7,\"amnount\":20}\n\nkafka-console-consumer --bootstrap-server cdh2:9092 --topic flink_test --from-beginning \n```\n\n查看运行结果：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819142637456.png\" alt=\"image-20210819142637456\" style=\"zoom:80%;\" />\n","source":"_posts/flink-sql-streaming平台搭建记录.md","raw":"---\ntitle: flink-sql-streaming平台搭建记录\ndate: 2021-08-19 08:54:47\ntags:\n- flink\ncategories: \n- bigdata\n---\n\n第一步下载flink-sql-streaming代码：\n\n```shell\ngit clone git@github.com:zhp8341/flink-streaming-platform-web.git\n```\n<!--more-->\n\n第二步进行编译\n\n```java\nmvn clean install -T10C\n```\n\n第三步 进入部署包目录\n\n![image-20210819113656910](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819113656910.png)\n\nflink-streaming-platform-web.tar.gz即为可以安装的包\n\n第三步 解压安装包进行安装\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114023990.png\" alt=\"image-20210819114023990\" style=\"zoom:80%;\" />\n\n修改conf/application.properties\n\n指定其中的数据库配置和用户名和密码\n\n![image-20210819114121701](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114121701.png)\n\n见下图出现，则是启动成功：\n\n![image-20210819114229338](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114229338.png)\n\n打开界面地址为：\n\nhttp://10.11.5.11:9084/admin/listPage\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115349257.png\" alt=\"image-20210819115349257\" style=\"zoom:80%;\" />\n\n输入用户名和密码 admin 123456\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115436650.png\" alt=\"image-20210819115436650\" style=\"zoom:80%;\" />\n\n点击系统配置\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115522521.png\" alt=\"image-20210819115522521\" style=\"zoom:80%;\" />\n\n根据界面上需要的配置填入参数。\n\n新建任务开始\n\n选择配置管理=》SQL流任务列表\n\n\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115705031.png\" alt=\"image-20210819115705031\" style=\"zoom:80%;\" />\n\n```\nscp -r  mysql-connector-java-8.0.21.jar  root@cdh2:/opt/cloudera/parcels/FLINK/lib/flink/lib\n\n\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133240273.png\" alt=\"image-20210819133240273\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133306637.png\" alt=\"image-20210819133306637\" style=\"zoom:80%;\" />\n\n```sql\ncreate table flink_test_1 ( \n  id BIGINT,\n  day_time VARCHAR,\n  amnount BIGINT,\n  proctime AS PROCTIME ()\n)\n with ( \n  'connector' = 'kafka',\n  'topic' = 'flink_test',\n  'properties.bootstrap.servers' = '10.11.5.11:9092,10.11.5.12:9092,10.11.5.13:9092', \n  'properties.group.id' = 'flink_gp_test1',\n  'scan.startup.mode' = 'earliest-offset',\n  'format' = 'json',\n  'json.fail-on-missing-field' = 'false',\n  'json.ignore-parse-errors' = 'true',\n  'properties.zookeeper.connect' = '10.11.5.10:2181/kafka'\n );\n\nCREATE TABLE sync_test_1 (\n                   day_time string,\n                   total_gmv bigint,\n                   PRIMARY KEY (day_time) NOT ENFORCED\n ) WITH (\n   'connector' = 'jdbc',\n   'url' = 'jdbc:mysql://10.11.5.10:3306/flink_web?characterEncoding=UTF-8',\n   'table-name' = 'sync_test_1',\n   'driver' = 'com.mysql.cj.jdbc.Driver',\n   'username' = 'root',\n   'password' = 'root'\n );\n\nINSERT INTO sync_test_1 \nSELECT day_time,SUM(amnount) AS total_gmv\nFROM flink_test_1\nGROUP BY day_time;\n```\n\n点击开启配置，再点击提交任务，即可看到任务的状态。\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819125700736.png\" alt=\"image-20210819125700736\" style=\"zoom:80%;\" />\n\n点击日志详情：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133632674.png\" alt=\"image-20210819133632674\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133657807.png\" alt=\"image-20210819133657807\" style=\"zoom:80%;\" />\n\n查看flink集群日志，即可看到yarn上运行的flink任务：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133757431.png\" alt=\"image-20210819133757431\" style=\"zoom:80%;\" />\n\n当dbear链接mysql报Public Key Retrieval is not allowe\n\n解决方法如下allowPublicKeyRetrieval为true即可\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819135150508.png\" alt=\"image-20210819135150508\" style=\"zoom:80%;\" />\n\n执行造数据：\n\n```java\nkafka-console-producer --broker-list cdh2:9092,cdh3:9092,cdh4:9092 --topic flink_test \n{\"day_time\": \"20201009\",\"id\": 7,\"amnount\":20}\n\nkafka-console-consumer --bootstrap-server cdh2:9092 --topic flink_test --from-beginning \n```\n\n查看运行结果：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819142637456.png\" alt=\"image-20210819142637456\" style=\"zoom:80%;\" />\n","slug":"flink-sql-streaming平台搭建记录","published":1,"updated":"2021-08-23T00:38:38.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6oh000dcmv99jhpaz6u","content":"<p>第一步下载flink-sql-streaming代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:zhp8341/flink-streaming-platform-web.git</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>第二步进行编译</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install -T10C</span><br></pre></td></tr></table></figure>\n\n<p>第三步 进入部署包目录</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819113656910.png\" alt=\"image-20210819113656910\"></p>\n<p>flink-streaming-platform-web.tar.gz即为可以安装的包</p>\n<p>第三步 解压安装包进行安装</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114023990.png\" alt=\"image-20210819114023990\" style=\"zoom:80%;\" />\n\n<p>修改conf/application.properties</p>\n<p>指定其中的数据库配置和用户名和密码</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114121701.png\" alt=\"image-20210819114121701\"></p>\n<p>见下图出现，则是启动成功：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114229338.png\" alt=\"image-20210819114229338\"></p>\n<p>打开界面地址为：</p>\n<p><a href=\"http://10.11.5.11:9084/admin/listPage\">http://10.11.5.11:9084/admin/listPage</a></p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115349257.png\" alt=\"image-20210819115349257\" style=\"zoom:80%;\" />\n\n<p>输入用户名和密码 admin 123456</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115436650.png\" alt=\"image-20210819115436650\" style=\"zoom:80%;\" />\n\n<p>点击系统配置</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115522521.png\" alt=\"image-20210819115522521\" style=\"zoom:80%;\" />\n\n<p>根据界面上需要的配置填入参数。</p>\n<p>新建任务开始</p>\n<p>选择配置管理=》SQL流任务列表</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115705031.png\" alt=\"image-20210819115705031\" style=\"zoom:80%;\" />\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r  mysql-connector-java-8.0.21.jar  root@cdh2:/opt/cloudera/parcels/FLINK/lib/flink/lib</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133240273.png\" alt=\"image-20210819133240273\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133306637.png\" alt=\"image-20210819133306637\" style=\"zoom:80%;\" />\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> flink_test_1 ( </span><br><span class=\"line\">  id <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">  day_time <span class=\"type\">VARCHAR</span>,</span><br><span class=\"line\">  amnount <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">  proctime <span class=\"keyword\">AS</span> PROCTIME ()</span><br><span class=\"line\">)</span><br><span class=\"line\"> <span class=\"keyword\">with</span> ( </span><br><span class=\"line\">  <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;kafka&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;topic&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;flink_test&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;properties.bootstrap.servers&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;10.11.5.11:9092,10.11.5.12:9092,10.11.5.13:9092&#x27;</span>, </span><br><span class=\"line\">  <span class=\"string\">&#x27;properties.group.id&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;flink_gp_test1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;scan.startup.mode&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;earliest-offset&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;format&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;json.fail-on-missing-field&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;false&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;json.ignore-parse-errors&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;true&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;properties.zookeeper.connect&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;10.11.5.10:2181/kafka&#x27;</span></span><br><span class=\"line\"> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sync_test_1 (</span><br><span class=\"line\">                   day_time string,</span><br><span class=\"line\">                   total_gmv <span class=\"type\">bigint</span>,</span><br><span class=\"line\">                   <span class=\"keyword\">PRIMARY</span> KEY (day_time) <span class=\"keyword\">NOT</span> ENFORCED</span><br><span class=\"line\"> ) <span class=\"keyword\">WITH</span> (</span><br><span class=\"line\">   <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;jdbc&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;url&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;jdbc:mysql://10.11.5.10:3306/flink_web?characterEncoding=UTF-8&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;table-name&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;sync_test_1&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;driver&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;com.mysql.cj.jdbc.Driver&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;username&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;password&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> sync_test_1 </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> day_time,<span class=\"built_in\">SUM</span>(amnount) <span class=\"keyword\">AS</span> total_gmv</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> flink_test_1</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> day_time;</span><br></pre></td></tr></table></figure>\n\n<p>点击开启配置，再点击提交任务，即可看到任务的状态。</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819125700736.png\" alt=\"image-20210819125700736\" style=\"zoom:80%;\" />\n\n<p>点击日志详情：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133632674.png\" alt=\"image-20210819133632674\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133657807.png\" alt=\"image-20210819133657807\" style=\"zoom:80%;\" />\n\n<p>查看flink集群日志，即可看到yarn上运行的flink任务：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133757431.png\" alt=\"image-20210819133757431\" style=\"zoom:80%;\" />\n\n<p>当dbear链接mysql报Public Key Retrieval is not allowe</p>\n<p>解决方法如下allowPublicKeyRetrieval为true即可</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819135150508.png\" alt=\"image-20210819135150508\" style=\"zoom:80%;\" />\n\n<p>执行造数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-producer --broker-list cdh2:<span class=\"number\">9092</span>,cdh3:<span class=\"number\">9092</span>,cdh4:<span class=\"number\">9092</span> --topic flink_test </span><br><span class=\"line\">&#123;<span class=\"string\">&quot;day_time&quot;</span>: <span class=\"string\">&quot;20201009&quot;</span>,<span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">7</span>,<span class=\"string\">&quot;amnount&quot;</span>:<span class=\"number\">20</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">kafka-console-consumer --bootstrap-server cdh2:<span class=\"number\">9092</span> --topic flink_test --from-beginning </span><br></pre></td></tr></table></figure>\n\n<p>查看运行结果：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819142637456.png\" alt=\"image-20210819142637456\" style=\"zoom:80%;\" />\n","site":{"data":{}},"excerpt":"<p>第一步下载flink-sql-streaming代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:zhp8341/flink-streaming-platform-web.git</span><br></pre></td></tr></table></figure>","more":"<p>第二步进行编译</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install -T10C</span><br></pre></td></tr></table></figure>\n\n<p>第三步 进入部署包目录</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819113656910.png\" alt=\"image-20210819113656910\"></p>\n<p>flink-streaming-platform-web.tar.gz即为可以安装的包</p>\n<p>第三步 解压安装包进行安装</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114023990.png\" alt=\"image-20210819114023990\" style=\"zoom:80%;\" />\n\n<p>修改conf/application.properties</p>\n<p>指定其中的数据库配置和用户名和密码</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114121701.png\" alt=\"image-20210819114121701\"></p>\n<p>见下图出现，则是启动成功：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819114229338.png\" alt=\"image-20210819114229338\"></p>\n<p>打开界面地址为：</p>\n<p><a href=\"http://10.11.5.11:9084/admin/listPage\">http://10.11.5.11:9084/admin/listPage</a></p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115349257.png\" alt=\"image-20210819115349257\" style=\"zoom:80%;\" />\n\n<p>输入用户名和密码 admin 123456</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115436650.png\" alt=\"image-20210819115436650\" style=\"zoom:80%;\" />\n\n<p>点击系统配置</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115522521.png\" alt=\"image-20210819115522521\" style=\"zoom:80%;\" />\n\n<p>根据界面上需要的配置填入参数。</p>\n<p>新建任务开始</p>\n<p>选择配置管理=》SQL流任务列表</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819115705031.png\" alt=\"image-20210819115705031\" style=\"zoom:80%;\" />\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r  mysql-connector-java-8.0.21.jar  root@cdh2:/opt/cloudera/parcels/FLINK/lib/flink/lib</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133240273.png\" alt=\"image-20210819133240273\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133306637.png\" alt=\"image-20210819133306637\" style=\"zoom:80%;\" />\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> flink_test_1 ( </span><br><span class=\"line\">  id <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">  day_time <span class=\"type\">VARCHAR</span>,</span><br><span class=\"line\">  amnount <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">  proctime <span class=\"keyword\">AS</span> PROCTIME ()</span><br><span class=\"line\">)</span><br><span class=\"line\"> <span class=\"keyword\">with</span> ( </span><br><span class=\"line\">  <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;kafka&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;topic&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;flink_test&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;properties.bootstrap.servers&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;10.11.5.11:9092,10.11.5.12:9092,10.11.5.13:9092&#x27;</span>, </span><br><span class=\"line\">  <span class=\"string\">&#x27;properties.group.id&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;flink_gp_test1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;scan.startup.mode&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;earliest-offset&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;format&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;json.fail-on-missing-field&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;false&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;json.ignore-parse-errors&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;true&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;properties.zookeeper.connect&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;10.11.5.10:2181/kafka&#x27;</span></span><br><span class=\"line\"> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sync_test_1 (</span><br><span class=\"line\">                   day_time string,</span><br><span class=\"line\">                   total_gmv <span class=\"type\">bigint</span>,</span><br><span class=\"line\">                   <span class=\"keyword\">PRIMARY</span> KEY (day_time) <span class=\"keyword\">NOT</span> ENFORCED</span><br><span class=\"line\"> ) <span class=\"keyword\">WITH</span> (</span><br><span class=\"line\">   <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;jdbc&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;url&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;jdbc:mysql://10.11.5.10:3306/flink_web?characterEncoding=UTF-8&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;table-name&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;sync_test_1&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;driver&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;com.mysql.cj.jdbc.Driver&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;username&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;password&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> sync_test_1 </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> day_time,<span class=\"built_in\">SUM</span>(amnount) <span class=\"keyword\">AS</span> total_gmv</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> flink_test_1</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> day_time;</span><br></pre></td></tr></table></figure>\n\n<p>点击开启配置，再点击提交任务，即可看到任务的状态。</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819125700736.png\" alt=\"image-20210819125700736\" style=\"zoom:80%;\" />\n\n<p>点击日志详情：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133632674.png\" alt=\"image-20210819133632674\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133657807.png\" alt=\"image-20210819133657807\" style=\"zoom:80%;\" />\n\n<p>查看flink集群日志，即可看到yarn上运行的flink任务：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819133757431.png\" alt=\"image-20210819133757431\" style=\"zoom:80%;\" />\n\n<p>当dbear链接mysql报Public Key Retrieval is not allowe</p>\n<p>解决方法如下allowPublicKeyRetrieval为true即可</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819135150508.png\" alt=\"image-20210819135150508\" style=\"zoom:80%;\" />\n\n<p>执行造数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-producer --broker-list cdh2:<span class=\"number\">9092</span>,cdh3:<span class=\"number\">9092</span>,cdh4:<span class=\"number\">9092</span> --topic flink_test </span><br><span class=\"line\">&#123;<span class=\"string\">&quot;day_time&quot;</span>: <span class=\"string\">&quot;20201009&quot;</span>,<span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">7</span>,<span class=\"string\">&quot;amnount&quot;</span>:<span class=\"number\">20</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">kafka-console-consumer --bootstrap-server cdh2:<span class=\"number\">9092</span> --topic flink_test --from-beginning </span><br></pre></td></tr></table></figure>\n\n<p>查看运行结果：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210819142637456.png\" alt=\"image-20210819142637456\" style=\"zoom:80%;\" />"},{"title":"flink1.12编译失败记录","date":"2021-08-19T00:49:13.000Z","_content":"\n编译flink1.12.5命令：\n\n```shell\n mvn  clean install -DskipTests -Pvendor-repos -Dhadoop.version=3.0.0-cdh6.0.1 -Dscala-2.11 -Drat.skip=true -T10C\n```\n\n出现以下报错\n<!--more-->\n\n```log\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project metastore-tools-common: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile failed: \nPlugin org.apache.maven.plugins:maven-compiler-plugin:3.8.1 or one of its dependencies could not be resolved:\nCould not transfer artifact com.google.errorprone:javac:jar:9+181-r4173-1 from/to alimaven (http://maven.aliyun.com/nexus/content/repositories/central/): Authorization failed for http://maven.aliyun.com/nexus/content/repositories/central/com/google/errorprone/javac/9+181-r4173-1/javac-9+181-r4173-1.jar 403 Forbidden -> [Help 1]\n```\n\n**整个意思是javac-9+181-r4173-1.jar因为阿里云的maven仓库的403权限问题无法下载\n下面开始排查com.google.errorprone是哪个pom.xml写入的依赖需求**\n\n针对这个问题解决方案就是，手动安装这个jar包。\n\n```shell\nmvn install:install-file -DgroupId=com.google.errorprone -DartifactId=javac -Dversion=9+181-r4173-1 -Dpackaging=jar -Dfile=C:\\Users\\hxf\\Downloads\\javac-9+181-r4173-1.jar\n```\n\n参考：\n\n[https://blog.csdn.net/figosoar/article/details/119037521](https://blog.csdn.net/figosoar/article/details/119037521)\n\n","source":"_posts/flink1-12编译失败记录.md","raw":"---\ntitle: flink1.12编译失败记录\ndate: 2021-08-19 08:49:13\ntags:\n---\n\n编译flink1.12.5命令：\n\n```shell\n mvn  clean install -DskipTests -Pvendor-repos -Dhadoop.version=3.0.0-cdh6.0.1 -Dscala-2.11 -Drat.skip=true -T10C\n```\n\n出现以下报错\n<!--more-->\n\n```log\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project metastore-tools-common: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile failed: \nPlugin org.apache.maven.plugins:maven-compiler-plugin:3.8.1 or one of its dependencies could not be resolved:\nCould not transfer artifact com.google.errorprone:javac:jar:9+181-r4173-1 from/to alimaven (http://maven.aliyun.com/nexus/content/repositories/central/): Authorization failed for http://maven.aliyun.com/nexus/content/repositories/central/com/google/errorprone/javac/9+181-r4173-1/javac-9+181-r4173-1.jar 403 Forbidden -> [Help 1]\n```\n\n**整个意思是javac-9+181-r4173-1.jar因为阿里云的maven仓库的403权限问题无法下载\n下面开始排查com.google.errorprone是哪个pom.xml写入的依赖需求**\n\n针对这个问题解决方案就是，手动安装这个jar包。\n\n```shell\nmvn install:install-file -DgroupId=com.google.errorprone -DartifactId=javac -Dversion=9+181-r4173-1 -Dpackaging=jar -Dfile=C:\\Users\\hxf\\Downloads\\javac-9+181-r4173-1.jar\n```\n\n参考：\n\n[https://blog.csdn.net/figosoar/article/details/119037521](https://blog.csdn.net/figosoar/article/details/119037521)\n\n","slug":"flink1-12编译失败记录","published":1,"updated":"2021-08-23T00:38:38.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6oj000icmv9faotbpa7","content":"<p>编译flink1.12.5命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn  clean install -DskipTests -Pvendor-repos -Dhadoop.version=3.0.0-cdh6.0.1 -Dscala-2.11 -Drat.skip=true -T10C</span><br></pre></td></tr></table></figure>\n\n<p>出现以下报错</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project metastore-tools-common: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile failed: </span><br><span class=\"line\">Plugin org.apache.maven.plugins:maven-compiler-plugin:3.8.1 or one of its dependencies could not be resolved:</span><br><span class=\"line\">Could not transfer artifact com.google.errorprone:javac:jar:9+181-r4173-1 from/to alimaven (http://maven.aliyun.com/nexus/content/repositories/central/): Authorization failed for http://maven.aliyun.com/nexus/content/repositories/central/com/google/errorprone/javac/9+181-r4173-1/javac-9+181-r4173-1.jar 403 Forbidden -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>整个意思是javac-9+181-r4173-1.jar因为阿里云的maven仓库的403权限问题无法下载<br>下面开始排查com.google.errorprone是哪个pom.xml写入的依赖需求</strong></p>\n<p>针对这个问题解决方案就是，手动安装这个jar包。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -DgroupId=com.google.errorprone -DartifactId=javac -Dversion=9+181-r4173-1 -Dpackaging=jar -Dfile=C:\\Users\\hxf\\Downloads\\javac-9+181-r4173-1.jar</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/figosoar/article/details/119037521\">https://blog.csdn.net/figosoar/article/details/119037521</a></p>\n","site":{"data":{}},"excerpt":"<p>编译flink1.12.5命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn  clean install -DskipTests -Pvendor-repos -Dhadoop.version=3.0.0-cdh6.0.1 -Dscala-2.11 -Drat.skip=true -T10C</span><br></pre></td></tr></table></figure>\n\n<p>出现以下报错</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project metastore-tools-common: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile failed: </span><br><span class=\"line\">Plugin org.apache.maven.plugins:maven-compiler-plugin:3.8.1 or one of its dependencies could not be resolved:</span><br><span class=\"line\">Could not transfer artifact com.google.errorprone:javac:jar:9+181-r4173-1 from/to alimaven (http://maven.aliyun.com/nexus/content/repositories/central/): Authorization failed for http://maven.aliyun.com/nexus/content/repositories/central/com/google/errorprone/javac/9+181-r4173-1/javac-9+181-r4173-1.jar 403 Forbidden -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>整个意思是javac-9+181-r4173-1.jar因为阿里云的maven仓库的403权限问题无法下载<br>下面开始排查com.google.errorprone是哪个pom.xml写入的依赖需求</strong></p>\n<p>针对这个问题解决方案就是，手动安装这个jar包。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -DgroupId=com.google.errorprone -DartifactId=javac -Dversion=9+181-r4173-1 -Dpackaging=jar -Dfile=C:\\Users\\hxf\\Downloads\\javac-9+181-r4173-1.jar</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/figosoar/article/details/119037521\">https://blog.csdn.net/figosoar/article/details/119037521</a></p>"},{"title":"git commit规范化","date":"2021-08-24T00:36:47.000Z","_content":"\n## 用什么规范？\n\n![img](https://gitee.com/hxf88/imgrepo/raw/master/img/24563685-8376a2d22823fb1e.jpg)\n\n受到市面上主流的`约定式提交规范`和`Angular提交准则`的启发，结合前端团队的实际情况（虽然可以通过配置`commitizen`工具来进行强制检查约束，但涉及项目太多，操作较为复杂，且涉及到原生项目和老项目时，需采用别的解决方案，故建议团队采用自觉遵守规范的方法来实现），暂拟定如下格式的 commit 规范\n\n```\n// <类型>(影响的作用域): <简要描述>\n<type>(<scope>): <subject>\n复制代码\n```\n\n## type 类型\n\ntype 类型只能从以下 7 种类型中，结合实际情况选取\n\n<!--more-->\n\n#### 主要 type\n\n-   **feat: 增加新功能**\n-   **fix: 修复 bug**\n\n#### 特殊 type\n\n-   **dosc: 只改动了文档/注释相关的内容**\n-   **style: 不影响代码运行和含义的改动，例如改变缩进，增删分号**\n-   **chore: 构造工具或者外部依赖的改动，例如 webpack,npm,yarn**\n-   **refactor: 代码重构（即不是新增功能，也不是修改 bug 的代码变动）**\n\n#### 暂不使用的 type\n\n-   **test: 添加测试或者修改现有测试**\n\n## scope\n\nscope 也为必填项，用于描述改动的范围，例如：路由/组件/工具类/模块。\n\n## subject\n\n本次提交的简短描述，以动词开头\n\n## 其他注意事项\n\n-   建议一次提交只涉及一个模块，如果实在涉及多个模块，建议拆分成多次提交或者编写多行符合上述规范的 message\n-   git commit -m 'XXXX' 为编写一行 message 的命令\n-   git commit 可以编写多行 message\n-   可以为 git 设置 commit 模板，时刻提醒自己\n\n### 设置 git commit 模板方法\n\n1.  修改~/.gitconfig 或者 项目里.git/.gitconfig,添加\n\n```\n[commit]\ntemplate = ~/.gitmessage\n复制代码\n```\n\n2.  新建~/.gitmessage 内容可以如下:\n\n```\n# head: <type>(<scope>): <subject>\n# - type: feat(新功能), fix(修复bug), docs, style, refactor, test, chore\n# - scope: 本次提交影响的范围，例如：路由/组件/工具类/模块\n# - subject: 本次提交的简短描述，动词开头\n#\n# 建议一次提交只涉及一个模块，如果实在涉及多个模块，建议拆分成多次提交或者编写多行符合上述规范的message\n复制代码\n```\n\n### demo\n\n```\nfeat(baseURL.js): 增加演示环境配置\n\nfix(request.js): 屏蔽公参中的token\n\nfeat(购物车模块): 增加清空购物车功能\n复制代码\n```\n\n```\nnpm i husky -D\nnpm i validate-commit-msg -D\n```\n\n```\n{\n  \"types\": [\"feat\", \"fix\", \"docs\", \"style\", \"refactor\", \"test\", \"chore\", \"revert\"],\n  \"scope\": {\n    \"required\": false,\n    \"allowed\": [\"*\"],\n    \"validate\": false,\n    \"multiple\": false\n  },\n  \"warnOnFail\": false,\n  \"maxSubjectLength\": 100,\n  \"subjectPattern\": \".+\",\n  \"subjectPatternErrorMsg\": \"subject does not match subject pattern!\",\n  \"helpMessage\": \"\",\n  \"autoFix\": false\n}\n\n```\n\n```\nyarn add validate-git-commit-msg -D\n```\n\n\n\n```\n  \"commitmsg\": \"validate-git-commit-msg\"\n```\n\n上面方式都不好使：\n\n## Installation\n\n```\n$ npm install validate-commit-message\n```\n\n## Usage\n\nYou can activate the hook from the command line of your project.\n\n```\n$ node ./node_modules/.bin/validate-commit-msg\n```\n\nA more consistent way is to add a script in your `package.json`.\n\n```\n\"scripts\": {\n  \"init\": \"validate-commit-msg\"\n}\n```\n\nThen execute `$ npm run init`.\n\n-   Git代码提交规范\n\n-   前言\n-   一、安装插件\n-   二、插件使用\n-   三、插件讲解\n\n-   1、Header\n\n-   1.1 type\n-   1.2 scope\n-   1.3 subject\n\n-   2、Body\n-   3、Footer\n\n-   四、git hooks校验\n\n## 前言\n\n**为什么要注重代码提交规范？**\n\n在团队协作开发时，每个人提交代码时都会写 commit message。  \n每个人都有自己的书写风格，翻看我们组的git log, 可以说是五花八门，十分不利于阅读和维护。  \n一般来说，大厂都有一套的自己的提交规范，尤其是在一些大型开源项目中，commit message 都是十分一致的。  \n因此，我们需要制定统一标准，促使团队形成一致的代码提交风格，更好的提高工作效率，成为一名有追求的工程师。\n\n一般项目开发都是多分支共存，master、develop、feature、hotfix、release等分支，如下图所示，在这么多分支中，我们会有一个稳定的master分支，但是我们需要将分支代码进行merge。存在规范的commit message可以帮助我们很轻松的合并代码以及发现问题。例如使用Jenkins自动化部署时，我们可以根据jenkins拉取commit message中的Closes issues验证BUG等。  \n[![后端必备的 Git Commit Message规范指南-直接食用_第1张图片](https://img.it610.com/image/info8/4dc347e319ee441e993511771408bb39.jpg)](https://img.it610.com/image/info8/4dc347e319ee441e993511771408bb39.jpg)  \n下面详细讲解Idea中如果进行规范的提交Git Commit Message。\n\n## 一、安装插件\n\n在开发工具idea中安装**Git Commit Message Plugins**插件\n\n## 二、插件使用\n\n在Commit代码处，选择使用**Git Commit Message Plugins**插件，如下图所示，填写项详细含义请查看《插件详解》总共分为3大部分，Header， Body，Footer详细讲解请看下节。  \n[![后端必备的 Git Commit Message规范指南-直接食用_第3张图片](https://gitee.com/hxf88/imgrepo/raw/master/img/23bd329da5364bce991a3a8f6e5be62a.jpg)]\n\n## 三、插件讲解\n\n主要分为下面三个部分： Header， Body，Footer。\n\n```\n(): \n// 空一行\n\n// 空一行\n```\n\n下面详细解释下个个部分的含义。\n\n### 1、Header\n\nHeader的部分只有一行,包括三个字段: type(必需), scope(可选), subject(必需)\n\n对应到idea插件上图的配置分别为 Header部分的:\n\ntype(必需)\n\nType of change\n\ncommit类别\n\n**scope(可选)**\n\n**Scope of this change**\n\ncommint影响的范围\n\nsubject(必需)\\*\\*\\*\\*\n\n**Short description**\n\n简短的描述\n\n#### 1.1 type\n\ntype用于说明 commit 的类别，只允许使用下面标识\n\n-   feat：新功能（feature）\n-   fix：修补bug\n-   docs：文档（documentation）\n-   style： 格式（不影响代码运行的变动,空格,格式化,等等）\n-   refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n-   perf: 性能 (提高代码性能的改变)\n-   test：增加测试或者修改测试\n-   build: 影响构建系统或外部依赖项的更改(maven,gradle,npm 等等)\n-   ci: 对CI配置文件和脚本的更改\n-   chore：对非 src 和 test 目录的修改\n-   revert: Revert a commit\n\n#### 1.2 scope\n\n`scope`用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n\n#### 1.3 subject\n\n`subject`是 commit 目的的简短描述，不超过50个字符。\n\n```\n以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n第一个字母小写\n结尾不加句号（.）\n```\n\n### 2、Body\n\nBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。\n\n```\n如有必要，更详细的说明文本。包装它\n大概72个字左右。\n\n后面的段落在空行之后。\n\n-要点也可以\n-使用悬挂缩进\n```\n\n有一个注意点。\n\n（1）应该说明代码变动的动机，以及与以前行为的对比。\n\n### 3、Footer\n\nFooter 部分只用于两种情况。\n\n**（1）不兼容变动**\n\n如果当前代码与上一个版本不兼容，则 Footer 部分以`BREAKING CHANGE`开头，后面是对变动的描述、以及变动理由和迁移方法。\n\n**（2）关闭 Issue**\n\n如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。\n\n```\nCloses #234\n```\n\n也可以一次关闭多个 issue 。\n\n```\nCloses #123, #245, #992\n```\n\n最后, 一个完整的commit message示例可能如下:  \n[![后端必备的 Git Commit Message规范指南-直接食用_第4张图片](https://gitee.com/hxf88/imgrepo/raw/master/img/a0dcaf9b031a49b6aec8b32b8c8f0dba.jpg)](https://img.it610.com/image/info8/a0dcaf9b031a49b6aec8b32b8c8f0dba.jpg)\n\n## 四、git hooks校验\n\n由于使用idea插件`只防君子，不防小人`。**Git Commit Message Plugins**只能起到模板的作用，开发人员如果误操作或者忘记使用任提交不规范的Commit Message。因此使用git hooks强制开发人员使用以上格式提交。具体操作如下：\n\n在项目目录`.git/hooks`目录下有很多钩子，我们可以根据需要自定义不同的内容，这里我们只需要修改`commit-msg`即可。\n\n首先将`commit-msg.sample` 改为 `commit-msg`，也就是去掉后缀。将里面的内容修改为下面内容。\n\n```\n#!/bin/sh\n\nMSG=`awk '{printf(\"%s\",$0)}' $1`\nif [[ $MSG =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)\\(.*\\):.*$ ]]\nthen\necho -e \"\\033[32m commit success! \\033[0m\"\nelse\n    echo -e \"\\033[31m Error: the commit message is irregular \\033[m\"\necho -e \"\\033[31m Error: type must be one of [feat,fix,docs,style,refactor,perf,test,build,ci,chore,revert] \\033[m\"\n    echo -e \"\\033[31m eg: feat(user): add the user login \\033[m\"\nexit 1\nfi\n```\n\n","source":"_posts/git-commit规范化.md","raw":"---\n\ntitle: git commit规范化\ndate: 2021-08-24 08:36:47\ntags:\n- git\ncategories: \n- tools\n---\n\n## 用什么规范？\n\n![img](https://gitee.com/hxf88/imgrepo/raw/master/img/24563685-8376a2d22823fb1e.jpg)\n\n受到市面上主流的`约定式提交规范`和`Angular提交准则`的启发，结合前端团队的实际情况（虽然可以通过配置`commitizen`工具来进行强制检查约束，但涉及项目太多，操作较为复杂，且涉及到原生项目和老项目时，需采用别的解决方案，故建议团队采用自觉遵守规范的方法来实现），暂拟定如下格式的 commit 规范\n\n```\n// <类型>(影响的作用域): <简要描述>\n<type>(<scope>): <subject>\n复制代码\n```\n\n## type 类型\n\ntype 类型只能从以下 7 种类型中，结合实际情况选取\n\n<!--more-->\n\n#### 主要 type\n\n-   **feat: 增加新功能**\n-   **fix: 修复 bug**\n\n#### 特殊 type\n\n-   **dosc: 只改动了文档/注释相关的内容**\n-   **style: 不影响代码运行和含义的改动，例如改变缩进，增删分号**\n-   **chore: 构造工具或者外部依赖的改动，例如 webpack,npm,yarn**\n-   **refactor: 代码重构（即不是新增功能，也不是修改 bug 的代码变动）**\n\n#### 暂不使用的 type\n\n-   **test: 添加测试或者修改现有测试**\n\n## scope\n\nscope 也为必填项，用于描述改动的范围，例如：路由/组件/工具类/模块。\n\n## subject\n\n本次提交的简短描述，以动词开头\n\n## 其他注意事项\n\n-   建议一次提交只涉及一个模块，如果实在涉及多个模块，建议拆分成多次提交或者编写多行符合上述规范的 message\n-   git commit -m 'XXXX' 为编写一行 message 的命令\n-   git commit 可以编写多行 message\n-   可以为 git 设置 commit 模板，时刻提醒自己\n\n### 设置 git commit 模板方法\n\n1.  修改~/.gitconfig 或者 项目里.git/.gitconfig,添加\n\n```\n[commit]\ntemplate = ~/.gitmessage\n复制代码\n```\n\n2.  新建~/.gitmessage 内容可以如下:\n\n```\n# head: <type>(<scope>): <subject>\n# - type: feat(新功能), fix(修复bug), docs, style, refactor, test, chore\n# - scope: 本次提交影响的范围，例如：路由/组件/工具类/模块\n# - subject: 本次提交的简短描述，动词开头\n#\n# 建议一次提交只涉及一个模块，如果实在涉及多个模块，建议拆分成多次提交或者编写多行符合上述规范的message\n复制代码\n```\n\n### demo\n\n```\nfeat(baseURL.js): 增加演示环境配置\n\nfix(request.js): 屏蔽公参中的token\n\nfeat(购物车模块): 增加清空购物车功能\n复制代码\n```\n\n```\nnpm i husky -D\nnpm i validate-commit-msg -D\n```\n\n```\n{\n  \"types\": [\"feat\", \"fix\", \"docs\", \"style\", \"refactor\", \"test\", \"chore\", \"revert\"],\n  \"scope\": {\n    \"required\": false,\n    \"allowed\": [\"*\"],\n    \"validate\": false,\n    \"multiple\": false\n  },\n  \"warnOnFail\": false,\n  \"maxSubjectLength\": 100,\n  \"subjectPattern\": \".+\",\n  \"subjectPatternErrorMsg\": \"subject does not match subject pattern!\",\n  \"helpMessage\": \"\",\n  \"autoFix\": false\n}\n\n```\n\n```\nyarn add validate-git-commit-msg -D\n```\n\n\n\n```\n  \"commitmsg\": \"validate-git-commit-msg\"\n```\n\n上面方式都不好使：\n\n## Installation\n\n```\n$ npm install validate-commit-message\n```\n\n## Usage\n\nYou can activate the hook from the command line of your project.\n\n```\n$ node ./node_modules/.bin/validate-commit-msg\n```\n\nA more consistent way is to add a script in your `package.json`.\n\n```\n\"scripts\": {\n  \"init\": \"validate-commit-msg\"\n}\n```\n\nThen execute `$ npm run init`.\n\n-   Git代码提交规范\n\n-   前言\n-   一、安装插件\n-   二、插件使用\n-   三、插件讲解\n\n-   1、Header\n\n-   1.1 type\n-   1.2 scope\n-   1.3 subject\n\n-   2、Body\n-   3、Footer\n\n-   四、git hooks校验\n\n## 前言\n\n**为什么要注重代码提交规范？**\n\n在团队协作开发时，每个人提交代码时都会写 commit message。  \n每个人都有自己的书写风格，翻看我们组的git log, 可以说是五花八门，十分不利于阅读和维护。  \n一般来说，大厂都有一套的自己的提交规范，尤其是在一些大型开源项目中，commit message 都是十分一致的。  \n因此，我们需要制定统一标准，促使团队形成一致的代码提交风格，更好的提高工作效率，成为一名有追求的工程师。\n\n一般项目开发都是多分支共存，master、develop、feature、hotfix、release等分支，如下图所示，在这么多分支中，我们会有一个稳定的master分支，但是我们需要将分支代码进行merge。存在规范的commit message可以帮助我们很轻松的合并代码以及发现问题。例如使用Jenkins自动化部署时，我们可以根据jenkins拉取commit message中的Closes issues验证BUG等。  \n[![后端必备的 Git Commit Message规范指南-直接食用_第1张图片](https://img.it610.com/image/info8/4dc347e319ee441e993511771408bb39.jpg)](https://img.it610.com/image/info8/4dc347e319ee441e993511771408bb39.jpg)  \n下面详细讲解Idea中如果进行规范的提交Git Commit Message。\n\n## 一、安装插件\n\n在开发工具idea中安装**Git Commit Message Plugins**插件\n\n## 二、插件使用\n\n在Commit代码处，选择使用**Git Commit Message Plugins**插件，如下图所示，填写项详细含义请查看《插件详解》总共分为3大部分，Header， Body，Footer详细讲解请看下节。  \n[![后端必备的 Git Commit Message规范指南-直接食用_第3张图片](https://gitee.com/hxf88/imgrepo/raw/master/img/23bd329da5364bce991a3a8f6e5be62a.jpg)]\n\n## 三、插件讲解\n\n主要分为下面三个部分： Header， Body，Footer。\n\n```\n(): \n// 空一行\n\n// 空一行\n```\n\n下面详细解释下个个部分的含义。\n\n### 1、Header\n\nHeader的部分只有一行,包括三个字段: type(必需), scope(可选), subject(必需)\n\n对应到idea插件上图的配置分别为 Header部分的:\n\ntype(必需)\n\nType of change\n\ncommit类别\n\n**scope(可选)**\n\n**Scope of this change**\n\ncommint影响的范围\n\nsubject(必需)\\*\\*\\*\\*\n\n**Short description**\n\n简短的描述\n\n#### 1.1 type\n\ntype用于说明 commit 的类别，只允许使用下面标识\n\n-   feat：新功能（feature）\n-   fix：修补bug\n-   docs：文档（documentation）\n-   style： 格式（不影响代码运行的变动,空格,格式化,等等）\n-   refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n-   perf: 性能 (提高代码性能的改变)\n-   test：增加测试或者修改测试\n-   build: 影响构建系统或外部依赖项的更改(maven,gradle,npm 等等)\n-   ci: 对CI配置文件和脚本的更改\n-   chore：对非 src 和 test 目录的修改\n-   revert: Revert a commit\n\n#### 1.2 scope\n\n`scope`用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n\n#### 1.3 subject\n\n`subject`是 commit 目的的简短描述，不超过50个字符。\n\n```\n以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n第一个字母小写\n结尾不加句号（.）\n```\n\n### 2、Body\n\nBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。\n\n```\n如有必要，更详细的说明文本。包装它\n大概72个字左右。\n\n后面的段落在空行之后。\n\n-要点也可以\n-使用悬挂缩进\n```\n\n有一个注意点。\n\n（1）应该说明代码变动的动机，以及与以前行为的对比。\n\n### 3、Footer\n\nFooter 部分只用于两种情况。\n\n**（1）不兼容变动**\n\n如果当前代码与上一个版本不兼容，则 Footer 部分以`BREAKING CHANGE`开头，后面是对变动的描述、以及变动理由和迁移方法。\n\n**（2）关闭 Issue**\n\n如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。\n\n```\nCloses #234\n```\n\n也可以一次关闭多个 issue 。\n\n```\nCloses #123, #245, #992\n```\n\n最后, 一个完整的commit message示例可能如下:  \n[![后端必备的 Git Commit Message规范指南-直接食用_第4张图片](https://gitee.com/hxf88/imgrepo/raw/master/img/a0dcaf9b031a49b6aec8b32b8c8f0dba.jpg)](https://img.it610.com/image/info8/a0dcaf9b031a49b6aec8b32b8c8f0dba.jpg)\n\n## 四、git hooks校验\n\n由于使用idea插件`只防君子，不防小人`。**Git Commit Message Plugins**只能起到模板的作用，开发人员如果误操作或者忘记使用任提交不规范的Commit Message。因此使用git hooks强制开发人员使用以上格式提交。具体操作如下：\n\n在项目目录`.git/hooks`目录下有很多钩子，我们可以根据需要自定义不同的内容，这里我们只需要修改`commit-msg`即可。\n\n首先将`commit-msg.sample` 改为 `commit-msg`，也就是去掉后缀。将里面的内容修改为下面内容。\n\n```\n#!/bin/sh\n\nMSG=`awk '{printf(\"%s\",$0)}' $1`\nif [[ $MSG =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)\\(.*\\):.*$ ]]\nthen\necho -e \"\\033[32m commit success! \\033[0m\"\nelse\n    echo -e \"\\033[31m Error: the commit message is irregular \\033[m\"\necho -e \"\\033[31m Error: type must be one of [feat,fix,docs,style,refactor,perf,test,build,ci,chore,revert] \\033[m\"\n    echo -e \"\\033[31m eg: feat(user): add the user login \\033[m\"\nexit 1\nfi\n```\n\n","slug":"git-commit规范化","published":1,"updated":"2021-08-24T07:40:15.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6ol000jcmv9cstt1mnk","content":"<h2 id=\"用什么规范？\"><a href=\"#用什么规范？\" class=\"headerlink\" title=\"用什么规范？\"></a>用什么规范？</h2><p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/24563685-8376a2d22823fb1e.jpg\" alt=\"img\"></p>\n<p>受到市面上主流的<code>约定式提交规范</code>和<code>Angular提交准则</code>的启发，结合前端团队的实际情况（虽然可以通过配置<code>commitizen</code>工具来进行强制检查约束，但涉及项目太多，操作较为复杂，且涉及到原生项目和老项目时，需采用别的解决方案，故建议团队采用自觉遵守规范的方法来实现），暂拟定如下格式的 commit 规范</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &lt;类型&gt;(影响的作用域): &lt;简要描述&gt;</span><br><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"type-类型\"><a href=\"#type-类型\" class=\"headerlink\" title=\"type 类型\"></a>type 类型</h2><p>type 类型只能从以下 7 种类型中，结合实际情况选取</p>\n<span id=\"more\"></span>\n\n<h4 id=\"主要-type\"><a href=\"#主要-type\" class=\"headerlink\" title=\"主要 type\"></a>主要 type</h4><ul>\n<li>  <strong>feat: 增加新功能</strong></li>\n<li>  <strong>fix: 修复 bug</strong></li>\n</ul>\n<h4 id=\"特殊-type\"><a href=\"#特殊-type\" class=\"headerlink\" title=\"特殊 type\"></a>特殊 type</h4><ul>\n<li>  <strong>dosc: 只改动了文档/注释相关的内容</strong></li>\n<li>  <strong>style: 不影响代码运行和含义的改动，例如改变缩进，增删分号</strong></li>\n<li>  <strong>chore: 构造工具或者外部依赖的改动，例如 webpack,npm,yarn</strong></li>\n<li>  <strong>refactor: 代码重构（即不是新增功能，也不是修改 bug 的代码变动）</strong></li>\n</ul>\n<h4 id=\"暂不使用的-type\"><a href=\"#暂不使用的-type\" class=\"headerlink\" title=\"暂不使用的 type\"></a>暂不使用的 type</h4><ul>\n<li>  <strong>test: 添加测试或者修改现有测试</strong></li>\n</ul>\n<h2 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h2><p>scope 也为必填项，用于描述改动的范围，例如：路由/组件/工具类/模块。</p>\n<h2 id=\"subject\"><a href=\"#subject\" class=\"headerlink\" title=\"subject\"></a>subject</h2><p>本次提交的简短描述，以动词开头</p>\n<h2 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h2><ul>\n<li>  建议一次提交只涉及一个模块，如果实在涉及多个模块，建议拆分成多次提交或者编写多行符合上述规范的 message</li>\n<li>  git commit -m ‘XXXX’ 为编写一行 message 的命令</li>\n<li>  git commit 可以编写多行 message</li>\n<li>  可以为 git 设置 commit 模板，时刻提醒自己</li>\n</ul>\n<h3 id=\"设置-git-commit-模板方法\"><a href=\"#设置-git-commit-模板方法\" class=\"headerlink\" title=\"设置 git commit 模板方法\"></a>设置 git commit 模板方法</h3><ol>\n<li> 修改~/.gitconfig 或者 项目里.git/.gitconfig,添加</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[commit]</span><br><span class=\"line\">template = ~/.gitmessage</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li> 新建~/.gitmessage 内容可以如下:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># head: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\"># - type: feat(新功能), fix(修复bug), docs, style, refactor, test, chore</span><br><span class=\"line\"># - scope: 本次提交影响的范围，例如：路由/组件/工具类/模块</span><br><span class=\"line\"># - subject: 本次提交的简短描述，动词开头</span><br><span class=\"line\">#</span><br><span class=\"line\"># 建议一次提交只涉及一个模块，如果实在涉及多个模块，建议拆分成多次提交或者编写多行符合上述规范的message</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat(baseURL.js): 增加演示环境配置</span><br><span class=\"line\"></span><br><span class=\"line\">fix(request.js): 屏蔽公参中的token</span><br><span class=\"line\"></span><br><span class=\"line\">feat(购物车模块): 增加清空购物车功能</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i husky -D</span><br><span class=\"line\">npm i validate-commit-msg -D</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;types&quot;: [&quot;feat&quot;, &quot;fix&quot;, &quot;docs&quot;, &quot;style&quot;, &quot;refactor&quot;, &quot;test&quot;, &quot;chore&quot;, &quot;revert&quot;],</span><br><span class=\"line\">  &quot;scope&quot;: &#123;</span><br><span class=\"line\">    &quot;required&quot;: false,</span><br><span class=\"line\">    &quot;allowed&quot;: [&quot;*&quot;],</span><br><span class=\"line\">    &quot;validate&quot;: false,</span><br><span class=\"line\">    &quot;multiple&quot;: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;warnOnFail&quot;: false,</span><br><span class=\"line\">  &quot;maxSubjectLength&quot;: 100,</span><br><span class=\"line\">  &quot;subjectPattern&quot;: &quot;.+&quot;,</span><br><span class=\"line\">  &quot;subjectPatternErrorMsg&quot;: &quot;subject does not match subject pattern!&quot;,</span><br><span class=\"line\">  &quot;helpMessage&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;autoFix&quot;: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add validate-git-commit-msg -D</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;commitmsg&quot;: &quot;validate-git-commit-msg&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上面方式都不好使：</p>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install validate-commit-message</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><p>You can activate the hook from the command line of your project.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node ./node_modules/.bin/validate-commit-msg</span><br></pre></td></tr></table></figure>\n\n<p>A more consistent way is to add a script in your <code>package.json</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;init&quot;: &quot;validate-commit-msg&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then execute <code>$ npm run init</code>.</p>\n<ul>\n<li><p>  Git代码提交规范</p>\n</li>\n<li><p>  前言</p>\n</li>\n<li><p>  一、安装插件</p>\n</li>\n<li><p>  二、插件使用</p>\n</li>\n<li><p>  三、插件讲解</p>\n</li>\n<li><p>  1、Header</p>\n</li>\n<li><p>  1.1 type</p>\n</li>\n<li><p>  1.2 scope</p>\n</li>\n<li><p>  1.3 subject</p>\n</li>\n<li><p>  2、Body</p>\n</li>\n<li><p>  3、Footer</p>\n</li>\n<li><p>  四、git hooks校验</p>\n</li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>为什么要注重代码提交规范？</strong></p>\n<p>在团队协作开发时，每个人提交代码时都会写 commit message。<br>每个人都有自己的书写风格，翻看我们组的git log, 可以说是五花八门，十分不利于阅读和维护。<br>一般来说，大厂都有一套的自己的提交规范，尤其是在一些大型开源项目中，commit message 都是十分一致的。<br>因此，我们需要制定统一标准，促使团队形成一致的代码提交风格，更好的提高工作效率，成为一名有追求的工程师。</p>\n<p>一般项目开发都是多分支共存，master、develop、feature、hotfix、release等分支，如下图所示，在这么多分支中，我们会有一个稳定的master分支，但是我们需要将分支代码进行merge。存在规范的commit message可以帮助我们很轻松的合并代码以及发现问题。例如使用Jenkins自动化部署时，我们可以根据jenkins拉取commit message中的Closes issues验证BUG等。<br><a href=\"https://img.it610.com/image/info8/4dc347e319ee441e993511771408bb39.jpg\"><img src=\"https://img.it610.com/image/info8/4dc347e319ee441e993511771408bb39.jpg\" alt=\"后端必备的 Git Commit Message规范指南-直接食用_第1张图片\"></a><br>下面详细讲解Idea中如果进行规范的提交Git Commit Message。</p>\n<h2 id=\"一、安装插件\"><a href=\"#一、安装插件\" class=\"headerlink\" title=\"一、安装插件\"></a>一、安装插件</h2><p>在开发工具idea中安装<strong>Git Commit Message Plugins</strong>插件</p>\n<h2 id=\"二、插件使用\"><a href=\"#二、插件使用\" class=\"headerlink\" title=\"二、插件使用\"></a>二、插件使用</h2><p>在Commit代码处，选择使用<strong>Git Commit Message Plugins</strong>插件，如下图所示，填写项详细含义请查看《插件详解》总共分为3大部分，Header， Body，Footer详细讲解请看下节。<br>[<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/23bd329da5364bce991a3a8f6e5be62a.jpg\" alt=\"后端必备的 Git Commit Message规范指南-直接食用_第3张图片\">]</p>\n<h2 id=\"三、插件讲解\"><a href=\"#三、插件讲解\" class=\"headerlink\" title=\"三、插件讲解\"></a>三、插件讲解</h2><p>主要分为下面三个部分： Header， Body，Footer。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(): </span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"></span><br><span class=\"line\">// 空一行</span><br></pre></td></tr></table></figure>\n\n<p>下面详细解释下个个部分的含义。</p>\n<h3 id=\"1、Header\"><a href=\"#1、Header\" class=\"headerlink\" title=\"1、Header\"></a>1、Header</h3><p>Header的部分只有一行,包括三个字段: type(必需), scope(可选), subject(必需)</p>\n<p>对应到idea插件上图的配置分别为 Header部分的:</p>\n<p>type(必需)</p>\n<p>Type of change</p>\n<p>commit类别</p>\n<p><strong>scope(可选)</strong></p>\n<p><strong>Scope of this change</strong></p>\n<p>commint影响的范围</p>\n<p>subject(必需)****</p>\n<p><strong>Short description</strong></p>\n<p>简短的描述</p>\n<h4 id=\"1-1-type\"><a href=\"#1-1-type\" class=\"headerlink\" title=\"1.1 type\"></a>1.1 type</h4><p>type用于说明 commit 的类别，只允许使用下面标识</p>\n<ul>\n<li>  feat：新功能（feature）</li>\n<li>  fix：修补bug</li>\n<li>  docs：文档（documentation）</li>\n<li>  style： 格式（不影响代码运行的变动,空格,格式化,等等）</li>\n<li>  refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>  perf: 性能 (提高代码性能的改变)</li>\n<li>  test：增加测试或者修改测试</li>\n<li>  build: 影响构建系统或外部依赖项的更改(maven,gradle,npm 等等)</li>\n<li>  ci: 对CI配置文件和脚本的更改</li>\n<li>  chore：对非 src 和 test 目录的修改</li>\n<li>  revert: Revert a commit</li>\n</ul>\n<h4 id=\"1-2-scope\"><a href=\"#1-2-scope\" class=\"headerlink\" title=\"1.2 scope\"></a>1.2 scope</h4><p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<h4 id=\"1-3-subject\"><a href=\"#1-3-subject\" class=\"headerlink\" title=\"1.3 subject\"></a>1.3 subject</h4><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以动词开头，使用第一人称现在时，比如change，而不是changed或changes</span><br><span class=\"line\">第一个字母小写</span><br><span class=\"line\">结尾不加句号（.）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Body\"><a href=\"#2、Body\" class=\"headerlink\" title=\"2、Body\"></a>2、Body</h3><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如有必要，更详细的说明文本。包装它</span><br><span class=\"line\">大概72个字左右。</span><br><span class=\"line\"></span><br><span class=\"line\">后面的段落在空行之后。</span><br><span class=\"line\"></span><br><span class=\"line\">-要点也可以</span><br><span class=\"line\">-使用悬挂缩进</span><br></pre></td></tr></table></figure>\n\n<p>有一个注意点。</p>\n<p>（1）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h3 id=\"3、Footer\"><a href=\"#3、Footer\" class=\"headerlink\" title=\"3、Footer\"></a>3、Footer</h3><p>Footer 部分只用于两种情况。</p>\n<p><strong>（1）不兼容变动</strong></p>\n<p>如果当前代码与上一个版本不兼容，则 Footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<p><strong>（2）关闭 Issue</strong></p>\n<p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #234</span><br></pre></td></tr></table></figure>\n\n<p>也可以一次关闭多个 issue 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #123, #245, #992</span><br></pre></td></tr></table></figure>\n\n<p>最后, 一个完整的commit message示例可能如下:<br><a href=\"https://img.it610.com/image/info8/a0dcaf9b031a49b6aec8b32b8c8f0dba.jpg\"><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/a0dcaf9b031a49b6aec8b32b8c8f0dba.jpg\" alt=\"后端必备的 Git Commit Message规范指南-直接食用_第4张图片\"></a></p>\n<h2 id=\"四、git-hooks校验\"><a href=\"#四、git-hooks校验\" class=\"headerlink\" title=\"四、git hooks校验\"></a>四、git hooks校验</h2><p>由于使用idea插件<code>只防君子，不防小人</code>。<strong>Git Commit Message Plugins</strong>只能起到模板的作用，开发人员如果误操作或者忘记使用任提交不规范的Commit Message。因此使用git hooks强制开发人员使用以上格式提交。具体操作如下：</p>\n<p>在项目目录<code>.git/hooks</code>目录下有很多钩子，我们可以根据需要自定义不同的内容，这里我们只需要修改<code>commit-msg</code>即可。</p>\n<p>首先将<code>commit-msg.sample</code> 改为 <code>commit-msg</code>，也就是去掉后缀。将里面的内容修改为下面内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">MSG=`awk &#x27;&#123;printf(&quot;%s&quot;,$0)&#125;&#x27; $1`</span><br><span class=\"line\">if [[ $MSG =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)\\(.*\\):.*$ ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">echo -e &quot;\\033[32m commit success! \\033[0m&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo -e &quot;\\033[31m Error: the commit message is irregular \\033[m&quot;</span><br><span class=\"line\">echo -e &quot;\\033[31m Error: type must be one of [feat,fix,docs,style,refactor,perf,test,build,ci,chore,revert] \\033[m&quot;</span><br><span class=\"line\">    echo -e &quot;\\033[31m eg: feat(user): add the user login \\033[m&quot;</span><br><span class=\"line\">exit 1</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"用什么规范？\"><a href=\"#用什么规范？\" class=\"headerlink\" title=\"用什么规范？\"></a>用什么规范？</h2><p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/24563685-8376a2d22823fb1e.jpg\" alt=\"img\"></p>\n<p>受到市面上主流的<code>约定式提交规范</code>和<code>Angular提交准则</code>的启发，结合前端团队的实际情况（虽然可以通过配置<code>commitizen</code>工具来进行强制检查约束，但涉及项目太多，操作较为复杂，且涉及到原生项目和老项目时，需采用别的解决方案，故建议团队采用自觉遵守规范的方法来实现），暂拟定如下格式的 commit 规范</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &lt;类型&gt;(影响的作用域): &lt;简要描述&gt;</span><br><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"type-类型\"><a href=\"#type-类型\" class=\"headerlink\" title=\"type 类型\"></a>type 类型</h2><p>type 类型只能从以下 7 种类型中，结合实际情况选取</p>","more":"<h4 id=\"主要-type\"><a href=\"#主要-type\" class=\"headerlink\" title=\"主要 type\"></a>主要 type</h4><ul>\n<li>  <strong>feat: 增加新功能</strong></li>\n<li>  <strong>fix: 修复 bug</strong></li>\n</ul>\n<h4 id=\"特殊-type\"><a href=\"#特殊-type\" class=\"headerlink\" title=\"特殊 type\"></a>特殊 type</h4><ul>\n<li>  <strong>dosc: 只改动了文档/注释相关的内容</strong></li>\n<li>  <strong>style: 不影响代码运行和含义的改动，例如改变缩进，增删分号</strong></li>\n<li>  <strong>chore: 构造工具或者外部依赖的改动，例如 webpack,npm,yarn</strong></li>\n<li>  <strong>refactor: 代码重构（即不是新增功能，也不是修改 bug 的代码变动）</strong></li>\n</ul>\n<h4 id=\"暂不使用的-type\"><a href=\"#暂不使用的-type\" class=\"headerlink\" title=\"暂不使用的 type\"></a>暂不使用的 type</h4><ul>\n<li>  <strong>test: 添加测试或者修改现有测试</strong></li>\n</ul>\n<h2 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h2><p>scope 也为必填项，用于描述改动的范围，例如：路由/组件/工具类/模块。</p>\n<h2 id=\"subject\"><a href=\"#subject\" class=\"headerlink\" title=\"subject\"></a>subject</h2><p>本次提交的简短描述，以动词开头</p>\n<h2 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h2><ul>\n<li>  建议一次提交只涉及一个模块，如果实在涉及多个模块，建议拆分成多次提交或者编写多行符合上述规范的 message</li>\n<li>  git commit -m ‘XXXX’ 为编写一行 message 的命令</li>\n<li>  git commit 可以编写多行 message</li>\n<li>  可以为 git 设置 commit 模板，时刻提醒自己</li>\n</ul>\n<h3 id=\"设置-git-commit-模板方法\"><a href=\"#设置-git-commit-模板方法\" class=\"headerlink\" title=\"设置 git commit 模板方法\"></a>设置 git commit 模板方法</h3><ol>\n<li> 修改~/.gitconfig 或者 项目里.git/.gitconfig,添加</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[commit]</span><br><span class=\"line\">template = ~/.gitmessage</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li> 新建~/.gitmessage 内容可以如下:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># head: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\"># - type: feat(新功能), fix(修复bug), docs, style, refactor, test, chore</span><br><span class=\"line\"># - scope: 本次提交影响的范围，例如：路由/组件/工具类/模块</span><br><span class=\"line\"># - subject: 本次提交的简短描述，动词开头</span><br><span class=\"line\">#</span><br><span class=\"line\"># 建议一次提交只涉及一个模块，如果实在涉及多个模块，建议拆分成多次提交或者编写多行符合上述规范的message</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat(baseURL.js): 增加演示环境配置</span><br><span class=\"line\"></span><br><span class=\"line\">fix(request.js): 屏蔽公参中的token</span><br><span class=\"line\"></span><br><span class=\"line\">feat(购物车模块): 增加清空购物车功能</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i husky -D</span><br><span class=\"line\">npm i validate-commit-msg -D</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;types&quot;: [&quot;feat&quot;, &quot;fix&quot;, &quot;docs&quot;, &quot;style&quot;, &quot;refactor&quot;, &quot;test&quot;, &quot;chore&quot;, &quot;revert&quot;],</span><br><span class=\"line\">  &quot;scope&quot;: &#123;</span><br><span class=\"line\">    &quot;required&quot;: false,</span><br><span class=\"line\">    &quot;allowed&quot;: [&quot;*&quot;],</span><br><span class=\"line\">    &quot;validate&quot;: false,</span><br><span class=\"line\">    &quot;multiple&quot;: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;warnOnFail&quot;: false,</span><br><span class=\"line\">  &quot;maxSubjectLength&quot;: 100,</span><br><span class=\"line\">  &quot;subjectPattern&quot;: &quot;.+&quot;,</span><br><span class=\"line\">  &quot;subjectPatternErrorMsg&quot;: &quot;subject does not match subject pattern!&quot;,</span><br><span class=\"line\">  &quot;helpMessage&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;autoFix&quot;: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add validate-git-commit-msg -D</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;commitmsg&quot;: &quot;validate-git-commit-msg&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上面方式都不好使：</p>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install validate-commit-message</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><p>You can activate the hook from the command line of your project.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node ./node_modules/.bin/validate-commit-msg</span><br></pre></td></tr></table></figure>\n\n<p>A more consistent way is to add a script in your <code>package.json</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;init&quot;: &quot;validate-commit-msg&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then execute <code>$ npm run init</code>.</p>\n<ul>\n<li><p>  Git代码提交规范</p>\n</li>\n<li><p>  前言</p>\n</li>\n<li><p>  一、安装插件</p>\n</li>\n<li><p>  二、插件使用</p>\n</li>\n<li><p>  三、插件讲解</p>\n</li>\n<li><p>  1、Header</p>\n</li>\n<li><p>  1.1 type</p>\n</li>\n<li><p>  1.2 scope</p>\n</li>\n<li><p>  1.3 subject</p>\n</li>\n<li><p>  2、Body</p>\n</li>\n<li><p>  3、Footer</p>\n</li>\n<li><p>  四、git hooks校验</p>\n</li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>为什么要注重代码提交规范？</strong></p>\n<p>在团队协作开发时，每个人提交代码时都会写 commit message。<br>每个人都有自己的书写风格，翻看我们组的git log, 可以说是五花八门，十分不利于阅读和维护。<br>一般来说，大厂都有一套的自己的提交规范，尤其是在一些大型开源项目中，commit message 都是十分一致的。<br>因此，我们需要制定统一标准，促使团队形成一致的代码提交风格，更好的提高工作效率，成为一名有追求的工程师。</p>\n<p>一般项目开发都是多分支共存，master、develop、feature、hotfix、release等分支，如下图所示，在这么多分支中，我们会有一个稳定的master分支，但是我们需要将分支代码进行merge。存在规范的commit message可以帮助我们很轻松的合并代码以及发现问题。例如使用Jenkins自动化部署时，我们可以根据jenkins拉取commit message中的Closes issues验证BUG等。<br><a href=\"https://img.it610.com/image/info8/4dc347e319ee441e993511771408bb39.jpg\"><img src=\"https://img.it610.com/image/info8/4dc347e319ee441e993511771408bb39.jpg\" alt=\"后端必备的 Git Commit Message规范指南-直接食用_第1张图片\"></a><br>下面详细讲解Idea中如果进行规范的提交Git Commit Message。</p>\n<h2 id=\"一、安装插件\"><a href=\"#一、安装插件\" class=\"headerlink\" title=\"一、安装插件\"></a>一、安装插件</h2><p>在开发工具idea中安装<strong>Git Commit Message Plugins</strong>插件</p>\n<h2 id=\"二、插件使用\"><a href=\"#二、插件使用\" class=\"headerlink\" title=\"二、插件使用\"></a>二、插件使用</h2><p>在Commit代码处，选择使用<strong>Git Commit Message Plugins</strong>插件，如下图所示，填写项详细含义请查看《插件详解》总共分为3大部分，Header， Body，Footer详细讲解请看下节。<br>[<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/23bd329da5364bce991a3a8f6e5be62a.jpg\" alt=\"后端必备的 Git Commit Message规范指南-直接食用_第3张图片\">]</p>\n<h2 id=\"三、插件讲解\"><a href=\"#三、插件讲解\" class=\"headerlink\" title=\"三、插件讲解\"></a>三、插件讲解</h2><p>主要分为下面三个部分： Header， Body，Footer。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(): </span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"></span><br><span class=\"line\">// 空一行</span><br></pre></td></tr></table></figure>\n\n<p>下面详细解释下个个部分的含义。</p>\n<h3 id=\"1、Header\"><a href=\"#1、Header\" class=\"headerlink\" title=\"1、Header\"></a>1、Header</h3><p>Header的部分只有一行,包括三个字段: type(必需), scope(可选), subject(必需)</p>\n<p>对应到idea插件上图的配置分别为 Header部分的:</p>\n<p>type(必需)</p>\n<p>Type of change</p>\n<p>commit类别</p>\n<p><strong>scope(可选)</strong></p>\n<p><strong>Scope of this change</strong></p>\n<p>commint影响的范围</p>\n<p>subject(必需)****</p>\n<p><strong>Short description</strong></p>\n<p>简短的描述</p>\n<h4 id=\"1-1-type\"><a href=\"#1-1-type\" class=\"headerlink\" title=\"1.1 type\"></a>1.1 type</h4><p>type用于说明 commit 的类别，只允许使用下面标识</p>\n<ul>\n<li>  feat：新功能（feature）</li>\n<li>  fix：修补bug</li>\n<li>  docs：文档（documentation）</li>\n<li>  style： 格式（不影响代码运行的变动,空格,格式化,等等）</li>\n<li>  refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>  perf: 性能 (提高代码性能的改变)</li>\n<li>  test：增加测试或者修改测试</li>\n<li>  build: 影响构建系统或外部依赖项的更改(maven,gradle,npm 等等)</li>\n<li>  ci: 对CI配置文件和脚本的更改</li>\n<li>  chore：对非 src 和 test 目录的修改</li>\n<li>  revert: Revert a commit</li>\n</ul>\n<h4 id=\"1-2-scope\"><a href=\"#1-2-scope\" class=\"headerlink\" title=\"1.2 scope\"></a>1.2 scope</h4><p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<h4 id=\"1-3-subject\"><a href=\"#1-3-subject\" class=\"headerlink\" title=\"1.3 subject\"></a>1.3 subject</h4><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以动词开头，使用第一人称现在时，比如change，而不是changed或changes</span><br><span class=\"line\">第一个字母小写</span><br><span class=\"line\">结尾不加句号（.）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Body\"><a href=\"#2、Body\" class=\"headerlink\" title=\"2、Body\"></a>2、Body</h3><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如有必要，更详细的说明文本。包装它</span><br><span class=\"line\">大概72个字左右。</span><br><span class=\"line\"></span><br><span class=\"line\">后面的段落在空行之后。</span><br><span class=\"line\"></span><br><span class=\"line\">-要点也可以</span><br><span class=\"line\">-使用悬挂缩进</span><br></pre></td></tr></table></figure>\n\n<p>有一个注意点。</p>\n<p>（1）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h3 id=\"3、Footer\"><a href=\"#3、Footer\" class=\"headerlink\" title=\"3、Footer\"></a>3、Footer</h3><p>Footer 部分只用于两种情况。</p>\n<p><strong>（1）不兼容变动</strong></p>\n<p>如果当前代码与上一个版本不兼容，则 Footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<p><strong>（2）关闭 Issue</strong></p>\n<p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #234</span><br></pre></td></tr></table></figure>\n\n<p>也可以一次关闭多个 issue 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #123, #245, #992</span><br></pre></td></tr></table></figure>\n\n<p>最后, 一个完整的commit message示例可能如下:<br><a href=\"https://img.it610.com/image/info8/a0dcaf9b031a49b6aec8b32b8c8f0dba.jpg\"><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/a0dcaf9b031a49b6aec8b32b8c8f0dba.jpg\" alt=\"后端必备的 Git Commit Message规范指南-直接食用_第4张图片\"></a></p>\n<h2 id=\"四、git-hooks校验\"><a href=\"#四、git-hooks校验\" class=\"headerlink\" title=\"四、git hooks校验\"></a>四、git hooks校验</h2><p>由于使用idea插件<code>只防君子，不防小人</code>。<strong>Git Commit Message Plugins</strong>只能起到模板的作用，开发人员如果误操作或者忘记使用任提交不规范的Commit Message。因此使用git hooks强制开发人员使用以上格式提交。具体操作如下：</p>\n<p>在项目目录<code>.git/hooks</code>目录下有很多钩子，我们可以根据需要自定义不同的内容，这里我们只需要修改<code>commit-msg</code>即可。</p>\n<p>首先将<code>commit-msg.sample</code> 改为 <code>commit-msg</code>，也就是去掉后缀。将里面的内容修改为下面内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">MSG=`awk &#x27;&#123;printf(&quot;%s&quot;,$0)&#125;&#x27; $1`</span><br><span class=\"line\">if [[ $MSG =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)\\(.*\\):.*$ ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">echo -e &quot;\\033[32m commit success! \\033[0m&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo -e &quot;\\033[31m Error: the commit message is irregular \\033[m&quot;</span><br><span class=\"line\">echo -e &quot;\\033[31m Error: type must be one of [feat,fix,docs,style,refactor,perf,test,build,ci,chore,revert] \\033[m&quot;</span><br><span class=\"line\">    echo -e &quot;\\033[31m eg: feat(user): add the user login \\033[m&quot;</span><br><span class=\"line\">exit 1</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>"},{"title":"flinkx调研","date":"2021-08-23T03:23:26.000Z","_content":"","source":"_posts/flinkx调研.md","raw":"---\ntitle: flinkx调研\ndate: 2021-08-23 11:23:26\ntags:\n---\n","slug":"flinkx调研","published":1,"updated":"2021-08-23T03:23:26.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6ol000lcmv95zm89c8k","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"jdbc 自增id 原理_PostgreSQL数据库实现表字段的自增","date":"2021-08-25T00:45:27.000Z","_content":"\n在使用Mysql时，创建表结构时可以通过关键字auto\\_increment来指定主键是否自增。但在Postgresql数据库中，虽然可以实现字段的自增，但从本质上来说却并不支持Mysql那样的自增。\n\n![image-20210825085148884](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png)\n\n<!--more-->\n\n### **Postgresql的自增机制**\n\nPostgresql中字段的自增是通过序列来实现的。整体机制是：1、序列可以实现自动增长；2、表字段可以指定默认值。3、结合两者，将默认值指定为自增序列便实现了对应字段值的自增。\n\nPostgresql提供了三种serial数据类型：smallserial，serial，bigserial。它们与真正的类型有所区别，在创建表结构时会先创建一个序列，并将序列赋值给使用的字段。\n\n也就是说，这三个类型是为了在创建唯一标识符列时方便使用而封装的类型。\n\nbigserial创建一个bigint类型的自增，serial创建一个int类型的自增，smallserial创建一个smallint类的自增。\n\n### **自增方式一示例**\n\n使用示例如下：\n\n```\ncreate table biz_test(id serial PRIMARY KEY,name varchar);\n```\n\n此时生成的表结构为：\n\n```\naa=# \\d biz_test                              Table \"public.biz_test\" Column |       Type        |                       Modifiers--------+-------------------+------------------------------------------------------- id     | integer           | not null default nextval('biz_test_id_seq'::regclass) name   | character varying |Indexes:    \"biz_test_pkey\" PRIMARY KEY, btree (id)\n```\n\n我们可以看到ID字段默认值为nextval('biz\\_test\\_id\\_seq'::regclass)。也就是说，在执行创建语句时首先创建了一个以“表名”+\"\\_id\\_seq\"的序列。然后再将该序列赋值给id字段。对应序列的类型为Integer类型。\n\n此时，通过一条insert语句来验证一下是否实现了自增。\n\n```\naa=# insert into biz_test(name) values('Tom')\n```\n\n执行查询语句查看插入的数据：\n\n```\naa=# insert into biz_test(name) values('Tom');INSERT 0 1aa=# select * from biz_test; id | name ----+------  1 | Tom(1 row)\n```\n\n发送数据的确插入成功，并实现了id的自增。\n\n### **自增方式二示例**\n\n通过上面的示例可以衍生出另外一种实现方式。既然使用默认的三种类型可以完成自增的实现，那么将对应的底层实现进行拆分，是不是也可以实现自增的效果呢？\n\n第一步：创建一个序列\n\n```\naa=\n```\n\n第二步，创建表结构时将该序列设置为字段的默认值\n\n```\naa=# create table biz_test(id integer primary key default nextval('biz_test_id_seq'))\n```\n\n这样，同样实现了字段的自增效果。\n\n```\naa=# \\d biz_test                         Table \"public.biz_test\" Column |  Type   |                       Modifiers--------+---------+------------------------------------------------------- id     | integer | not null default nextval('biz_test_id_seq'::regclass)Indexes:    \"biz_test_pkey\" PRIMARY KEY, btree (id)\n```\n\n针对第二步，如果建表的时并没有设置该字段为默认值，可以后续添加该字段为自增，使用alter语句来进行修改。\n\n```\nALTER TABLE ONLY public.biz_test ALTER COLUMN id SET DEFAULT nextval('public.biz_test_id_seq'::regclass);\n```\n\n### **创建序列的语法**\n\n上面创建序列时使用了默认值，如果需要指定序列的起始值、步长等参数，可以使用如下语句进行序列的创建。\n\n```\nCREATE SEQUENCE public.biz_test_id_seq    START WITH 1    INCREMENT BY 1    NO MINVALUE    NO MAXVALUE    CACHE 1;\n```\n\n上述语法其实已经很明显了，START WITH指定起始值，INCREMENT BY指定增长的步长。\n\nPostgresql查找索引的方法与Mysql也不一样，对应的查询语句是：\n\n```\nselect * from pg_indexes where tablename='biz_test'; schemaname | tablename |   indexname   | tablespace |                               indexdef\n```\n\n或者：\n\n```\nselect * from pg_statio_all_indexes where relname='biz_test'; relid | indexrelid | schemaname | relname  | indexrelname  | idx_blks_read | idx_blks_hit-------+------------+------------+----------+---------------+---------------+-------------- 20753 |      20757 | public     | biz_test | biz_test_pkey |             0 |            0(1 row)\n```\n\n关于PostgreSQL数据库实现表字段的自增就讲这么多，在学习该项技术时给我最大的启发就是：实现同一功能的不同技术的横向对比，是拓展多维度解决思路的利器。\n\n```\n----------  END  ----------\n","source":"_posts/jdbc-自增id-原理-PostgreSQL数据库实现表字段的自增.md","raw":"---\ntitle: jdbc 自增id 原理_PostgreSQL数据库实现表字段的自增\ndate: 2021-08-25 08:45:27\ntags:\n- postgres\ncategories: \n- database\n---\n\n在使用Mysql时，创建表结构时可以通过关键字auto\\_increment来指定主键是否自增。但在Postgresql数据库中，虽然可以实现字段的自增，但从本质上来说却并不支持Mysql那样的自增。\n\n![image-20210825085148884](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png)\n\n<!--more-->\n\n### **Postgresql的自增机制**\n\nPostgresql中字段的自增是通过序列来实现的。整体机制是：1、序列可以实现自动增长；2、表字段可以指定默认值。3、结合两者，将默认值指定为自增序列便实现了对应字段值的自增。\n\nPostgresql提供了三种serial数据类型：smallserial，serial，bigserial。它们与真正的类型有所区别，在创建表结构时会先创建一个序列，并将序列赋值给使用的字段。\n\n也就是说，这三个类型是为了在创建唯一标识符列时方便使用而封装的类型。\n\nbigserial创建一个bigint类型的自增，serial创建一个int类型的自增，smallserial创建一个smallint类的自增。\n\n### **自增方式一示例**\n\n使用示例如下：\n\n```\ncreate table biz_test(id serial PRIMARY KEY,name varchar);\n```\n\n此时生成的表结构为：\n\n```\naa=# \\d biz_test                              Table \"public.biz_test\" Column |       Type        |                       Modifiers--------+-------------------+------------------------------------------------------- id     | integer           | not null default nextval('biz_test_id_seq'::regclass) name   | character varying |Indexes:    \"biz_test_pkey\" PRIMARY KEY, btree (id)\n```\n\n我们可以看到ID字段默认值为nextval('biz\\_test\\_id\\_seq'::regclass)。也就是说，在执行创建语句时首先创建了一个以“表名”+\"\\_id\\_seq\"的序列。然后再将该序列赋值给id字段。对应序列的类型为Integer类型。\n\n此时，通过一条insert语句来验证一下是否实现了自增。\n\n```\naa=# insert into biz_test(name) values('Tom')\n```\n\n执行查询语句查看插入的数据：\n\n```\naa=# insert into biz_test(name) values('Tom');INSERT 0 1aa=# select * from biz_test; id | name ----+------  1 | Tom(1 row)\n```\n\n发送数据的确插入成功，并实现了id的自增。\n\n### **自增方式二示例**\n\n通过上面的示例可以衍生出另外一种实现方式。既然使用默认的三种类型可以完成自增的实现，那么将对应的底层实现进行拆分，是不是也可以实现自增的效果呢？\n\n第一步：创建一个序列\n\n```\naa=\n```\n\n第二步，创建表结构时将该序列设置为字段的默认值\n\n```\naa=# create table biz_test(id integer primary key default nextval('biz_test_id_seq'))\n```\n\n这样，同样实现了字段的自增效果。\n\n```\naa=# \\d biz_test                         Table \"public.biz_test\" Column |  Type   |                       Modifiers--------+---------+------------------------------------------------------- id     | integer | not null default nextval('biz_test_id_seq'::regclass)Indexes:    \"biz_test_pkey\" PRIMARY KEY, btree (id)\n```\n\n针对第二步，如果建表的时并没有设置该字段为默认值，可以后续添加该字段为自增，使用alter语句来进行修改。\n\n```\nALTER TABLE ONLY public.biz_test ALTER COLUMN id SET DEFAULT nextval('public.biz_test_id_seq'::regclass);\n```\n\n### **创建序列的语法**\n\n上面创建序列时使用了默认值，如果需要指定序列的起始值、步长等参数，可以使用如下语句进行序列的创建。\n\n```\nCREATE SEQUENCE public.biz_test_id_seq    START WITH 1    INCREMENT BY 1    NO MINVALUE    NO MAXVALUE    CACHE 1;\n```\n\n上述语法其实已经很明显了，START WITH指定起始值，INCREMENT BY指定增长的步长。\n\nPostgresql查找索引的方法与Mysql也不一样，对应的查询语句是：\n\n```\nselect * from pg_indexes where tablename='biz_test'; schemaname | tablename |   indexname   | tablespace |                               indexdef\n```\n\n或者：\n\n```\nselect * from pg_statio_all_indexes where relname='biz_test'; relid | indexrelid | schemaname | relname  | indexrelname  | idx_blks_read | idx_blks_hit-------+------------+------------+----------+---------------+---------------+-------------- 20753 |      20757 | public     | biz_test | biz_test_pkey |             0 |            0(1 row)\n```\n\n关于PostgreSQL数据库实现表字段的自增就讲这么多，在学习该项技术时给我最大的启发就是：实现同一功能的不同技术的横向对比，是拓展多维度解决思路的利器。\n\n```\n----------  END  ----------\n","slug":"jdbc-自增id-原理-PostgreSQL数据库实现表字段的自增","published":1,"updated":"2021-08-25T00:52:07.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6os000wcmv995av8lvk","content":"<p>在使用Mysql时，创建表结构时可以通过关键字auto_increment来指定主键是否自增。但在Postgresql数据库中，虽然可以实现字段的自增，但从本质上来说却并不支持Mysql那样的自增。</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png\" alt=\"image-20210825085148884\"></p>\n<span id=\"more\"></span>\n\n<h3 id=\"Postgresql的自增机制\"><a href=\"#Postgresql的自增机制\" class=\"headerlink\" title=\"Postgresql的自增机制\"></a><strong>Postgresql的自增机制</strong></h3><p>Postgresql中字段的自增是通过序列来实现的。整体机制是：1、序列可以实现自动增长；2、表字段可以指定默认值。3、结合两者，将默认值指定为自增序列便实现了对应字段值的自增。</p>\n<p>Postgresql提供了三种serial数据类型：smallserial，serial，bigserial。它们与真正的类型有所区别，在创建表结构时会先创建一个序列，并将序列赋值给使用的字段。</p>\n<p>也就是说，这三个类型是为了在创建唯一标识符列时方便使用而封装的类型。</p>\n<p>bigserial创建一个bigint类型的自增，serial创建一个int类型的自增，smallserial创建一个smallint类的自增。</p>\n<h3 id=\"自增方式一示例\"><a href=\"#自增方式一示例\" class=\"headerlink\" title=\"自增方式一示例\"></a><strong>自增方式一示例</strong></h3><p>使用示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table biz_test(id serial PRIMARY KEY,name varchar);</span><br></pre></td></tr></table></figure>\n\n<p>此时生成的表结构为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=# \\d biz_test                              Table &quot;public.biz_test&quot; Column |       Type        |                       Modifiers--------+-------------------+------------------------------------------------------- id     | integer           | not null default nextval(&#x27;biz_test_id_seq&#x27;::regclass) name   | character varying |Indexes:    &quot;biz_test_pkey&quot; PRIMARY KEY, btree (id)</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到ID字段默认值为nextval(‘biz_test_id_seq’::regclass)。也就是说，在执行创建语句时首先创建了一个以“表名”+”_id_seq”的序列。然后再将该序列赋值给id字段。对应序列的类型为Integer类型。</p>\n<p>此时，通过一条insert语句来验证一下是否实现了自增。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=# insert into biz_test(name) values(&#x27;Tom&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>执行查询语句查看插入的数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=# insert into biz_test(name) values(&#x27;Tom&#x27;);INSERT 0 1aa=# select * from biz_test; id | name ----+------  1 | Tom(1 row)</span><br></pre></td></tr></table></figure>\n\n<p>发送数据的确插入成功，并实现了id的自增。</p>\n<h3 id=\"自增方式二示例\"><a href=\"#自增方式二示例\" class=\"headerlink\" title=\"自增方式二示例\"></a><strong>自增方式二示例</strong></h3><p>通过上面的示例可以衍生出另外一种实现方式。既然使用默认的三种类型可以完成自增的实现，那么将对应的底层实现进行拆分，是不是也可以实现自增的效果呢？</p>\n<p>第一步：创建一个序列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=</span><br></pre></td></tr></table></figure>\n\n<p>第二步，创建表结构时将该序列设置为字段的默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=# create table biz_test(id integer primary key default nextval(&#x27;biz_test_id_seq&#x27;))</span><br></pre></td></tr></table></figure>\n\n<p>这样，同样实现了字段的自增效果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=# \\d biz_test                         Table &quot;public.biz_test&quot; Column |  Type   |                       Modifiers--------+---------+------------------------------------------------------- id     | integer | not null default nextval(&#x27;biz_test_id_seq&#x27;::regclass)Indexes:    &quot;biz_test_pkey&quot; PRIMARY KEY, btree (id)</span><br></pre></td></tr></table></figure>\n\n<p>针对第二步，如果建表的时并没有设置该字段为默认值，可以后续添加该字段为自增，使用alter语句来进行修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE ONLY public.biz_test ALTER COLUMN id SET DEFAULT nextval(&#x27;public.biz_test_id_seq&#x27;::regclass);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建序列的语法\"><a href=\"#创建序列的语法\" class=\"headerlink\" title=\"创建序列的语法\"></a><strong>创建序列的语法</strong></h3><p>上面创建序列时使用了默认值，如果需要指定序列的起始值、步长等参数，可以使用如下语句进行序列的创建。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE SEQUENCE public.biz_test_id_seq    START WITH 1    INCREMENT BY 1    NO MINVALUE    NO MAXVALUE    CACHE 1;</span><br></pre></td></tr></table></figure>\n\n<p>上述语法其实已经很明显了，START WITH指定起始值，INCREMENT BY指定增长的步长。</p>\n<p>Postgresql查找索引的方法与Mysql也不一样，对应的查询语句是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_indexes where tablename=&#x27;biz_test&#x27;; schemaname | tablename |   indexname   | tablespace |                               indexdef</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_statio_all_indexes where relname=&#x27;biz_test&#x27;; relid | indexrelid | schemaname | relname  | indexrelname  | idx_blks_read | idx_blks_hit-------+------------+------------+----------+---------------+---------------+-------------- 20753 |      20757 | public     | biz_test | biz_test_pkey |             0 |            0(1 row)</span><br></pre></td></tr></table></figure>\n\n<p>关于PostgreSQL数据库实现表字段的自增就讲这么多，在学习该项技术时给我最大的启发就是：实现同一功能的不同技术的横向对比，是拓展多维度解决思路的利器。</p>\n<pre><code>----------  END  ----------\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>在使用Mysql时，创建表结构时可以通过关键字auto_increment来指定主键是否自增。但在Postgresql数据库中，虽然可以实现字段的自增，但从本质上来说却并不支持Mysql那样的自增。</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png\" alt=\"image-20210825085148884\"></p>","more":"<h3 id=\"Postgresql的自增机制\"><a href=\"#Postgresql的自增机制\" class=\"headerlink\" title=\"Postgresql的自增机制\"></a><strong>Postgresql的自增机制</strong></h3><p>Postgresql中字段的自增是通过序列来实现的。整体机制是：1、序列可以实现自动增长；2、表字段可以指定默认值。3、结合两者，将默认值指定为自增序列便实现了对应字段值的自增。</p>\n<p>Postgresql提供了三种serial数据类型：smallserial，serial，bigserial。它们与真正的类型有所区别，在创建表结构时会先创建一个序列，并将序列赋值给使用的字段。</p>\n<p>也就是说，这三个类型是为了在创建唯一标识符列时方便使用而封装的类型。</p>\n<p>bigserial创建一个bigint类型的自增，serial创建一个int类型的自增，smallserial创建一个smallint类的自增。</p>\n<h3 id=\"自增方式一示例\"><a href=\"#自增方式一示例\" class=\"headerlink\" title=\"自增方式一示例\"></a><strong>自增方式一示例</strong></h3><p>使用示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table biz_test(id serial PRIMARY KEY,name varchar);</span><br></pre></td></tr></table></figure>\n\n<p>此时生成的表结构为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=# \\d biz_test                              Table &quot;public.biz_test&quot; Column |       Type        |                       Modifiers--------+-------------------+------------------------------------------------------- id     | integer           | not null default nextval(&#x27;biz_test_id_seq&#x27;::regclass) name   | character varying |Indexes:    &quot;biz_test_pkey&quot; PRIMARY KEY, btree (id)</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到ID字段默认值为nextval(‘biz_test_id_seq’::regclass)。也就是说，在执行创建语句时首先创建了一个以“表名”+”_id_seq”的序列。然后再将该序列赋值给id字段。对应序列的类型为Integer类型。</p>\n<p>此时，通过一条insert语句来验证一下是否实现了自增。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=# insert into biz_test(name) values(&#x27;Tom&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>执行查询语句查看插入的数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=# insert into biz_test(name) values(&#x27;Tom&#x27;);INSERT 0 1aa=# select * from biz_test; id | name ----+------  1 | Tom(1 row)</span><br></pre></td></tr></table></figure>\n\n<p>发送数据的确插入成功，并实现了id的自增。</p>\n<h3 id=\"自增方式二示例\"><a href=\"#自增方式二示例\" class=\"headerlink\" title=\"自增方式二示例\"></a><strong>自增方式二示例</strong></h3><p>通过上面的示例可以衍生出另外一种实现方式。既然使用默认的三种类型可以完成自增的实现，那么将对应的底层实现进行拆分，是不是也可以实现自增的效果呢？</p>\n<p>第一步：创建一个序列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=</span><br></pre></td></tr></table></figure>\n\n<p>第二步，创建表结构时将该序列设置为字段的默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=# create table biz_test(id integer primary key default nextval(&#x27;biz_test_id_seq&#x27;))</span><br></pre></td></tr></table></figure>\n\n<p>这样，同样实现了字段的自增效果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa=# \\d biz_test                         Table &quot;public.biz_test&quot; Column |  Type   |                       Modifiers--------+---------+------------------------------------------------------- id     | integer | not null default nextval(&#x27;biz_test_id_seq&#x27;::regclass)Indexes:    &quot;biz_test_pkey&quot; PRIMARY KEY, btree (id)</span><br></pre></td></tr></table></figure>\n\n<p>针对第二步，如果建表的时并没有设置该字段为默认值，可以后续添加该字段为自增，使用alter语句来进行修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE ONLY public.biz_test ALTER COLUMN id SET DEFAULT nextval(&#x27;public.biz_test_id_seq&#x27;::regclass);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建序列的语法\"><a href=\"#创建序列的语法\" class=\"headerlink\" title=\"创建序列的语法\"></a><strong>创建序列的语法</strong></h3><p>上面创建序列时使用了默认值，如果需要指定序列的起始值、步长等参数，可以使用如下语句进行序列的创建。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE SEQUENCE public.biz_test_id_seq    START WITH 1    INCREMENT BY 1    NO MINVALUE    NO MAXVALUE    CACHE 1;</span><br></pre></td></tr></table></figure>\n\n<p>上述语法其实已经很明显了，START WITH指定起始值，INCREMENT BY指定增长的步长。</p>\n<p>Postgresql查找索引的方法与Mysql也不一样，对应的查询语句是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_indexes where tablename=&#x27;biz_test&#x27;; schemaname | tablename |   indexname   | tablespace |                               indexdef</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from pg_statio_all_indexes where relname=&#x27;biz_test&#x27;; relid | indexrelid | schemaname | relname  | indexrelname  | idx_blks_read | idx_blks_hit-------+------------+------------+----------+---------------+---------------+-------------- 20753 |      20757 | public     | biz_test | biz_test_pkey |             0 |            0(1 row)</span><br></pre></td></tr></table></figure>\n\n<p>关于PostgreSQL数据库实现表字段的自增就讲这么多，在学习该项技术时给我最大的启发就是：实现同一功能的不同技术的横向对比，是拓展多维度解决思路的利器。</p>\n<pre><code>----------  END  ----------\n</code></pre>"},{"title":"mybatis异常问题的捕获","date":"2021-08-24T07:23:24.000Z","_content":"\n今天定位问题定时任务不运行，通过远程debug 发现是异常没有被捕获，\n\nMybatisMapperProxy  这个类会有异常抛出\n\n<!--more-->\n\n先来看看MybatisMapperProxy  代码：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824153342299.png\" alt=\"image-20210824153342299\" style=\"zoom:80%;\" />\n\n其中出现的throwable代表可能会抛出异常，所以这个异常需要处理，所以我们在处理代码的时候，也要考虑异常的处理方式。\n\n但是日志并有打印出来，造成排查问题无法迅速，这就引入了一个思考，我们的代码，要控制异常处理，针对异常的场景该有警觉\n\n原有代码长这样：\n\n![image-20210824152818184](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824152818184.png)\n\n左边是之前的代码，异常范围只是IOExeception 右边是变更后的代码，这个异常范围太窄，带了的问题，就是异常无法被捕获，这就造成了，定位问题困难。\n\n带来的思考\n\nJava异常处理中有throw开头的三兄弟，分别是throw,throws以及Throwable，那么他们之间到底怎么区分呢，且听我慢慢道来。\n\n#### Throwable\n\nThrowable是一个类，该类被异常类Exception以及错误类Error继承，其主要结构如下：\n\nThrowable  \n       |-- Error 严重错误，如栈溢出，内存溢出等  \n       |-- Exception  \n            |- - CheckedException 可查异常，若不加处理，编译不通过  \n            |- - RuntimeException 运行时异常，可以进行编译\n\nJava异常分为两种，一种是可查异常，即必须通过处理才能够进行编译，如FileNotFoundException等；另外一种是运行时异常，可以不用对其进行处理就能够编译，例如数组下标越界、除0等异常。\n\n因此，Throwable作为所有异常的超类，在不知道发生何种异常的时候，可以直接使用Throwable来代替Exception或者各种具体的异常类。\n\n#### throws\n\nthrows的作用是在方法声明的后面指明该方法可能会抛出异常（并不一定真的会出现异常）。如果在执行这个方法时出现异常，那么这个方法就不再执行了，而是抛出一个异常，把这个异常抛给调用他的方法，并且让调用他的那个方法去处理。\n\n结合一段代码进行分析：\n\n```\npublic static void method1() {\ntry {\nmethod2();\n}catch(Exception e) {\nSystem.out.println(\"failed\");\n}\n}\n\npublic static void method2() throws FileNotFoundException{\nFile f = new File(\"1.txt\");\nSystem.out.println(\"试图打开文件\");\nnew FileInputStream(f);\nSystem.out.println(\"打开文件成功\");\n}\n\npublic static void main(String[] args) {\n\nmethod1();\n}\n```\n\n根据上面的代码，在定义method2时，通过throws指明该方法可能会抛出FileNotFoundException异常。首先main函数调用method1，method1调用method2，而method2中文件f并不存在，因此在new FileInputStream(f)这行代码抛出异常，method2终止，并把这个抛出的异常甩锅给method1 。而此时，method1刚好可以catch住这个异常，异常就被处理掉了，得到的结果如下：  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191019095213839.png)\n\n#### throw\n\n与throws不同，throw是一定会抛出一个异常，而且是在方法体内部使用。之前所说的异常类对象，都是JVM自动进行实例化的；有时候用户想要亲自实例化异常类对象，那么这个时候throw就登场了。先看一段代码：\n\n```\npublic static void main(String[] args) {\n\ntry {\nthrow new FileNotFoundException();\n}catch(Throwable e){\nSystem.out.println(\"File not found\");\n}\n}\n```\n\n该代码比较简单，在catch中通过throw，直接实例化了一个异常类FileNotFoundException的对象，通过catch接住，并进行输出，得到的结果如下：  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191019100030627.png)\n\n### 总结\n\nThrowable是所有异常类的超类，Exception和Error两个类直接继承它；\n\nthrows写在方法声明的后面，表明这个方法可能会抛出某种异常；\n\nthrow写在方法体内部，手动抛出一个异常。\n\n","source":"_posts/mybatis异常问题的捕获.md","raw":"---\ntitle: mybatis异常问题的捕获\ndate: 2021-08-24 15:23:24\ntags: \n  - java \n  - mybatis\ncategories: \n- mybatis\n---\n\n今天定位问题定时任务不运行，通过远程debug 发现是异常没有被捕获，\n\nMybatisMapperProxy  这个类会有异常抛出\n\n<!--more-->\n\n先来看看MybatisMapperProxy  代码：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824153342299.png\" alt=\"image-20210824153342299\" style=\"zoom:80%;\" />\n\n其中出现的throwable代表可能会抛出异常，所以这个异常需要处理，所以我们在处理代码的时候，也要考虑异常的处理方式。\n\n但是日志并有打印出来，造成排查问题无法迅速，这就引入了一个思考，我们的代码，要控制异常处理，针对异常的场景该有警觉\n\n原有代码长这样：\n\n![image-20210824152818184](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824152818184.png)\n\n左边是之前的代码，异常范围只是IOExeception 右边是变更后的代码，这个异常范围太窄，带了的问题，就是异常无法被捕获，这就造成了，定位问题困难。\n\n带来的思考\n\nJava异常处理中有throw开头的三兄弟，分别是throw,throws以及Throwable，那么他们之间到底怎么区分呢，且听我慢慢道来。\n\n#### Throwable\n\nThrowable是一个类，该类被异常类Exception以及错误类Error继承，其主要结构如下：\n\nThrowable  \n       |-- Error 严重错误，如栈溢出，内存溢出等  \n       |-- Exception  \n            |- - CheckedException 可查异常，若不加处理，编译不通过  \n            |- - RuntimeException 运行时异常，可以进行编译\n\nJava异常分为两种，一种是可查异常，即必须通过处理才能够进行编译，如FileNotFoundException等；另外一种是运行时异常，可以不用对其进行处理就能够编译，例如数组下标越界、除0等异常。\n\n因此，Throwable作为所有异常的超类，在不知道发生何种异常的时候，可以直接使用Throwable来代替Exception或者各种具体的异常类。\n\n#### throws\n\nthrows的作用是在方法声明的后面指明该方法可能会抛出异常（并不一定真的会出现异常）。如果在执行这个方法时出现异常，那么这个方法就不再执行了，而是抛出一个异常，把这个异常抛给调用他的方法，并且让调用他的那个方法去处理。\n\n结合一段代码进行分析：\n\n```\npublic static void method1() {\ntry {\nmethod2();\n}catch(Exception e) {\nSystem.out.println(\"failed\");\n}\n}\n\npublic static void method2() throws FileNotFoundException{\nFile f = new File(\"1.txt\");\nSystem.out.println(\"试图打开文件\");\nnew FileInputStream(f);\nSystem.out.println(\"打开文件成功\");\n}\n\npublic static void main(String[] args) {\n\nmethod1();\n}\n```\n\n根据上面的代码，在定义method2时，通过throws指明该方法可能会抛出FileNotFoundException异常。首先main函数调用method1，method1调用method2，而method2中文件f并不存在，因此在new FileInputStream(f)这行代码抛出异常，method2终止，并把这个抛出的异常甩锅给method1 。而此时，method1刚好可以catch住这个异常，异常就被处理掉了，得到的结果如下：  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191019095213839.png)\n\n#### throw\n\n与throws不同，throw是一定会抛出一个异常，而且是在方法体内部使用。之前所说的异常类对象，都是JVM自动进行实例化的；有时候用户想要亲自实例化异常类对象，那么这个时候throw就登场了。先看一段代码：\n\n```\npublic static void main(String[] args) {\n\ntry {\nthrow new FileNotFoundException();\n}catch(Throwable e){\nSystem.out.println(\"File not found\");\n}\n}\n```\n\n该代码比较简单，在catch中通过throw，直接实例化了一个异常类FileNotFoundException的对象，通过catch接住，并进行输出，得到的结果如下：  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191019100030627.png)\n\n### 总结\n\nThrowable是所有异常类的超类，Exception和Error两个类直接继承它；\n\nthrows写在方法声明的后面，表明这个方法可能会抛出某种异常；\n\nthrow写在方法体内部，手动抛出一个异常。\n\n","slug":"mybatis异常问题的捕获","published":1,"updated":"2021-08-24T07:38:32.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6ou000zcmv9d0kw4jfx","content":"<p>今天定位问题定时任务不运行，通过远程debug 发现是异常没有被捕获，</p>\n<p>MybatisMapperProxy  这个类会有异常抛出</p>\n<span id=\"more\"></span>\n\n<p>先来看看MybatisMapperProxy  代码：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824153342299.png\" alt=\"image-20210824153342299\" style=\"zoom:80%;\" />\n\n<p>其中出现的throwable代表可能会抛出异常，所以这个异常需要处理，所以我们在处理代码的时候，也要考虑异常的处理方式。</p>\n<p>但是日志并有打印出来，造成排查问题无法迅速，这就引入了一个思考，我们的代码，要控制异常处理，针对异常的场景该有警觉</p>\n<p>原有代码长这样：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824152818184.png\" alt=\"image-20210824152818184\"></p>\n<p>左边是之前的代码，异常范围只是IOExeception 右边是变更后的代码，这个异常范围太窄，带了的问题，就是异常无法被捕获，这就造成了，定位问题困难。</p>\n<p>带来的思考</p>\n<p>Java异常处理中有throw开头的三兄弟，分别是throw,throws以及Throwable，那么他们之间到底怎么区分呢，且听我慢慢道来。</p>\n<h4 id=\"Throwable\"><a href=\"#Throwable\" class=\"headerlink\" title=\"Throwable\"></a>Throwable</h4><p>Throwable是一个类，该类被异常类Exception以及错误类Error继承，其主要结构如下：</p>\n<p>Throwable<br>       |– Error 严重错误，如栈溢出，内存溢出等<br>       |– Exception<br>            |- - CheckedException 可查异常，若不加处理，编译不通过<br>            |- - RuntimeException 运行时异常，可以进行编译</p>\n<p>Java异常分为两种，一种是可查异常，即必须通过处理才能够进行编译，如FileNotFoundException等；另外一种是运行时异常，可以不用对其进行处理就能够编译，例如数组下标越界、除0等异常。</p>\n<p>因此，Throwable作为所有异常的超类，在不知道发生何种异常的时候，可以直接使用Throwable来代替Exception或者各种具体的异常类。</p>\n<h4 id=\"throws\"><a href=\"#throws\" class=\"headerlink\" title=\"throws\"></a>throws</h4><p>throws的作用是在方法声明的后面指明该方法可能会抛出异常（并不一定真的会出现异常）。如果在执行这个方法时出现异常，那么这个方法就不再执行了，而是抛出一个异常，把这个异常抛给调用他的方法，并且让调用他的那个方法去处理。</p>\n<p>结合一段代码进行分析：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void method1() &#123;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">method2();</span><br><span class=\"line\">&#125;catch(Exception e) &#123;</span><br><span class=\"line\">System.out.println(&quot;failed&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void method2() throws FileNotFoundException&#123;</span><br><span class=\"line\">File f = new File(&quot;1.txt&quot;);</span><br><span class=\"line\">System.out.println(&quot;试图打开文件&quot;);</span><br><span class=\"line\">new FileInputStream(f);</span><br><span class=\"line\">System.out.println(&quot;打开文件成功&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">method1();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据上面的代码，在定义method2时，通过throws指明该方法可能会抛出FileNotFoundException异常。首先main函数调用method1，method1调用method2，而method2中文件f并不存在，因此在new FileInputStream(f)这行代码抛出异常，method2终止，并把这个抛出的异常甩锅给method1 。而此时，method1刚好可以catch住这个异常，异常就被处理掉了，得到的结果如下：<br><img src=\"https://img-blog.csdnimg.cn/20191019095213839.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"throw\"><a href=\"#throw\" class=\"headerlink\" title=\"throw\"></a>throw</h4><p>与throws不同，throw是一定会抛出一个异常，而且是在方法体内部使用。之前所说的异常类对象，都是JVM自动进行实例化的；有时候用户想要亲自实例化异常类对象，那么这个时候throw就登场了。先看一段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">throw new FileNotFoundException();</span><br><span class=\"line\">&#125;catch(Throwable e)&#123;</span><br><span class=\"line\">System.out.println(&quot;File not found&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该代码比较简单，在catch中通过throw，直接实例化了一个异常类FileNotFoundException的对象，通过catch接住，并进行输出，得到的结果如下：<br><img src=\"https://img-blog.csdnimg.cn/20191019100030627.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Throwable是所有异常类的超类，Exception和Error两个类直接继承它；</p>\n<p>throws写在方法声明的后面，表明这个方法可能会抛出某种异常；</p>\n<p>throw写在方法体内部，手动抛出一个异常。</p>\n","site":{"data":{}},"excerpt":"<p>今天定位问题定时任务不运行，通过远程debug 发现是异常没有被捕获，</p>\n<p>MybatisMapperProxy  这个类会有异常抛出</p>","more":"<p>先来看看MybatisMapperProxy  代码：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824153342299.png\" alt=\"image-20210824153342299\" style=\"zoom:80%;\" />\n\n<p>其中出现的throwable代表可能会抛出异常，所以这个异常需要处理，所以我们在处理代码的时候，也要考虑异常的处理方式。</p>\n<p>但是日志并有打印出来，造成排查问题无法迅速，这就引入了一个思考，我们的代码，要控制异常处理，针对异常的场景该有警觉</p>\n<p>原有代码长这样：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210824152818184.png\" alt=\"image-20210824152818184\"></p>\n<p>左边是之前的代码，异常范围只是IOExeception 右边是变更后的代码，这个异常范围太窄，带了的问题，就是异常无法被捕获，这就造成了，定位问题困难。</p>\n<p>带来的思考</p>\n<p>Java异常处理中有throw开头的三兄弟，分别是throw,throws以及Throwable，那么他们之间到底怎么区分呢，且听我慢慢道来。</p>\n<h4 id=\"Throwable\"><a href=\"#Throwable\" class=\"headerlink\" title=\"Throwable\"></a>Throwable</h4><p>Throwable是一个类，该类被异常类Exception以及错误类Error继承，其主要结构如下：</p>\n<p>Throwable<br>       |– Error 严重错误，如栈溢出，内存溢出等<br>       |– Exception<br>            |- - CheckedException 可查异常，若不加处理，编译不通过<br>            |- - RuntimeException 运行时异常，可以进行编译</p>\n<p>Java异常分为两种，一种是可查异常，即必须通过处理才能够进行编译，如FileNotFoundException等；另外一种是运行时异常，可以不用对其进行处理就能够编译，例如数组下标越界、除0等异常。</p>\n<p>因此，Throwable作为所有异常的超类，在不知道发生何种异常的时候，可以直接使用Throwable来代替Exception或者各种具体的异常类。</p>\n<h4 id=\"throws\"><a href=\"#throws\" class=\"headerlink\" title=\"throws\"></a>throws</h4><p>throws的作用是在方法声明的后面指明该方法可能会抛出异常（并不一定真的会出现异常）。如果在执行这个方法时出现异常，那么这个方法就不再执行了，而是抛出一个异常，把这个异常抛给调用他的方法，并且让调用他的那个方法去处理。</p>\n<p>结合一段代码进行分析：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void method1() &#123;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">method2();</span><br><span class=\"line\">&#125;catch(Exception e) &#123;</span><br><span class=\"line\">System.out.println(&quot;failed&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void method2() throws FileNotFoundException&#123;</span><br><span class=\"line\">File f = new File(&quot;1.txt&quot;);</span><br><span class=\"line\">System.out.println(&quot;试图打开文件&quot;);</span><br><span class=\"line\">new FileInputStream(f);</span><br><span class=\"line\">System.out.println(&quot;打开文件成功&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">method1();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据上面的代码，在定义method2时，通过throws指明该方法可能会抛出FileNotFoundException异常。首先main函数调用method1，method1调用method2，而method2中文件f并不存在，因此在new FileInputStream(f)这行代码抛出异常，method2终止，并把这个抛出的异常甩锅给method1 。而此时，method1刚好可以catch住这个异常，异常就被处理掉了，得到的结果如下：<br><img src=\"https://img-blog.csdnimg.cn/20191019095213839.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"throw\"><a href=\"#throw\" class=\"headerlink\" title=\"throw\"></a>throw</h4><p>与throws不同，throw是一定会抛出一个异常，而且是在方法体内部使用。之前所说的异常类对象，都是JVM自动进行实例化的；有时候用户想要亲自实例化异常类对象，那么这个时候throw就登场了。先看一段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">throw new FileNotFoundException();</span><br><span class=\"line\">&#125;catch(Throwable e)&#123;</span><br><span class=\"line\">System.out.println(&quot;File not found&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该代码比较简单，在catch中通过throw，直接实例化了一个异常类FileNotFoundException的对象，通过catch接住，并进行输出，得到的结果如下：<br><img src=\"https://img-blog.csdnimg.cn/20191019100030627.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Throwable是所有异常类的超类，Exception和Error两个类直接继承它；</p>\n<p>throws写在方法声明的后面，表明这个方法可能会抛出某种异常；</p>\n<p>throw写在方法体内部，手动抛出一个异常。</p>"},{"title":"mybatis配置-返回date类型丢失时间","date":"2021-08-24T07:19:53.000Z","_content":"\n![](https://gitee.com/hxf88/imgrepo/raw/master/img/730326-20160715094002592-658803115.png)\n\nresultMap配置返回时间类型时，发现数据库时间是精确到秒的，但是返回给javabean之后丢失时分秒的信息，只有日期，时分秒为00:00:00\n\n原因为配置了date\n\n<!--more-->\n\n将jdbcType=\"DATE\"配置删掉就可以返回日期和时分秒信息了\n\n","source":"_posts/mybatis配置-返回date类型丢失时间.md","raw":"---\ntitle: mybatis配置-返回date类型丢失时间\ndate: 2021-08-24 15:19:53\ntags: \n  - java \n  - mybatis\ncategories: \n- mybatis\n---\n\n![](https://gitee.com/hxf88/imgrepo/raw/master/img/730326-20160715094002592-658803115.png)\n\nresultMap配置返回时间类型时，发现数据库时间是精确到秒的，但是返回给javabean之后丢失时分秒的信息，只有日期，时分秒为00:00:00\n\n原因为配置了date\n\n<!--more-->\n\n将jdbcType=\"DATE\"配置删掉就可以返回日期和时分秒信息了\n\n","slug":"mybatis配置-返回date类型丢失时间","published":1,"updated":"2021-08-24T07:22:36.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6ov0010cmv971t8eekc","content":"<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/730326-20160715094002592-658803115.png\"></p>\n<p>resultMap配置返回时间类型时，发现数据库时间是精确到秒的，但是返回给javabean之后丢失时分秒的信息，只有日期，时分秒为00:00:00</p>\n<p>原因为配置了date</p>\n<span id=\"more\"></span>\n\n<p>将jdbcType=”DATE”配置删掉就可以返回日期和时分秒信息了</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/730326-20160715094002592-658803115.png\"></p>\n<p>resultMap配置返回时间类型时，发现数据库时间是精确到秒的，但是返回给javabean之后丢失时分秒的信息，只有日期，时分秒为00:00:00</p>\n<p>原因为配置了date</p>","more":"<p>将jdbcType=”DATE”配置删掉就可以返回日期和时分秒信息了</p>"},{"title":"redis-cluster搭建","date":"2021-08-20T03:34:25.000Z","_content":"\n安装redis\n\n从redis官网下载最新版本redis（目前版本为6.2.5）\n\n解压redis压缩包到指定位置，进行安装\n\n```shell\nmake &&make install\n```\n\n<!--more-->\n\n主要有两步\n\n- 配置文件\n- 启动验证\n\n##### 集群规划\n\n根据官方推荐，集群部署至少要 3 台以上的master节点，最好使用 3 主 3 从六个节点的模式。\n\n| 节点            | 配置           | 端口 |\n| --------------- | -------------- | ---- |\n| cluster-master1 | redis7001.conf | 7001 |\n| cluster-master2 | redis7002.conf | 7002 |\n| cluster-master3 | redis7003.conf | 7003 |\n| cluster-slave1  | redis7004.conf | 7004 |\n| cluster-slave2  | redis7006.conf | 7005 |\n| cluster-slave3  | redis7006.conf | 7006 |\n\n##### 配置文件\n\n咱们准备 6 个配置文件 ，端口 7001，7002，7003，7004，7005，7006\n\n分别命名成 redis7001.conf ......redis7006.conf\n\nredis7001.conf 配置文件内容如下(记得复制6份并替换端口号)\n\n```shell\n# 端口\nport 7001  \n# 启用集群模式\ncluster-enabled yes \n# 根据你启用的节点来命名，最好和端口保持一致，这个是用来保存其他节点的名称，状态等信息的\ncluster-config-file nodes_7001.conf \n# 超时时间\ncluster-node-timeout 5000\nappendonly yes\n# 后台运行\ndaemonize yes\n# 非保护模式\nprotected-mode no \npidfile  /var/run/redis_7001.pid\n```\n\n##### 启动 redis 节点\n\n- 挨个启动节点\n\n```shell\nredis-server redis7001.conf\nredis-server redis7002.conf\nredis-server redis7003.conf\nredis-server redis7004.conf\nredis-server redis7005.conf\nredis-server redis7006.conf\n```\n\n看以下启动情况\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820113711538.png\" alt=\"image-20210820113711538\" style=\"zoom:80%;\" />\n\n- 启动集群\n\n```shell\n# 执行命令\n# --cluster-replicas 1 命令的意思是创建master的时候同时创建一个slave\n\n$ redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1\n# 执行成功结果如下\n# 我们可以看到 7001，7002，7003 成为了 master 节点，\n# 分别占用了 slot [0-5460]，[5461-10922]，[10923-16383]\n>>> Performing hash slots allocation on 6 nodes...\nMaster[0] -> Slots 0 - 5460\nMaster[1] -> Slots 5461 - 10922\nMaster[2] -> Slots 10923 - 16383\nAdding replica 127.0.0.1:7005 to 127.0.0.1:7001\nAdding replica 127.0.0.1:7006 to 127.0.0.1:7002\nAdding replica 127.0.0.1:7004 to 127.0.0.1:7003\n>>> Trying to optimize slaves allocation for anti-affinity\n[WARNING] Some slaves are in the same host as their master\nM: 0313641a28e42014a48cdaee47352ce88a2ae083 127.0.0.1:7001\n   slots:[0-5460] (5461 slots) master\nM: 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e 127.0.0.1:7002\n   slots:[5461-10922] (5462 slots) master\nM: 719b2f9daefb888f637c5dc4afa2768736241f74 127.0.0.1:7003\n   slots:[10923-16383] (5461 slots) master\nS: 987b3b816d3d1bb07e6c801c5048b0ed626766d4 127.0.0.1:7004\n   replicates 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e\nS: a876e977fc2ff9f18765a89c12fbd2c5b5b1f3bf 127.0.0.1:7005\n   replicates 719b2f9daefb888f637c5dc4afa2768736241f74\nS: ac8d6c4067dec795168ca705bf16efaa5f04095a 127.0.0.1:7006\n   replicates 0313641a28e42014a48cdaee47352ce88a2ae083\nCan I set the above configuration? (type 'yes' to accept): yes \n# 这里有个要手动输入 yes 确认的过程\n```\n\n![image-20210820113910359](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820113910359.png)\n\n##### 数据验证\n\n```\n[root@BIGDATA1 redis-6.2.5]#  redis-cli -p 7001 -c\n127.0.0.1:7001> set k1 v1\n-> Redirected to slot [12706] located at 127.0.0.1:7003\nOK\n127.0.0.1:7003> get k1\n\"v1\"\n127.0.0.1:7003> \n```\n\n","source":"_posts/redis-cluster搭建.md","raw":"---\ntitle: redis-cluster搭建\ndate: 2021-08-20 11:34:25\ntags:\n---\n\n安装redis\n\n从redis官网下载最新版本redis（目前版本为6.2.5）\n\n解压redis压缩包到指定位置，进行安装\n\n```shell\nmake &&make install\n```\n\n<!--more-->\n\n主要有两步\n\n- 配置文件\n- 启动验证\n\n##### 集群规划\n\n根据官方推荐，集群部署至少要 3 台以上的master节点，最好使用 3 主 3 从六个节点的模式。\n\n| 节点            | 配置           | 端口 |\n| --------------- | -------------- | ---- |\n| cluster-master1 | redis7001.conf | 7001 |\n| cluster-master2 | redis7002.conf | 7002 |\n| cluster-master3 | redis7003.conf | 7003 |\n| cluster-slave1  | redis7004.conf | 7004 |\n| cluster-slave2  | redis7006.conf | 7005 |\n| cluster-slave3  | redis7006.conf | 7006 |\n\n##### 配置文件\n\n咱们准备 6 个配置文件 ，端口 7001，7002，7003，7004，7005，7006\n\n分别命名成 redis7001.conf ......redis7006.conf\n\nredis7001.conf 配置文件内容如下(记得复制6份并替换端口号)\n\n```shell\n# 端口\nport 7001  \n# 启用集群模式\ncluster-enabled yes \n# 根据你启用的节点来命名，最好和端口保持一致，这个是用来保存其他节点的名称，状态等信息的\ncluster-config-file nodes_7001.conf \n# 超时时间\ncluster-node-timeout 5000\nappendonly yes\n# 后台运行\ndaemonize yes\n# 非保护模式\nprotected-mode no \npidfile  /var/run/redis_7001.pid\n```\n\n##### 启动 redis 节点\n\n- 挨个启动节点\n\n```shell\nredis-server redis7001.conf\nredis-server redis7002.conf\nredis-server redis7003.conf\nredis-server redis7004.conf\nredis-server redis7005.conf\nredis-server redis7006.conf\n```\n\n看以下启动情况\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820113711538.png\" alt=\"image-20210820113711538\" style=\"zoom:80%;\" />\n\n- 启动集群\n\n```shell\n# 执行命令\n# --cluster-replicas 1 命令的意思是创建master的时候同时创建一个slave\n\n$ redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1\n# 执行成功结果如下\n# 我们可以看到 7001，7002，7003 成为了 master 节点，\n# 分别占用了 slot [0-5460]，[5461-10922]，[10923-16383]\n>>> Performing hash slots allocation on 6 nodes...\nMaster[0] -> Slots 0 - 5460\nMaster[1] -> Slots 5461 - 10922\nMaster[2] -> Slots 10923 - 16383\nAdding replica 127.0.0.1:7005 to 127.0.0.1:7001\nAdding replica 127.0.0.1:7006 to 127.0.0.1:7002\nAdding replica 127.0.0.1:7004 to 127.0.0.1:7003\n>>> Trying to optimize slaves allocation for anti-affinity\n[WARNING] Some slaves are in the same host as their master\nM: 0313641a28e42014a48cdaee47352ce88a2ae083 127.0.0.1:7001\n   slots:[0-5460] (5461 slots) master\nM: 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e 127.0.0.1:7002\n   slots:[5461-10922] (5462 slots) master\nM: 719b2f9daefb888f637c5dc4afa2768736241f74 127.0.0.1:7003\n   slots:[10923-16383] (5461 slots) master\nS: 987b3b816d3d1bb07e6c801c5048b0ed626766d4 127.0.0.1:7004\n   replicates 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e\nS: a876e977fc2ff9f18765a89c12fbd2c5b5b1f3bf 127.0.0.1:7005\n   replicates 719b2f9daefb888f637c5dc4afa2768736241f74\nS: ac8d6c4067dec795168ca705bf16efaa5f04095a 127.0.0.1:7006\n   replicates 0313641a28e42014a48cdaee47352ce88a2ae083\nCan I set the above configuration? (type 'yes' to accept): yes \n# 这里有个要手动输入 yes 确认的过程\n```\n\n![image-20210820113910359](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820113910359.png)\n\n##### 数据验证\n\n```\n[root@BIGDATA1 redis-6.2.5]#  redis-cli -p 7001 -c\n127.0.0.1:7001> set k1 v1\n-> Redirected to slot [12706] located at 127.0.0.1:7003\nOK\n127.0.0.1:7003> get k1\n\"v1\"\n127.0.0.1:7003> \n```\n\n","slug":"redis-cluster搭建","published":1,"updated":"2021-08-23T00:38:38.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6ox0014cmv9byh66gwd","content":"<p>安装redis</p>\n<p>从redis官网下载最新版本redis（目前版本为6.2.5）</p>\n<p>解压redis压缩包到指定位置，进行安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp;make install</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>主要有两步</p>\n<ul>\n<li>配置文件</li>\n<li>启动验证</li>\n</ul>\n<h5 id=\"集群规划\"><a href=\"#集群规划\" class=\"headerlink\" title=\"集群规划\"></a>集群规划</h5><p>根据官方推荐，集群部署至少要 3 台以上的master节点，最好使用 3 主 3 从六个节点的模式。</p>\n<table>\n<thead>\n<tr>\n<th>节点</th>\n<th>配置</th>\n<th>端口</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cluster-master1</td>\n<td>redis7001.conf</td>\n<td>7001</td>\n</tr>\n<tr>\n<td>cluster-master2</td>\n<td>redis7002.conf</td>\n<td>7002</td>\n</tr>\n<tr>\n<td>cluster-master3</td>\n<td>redis7003.conf</td>\n<td>7003</td>\n</tr>\n<tr>\n<td>cluster-slave1</td>\n<td>redis7004.conf</td>\n<td>7004</td>\n</tr>\n<tr>\n<td>cluster-slave2</td>\n<td>redis7006.conf</td>\n<td>7005</td>\n</tr>\n<tr>\n<td>cluster-slave3</td>\n<td>redis7006.conf</td>\n<td>7006</td>\n</tr>\n</tbody></table>\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><p>咱们准备 6 个配置文件 ，端口 7001，7002，7003，7004，7005，7006</p>\n<p>分别命名成 redis7001.conf ……redis7006.conf</p>\n<p>redis7001.conf 配置文件内容如下(记得复制6份并替换端口号)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 端口</span></span><br><span class=\"line\">port 7001  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启用集群模式</span></span><br><span class=\"line\">cluster-enabled yes </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 根据你启用的节点来命名，最好和端口保持一致，这个是用来保存其他节点的名称，状态等信息的</span></span><br><span class=\"line\">cluster-config-file nodes_7001.conf </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 超时时间</span></span><br><span class=\"line\">cluster-node-timeout 5000</span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 后台运行</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 非保护模式</span></span><br><span class=\"line\">protected-mode no </span><br><span class=\"line\">pidfile  /var/run/redis_7001.pid</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动-redis-节点\"><a href=\"#启动-redis-节点\" class=\"headerlink\" title=\"启动 redis 节点\"></a>启动 redis 节点</h5><ul>\n<li>挨个启动节点</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server redis7001.conf</span><br><span class=\"line\">redis-server redis7002.conf</span><br><span class=\"line\">redis-server redis7003.conf</span><br><span class=\"line\">redis-server redis7004.conf</span><br><span class=\"line\">redis-server redis7005.conf</span><br><span class=\"line\">redis-server redis7006.conf</span><br></pre></td></tr></table></figure>\n\n<p>看以下启动情况</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820113711538.png\" alt=\"image-20210820113711538\" style=\"zoom:80%;\" />\n\n<ul>\n<li>启动集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行命令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --cluster-replicas 1 命令的意思是创建master的时候同时创建一个slave</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行成功结果如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们可以看到 7001，7002，7003 成为了 master 节点，</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 分别占用了 slot [0-5460]，[5461-10922]，[10923-16383]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; Performing <span class=\"built_in\">hash</span> slots allocation on 6 nodes...</span></span><br><span class=\"line\">Master[0] -&gt; Slots 0 - 5460</span><br><span class=\"line\">Master[1] -&gt; Slots 5461 - 10922</span><br><span class=\"line\">Master[2] -&gt; Slots 10923 - 16383</span><br><span class=\"line\">Adding replica 127.0.0.1:7005 to 127.0.0.1:7001</span><br><span class=\"line\">Adding replica 127.0.0.1:7006 to 127.0.0.1:7002</span><br><span class=\"line\">Adding replica 127.0.0.1:7004 to 127.0.0.1:7003</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; Trying to optimize slaves allocation <span class=\"keyword\">for</span> anti-affinity</span></span><br><span class=\"line\">[WARNING] Some slaves are in the same host as their master</span><br><span class=\"line\">M: 0313641a28e42014a48cdaee47352ce88a2ae083 127.0.0.1:7001</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">M: 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e 127.0.0.1:7002</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">M: 719b2f9daefb888f637c5dc4afa2768736241f74 127.0.0.1:7003</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">S: 987b3b816d3d1bb07e6c801c5048b0ed626766d4 127.0.0.1:7004</span><br><span class=\"line\">   replicates 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e</span><br><span class=\"line\">S: a876e977fc2ff9f18765a89c12fbd2c5b5b1f3bf 127.0.0.1:7005</span><br><span class=\"line\">   replicates 719b2f9daefb888f637c5dc4afa2768736241f74</span><br><span class=\"line\">S: ac8d6c4067dec795168ca705bf16efaa5f04095a 127.0.0.1:7006</span><br><span class=\"line\">   replicates 0313641a28e42014a48cdaee47352ce88a2ae083</span><br><span class=\"line\">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里有个要手动输入 yes 确认的过程</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820113910359.png\" alt=\"image-20210820113910359\"></p>\n<h5 id=\"数据验证\"><a href=\"#数据验证\" class=\"headerlink\" title=\"数据验证\"></a>数据验证</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@BIGDATA1 redis-6.2.5]#  redis-cli -p 7001 -c</span><br><span class=\"line\">127.0.0.1:7001&gt; set k1 v1</span><br><span class=\"line\">-&gt; Redirected to slot [12706] located at 127.0.0.1:7003</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:7003&gt; get k1</span><br><span class=\"line\">&quot;v1&quot;</span><br><span class=\"line\">127.0.0.1:7003&gt; </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>安装redis</p>\n<p>从redis官网下载最新版本redis（目前版本为6.2.5）</p>\n<p>解压redis压缩包到指定位置，进行安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp;make install</span><br></pre></td></tr></table></figure>","more":"<p>主要有两步</p>\n<ul>\n<li>配置文件</li>\n<li>启动验证</li>\n</ul>\n<h5 id=\"集群规划\"><a href=\"#集群规划\" class=\"headerlink\" title=\"集群规划\"></a>集群规划</h5><p>根据官方推荐，集群部署至少要 3 台以上的master节点，最好使用 3 主 3 从六个节点的模式。</p>\n<table>\n<thead>\n<tr>\n<th>节点</th>\n<th>配置</th>\n<th>端口</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cluster-master1</td>\n<td>redis7001.conf</td>\n<td>7001</td>\n</tr>\n<tr>\n<td>cluster-master2</td>\n<td>redis7002.conf</td>\n<td>7002</td>\n</tr>\n<tr>\n<td>cluster-master3</td>\n<td>redis7003.conf</td>\n<td>7003</td>\n</tr>\n<tr>\n<td>cluster-slave1</td>\n<td>redis7004.conf</td>\n<td>7004</td>\n</tr>\n<tr>\n<td>cluster-slave2</td>\n<td>redis7006.conf</td>\n<td>7005</td>\n</tr>\n<tr>\n<td>cluster-slave3</td>\n<td>redis7006.conf</td>\n<td>7006</td>\n</tr>\n</tbody></table>\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><p>咱们准备 6 个配置文件 ，端口 7001，7002，7003，7004，7005，7006</p>\n<p>分别命名成 redis7001.conf ……redis7006.conf</p>\n<p>redis7001.conf 配置文件内容如下(记得复制6份并替换端口号)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 端口</span></span><br><span class=\"line\">port 7001  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启用集群模式</span></span><br><span class=\"line\">cluster-enabled yes </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 根据你启用的节点来命名，最好和端口保持一致，这个是用来保存其他节点的名称，状态等信息的</span></span><br><span class=\"line\">cluster-config-file nodes_7001.conf </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 超时时间</span></span><br><span class=\"line\">cluster-node-timeout 5000</span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 后台运行</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 非保护模式</span></span><br><span class=\"line\">protected-mode no </span><br><span class=\"line\">pidfile  /var/run/redis_7001.pid</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动-redis-节点\"><a href=\"#启动-redis-节点\" class=\"headerlink\" title=\"启动 redis 节点\"></a>启动 redis 节点</h5><ul>\n<li>挨个启动节点</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server redis7001.conf</span><br><span class=\"line\">redis-server redis7002.conf</span><br><span class=\"line\">redis-server redis7003.conf</span><br><span class=\"line\">redis-server redis7004.conf</span><br><span class=\"line\">redis-server redis7005.conf</span><br><span class=\"line\">redis-server redis7006.conf</span><br></pre></td></tr></table></figure>\n\n<p>看以下启动情况</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820113711538.png\" alt=\"image-20210820113711538\" style=\"zoom:80%;\" />\n\n<ul>\n<li>启动集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行命令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --cluster-replicas 1 命令的意思是创建master的时候同时创建一个slave</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行成功结果如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们可以看到 7001，7002，7003 成为了 master 节点，</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 分别占用了 slot [0-5460]，[5461-10922]，[10923-16383]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; Performing <span class=\"built_in\">hash</span> slots allocation on 6 nodes...</span></span><br><span class=\"line\">Master[0] -&gt; Slots 0 - 5460</span><br><span class=\"line\">Master[1] -&gt; Slots 5461 - 10922</span><br><span class=\"line\">Master[2] -&gt; Slots 10923 - 16383</span><br><span class=\"line\">Adding replica 127.0.0.1:7005 to 127.0.0.1:7001</span><br><span class=\"line\">Adding replica 127.0.0.1:7006 to 127.0.0.1:7002</span><br><span class=\"line\">Adding replica 127.0.0.1:7004 to 127.0.0.1:7003</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; Trying to optimize slaves allocation <span class=\"keyword\">for</span> anti-affinity</span></span><br><span class=\"line\">[WARNING] Some slaves are in the same host as their master</span><br><span class=\"line\">M: 0313641a28e42014a48cdaee47352ce88a2ae083 127.0.0.1:7001</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">M: 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e 127.0.0.1:7002</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">M: 719b2f9daefb888f637c5dc4afa2768736241f74 127.0.0.1:7003</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">S: 987b3b816d3d1bb07e6c801c5048b0ed626766d4 127.0.0.1:7004</span><br><span class=\"line\">   replicates 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e</span><br><span class=\"line\">S: a876e977fc2ff9f18765a89c12fbd2c5b5b1f3bf 127.0.0.1:7005</span><br><span class=\"line\">   replicates 719b2f9daefb888f637c5dc4afa2768736241f74</span><br><span class=\"line\">S: ac8d6c4067dec795168ca705bf16efaa5f04095a 127.0.0.1:7006</span><br><span class=\"line\">   replicates 0313641a28e42014a48cdaee47352ce88a2ae083</span><br><span class=\"line\">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里有个要手动输入 yes 确认的过程</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820113910359.png\" alt=\"image-20210820113910359\"></p>\n<h5 id=\"数据验证\"><a href=\"#数据验证\" class=\"headerlink\" title=\"数据验证\"></a>数据验证</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@BIGDATA1 redis-6.2.5]#  redis-cli -p 7001 -c</span><br><span class=\"line\">127.0.0.1:7001&gt; set k1 v1</span><br><span class=\"line\">-&gt; Redirected to slot [12706] located at 127.0.0.1:7003</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:7003&gt; get k1</span><br><span class=\"line\">&quot;v1&quot;</span><br><span class=\"line\">127.0.0.1:7003&gt; </span><br></pre></td></tr></table></figure>"},{"title":"spacevim来管理vim","date":"2021-08-24T08:41:15.000Z","_content":"","source":"_posts/spacevim来管理vim.md","raw":"---\ntitle: spacevim来管理vim\ndate: 2021-08-24 16:41:15\ntags:\n---\n","slug":"spacevim来管理vim","published":1,"updated":"2021-08-24T08:41:15.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6oy0018cmv96892dsmo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"一次成功的FlinkSQL功能测试及实战演练","date":"2021-08-20T07:06:09.000Z","_content":"\n#### 1 前期准备\n\n###### 1.1 环境配置\n\n本次研究测试需要用到以下组件：\n\n```\nCDH 6.2.0\nFlink 1.12.5\nmysql 8.0\nimpala 3.2.0-cdh6.2.0\nkafka 2.2.1-cdh6.2.0\n```\n###### 1.2 依赖关系\n<!--more-->\n本次测试会将FlinkSql与kafka、mysql、impala等组件进行conn，因此需要以下依赖包：\n\n```\nflink-connector-kafka_2.11-1.12.2.jar\nflink-connector-jdbc_2.11-1.11.2.jar\nmysql-connector-java-5.1.47.jar\nImpalaJDBC4.jar\nImpalaJDBC41.jar\nflink-sql-connector-kafka_2.11-1.12.2.jar\n```\n\n#### 2 FlinkSql-kafka测试\n\nFlinkSql-kafka相关资料：\n\n```\nhttps://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/table/connectors/kafka.html\n```\n\n###### 2.1 FlinkSql-kafka常规功能测试\n\n通过FlinkSql将Kafka中的数据映射成一张表\n\n**2.1.1 创建常规topic**\n\n1、创建topic kafka-topics --create --zookeeper 192.168.5.185:2181,192.168.5.165:2181,192.168.5.187:2181 --replication-factor 3 --partitions 3 --topic test01\n\n2、模拟消费者 kafka-console-consumer --bootstrap-server 192.168.5.185:9092,192.168.5.165:9092,192.168.5.187:9092 --topic test01 --from-beginning\n\n3、模拟生产者 kafka-console-producer --broker-list 192.168.5.185:9092,192.168.5.165:9092,192.168.5.187:9092 --topic test01\n\n4、删除topic kafka-topics --delete --topic test01 --zookeeper 192.168.5.185:2181,192.168.5.165:2181,192.168.5.187:2181\n\n**2.1.2 FlinkSql建表**\n\n```\n CREATE TABLE t1 (\n    name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n    optDate TIMESTAMP(3) METADATA FROM 'timestamp'\n) WITH (\n    'connector' = 'kafka',  -- 使用 kafka connector\n    'topic' = 'test01',  -- kafka topic\n    'scan.startup.mode' = 'earliest-offset',\n    'properties.bootstrap.servers' = 'cdh2:9092,cdh2:9092,cdh4:9092',  -- kafka broker 地址\n    'format' = 'csv'  -- 数据源格式为 csv，\n);\n CREATE TABLE print_table (\n   name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n     optDate TIMESTAMP(3)\n ) WITH (\n  'connector' = 'print'\n );\n  \ninsert into print_table  select * from t1;\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153033529.png\" alt=\"image-20210820153033529\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153116109.png\" alt=\"image-20210820153116109\" style=\"zoom:80%;\" />\n\nsql_t1为提交的任务\n\n点击任务id即可跳转到flink控制页面\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153215899.png\" alt=\"image-20210820153215899\" style=\"zoom:67%;\" />\n\n**2.1.3 写入数据**\n\n```\nkafka-console-producer --broker-list cdh2:9092,cdh3:9092,cdh3:9092 --topic test01\n```\n\n往kafka中写入数据，同时查看flinksql中t1表的变化\n\n```\nlisi,18,1,2\nwangwu,30,2,2\n```\n\n观察表的变化（在taskmanger中）这是printconnector是在taskmanger上打印的。\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820154914018.png\" alt=\"image-20210820154914018\" style=\"zoom:67%;\" />\n\n**2.1.4 小结**\n\n通过kafka数据映射成表这个步骤，可以将数据实时的汇入表中，通过sql再进行后续操作，相对代码编写来说更为简易，同时有问题也相对好排查\n\n###### 2.2 FlinkSql-upsertKafka常规功能测试\n\nupsert-kafka 连接器生产 changelog 流，其中每条数据记录代表一个更新或删除事件。\n\n如果有key则update，没有key则insert，如果value的值为空，则表示删除\n\n**2.2.1 FlinkSql建upsert表**\n\n```\n--drop table t1;\nCREATE TABLE t1 (\n    name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n    optDate TIMESTAMP(3) METADATA FROM 'timestamp'\n) WITH (\n    'connector' = 'kafka',  -- 使用 kafka connector\n    'topic' = 'test02',  -- kafka topic\n    'scan.startup.mode' = 'earliest-offset',\n    'properties.bootstrap.servers' = 'cdh2:9092,cdh2:9092,cdh4:9092',  -- kafka broker 地址\n    'format' = 'csv'  -- 数据源格式为 csv，\n);\n--drop table t2;\nCREATE TABLE t2 (\n  name STRING,\n  age bigint,\n  isStu INT,\n  opt STRING,\n  optDate TIMESTAMP(3) ,\n  PRIMARY KEY (name) NOT ENFORCED\n) WITH (\n  'connector' = 'upsert-kafka',\n  'topic' = 'test03',\n  'properties.bootstrap.servers' = 'cdh2:9092,cdh3:9092,cdh4:9092',  -- kafka broker 地址\n  'key.format' = 'csv',\n  'value.format' = 'csv'\n);\nINSERT INTO t2 SELECT * FROM t1 ;\n CREATE TABLE print_table (\n   name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n     optDate TIMESTAMP(3)\n ) WITH (\n  'connector' = 'print'\n );\ninsert into print_table select * from t2;\n```\n\n**2.2.2 建立映射关系**\n\n将t1表中的数据写入到t2中\n\n```\nINSERT INTO t2 SELECT * FROM t1 ;\nselect * from t2;\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155552933.png\" alt=\"image-20210820155552933\" style=\"zoom:67%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155618080.png\" alt=\"image-20210820155618080\" style=\"zoom:67%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155905015.png\" alt=\"image-20210820155905015\" style=\"zoom:67%;\" />\n\n\n\n结果如下：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160025776.png\" alt=\"image-20210820160025776\" style=\"zoom:67%;\" />\n\n**2.2.3 更新数据**\n\n继续模拟kafka生产者，写入如下数据\n\n```\nzhangsan,25,1,2\nrisen,8,8,8\nlisi,0,0,\n```\n\n结果如下：\n\n![image-20210820160252365](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160252365.png)\n\n**2.2.4小结**\n\n通过如上测试，两条更新，一条插入，都已经实现了，\n\n根据官方文档描述，指定key的情况下，当value为空则判断为删除操作\n\n但是假如我插入一条数据到kafka，例如：\n\n```\nlisi,,,\n```\n\n![image-20210820160406848](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160406848.png)\n\n因为建表的时候有几个类型定义为了Int类型，这里为空它默认为是\"\"空字符串，有点呆，推测如果是json格式这类可以指定数据类型的，才能直接使用。对于csv这种数据类型不确定的，会存在无法推断类型的情况。\n\n鉴于此，为了探究是否真的具备删除操作，我又将上述所有表结构都进行了修改。为了试验简单，我直接修改表结构再次测试。\n\n```sql\nCREATE TABLE t1 (\n    name STRING,\n    age STRING,\n    isStu STRING,\n    opt STRING,\n    optDate TIMESTAMP(3) METADATA FROM 'timestamp'\n) WITH (\n    'connector' = 'kafka',  -- 使用 kafka connector\n    'topic' = 'test02',  -- kafka topic\n    'scan.startup.mode' = 'earliest-offset',\n    'properties.bootstrap.servers' = 'cdh2:9092,cdh3:9092,cdh4:9092',  -- kafka broker 地址\n    'format' = 'csv'  -- 数据源格式为 csv，\n);\nCREATE TABLE t2 (\n  name STRING,\n  age STRING,\n  isStu STRING,\n  opt STRING,\n  optDate TIMESTAMP(3) ,\n  PRIMARY KEY (name) NOT ENFORCED\n) WITH (\n  'connector' = 'upsert-kafka',\n  'topic' = 'test03',\n  'properties.bootstrap.servers' = 'cdh2:9092,cdh3:9092,cdh4:9092',  -- kafka broker 地址\n  'key.format' = 'csv',\n  'value.format' = 'csv'\n);\nINSERT INTO t2 SELECT * FROM t1 ;\nINSERT INTO t2 SELECT * FROM t1 ;\n CREATE TABLE print_table (\n   name string,\n    age STRING,\n    isStu STRING,\n    opt STRING,\n     optDate TIMESTAMP(3),\n       PRIMARY KEY (name) NOT ENFORCED\n\n ) WITH (\n  'connector' = 'print'\n );\ninsert into print_table select * from t2;\n```\n\n![image-20210820161149697](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820161149697.png)\n\n依然没有在t2表中删除掉该条记录，该功能需要进一步探索，以后在跟进。\n\n#### 2.3 FlinkSql-upsertKafka关于kafka中数据过期测试\n\n**2.3.1 创建10分钟策略的topic**\n\n```\nkafka-topics  --create --zookeeper cdh2:2181,cdh3:2181,cdh4:2181 --replication-factor 3 --partitions 3 --topic test01   --config log.retention.minutes=10\nkafka-console-producer  --broker-list cdh2:9092,cdh3:9092,cdh4:9092 --topic test01\nkafka-topics --delete --topic test01 --zookeeper cdh2:2181,cdh3:2181,cdh4:2181\nkafka-console-consumer  --bootstrap-server cdh2:9092,cdh3:9092,cdh4:9092 --topic output --from-beginning\nkafka-topics  --zookeeper cdh2:2181,cdh3:2181,cdh4:2181 --topic test01 --describe\n```\n\n**2.3.2 创建flinksql的表**\n\n```\nCREATE TABLE t1 (\n    name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n    optDate TIMESTAMP(3) METADATA FROM 'timestamp',\n    WATERMARK FOR optDate as optDate - INTERVAL '5' SECOND  -- 在ts上定义watermark，ts成为事件时间列\n) WITH (\n    'connector' = 'kafka',  -- 使用 kafka connector\n    'topic' = 'test01',  -- kafka topic\n    'scan.startup.mode' = 'earliest-offset',\n    'properties.bootstrap.servers' = 'cdh2:9092,cdh3:9092,cdh4:9092',  -- kafka broker 地址\n    'format' = 'csv'  -- 数据源格式为 csv，\n);\nCREATE TABLE t2 (\n  name STRING,\n  age bigint,\n  PRIMARY KEY (name) NOT ENFORCED\n) WITH (\n  'connector' = 'upsert-kafka',\n  'topic' = 'output',\n  'properties.bootstrap.servers' = 'cdh2:9092,cdh3:9092,cdh4:9092',  -- kafka broker 地址\n  'key.format' = 'csv',\n  'value.format' = 'csv'\n);\nINSERT INTO t2\nSELECT\nname,\nmax(age)\nFROM t1\nGROUP BY name;\n CREATE TABLE print_table (\n  name STRING,\n  age bigint,\n  PRIMARY KEY (name) NOT ENFORCED\n ) WITH (\n  'connector' = 'print'\n );\ninsert into print_table select * from t2;\n CREATE TABLE print_table1 (\n  name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n    optDate TIMESTAMP(3) \n ) WITH (\n  'connector' = 'print'\n );\ninsert into print_table1 select * from t1;\n\n```\n\n**2.3.3 写入数据**\n\n```\nzhangsan,18,1,insert\nlisi,20,2,update\nwangwu,30,1,delete\n```\n\n**2.3.4 等待策略过期**\n\n![image-20210820165954108](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820165954108.png)\n\n但是t2是基于t1的汇总表，在t1被清空的情况下，t2依旧存在\n\n#### 3 FlinkSql-JDBC\n\nFlinkSql-JDBC相关资料：\n\n```\nhttps://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/connectors/jdbc.html\n```\n\n###### 3.1 FlinkSql-JDBC-Mysql常规功能测试\n\n**3.1.1 mysql建表并写入数据**\n\n```sql\ncreate table test.test01(name varchar(10),age int, primary key (name));\nINSERT INTO test.test01(name, age)VALUES('zhangsan', 20);\nINSERT INTO test.test01(name, age)VALUES('lisi', 30);\nINSERT INTO test.test01(name, age)VALUES('wangwu', 18);\n```\n\n**3.1.2 flinkSql建表**\n\n```sql\ndrop table mysqlTest ;\ncreate table mysqlTest (\nname string,\nage int,\nPRIMARY KEY (name) NOT ENFORCED\n) with (\n 'connector' = 'jdbc',\n 'url' = 'jdbc:mysql://cdh1:3306/test',\n 'username' = 'root',\n 'password' = 'root',\n 'table-name' = 'test01'\n\n);\n CREATE TABLE print_table1 (\nname string,\nage int,\nPRIMARY KEY (name)  NOT ENFORCED\n ) WITH (\n  'connector' = 'print'\n );\ninsert into print_table1 select * from mysqlTest;\n```\n","source":"_posts/一次成功的FlinkSQL功能测试及实战演练.md","raw":"---\n\ntitle: 一次成功的FlinkSQL功能测试及实战演练\ndate: 2021-08-20 15:06:09\ntags:\n---\n\n#### 1 前期准备\n\n###### 1.1 环境配置\n\n本次研究测试需要用到以下组件：\n\n```\nCDH 6.2.0\nFlink 1.12.5\nmysql 8.0\nimpala 3.2.0-cdh6.2.0\nkafka 2.2.1-cdh6.2.0\n```\n###### 1.2 依赖关系\n<!--more-->\n本次测试会将FlinkSql与kafka、mysql、impala等组件进行conn，因此需要以下依赖包：\n\n```\nflink-connector-kafka_2.11-1.12.2.jar\nflink-connector-jdbc_2.11-1.11.2.jar\nmysql-connector-java-5.1.47.jar\nImpalaJDBC4.jar\nImpalaJDBC41.jar\nflink-sql-connector-kafka_2.11-1.12.2.jar\n```\n\n#### 2 FlinkSql-kafka测试\n\nFlinkSql-kafka相关资料：\n\n```\nhttps://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/table/connectors/kafka.html\n```\n\n###### 2.1 FlinkSql-kafka常规功能测试\n\n通过FlinkSql将Kafka中的数据映射成一张表\n\n**2.1.1 创建常规topic**\n\n1、创建topic kafka-topics --create --zookeeper 192.168.5.185:2181,192.168.5.165:2181,192.168.5.187:2181 --replication-factor 3 --partitions 3 --topic test01\n\n2、模拟消费者 kafka-console-consumer --bootstrap-server 192.168.5.185:9092,192.168.5.165:9092,192.168.5.187:9092 --topic test01 --from-beginning\n\n3、模拟生产者 kafka-console-producer --broker-list 192.168.5.185:9092,192.168.5.165:9092,192.168.5.187:9092 --topic test01\n\n4、删除topic kafka-topics --delete --topic test01 --zookeeper 192.168.5.185:2181,192.168.5.165:2181,192.168.5.187:2181\n\n**2.1.2 FlinkSql建表**\n\n```\n CREATE TABLE t1 (\n    name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n    optDate TIMESTAMP(3) METADATA FROM 'timestamp'\n) WITH (\n    'connector' = 'kafka',  -- 使用 kafka connector\n    'topic' = 'test01',  -- kafka topic\n    'scan.startup.mode' = 'earliest-offset',\n    'properties.bootstrap.servers' = 'cdh2:9092,cdh2:9092,cdh4:9092',  -- kafka broker 地址\n    'format' = 'csv'  -- 数据源格式为 csv，\n);\n CREATE TABLE print_table (\n   name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n     optDate TIMESTAMP(3)\n ) WITH (\n  'connector' = 'print'\n );\n  \ninsert into print_table  select * from t1;\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153033529.png\" alt=\"image-20210820153033529\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153116109.png\" alt=\"image-20210820153116109\" style=\"zoom:80%;\" />\n\nsql_t1为提交的任务\n\n点击任务id即可跳转到flink控制页面\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153215899.png\" alt=\"image-20210820153215899\" style=\"zoom:67%;\" />\n\n**2.1.3 写入数据**\n\n```\nkafka-console-producer --broker-list cdh2:9092,cdh3:9092,cdh3:9092 --topic test01\n```\n\n往kafka中写入数据，同时查看flinksql中t1表的变化\n\n```\nlisi,18,1,2\nwangwu,30,2,2\n```\n\n观察表的变化（在taskmanger中）这是printconnector是在taskmanger上打印的。\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820154914018.png\" alt=\"image-20210820154914018\" style=\"zoom:67%;\" />\n\n**2.1.4 小结**\n\n通过kafka数据映射成表这个步骤，可以将数据实时的汇入表中，通过sql再进行后续操作，相对代码编写来说更为简易，同时有问题也相对好排查\n\n###### 2.2 FlinkSql-upsertKafka常规功能测试\n\nupsert-kafka 连接器生产 changelog 流，其中每条数据记录代表一个更新或删除事件。\n\n如果有key则update，没有key则insert，如果value的值为空，则表示删除\n\n**2.2.1 FlinkSql建upsert表**\n\n```\n--drop table t1;\nCREATE TABLE t1 (\n    name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n    optDate TIMESTAMP(3) METADATA FROM 'timestamp'\n) WITH (\n    'connector' = 'kafka',  -- 使用 kafka connector\n    'topic' = 'test02',  -- kafka topic\n    'scan.startup.mode' = 'earliest-offset',\n    'properties.bootstrap.servers' = 'cdh2:9092,cdh2:9092,cdh4:9092',  -- kafka broker 地址\n    'format' = 'csv'  -- 数据源格式为 csv，\n);\n--drop table t2;\nCREATE TABLE t2 (\n  name STRING,\n  age bigint,\n  isStu INT,\n  opt STRING,\n  optDate TIMESTAMP(3) ,\n  PRIMARY KEY (name) NOT ENFORCED\n) WITH (\n  'connector' = 'upsert-kafka',\n  'topic' = 'test03',\n  'properties.bootstrap.servers' = 'cdh2:9092,cdh3:9092,cdh4:9092',  -- kafka broker 地址\n  'key.format' = 'csv',\n  'value.format' = 'csv'\n);\nINSERT INTO t2 SELECT * FROM t1 ;\n CREATE TABLE print_table (\n   name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n     optDate TIMESTAMP(3)\n ) WITH (\n  'connector' = 'print'\n );\ninsert into print_table select * from t2;\n```\n\n**2.2.2 建立映射关系**\n\n将t1表中的数据写入到t2中\n\n```\nINSERT INTO t2 SELECT * FROM t1 ;\nselect * from t2;\n```\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155552933.png\" alt=\"image-20210820155552933\" style=\"zoom:67%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155618080.png\" alt=\"image-20210820155618080\" style=\"zoom:67%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155905015.png\" alt=\"image-20210820155905015\" style=\"zoom:67%;\" />\n\n\n\n结果如下：\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160025776.png\" alt=\"image-20210820160025776\" style=\"zoom:67%;\" />\n\n**2.2.3 更新数据**\n\n继续模拟kafka生产者，写入如下数据\n\n```\nzhangsan,25,1,2\nrisen,8,8,8\nlisi,0,0,\n```\n\n结果如下：\n\n![image-20210820160252365](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160252365.png)\n\n**2.2.4小结**\n\n通过如上测试，两条更新，一条插入，都已经实现了，\n\n根据官方文档描述，指定key的情况下，当value为空则判断为删除操作\n\n但是假如我插入一条数据到kafka，例如：\n\n```\nlisi,,,\n```\n\n![image-20210820160406848](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160406848.png)\n\n因为建表的时候有几个类型定义为了Int类型，这里为空它默认为是\"\"空字符串，有点呆，推测如果是json格式这类可以指定数据类型的，才能直接使用。对于csv这种数据类型不确定的，会存在无法推断类型的情况。\n\n鉴于此，为了探究是否真的具备删除操作，我又将上述所有表结构都进行了修改。为了试验简单，我直接修改表结构再次测试。\n\n```sql\nCREATE TABLE t1 (\n    name STRING,\n    age STRING,\n    isStu STRING,\n    opt STRING,\n    optDate TIMESTAMP(3) METADATA FROM 'timestamp'\n) WITH (\n    'connector' = 'kafka',  -- 使用 kafka connector\n    'topic' = 'test02',  -- kafka topic\n    'scan.startup.mode' = 'earliest-offset',\n    'properties.bootstrap.servers' = 'cdh2:9092,cdh3:9092,cdh4:9092',  -- kafka broker 地址\n    'format' = 'csv'  -- 数据源格式为 csv，\n);\nCREATE TABLE t2 (\n  name STRING,\n  age STRING,\n  isStu STRING,\n  opt STRING,\n  optDate TIMESTAMP(3) ,\n  PRIMARY KEY (name) NOT ENFORCED\n) WITH (\n  'connector' = 'upsert-kafka',\n  'topic' = 'test03',\n  'properties.bootstrap.servers' = 'cdh2:9092,cdh3:9092,cdh4:9092',  -- kafka broker 地址\n  'key.format' = 'csv',\n  'value.format' = 'csv'\n);\nINSERT INTO t2 SELECT * FROM t1 ;\nINSERT INTO t2 SELECT * FROM t1 ;\n CREATE TABLE print_table (\n   name string,\n    age STRING,\n    isStu STRING,\n    opt STRING,\n     optDate TIMESTAMP(3),\n       PRIMARY KEY (name) NOT ENFORCED\n\n ) WITH (\n  'connector' = 'print'\n );\ninsert into print_table select * from t2;\n```\n\n![image-20210820161149697](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820161149697.png)\n\n依然没有在t2表中删除掉该条记录，该功能需要进一步探索，以后在跟进。\n\n#### 2.3 FlinkSql-upsertKafka关于kafka中数据过期测试\n\n**2.3.1 创建10分钟策略的topic**\n\n```\nkafka-topics  --create --zookeeper cdh2:2181,cdh3:2181,cdh4:2181 --replication-factor 3 --partitions 3 --topic test01   --config log.retention.minutes=10\nkafka-console-producer  --broker-list cdh2:9092,cdh3:9092,cdh4:9092 --topic test01\nkafka-topics --delete --topic test01 --zookeeper cdh2:2181,cdh3:2181,cdh4:2181\nkafka-console-consumer  --bootstrap-server cdh2:9092,cdh3:9092,cdh4:9092 --topic output --from-beginning\nkafka-topics  --zookeeper cdh2:2181,cdh3:2181,cdh4:2181 --topic test01 --describe\n```\n\n**2.3.2 创建flinksql的表**\n\n```\nCREATE TABLE t1 (\n    name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n    optDate TIMESTAMP(3) METADATA FROM 'timestamp',\n    WATERMARK FOR optDate as optDate - INTERVAL '5' SECOND  -- 在ts上定义watermark，ts成为事件时间列\n) WITH (\n    'connector' = 'kafka',  -- 使用 kafka connector\n    'topic' = 'test01',  -- kafka topic\n    'scan.startup.mode' = 'earliest-offset',\n    'properties.bootstrap.servers' = 'cdh2:9092,cdh3:9092,cdh4:9092',  -- kafka broker 地址\n    'format' = 'csv'  -- 数据源格式为 csv，\n);\nCREATE TABLE t2 (\n  name STRING,\n  age bigint,\n  PRIMARY KEY (name) NOT ENFORCED\n) WITH (\n  'connector' = 'upsert-kafka',\n  'topic' = 'output',\n  'properties.bootstrap.servers' = 'cdh2:9092,cdh3:9092,cdh4:9092',  -- kafka broker 地址\n  'key.format' = 'csv',\n  'value.format' = 'csv'\n);\nINSERT INTO t2\nSELECT\nname,\nmax(age)\nFROM t1\nGROUP BY name;\n CREATE TABLE print_table (\n  name STRING,\n  age bigint,\n  PRIMARY KEY (name) NOT ENFORCED\n ) WITH (\n  'connector' = 'print'\n );\ninsert into print_table select * from t2;\n CREATE TABLE print_table1 (\n  name string,\n    age BIGINT,\n    isStu INT,\n    opt STRING,\n    optDate TIMESTAMP(3) \n ) WITH (\n  'connector' = 'print'\n );\ninsert into print_table1 select * from t1;\n\n```\n\n**2.3.3 写入数据**\n\n```\nzhangsan,18,1,insert\nlisi,20,2,update\nwangwu,30,1,delete\n```\n\n**2.3.4 等待策略过期**\n\n![image-20210820165954108](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820165954108.png)\n\n但是t2是基于t1的汇总表，在t1被清空的情况下，t2依旧存在\n\n#### 3 FlinkSql-JDBC\n\nFlinkSql-JDBC相关资料：\n\n```\nhttps://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/connectors/jdbc.html\n```\n\n###### 3.1 FlinkSql-JDBC-Mysql常规功能测试\n\n**3.1.1 mysql建表并写入数据**\n\n```sql\ncreate table test.test01(name varchar(10),age int, primary key (name));\nINSERT INTO test.test01(name, age)VALUES('zhangsan', 20);\nINSERT INTO test.test01(name, age)VALUES('lisi', 30);\nINSERT INTO test.test01(name, age)VALUES('wangwu', 18);\n```\n\n**3.1.2 flinkSql建表**\n\n```sql\ndrop table mysqlTest ;\ncreate table mysqlTest (\nname string,\nage int,\nPRIMARY KEY (name) NOT ENFORCED\n) with (\n 'connector' = 'jdbc',\n 'url' = 'jdbc:mysql://cdh1:3306/test',\n 'username' = 'root',\n 'password' = 'root',\n 'table-name' = 'test01'\n\n);\n CREATE TABLE print_table1 (\nname string,\nage int,\nPRIMARY KEY (name)  NOT ENFORCED\n ) WITH (\n  'connector' = 'print'\n );\ninsert into print_table1 select * from mysqlTest;\n```\n","slug":"一次成功的FlinkSQL功能测试及实战演练","published":1,"updated":"2021-08-23T09:09:21.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6p1001ecmv9alqsbcwk","content":"<h4 id=\"1-前期准备\"><a href=\"#1-前期准备\" class=\"headerlink\" title=\"1 前期准备\"></a>1 前期准备</h4><h6 id=\"1-1-环境配置\"><a href=\"#1-1-环境配置\" class=\"headerlink\" title=\"1.1 环境配置\"></a>1.1 环境配置</h6><p>本次研究测试需要用到以下组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CDH 6.2.0</span><br><span class=\"line\">Flink 1.12.5</span><br><span class=\"line\">mysql 8.0</span><br><span class=\"line\">impala 3.2.0-cdh6.2.0</span><br><span class=\"line\">kafka 2.2.1-cdh6.2.0</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-2-依赖关系\"><a href=\"#1-2-依赖关系\" class=\"headerlink\" title=\"1.2 依赖关系\"></a>1.2 依赖关系</h6><span id=\"more\"></span>\n<p>本次测试会将FlinkSql与kafka、mysql、impala等组件进行conn，因此需要以下依赖包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flink-connector-kafka_2.11-1.12.2.jar</span><br><span class=\"line\">flink-connector-jdbc_2.11-1.11.2.jar</span><br><span class=\"line\">mysql-connector-java-5.1.47.jar</span><br><span class=\"line\">ImpalaJDBC4.jar</span><br><span class=\"line\">ImpalaJDBC41.jar</span><br><span class=\"line\">flink-sql-connector-kafka_2.11-1.12.2.jar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-FlinkSql-kafka测试\"><a href=\"#2-FlinkSql-kafka测试\" class=\"headerlink\" title=\"2 FlinkSql-kafka测试\"></a>2 FlinkSql-kafka测试</h4><p>FlinkSql-kafka相关资料：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/table/connectors/kafka.html</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-1-FlinkSql-kafka常规功能测试\"><a href=\"#2-1-FlinkSql-kafka常规功能测试\" class=\"headerlink\" title=\"2.1 FlinkSql-kafka常规功能测试\"></a>2.1 FlinkSql-kafka常规功能测试</h6><p>通过FlinkSql将Kafka中的数据映射成一张表</p>\n<p><strong>2.1.1 创建常规topic</strong></p>\n<p>1、创建topic kafka-topics –create –zookeeper 192.168.5.185:2181,192.168.5.165:2181,192.168.5.187:2181 –replication-factor 3 –partitions 3 –topic test01</p>\n<p>2、模拟消费者 kafka-console-consumer –bootstrap-server 192.168.5.185:9092,192.168.5.165:9092,192.168.5.187:9092 –topic test01 –from-beginning</p>\n<p>3、模拟生产者 kafka-console-producer –broker-list 192.168.5.185:9092,192.168.5.165:9092,192.168.5.187:9092 –topic test01</p>\n<p>4、删除topic kafka-topics –delete –topic test01 –zookeeper 192.168.5.185:2181,192.168.5.165:2181,192.168.5.187:2181</p>\n<p><strong>2.1.2 FlinkSql建表</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> CREATE TABLE t1 (</span><br><span class=\"line\">    name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">    optDate TIMESTAMP(3) METADATA FROM &#x27;timestamp&#x27;</span><br><span class=\"line\">) WITH (</span><br><span class=\"line\">    &#x27;connector&#x27; = &#x27;kafka&#x27;,  -- 使用 kafka connector</span><br><span class=\"line\">    &#x27;topic&#x27; = &#x27;test01&#x27;,  -- kafka topic</span><br><span class=\"line\">    &#x27;scan.startup.mode&#x27; = &#x27;earliest-offset&#x27;,</span><br><span class=\"line\">    &#x27;properties.bootstrap.servers&#x27; = &#x27;cdh2:9092,cdh2:9092,cdh4:9092&#x27;,  -- kafka broker 地址</span><br><span class=\"line\">    &#x27;format&#x27; = &#x27;csv&#x27;  -- 数据源格式为 csv，</span><br><span class=\"line\">);</span><br><span class=\"line\"> CREATE TABLE print_table (</span><br><span class=\"line\">   name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">     optDate TIMESTAMP(3)</span><br><span class=\"line\"> ) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;print&#x27;</span><br><span class=\"line\"> );</span><br><span class=\"line\">  </span><br><span class=\"line\">insert into print_table  select * from t1;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153033529.png\" alt=\"image-20210820153033529\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153116109.png\" alt=\"image-20210820153116109\" style=\"zoom:80%;\" />\n\n<p>sql_t1为提交的任务</p>\n<p>点击任务id即可跳转到flink控制页面</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153215899.png\" alt=\"image-20210820153215899\" style=\"zoom:67%;\" />\n\n<p><strong>2.1.3 写入数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-producer --broker-list cdh2:9092,cdh3:9092,cdh3:9092 --topic test01</span><br></pre></td></tr></table></figure>\n\n<p>往kafka中写入数据，同时查看flinksql中t1表的变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lisi,18,1,2</span><br><span class=\"line\">wangwu,30,2,2</span><br></pre></td></tr></table></figure>\n\n<p>观察表的变化（在taskmanger中）这是printconnector是在taskmanger上打印的。</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820154914018.png\" alt=\"image-20210820154914018\" style=\"zoom:67%;\" />\n\n<p><strong>2.1.4 小结</strong></p>\n<p>通过kafka数据映射成表这个步骤，可以将数据实时的汇入表中，通过sql再进行后续操作，相对代码编写来说更为简易，同时有问题也相对好排查</p>\n<h6 id=\"2-2-FlinkSql-upsertKafka常规功能测试\"><a href=\"#2-2-FlinkSql-upsertKafka常规功能测试\" class=\"headerlink\" title=\"2.2 FlinkSql-upsertKafka常规功能测试\"></a>2.2 FlinkSql-upsertKafka常规功能测试</h6><p>upsert-kafka 连接器生产 changelog 流，其中每条数据记录代表一个更新或删除事件。</p>\n<p>如果有key则update，没有key则insert，如果value的值为空，则表示删除</p>\n<p><strong>2.2.1 FlinkSql建upsert表</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--drop table t1;</span><br><span class=\"line\">CREATE TABLE t1 (</span><br><span class=\"line\">    name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">    optDate TIMESTAMP(3) METADATA FROM &#x27;timestamp&#x27;</span><br><span class=\"line\">) WITH (</span><br><span class=\"line\">    &#x27;connector&#x27; = &#x27;kafka&#x27;,  -- 使用 kafka connector</span><br><span class=\"line\">    &#x27;topic&#x27; = &#x27;test02&#x27;,  -- kafka topic</span><br><span class=\"line\">    &#x27;scan.startup.mode&#x27; = &#x27;earliest-offset&#x27;,</span><br><span class=\"line\">    &#x27;properties.bootstrap.servers&#x27; = &#x27;cdh2:9092,cdh2:9092,cdh4:9092&#x27;,  -- kafka broker 地址</span><br><span class=\"line\">    &#x27;format&#x27; = &#x27;csv&#x27;  -- 数据源格式为 csv，</span><br><span class=\"line\">);</span><br><span class=\"line\">--drop table t2;</span><br><span class=\"line\">CREATE TABLE t2 (</span><br><span class=\"line\">  name STRING,</span><br><span class=\"line\">  age bigint,</span><br><span class=\"line\">  isStu INT,</span><br><span class=\"line\">  opt STRING,</span><br><span class=\"line\">  optDate TIMESTAMP(3) ,</span><br><span class=\"line\">  PRIMARY KEY (name) NOT ENFORCED</span><br><span class=\"line\">) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;upsert-kafka&#x27;,</span><br><span class=\"line\">  &#x27;topic&#x27; = &#x27;test03&#x27;,</span><br><span class=\"line\">  &#x27;properties.bootstrap.servers&#x27; = &#x27;cdh2:9092,cdh3:9092,cdh4:9092&#x27;,  -- kafka broker 地址</span><br><span class=\"line\">  &#x27;key.format&#x27; = &#x27;csv&#x27;,</span><br><span class=\"line\">  &#x27;value.format&#x27; = &#x27;csv&#x27;</span><br><span class=\"line\">);</span><br><span class=\"line\">INSERT INTO t2 SELECT * FROM t1 ;</span><br><span class=\"line\"> CREATE TABLE print_table (</span><br><span class=\"line\">   name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">     optDate TIMESTAMP(3)</span><br><span class=\"line\"> ) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;print&#x27;</span><br><span class=\"line\"> );</span><br><span class=\"line\">insert into print_table select * from t2;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.2.2 建立映射关系</strong></p>\n<p>将t1表中的数据写入到t2中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO t2 SELECT * FROM t1 ;</span><br><span class=\"line\">select * from t2;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155552933.png\" alt=\"image-20210820155552933\" style=\"zoom:67%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155618080.png\" alt=\"image-20210820155618080\" style=\"zoom:67%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155905015.png\" alt=\"image-20210820155905015\" style=\"zoom:67%;\" />\n\n\n\n<p>结果如下：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160025776.png\" alt=\"image-20210820160025776\" style=\"zoom:67%;\" />\n\n<p><strong>2.2.3 更新数据</strong></p>\n<p>继续模拟kafka生产者，写入如下数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangsan,25,1,2</span><br><span class=\"line\">risen,8,8,8</span><br><span class=\"line\">lisi,0,0,</span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160252365.png\" alt=\"image-20210820160252365\"></p>\n<p><strong>2.2.4小结</strong></p>\n<p>通过如上测试，两条更新，一条插入，都已经实现了，</p>\n<p>根据官方文档描述，指定key的情况下，当value为空则判断为删除操作</p>\n<p>但是假如我插入一条数据到kafka，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lisi,,,</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160406848.png\" alt=\"image-20210820160406848\"></p>\n<p>因为建表的时候有几个类型定义为了Int类型，这里为空它默认为是””空字符串，有点呆，推测如果是json格式这类可以指定数据类型的，才能直接使用。对于csv这种数据类型不确定的，会存在无法推断类型的情况。</p>\n<p>鉴于此，为了探究是否真的具备删除操作，我又将上述所有表结构都进行了修改。为了试验简单，我直接修改表结构再次测试。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t1 (</span><br><span class=\"line\">    name STRING,</span><br><span class=\"line\">    age STRING,</span><br><span class=\"line\">    isStu STRING,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">    optDate <span class=\"type\">TIMESTAMP</span>(<span class=\"number\">3</span>) METADATA <span class=\"keyword\">FROM</span> <span class=\"string\">&#x27;timestamp&#x27;</span></span><br><span class=\"line\">) <span class=\"keyword\">WITH</span> (</span><br><span class=\"line\">    <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;kafka&#x27;</span>,  <span class=\"comment\">-- 使用 kafka connector</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;topic&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;test02&#x27;</span>,  <span class=\"comment\">-- kafka topic</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;scan.startup.mode&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;earliest-offset&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;properties.bootstrap.servers&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;cdh2:9092,cdh3:9092,cdh4:9092&#x27;</span>,  <span class=\"comment\">-- kafka broker 地址</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;format&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;csv&#x27;</span>  <span class=\"comment\">-- 数据源格式为 csv，</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t2 (</span><br><span class=\"line\">  name STRING,</span><br><span class=\"line\">  age STRING,</span><br><span class=\"line\">  isStu STRING,</span><br><span class=\"line\">  opt STRING,</span><br><span class=\"line\">  optDate <span class=\"type\">TIMESTAMP</span>(<span class=\"number\">3</span>) ,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (name) <span class=\"keyword\">NOT</span> ENFORCED</span><br><span class=\"line\">) <span class=\"keyword\">WITH</span> (</span><br><span class=\"line\">  <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;upsert-kafka&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;topic&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;test03&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;properties.bootstrap.servers&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;cdh2:9092,cdh3:9092,cdh4:9092&#x27;</span>,  <span class=\"comment\">-- kafka broker 地址</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;key.format&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;csv&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;value.format&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;csv&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t2 <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t1 ;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t2 <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t1 ;</span><br><span class=\"line\"> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> print_table (</span><br><span class=\"line\">   name string,</span><br><span class=\"line\">    age STRING,</span><br><span class=\"line\">    isStu STRING,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">     optDate <span class=\"type\">TIMESTAMP</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">       <span class=\"keyword\">PRIMARY</span> KEY (name) <span class=\"keyword\">NOT</span> ENFORCED</span><br><span class=\"line\"></span><br><span class=\"line\"> ) <span class=\"keyword\">WITH</span> (</span><br><span class=\"line\">  <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;print&#x27;</span></span><br><span class=\"line\"> );</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> print_table <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t2;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820161149697.png\" alt=\"image-20210820161149697\"></p>\n<p>依然没有在t2表中删除掉该条记录，该功能需要进一步探索，以后在跟进。</p>\n<h4 id=\"2-3-FlinkSql-upsertKafka关于kafka中数据过期测试\"><a href=\"#2-3-FlinkSql-upsertKafka关于kafka中数据过期测试\" class=\"headerlink\" title=\"2.3 FlinkSql-upsertKafka关于kafka中数据过期测试\"></a>2.3 FlinkSql-upsertKafka关于kafka中数据过期测试</h4><p><strong>2.3.1 创建10分钟策略的topic</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics  --create --zookeeper cdh2:2181,cdh3:2181,cdh4:2181 --replication-factor 3 --partitions 3 --topic test01   --config log.retention.minutes=10</span><br><span class=\"line\">kafka-console-producer  --broker-list cdh2:9092,cdh3:9092,cdh4:9092 --topic test01</span><br><span class=\"line\">kafka-topics --delete --topic test01 --zookeeper cdh2:2181,cdh3:2181,cdh4:2181</span><br><span class=\"line\">kafka-console-consumer  --bootstrap-server cdh2:9092,cdh3:9092,cdh4:9092 --topic output --from-beginning</span><br><span class=\"line\">kafka-topics  --zookeeper cdh2:2181,cdh3:2181,cdh4:2181 --topic test01 --describe</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.3.2 创建flinksql的表</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE t1 (</span><br><span class=\"line\">    name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">    optDate TIMESTAMP(3) METADATA FROM &#x27;timestamp&#x27;,</span><br><span class=\"line\">    WATERMARK FOR optDate as optDate - INTERVAL &#x27;5&#x27; SECOND  -- 在ts上定义watermark，ts成为事件时间列</span><br><span class=\"line\">) WITH (</span><br><span class=\"line\">    &#x27;connector&#x27; = &#x27;kafka&#x27;,  -- 使用 kafka connector</span><br><span class=\"line\">    &#x27;topic&#x27; = &#x27;test01&#x27;,  -- kafka topic</span><br><span class=\"line\">    &#x27;scan.startup.mode&#x27; = &#x27;earliest-offset&#x27;,</span><br><span class=\"line\">    &#x27;properties.bootstrap.servers&#x27; = &#x27;cdh2:9092,cdh3:9092,cdh4:9092&#x27;,  -- kafka broker 地址</span><br><span class=\"line\">    &#x27;format&#x27; = &#x27;csv&#x27;  -- 数据源格式为 csv，</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE t2 (</span><br><span class=\"line\">  name STRING,</span><br><span class=\"line\">  age bigint,</span><br><span class=\"line\">  PRIMARY KEY (name) NOT ENFORCED</span><br><span class=\"line\">) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;upsert-kafka&#x27;,</span><br><span class=\"line\">  &#x27;topic&#x27; = &#x27;output&#x27;,</span><br><span class=\"line\">  &#x27;properties.bootstrap.servers&#x27; = &#x27;cdh2:9092,cdh3:9092,cdh4:9092&#x27;,  -- kafka broker 地址</span><br><span class=\"line\">  &#x27;key.format&#x27; = &#x27;csv&#x27;,</span><br><span class=\"line\">  &#x27;value.format&#x27; = &#x27;csv&#x27;</span><br><span class=\"line\">);</span><br><span class=\"line\">INSERT INTO t2</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">name,</span><br><span class=\"line\">max(age)</span><br><span class=\"line\">FROM t1</span><br><span class=\"line\">GROUP BY name;</span><br><span class=\"line\"> CREATE TABLE print_table (</span><br><span class=\"line\">  name STRING,</span><br><span class=\"line\">  age bigint,</span><br><span class=\"line\">  PRIMARY KEY (name) NOT ENFORCED</span><br><span class=\"line\"> ) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;print&#x27;</span><br><span class=\"line\"> );</span><br><span class=\"line\">insert into print_table select * from t2;</span><br><span class=\"line\"> CREATE TABLE print_table1 (</span><br><span class=\"line\">  name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">    optDate TIMESTAMP(3) </span><br><span class=\"line\"> ) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;print&#x27;</span><br><span class=\"line\"> );</span><br><span class=\"line\">insert into print_table1 select * from t1;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>2.3.3 写入数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangsan,18,1,insert</span><br><span class=\"line\">lisi,20,2,update</span><br><span class=\"line\">wangwu,30,1,delete</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.3.4 等待策略过期</strong></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820165954108.png\" alt=\"image-20210820165954108\"></p>\n<p>但是t2是基于t1的汇总表，在t1被清空的情况下，t2依旧存在</p>\n<h4 id=\"3-FlinkSql-JDBC\"><a href=\"#3-FlinkSql-JDBC\" class=\"headerlink\" title=\"3 FlinkSql-JDBC\"></a>3 FlinkSql-JDBC</h4><p>FlinkSql-JDBC相关资料：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/connectors/jdbc.html</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-1-FlinkSql-JDBC-Mysql常规功能测试\"><a href=\"#3-1-FlinkSql-JDBC-Mysql常规功能测试\" class=\"headerlink\" title=\"3.1 FlinkSql-JDBC-Mysql常规功能测试\"></a>3.1 FlinkSql-JDBC-Mysql常规功能测试</h6><p><strong>3.1.1 mysql建表并写入数据</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> test.test01(name <span class=\"type\">varchar</span>(<span class=\"number\">10</span>),age <span class=\"type\">int</span>, <span class=\"keyword\">primary</span> key (name));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test.test01(name, age)<span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test.test01(name, age)<span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test.test01(name, age)<span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;wangwu&#x27;</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.1.2 flinkSql建表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> mysqlTest ;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> mysqlTest (</span><br><span class=\"line\">name string,</span><br><span class=\"line\">age <span class=\"type\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (name) <span class=\"keyword\">NOT</span> ENFORCED</span><br><span class=\"line\">) <span class=\"keyword\">with</span> (</span><br><span class=\"line\"> <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;jdbc&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;url&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;jdbc:mysql://cdh1:3306/test&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;username&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;password&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;table-name&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;test01&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">);</span><br><span class=\"line\"> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> print_table1 (</span><br><span class=\"line\">name string,</span><br><span class=\"line\">age <span class=\"type\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (name)  <span class=\"keyword\">NOT</span> ENFORCED</span><br><span class=\"line\"> ) <span class=\"keyword\">WITH</span> (</span><br><span class=\"line\">  <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;print&#x27;</span></span><br><span class=\"line\"> );</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> print_table1 <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> mysqlTest;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-前期准备\"><a href=\"#1-前期准备\" class=\"headerlink\" title=\"1 前期准备\"></a>1 前期准备</h4><h6 id=\"1-1-环境配置\"><a href=\"#1-1-环境配置\" class=\"headerlink\" title=\"1.1 环境配置\"></a>1.1 环境配置</h6><p>本次研究测试需要用到以下组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CDH 6.2.0</span><br><span class=\"line\">Flink 1.12.5</span><br><span class=\"line\">mysql 8.0</span><br><span class=\"line\">impala 3.2.0-cdh6.2.0</span><br><span class=\"line\">kafka 2.2.1-cdh6.2.0</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-2-依赖关系\"><a href=\"#1-2-依赖关系\" class=\"headerlink\" title=\"1.2 依赖关系\"></a>1.2 依赖关系</h6>","more":"<p>本次测试会将FlinkSql与kafka、mysql、impala等组件进行conn，因此需要以下依赖包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flink-connector-kafka_2.11-1.12.2.jar</span><br><span class=\"line\">flink-connector-jdbc_2.11-1.11.2.jar</span><br><span class=\"line\">mysql-connector-java-5.1.47.jar</span><br><span class=\"line\">ImpalaJDBC4.jar</span><br><span class=\"line\">ImpalaJDBC41.jar</span><br><span class=\"line\">flink-sql-connector-kafka_2.11-1.12.2.jar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-FlinkSql-kafka测试\"><a href=\"#2-FlinkSql-kafka测试\" class=\"headerlink\" title=\"2 FlinkSql-kafka测试\"></a>2 FlinkSql-kafka测试</h4><p>FlinkSql-kafka相关资料：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/table/connectors/kafka.html</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-1-FlinkSql-kafka常规功能测试\"><a href=\"#2-1-FlinkSql-kafka常规功能测试\" class=\"headerlink\" title=\"2.1 FlinkSql-kafka常规功能测试\"></a>2.1 FlinkSql-kafka常规功能测试</h6><p>通过FlinkSql将Kafka中的数据映射成一张表</p>\n<p><strong>2.1.1 创建常规topic</strong></p>\n<p>1、创建topic kafka-topics –create –zookeeper 192.168.5.185:2181,192.168.5.165:2181,192.168.5.187:2181 –replication-factor 3 –partitions 3 –topic test01</p>\n<p>2、模拟消费者 kafka-console-consumer –bootstrap-server 192.168.5.185:9092,192.168.5.165:9092,192.168.5.187:9092 –topic test01 –from-beginning</p>\n<p>3、模拟生产者 kafka-console-producer –broker-list 192.168.5.185:9092,192.168.5.165:9092,192.168.5.187:9092 –topic test01</p>\n<p>4、删除topic kafka-topics –delete –topic test01 –zookeeper 192.168.5.185:2181,192.168.5.165:2181,192.168.5.187:2181</p>\n<p><strong>2.1.2 FlinkSql建表</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> CREATE TABLE t1 (</span><br><span class=\"line\">    name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">    optDate TIMESTAMP(3) METADATA FROM &#x27;timestamp&#x27;</span><br><span class=\"line\">) WITH (</span><br><span class=\"line\">    &#x27;connector&#x27; = &#x27;kafka&#x27;,  -- 使用 kafka connector</span><br><span class=\"line\">    &#x27;topic&#x27; = &#x27;test01&#x27;,  -- kafka topic</span><br><span class=\"line\">    &#x27;scan.startup.mode&#x27; = &#x27;earliest-offset&#x27;,</span><br><span class=\"line\">    &#x27;properties.bootstrap.servers&#x27; = &#x27;cdh2:9092,cdh2:9092,cdh4:9092&#x27;,  -- kafka broker 地址</span><br><span class=\"line\">    &#x27;format&#x27; = &#x27;csv&#x27;  -- 数据源格式为 csv，</span><br><span class=\"line\">);</span><br><span class=\"line\"> CREATE TABLE print_table (</span><br><span class=\"line\">   name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">     optDate TIMESTAMP(3)</span><br><span class=\"line\"> ) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;print&#x27;</span><br><span class=\"line\"> );</span><br><span class=\"line\">  </span><br><span class=\"line\">insert into print_table  select * from t1;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153033529.png\" alt=\"image-20210820153033529\" style=\"zoom:80%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153116109.png\" alt=\"image-20210820153116109\" style=\"zoom:80%;\" />\n\n<p>sql_t1为提交的任务</p>\n<p>点击任务id即可跳转到flink控制页面</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820153215899.png\" alt=\"image-20210820153215899\" style=\"zoom:67%;\" />\n\n<p><strong>2.1.3 写入数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-producer --broker-list cdh2:9092,cdh3:9092,cdh3:9092 --topic test01</span><br></pre></td></tr></table></figure>\n\n<p>往kafka中写入数据，同时查看flinksql中t1表的变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lisi,18,1,2</span><br><span class=\"line\">wangwu,30,2,2</span><br></pre></td></tr></table></figure>\n\n<p>观察表的变化（在taskmanger中）这是printconnector是在taskmanger上打印的。</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820154914018.png\" alt=\"image-20210820154914018\" style=\"zoom:67%;\" />\n\n<p><strong>2.1.4 小结</strong></p>\n<p>通过kafka数据映射成表这个步骤，可以将数据实时的汇入表中，通过sql再进行后续操作，相对代码编写来说更为简易，同时有问题也相对好排查</p>\n<h6 id=\"2-2-FlinkSql-upsertKafka常规功能测试\"><a href=\"#2-2-FlinkSql-upsertKafka常规功能测试\" class=\"headerlink\" title=\"2.2 FlinkSql-upsertKafka常规功能测试\"></a>2.2 FlinkSql-upsertKafka常规功能测试</h6><p>upsert-kafka 连接器生产 changelog 流，其中每条数据记录代表一个更新或删除事件。</p>\n<p>如果有key则update，没有key则insert，如果value的值为空，则表示删除</p>\n<p><strong>2.2.1 FlinkSql建upsert表</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--drop table t1;</span><br><span class=\"line\">CREATE TABLE t1 (</span><br><span class=\"line\">    name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">    optDate TIMESTAMP(3) METADATA FROM &#x27;timestamp&#x27;</span><br><span class=\"line\">) WITH (</span><br><span class=\"line\">    &#x27;connector&#x27; = &#x27;kafka&#x27;,  -- 使用 kafka connector</span><br><span class=\"line\">    &#x27;topic&#x27; = &#x27;test02&#x27;,  -- kafka topic</span><br><span class=\"line\">    &#x27;scan.startup.mode&#x27; = &#x27;earliest-offset&#x27;,</span><br><span class=\"line\">    &#x27;properties.bootstrap.servers&#x27; = &#x27;cdh2:9092,cdh2:9092,cdh4:9092&#x27;,  -- kafka broker 地址</span><br><span class=\"line\">    &#x27;format&#x27; = &#x27;csv&#x27;  -- 数据源格式为 csv，</span><br><span class=\"line\">);</span><br><span class=\"line\">--drop table t2;</span><br><span class=\"line\">CREATE TABLE t2 (</span><br><span class=\"line\">  name STRING,</span><br><span class=\"line\">  age bigint,</span><br><span class=\"line\">  isStu INT,</span><br><span class=\"line\">  opt STRING,</span><br><span class=\"line\">  optDate TIMESTAMP(3) ,</span><br><span class=\"line\">  PRIMARY KEY (name) NOT ENFORCED</span><br><span class=\"line\">) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;upsert-kafka&#x27;,</span><br><span class=\"line\">  &#x27;topic&#x27; = &#x27;test03&#x27;,</span><br><span class=\"line\">  &#x27;properties.bootstrap.servers&#x27; = &#x27;cdh2:9092,cdh3:9092,cdh4:9092&#x27;,  -- kafka broker 地址</span><br><span class=\"line\">  &#x27;key.format&#x27; = &#x27;csv&#x27;,</span><br><span class=\"line\">  &#x27;value.format&#x27; = &#x27;csv&#x27;</span><br><span class=\"line\">);</span><br><span class=\"line\">INSERT INTO t2 SELECT * FROM t1 ;</span><br><span class=\"line\"> CREATE TABLE print_table (</span><br><span class=\"line\">   name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">     optDate TIMESTAMP(3)</span><br><span class=\"line\"> ) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;print&#x27;</span><br><span class=\"line\"> );</span><br><span class=\"line\">insert into print_table select * from t2;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.2.2 建立映射关系</strong></p>\n<p>将t1表中的数据写入到t2中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO t2 SELECT * FROM t1 ;</span><br><span class=\"line\">select * from t2;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155552933.png\" alt=\"image-20210820155552933\" style=\"zoom:67%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155618080.png\" alt=\"image-20210820155618080\" style=\"zoom:67%;\" />\n\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820155905015.png\" alt=\"image-20210820155905015\" style=\"zoom:67%;\" />\n\n\n\n<p>结果如下：</p>\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160025776.png\" alt=\"image-20210820160025776\" style=\"zoom:67%;\" />\n\n<p><strong>2.2.3 更新数据</strong></p>\n<p>继续模拟kafka生产者，写入如下数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangsan,25,1,2</span><br><span class=\"line\">risen,8,8,8</span><br><span class=\"line\">lisi,0,0,</span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160252365.png\" alt=\"image-20210820160252365\"></p>\n<p><strong>2.2.4小结</strong></p>\n<p>通过如上测试，两条更新，一条插入，都已经实现了，</p>\n<p>根据官方文档描述，指定key的情况下，当value为空则判断为删除操作</p>\n<p>但是假如我插入一条数据到kafka，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lisi,,,</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820160406848.png\" alt=\"image-20210820160406848\"></p>\n<p>因为建表的时候有几个类型定义为了Int类型，这里为空它默认为是””空字符串，有点呆，推测如果是json格式这类可以指定数据类型的，才能直接使用。对于csv这种数据类型不确定的，会存在无法推断类型的情况。</p>\n<p>鉴于此，为了探究是否真的具备删除操作，我又将上述所有表结构都进行了修改。为了试验简单，我直接修改表结构再次测试。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t1 (</span><br><span class=\"line\">    name STRING,</span><br><span class=\"line\">    age STRING,</span><br><span class=\"line\">    isStu STRING,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">    optDate <span class=\"type\">TIMESTAMP</span>(<span class=\"number\">3</span>) METADATA <span class=\"keyword\">FROM</span> <span class=\"string\">&#x27;timestamp&#x27;</span></span><br><span class=\"line\">) <span class=\"keyword\">WITH</span> (</span><br><span class=\"line\">    <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;kafka&#x27;</span>,  <span class=\"comment\">-- 使用 kafka connector</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;topic&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;test02&#x27;</span>,  <span class=\"comment\">-- kafka topic</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;scan.startup.mode&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;earliest-offset&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;properties.bootstrap.servers&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;cdh2:9092,cdh3:9092,cdh4:9092&#x27;</span>,  <span class=\"comment\">-- kafka broker 地址</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;format&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;csv&#x27;</span>  <span class=\"comment\">-- 数据源格式为 csv，</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t2 (</span><br><span class=\"line\">  name STRING,</span><br><span class=\"line\">  age STRING,</span><br><span class=\"line\">  isStu STRING,</span><br><span class=\"line\">  opt STRING,</span><br><span class=\"line\">  optDate <span class=\"type\">TIMESTAMP</span>(<span class=\"number\">3</span>) ,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (name) <span class=\"keyword\">NOT</span> ENFORCED</span><br><span class=\"line\">) <span class=\"keyword\">WITH</span> (</span><br><span class=\"line\">  <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;upsert-kafka&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;topic&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;test03&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;properties.bootstrap.servers&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;cdh2:9092,cdh3:9092,cdh4:9092&#x27;</span>,  <span class=\"comment\">-- kafka broker 地址</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;key.format&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;csv&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;value.format&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;csv&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t2 <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t1 ;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t2 <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t1 ;</span><br><span class=\"line\"> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> print_table (</span><br><span class=\"line\">   name string,</span><br><span class=\"line\">    age STRING,</span><br><span class=\"line\">    isStu STRING,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">     optDate <span class=\"type\">TIMESTAMP</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">       <span class=\"keyword\">PRIMARY</span> KEY (name) <span class=\"keyword\">NOT</span> ENFORCED</span><br><span class=\"line\"></span><br><span class=\"line\"> ) <span class=\"keyword\">WITH</span> (</span><br><span class=\"line\">  <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;print&#x27;</span></span><br><span class=\"line\"> );</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> print_table <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t2;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820161149697.png\" alt=\"image-20210820161149697\"></p>\n<p>依然没有在t2表中删除掉该条记录，该功能需要进一步探索，以后在跟进。</p>\n<h4 id=\"2-3-FlinkSql-upsertKafka关于kafka中数据过期测试\"><a href=\"#2-3-FlinkSql-upsertKafka关于kafka中数据过期测试\" class=\"headerlink\" title=\"2.3 FlinkSql-upsertKafka关于kafka中数据过期测试\"></a>2.3 FlinkSql-upsertKafka关于kafka中数据过期测试</h4><p><strong>2.3.1 创建10分钟策略的topic</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics  --create --zookeeper cdh2:2181,cdh3:2181,cdh4:2181 --replication-factor 3 --partitions 3 --topic test01   --config log.retention.minutes=10</span><br><span class=\"line\">kafka-console-producer  --broker-list cdh2:9092,cdh3:9092,cdh4:9092 --topic test01</span><br><span class=\"line\">kafka-topics --delete --topic test01 --zookeeper cdh2:2181,cdh3:2181,cdh4:2181</span><br><span class=\"line\">kafka-console-consumer  --bootstrap-server cdh2:9092,cdh3:9092,cdh4:9092 --topic output --from-beginning</span><br><span class=\"line\">kafka-topics  --zookeeper cdh2:2181,cdh3:2181,cdh4:2181 --topic test01 --describe</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.3.2 创建flinksql的表</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE t1 (</span><br><span class=\"line\">    name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">    optDate TIMESTAMP(3) METADATA FROM &#x27;timestamp&#x27;,</span><br><span class=\"line\">    WATERMARK FOR optDate as optDate - INTERVAL &#x27;5&#x27; SECOND  -- 在ts上定义watermark，ts成为事件时间列</span><br><span class=\"line\">) WITH (</span><br><span class=\"line\">    &#x27;connector&#x27; = &#x27;kafka&#x27;,  -- 使用 kafka connector</span><br><span class=\"line\">    &#x27;topic&#x27; = &#x27;test01&#x27;,  -- kafka topic</span><br><span class=\"line\">    &#x27;scan.startup.mode&#x27; = &#x27;earliest-offset&#x27;,</span><br><span class=\"line\">    &#x27;properties.bootstrap.servers&#x27; = &#x27;cdh2:9092,cdh3:9092,cdh4:9092&#x27;,  -- kafka broker 地址</span><br><span class=\"line\">    &#x27;format&#x27; = &#x27;csv&#x27;  -- 数据源格式为 csv，</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE t2 (</span><br><span class=\"line\">  name STRING,</span><br><span class=\"line\">  age bigint,</span><br><span class=\"line\">  PRIMARY KEY (name) NOT ENFORCED</span><br><span class=\"line\">) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;upsert-kafka&#x27;,</span><br><span class=\"line\">  &#x27;topic&#x27; = &#x27;output&#x27;,</span><br><span class=\"line\">  &#x27;properties.bootstrap.servers&#x27; = &#x27;cdh2:9092,cdh3:9092,cdh4:9092&#x27;,  -- kafka broker 地址</span><br><span class=\"line\">  &#x27;key.format&#x27; = &#x27;csv&#x27;,</span><br><span class=\"line\">  &#x27;value.format&#x27; = &#x27;csv&#x27;</span><br><span class=\"line\">);</span><br><span class=\"line\">INSERT INTO t2</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">name,</span><br><span class=\"line\">max(age)</span><br><span class=\"line\">FROM t1</span><br><span class=\"line\">GROUP BY name;</span><br><span class=\"line\"> CREATE TABLE print_table (</span><br><span class=\"line\">  name STRING,</span><br><span class=\"line\">  age bigint,</span><br><span class=\"line\">  PRIMARY KEY (name) NOT ENFORCED</span><br><span class=\"line\"> ) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;print&#x27;</span><br><span class=\"line\"> );</span><br><span class=\"line\">insert into print_table select * from t2;</span><br><span class=\"line\"> CREATE TABLE print_table1 (</span><br><span class=\"line\">  name string,</span><br><span class=\"line\">    age BIGINT,</span><br><span class=\"line\">    isStu INT,</span><br><span class=\"line\">    opt STRING,</span><br><span class=\"line\">    optDate TIMESTAMP(3) </span><br><span class=\"line\"> ) WITH (</span><br><span class=\"line\">  &#x27;connector&#x27; = &#x27;print&#x27;</span><br><span class=\"line\"> );</span><br><span class=\"line\">insert into print_table1 select * from t1;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>2.3.3 写入数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangsan,18,1,insert</span><br><span class=\"line\">lisi,20,2,update</span><br><span class=\"line\">wangwu,30,1,delete</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.3.4 等待策略过期</strong></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210820165954108.png\" alt=\"image-20210820165954108\"></p>\n<p>但是t2是基于t1的汇总表，在t1被清空的情况下，t2依旧存在</p>\n<h4 id=\"3-FlinkSql-JDBC\"><a href=\"#3-FlinkSql-JDBC\" class=\"headerlink\" title=\"3 FlinkSql-JDBC\"></a>3 FlinkSql-JDBC</h4><p>FlinkSql-JDBC相关资料：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/connectors/jdbc.html</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-1-FlinkSql-JDBC-Mysql常规功能测试\"><a href=\"#3-1-FlinkSql-JDBC-Mysql常规功能测试\" class=\"headerlink\" title=\"3.1 FlinkSql-JDBC-Mysql常规功能测试\"></a>3.1 FlinkSql-JDBC-Mysql常规功能测试</h6><p><strong>3.1.1 mysql建表并写入数据</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> test.test01(name <span class=\"type\">varchar</span>(<span class=\"number\">10</span>),age <span class=\"type\">int</span>, <span class=\"keyword\">primary</span> key (name));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test.test01(name, age)<span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test.test01(name, age)<span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test.test01(name, age)<span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;wangwu&#x27;</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.1.2 flinkSql建表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> mysqlTest ;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> mysqlTest (</span><br><span class=\"line\">name string,</span><br><span class=\"line\">age <span class=\"type\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (name) <span class=\"keyword\">NOT</span> ENFORCED</span><br><span class=\"line\">) <span class=\"keyword\">with</span> (</span><br><span class=\"line\"> <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;jdbc&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;url&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;jdbc:mysql://cdh1:3306/test&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;username&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;password&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;table-name&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;test01&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">);</span><br><span class=\"line\"> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> print_table1 (</span><br><span class=\"line\">name string,</span><br><span class=\"line\">age <span class=\"type\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (name)  <span class=\"keyword\">NOT</span> ENFORCED</span><br><span class=\"line\"> ) <span class=\"keyword\">WITH</span> (</span><br><span class=\"line\">  <span class=\"string\">&#x27;connector&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;print&#x27;</span></span><br><span class=\"line\"> );</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> print_table1 <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> mysqlTest;</span><br></pre></td></tr></table></figure>"},{"title":"使用 SSH config 文件","date":"2021-08-19T00:43:53.000Z","_content":"有如下配置文件：\n\n```bash\n$ vim ~/.ssh/config\nHost cdh1\n    HostName cdh1\n    User root\n    Port 22\n    IdentityFile ~/.ssh/id_ed25519\n```\n\n使用配置文件登录：\n\n```bash\n$ ssh cdh1\n```\n\n","source":"_posts/使用-SSH-config-文件.md","raw":"---\ntitle: 使用 SSH config 文件\ndate: 2021-08-19 08:43:53\ntags:\n---\n有如下配置文件：\n\n```bash\n$ vim ~/.ssh/config\nHost cdh1\n    HostName cdh1\n    User root\n    Port 22\n    IdentityFile ~/.ssh/id_ed25519\n```\n\n使用配置文件登录：\n\n```bash\n$ ssh cdh1\n```\n\n","slug":"使用-SSH-config-文件","published":1,"updated":"2021-08-23T00:38:38.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6p2001fcmv98rzg1orb","content":"<p>有如下配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.ssh/config</span><br><span class=\"line\">Host cdh1</span><br><span class=\"line\">    HostName cdh1</span><br><span class=\"line\">    User root</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure>\n\n<p>使用配置文件登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh cdh1</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>有如下配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.ssh/config</span><br><span class=\"line\">Host cdh1</span><br><span class=\"line\">    HostName cdh1</span><br><span class=\"line\">    User root</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure>\n\n<p>使用配置文件登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh cdh1</span><br></pre></td></tr></table></figure>\n\n"},{"title":"使用容器方式编译无功能限制的 Drone CI","date":"2021-08-25T06:39:49.000Z","_content":"\n因为默认版本的 Drone 包含构建次数限制，如果日常高频使用 Drone，不久之后，便会遇到需要“重新初始化”应用才能继续使用的问题，但其实，作为个人用户，我们其实可以不受此限制影响。\n\n在使用Mysql时，创建表结构时可以通过关键字auto\\_increment来指定主键是否自增。但在Postgresql数据库中，虽然可以实现字段的自增，但从本质上来说却并不支持Mysql那样的自增。\n\n![image-20210825085148884](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png)\n\n<!--more-->\n\n所以本篇文章，就来分享下如何使用容器方式构建无使用限制的 Drone CI。\n\n## 写在前面\n\n之所以会有这篇文章出现呢？因为之前折腾群里的同学“公子”曾提到过“Drone 默认镜像是企业版，有 5000 次构建限制，需要重新编译”。考虑到软件的长期稳定使用，对[官方文档](https://docs.drone.io/enterprise/)进行翻阅，看到情况确实如此，文档中是如此描述的：“**存在两种版本的 Drone，分别是需要自行构建的社区开源版本，和官方提供的企业版本**”，然而官方并没有更多对于编译构建相关的文档或者说明。\n\n### 关于 Drone CI\n\n对于个人开发者或者团队来说，我们最关心的几个问题，莫过于代码是否安全、软件授权方式、以及授权费用了，官方文档中有提及：\n\n-   软件全部开源，官方默认为所有人提供企业版的镜像试用，支持 5000 次构建调用。\n-   如果需要使用开源版本，需要自行进行构建。\n-   企业版对于个人使用是免费的。\n-   如果你的团队、公司（包含非盈利组织）年收入低于100万美元的企业，或者融资少于 500 万美元，可以免费使用。\n-   如果你的公司需要付费，最低门槛是每月 299 美元。\n\n在官方[企业服务页面](https://www.drone.io/enterprise/)，我们可以看到不同版本的功能区别，主要在于是否支持：分布式方式运行多个 Runner；使用 K8S Runner；支持组织密钥功能；支持搭配 Vault 使用；支持定时任务；支持使用 postgres、mysql、s3 进行数据存储；支持自动扩容以及[“扩展功能”](https://docs.drone.io/extensions/overview/)。\n\n如果你有上述需求，可以构建“企业版”、反之构建“开源版”即可。不过结合上面的使用限制，对于一般个人和团队来说，直接构建“企业版”会更省事一些，功能更加全面。\n\n那么，就来看看如何采取类似“官方的方式”编译构建 Drone 的容器镜像吧。\n\n## 收集 Drone 官方构建资料\n\n[翻阅文档](https://docs.drone.io/enterprise/)，可以看到关于自行构建，只有两条（或者说一条）简单的命令：\n\n```\n# 构建开源版\n$ go build -tags \"oss nolimit\" github.com/drone/drone/cmd/drone-server\n\n# 构建企业版\n$ go build -tags \"nolimit\" github.com/drone/drone/cmd/drone-server\n```\n\n为了构建出和官方基本一致的镜像，需要从官方仓库中梳理完整的“构建套路”。这里以 [v1.10.1](https://github.com/drone/drone/tree/v1.10.1) 代码为基础，进行构建方式梳理。\n\n从仓库根目录的 `BUILDING` 和 `BUILDING_OSS` 文件，可以看到[记录了](https://github.com/drone/drone/blob/v1.10.1/BUILDING_OSS)两种发行版软件的安装和构建流程：\n\n```\n1. Clone the repository\n2. Install go 1.11 or later with Go modules enabled\n3. Install binaries to $GOPATH/bin\n\n    go install -tags \"oss nolimit\" github.com/drone/drone/cmd/drone-server\n\n4. Start the server at localhost:8080\n\n    export DRONE_GITHUB_CLIENT_ID=...\n    export DRONE_GITHUB_CLIENT_SECRET=...\n    drone-server\n```\n\n继续翻阅项目的 `.drone.yml` [CI 文件](https://github.com/drone/drone/blob/v1.10.1/.drone.yml)，可以看到官方是如何通过 CI 构建和发布软件的：\n\n```\n...\n- name: build\n  image: golang:1.14.4\n  commands:\n  - sh scripts/build.sh\n  environment:\n    GOARCH: amd64\n    GOOS: linux\n\n- name: publish\n  image: plugins/docker:18\n  settings:\n    auto_tag: true\n    auto_tag_suffix: linux-amd64\n    dockerfile: docker/Dockerfile.server.linux.amd64\n    repo: drone/drone\n    username:\n      from_secret: docker_username\n    password:\n      from_secret: docker_password\n  when:\n    event:\n    - push\n    - tag\n...\n```\n\n按图索骥，翻阅 CI 文件中提到的“[构建脚本](https://github.com/drone/drone/blob/v1.10.1/scripts/build.sh)”，内容如下：\n\n```\n#!/bin/sh\n\necho \"building docker images for ${GOOS}/${GOARCH} ...\"\n\nREPO=\"github.com/drone/drone\"\n\n# compile the server using the cgo\ngo build -ldflags \"-extldflags \\\"-static\\\"\" -o release/linux/${GOARCH}/drone-server ${REPO}/cmd/drone-server\n\n# compile the runners with gcc disabled\nexport CGO_ENABLED=0\ngo build -o release/linux/${GOARCH}/drone-agent      ${REPO}/cmd/drone-agent\ngo build -o release/linux/${GOARCH}/drone-controller ${REPO}/cmd/drone-controller\n```\n\n继续查看容器 Dockerfile [docker/Dockerfile.server.linux.amd64](https://github.com/drone/drone/blob/v1.10.1/docker/Dockerfile.server.linux.amd64) ，可以看到容器结构：\n\n```\n# docker build --rm -f docker/Dockerfile -t drone/drone .\n\nFROM alpine:3.11 as alpine\nRUN apk add -U --no-cache ca-certificates\n\nFROM alpine:3.11\nEXPOSE 80 443\nVOLUME /data\n\nRUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf\n\nENV GODEBUG netdns=go\nENV XDG_CACHE_HOME /data\nENV DRONE_DATABASE_DRIVER sqlite3\nENV DRONE_DATABASE_DATASOURCE /data/database.sqlite\nENV DRONE_RUNNER_OS=linux\nENV DRONE_RUNNER_ARCH=amd64\nENV DRONE_SERVER_PORT=:80\nENV DRONE_SERVER_HOST=localhost\nENV DRONE_DATADOG_ENABLED=true\nENV DRONE_DATADOG_ENDPOINT=https://stats.drone.ci/api/v1/series\n\nCOPY --from=alpine /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n\nADD release/linux/amd64/drone-server /bin/\nENTRYPOINT [\"/bin/drone-server\"]\n```\n\n线索差不多齐了，我们开始编写基础的容器镜像。\n\n## 编写构建脚本\n\n上一小节中，我们可以看到容器文件中使用的核心的软件 `drone-server` 是从“本地”拷贝至镜像中的，猜测是为了更高的编译效率，使用更短时间编译多平台使用的二进制文件，所以采取了这样的策略。\n\n对于我们来说，只需要使用适用于某一种 CPU 架构和系统的软件，可以考虑将编译环境直接用容器来创建。除了能够更好的保存编译环境外，还能够让编译使用的机器系统环境更加“纯粹和干净”：\n\n```\nFROM golang:1.16.0-alpine3.13 AS Builder\n\nENV DRONE_VERSION 2.1.0\n\nENV CGO_CFLAGS=\"-g -O2 -Wno-return-local-addr\"\n\nRUN apk add build-base && go env -w GO111MODULE=on && \\\n    mkdir /src && cd /src && \\\n    apk add curl && curl -L https://github.com/drone/drone/archive/refs/tags/v${DRONE_VERSION}.tar.gz -o v${DRONE_VERSION}.tar.gz && \\\n    tar zxvf v${DRONE_VERSION}.tar.gz && rm v${DRONE_VERSION}.tar.gz && \\\n    cd /src/drone-${DRONE_VERSION} && \\\n    go mod download && \\\n    go build -ldflags \"-extldflags \\\"-static\\\"\" -tags=\"nolimit\" github.com/drone/drone/cmd/drone-server\n```\n\n为了让构建速度加快，我们可以适当调整 Dockerfile ，添加一些国内的软件源：\n\n```\nFROM golang:1.16.0-alpine3.13 AS Builder\n\nRUN sed -i 's/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/' /etc/apk/repositories && \\\n    echo \"Asia/Shanghai\" > /etc/timezone\n\nRUN apk add build-base && \\\n    go env -w GO111MODULE=on && \\\n    go env -w GOPROXY=https://goproxy.cn,direct\n\nENV DRONE_VERSION 2.1.0\n\nWORKDIR /src\n\n# Build with online code\nRUN apk add curl && curl -L https://github.com/drone/drone/archive/refs/tags/v${DRONE_VERSION}.tar.gz -o v${DRONE_VERSION}.tar.gz && \\\n    tar zxvf v${DRONE_VERSION}.tar.gz && rm v${DRONE_VERSION}.tar.gz\n# OR with offline tarball\n# ADD drone-2.1.0.tar.gz /src/\n\nWORKDIR /src/drone-${DRONE_VERSION}\n\nRUN go mod download\n\nENV CGO_CFLAGS=\"-g -O2 -Wno-return-local-addr\"\n\nRUN go build -ldflags \"-extldflags \\\"-static\\\"\" -tags=\"nolimit\" github.com/drone/drone/cmd/drone-server\n```\n\n将上面的内容保存为 `Dockerfile`，然后执行 `docker build -t drone:2.1.0 .` ，稍等片刻“全功能”的 Drone 就在镜像内构建完毕了，但是镜像尺寸非常大，足足有 1.28GB 之大，所以我们要继续编写一个多阶段构建的镜像，来减少容器尺寸。\n\n### 多阶段镜像构建\n\n在上面的容器声明文件下方继续添加一些内容，结合前文找到的官方构建脚本，我们可以对构建脚本进行一些调整：\n\n```\nFROM golang:1.16.0-alpine3.13 AS Builder\n\nRUN sed -i 's/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/' /etc/apk/repositories && \\\n    echo \"Asia/Shanghai\" > /etc/timezone\n\nRUN apk add build-base git && \\\n    go env -w GO111MODULE=on && \\\n    go env -w GOPROXY=https://goproxy.cn,direct\n\nENV DRONE_VERSION 2.1.0\n\nWORKDIR /src\n\n# Build with online code\nRUN apk add curl && curl -L https://github.com/drone/drone/archive/refs/tags/v${DRONE_VERSION}.tar.gz -o v${DRONE_VERSION}.tar.gz && \\\n    tar zxvf v${DRONE_VERSION}.tar.gz && rm v${DRONE_VERSION}.tar.gz\n# OR with offline tarball\n# ADD drone-1.10.1.tar.gz /src/\n\nWORKDIR /src/drone-${DRONE_VERSION}\n\nRUN go mod download\n\nENV CGO_CFLAGS=\"-g -O2 -Wno-return-local-addr\"\n\nRUN go build -ldflags \"-extldflags \\\"-static\\\"\" -tags=\"nolimit\" github.com/drone/drone/cmd/drone-server\n\n\n\nFROM alpine:3.13 AS Certs\nRUN sed -i 's/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/' /etc/apk/repositories && \\\n    echo \"Asia/Shanghai\" > /etc/timezone\nRUN apk add -U --no-cache ca-certificates\n\n\n\nFROM alpine:3.13\nEXPOSE 80 443\nVOLUME /data\n\nRUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf\n\nENV GODEBUG netdns=go\nENV XDG_CACHE_HOME /data\nENV DRONE_DATABASE_DRIVER sqlite3\nENV DRONE_DATABASE_DATASOURCE /data/database.sqlite\nENV DRONE_RUNNER_OS=linux\nENV DRONE_RUNNER_ARCH=amd64\nENV DRONE_SERVER_PORT=:80\nENV DRONE_SERVER_HOST=localhost\nENV DRONE_DATADOG_ENABLED=true\nENV DRONE_DATADOG_ENDPOINT=https://stats.drone.ci/api/v1/series\n\nCOPY --from=Certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=Builder /src/drone-2.1.0/drone-server /bin/drone-server\nENTRYPOINT [\"/bin/drone-server\"]\n```\n\n再次执行 `docker build -t drone:1.10.1 .`，能够看到镜像尺寸减少到了 `61.7MB` ，和官方提供的 67.3MB 镜像差不多大了。\n\n## 其他\n\n今年早些时候，曾写过一篇关于 Drone 的内容：[《容器方式下的轻量仓库与CI 使用方案：Gitea + Drone 基础篇》](https://soulteary.com/2021/02/25/lightweight-code-warehouse-and-ci-usage-plan-in-docker-with-gitea-and-drone-part-1.html)，前些天在[《站点优化日志（2021.04.12）》](https://soulteary.com/2021/04/12/site-optimization-log.html) 中，也曾提到过我在尝试使用 Gitea + Drone 替换之前个人使用的 GitLab，所以如果你有类似轻量化运行的需求，可以翻阅之前的文章，或许能节约一些折腾过程的时间。\n\n当然，如果你对 GitLab Runner 的编译构建感兴趣，可以翻阅两年前的一篇内容：[《源码编译 GitLab Runner》](https://soulteary.com/2019/08/04/source-code-compilation-gitlab-runner.html)，同样是使用 Golang 编写，但是相比之下，比 Drone 复杂不少。\n\n## 最后\n\n希望这篇文章能够帮到使用 Drone 的你。\n\n–EOF\n","source":"_posts/使用容器方式编译无功能限制的-Drone-CI.md","raw":"---\ntitle: 使用容器方式编译无功能限制的 Drone CI\ndate: 2021-08-25 14:39:49\ntags:\n- drone\n- ci \ncategories: \n- devops\n---\n\n因为默认版本的 Drone 包含构建次数限制，如果日常高频使用 Drone，不久之后，便会遇到需要“重新初始化”应用才能继续使用的问题，但其实，作为个人用户，我们其实可以不受此限制影响。\n\n在使用Mysql时，创建表结构时可以通过关键字auto\\_increment来指定主键是否自增。但在Postgresql数据库中，虽然可以实现字段的自增，但从本质上来说却并不支持Mysql那样的自增。\n\n![image-20210825085148884](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png)\n\n<!--more-->\n\n所以本篇文章，就来分享下如何使用容器方式构建无使用限制的 Drone CI。\n\n## 写在前面\n\n之所以会有这篇文章出现呢？因为之前折腾群里的同学“公子”曾提到过“Drone 默认镜像是企业版，有 5000 次构建限制，需要重新编译”。考虑到软件的长期稳定使用，对[官方文档](https://docs.drone.io/enterprise/)进行翻阅，看到情况确实如此，文档中是如此描述的：“**存在两种版本的 Drone，分别是需要自行构建的社区开源版本，和官方提供的企业版本**”，然而官方并没有更多对于编译构建相关的文档或者说明。\n\n### 关于 Drone CI\n\n对于个人开发者或者团队来说，我们最关心的几个问题，莫过于代码是否安全、软件授权方式、以及授权费用了，官方文档中有提及：\n\n-   软件全部开源，官方默认为所有人提供企业版的镜像试用，支持 5000 次构建调用。\n-   如果需要使用开源版本，需要自行进行构建。\n-   企业版对于个人使用是免费的。\n-   如果你的团队、公司（包含非盈利组织）年收入低于100万美元的企业，或者融资少于 500 万美元，可以免费使用。\n-   如果你的公司需要付费，最低门槛是每月 299 美元。\n\n在官方[企业服务页面](https://www.drone.io/enterprise/)，我们可以看到不同版本的功能区别，主要在于是否支持：分布式方式运行多个 Runner；使用 K8S Runner；支持组织密钥功能；支持搭配 Vault 使用；支持定时任务；支持使用 postgres、mysql、s3 进行数据存储；支持自动扩容以及[“扩展功能”](https://docs.drone.io/extensions/overview/)。\n\n如果你有上述需求，可以构建“企业版”、反之构建“开源版”即可。不过结合上面的使用限制，对于一般个人和团队来说，直接构建“企业版”会更省事一些，功能更加全面。\n\n那么，就来看看如何采取类似“官方的方式”编译构建 Drone 的容器镜像吧。\n\n## 收集 Drone 官方构建资料\n\n[翻阅文档](https://docs.drone.io/enterprise/)，可以看到关于自行构建，只有两条（或者说一条）简单的命令：\n\n```\n# 构建开源版\n$ go build -tags \"oss nolimit\" github.com/drone/drone/cmd/drone-server\n\n# 构建企业版\n$ go build -tags \"nolimit\" github.com/drone/drone/cmd/drone-server\n```\n\n为了构建出和官方基本一致的镜像，需要从官方仓库中梳理完整的“构建套路”。这里以 [v1.10.1](https://github.com/drone/drone/tree/v1.10.1) 代码为基础，进行构建方式梳理。\n\n从仓库根目录的 `BUILDING` 和 `BUILDING_OSS` 文件，可以看到[记录了](https://github.com/drone/drone/blob/v1.10.1/BUILDING_OSS)两种发行版软件的安装和构建流程：\n\n```\n1. Clone the repository\n2. Install go 1.11 or later with Go modules enabled\n3. Install binaries to $GOPATH/bin\n\n    go install -tags \"oss nolimit\" github.com/drone/drone/cmd/drone-server\n\n4. Start the server at localhost:8080\n\n    export DRONE_GITHUB_CLIENT_ID=...\n    export DRONE_GITHUB_CLIENT_SECRET=...\n    drone-server\n```\n\n继续翻阅项目的 `.drone.yml` [CI 文件](https://github.com/drone/drone/blob/v1.10.1/.drone.yml)，可以看到官方是如何通过 CI 构建和发布软件的：\n\n```\n...\n- name: build\n  image: golang:1.14.4\n  commands:\n  - sh scripts/build.sh\n  environment:\n    GOARCH: amd64\n    GOOS: linux\n\n- name: publish\n  image: plugins/docker:18\n  settings:\n    auto_tag: true\n    auto_tag_suffix: linux-amd64\n    dockerfile: docker/Dockerfile.server.linux.amd64\n    repo: drone/drone\n    username:\n      from_secret: docker_username\n    password:\n      from_secret: docker_password\n  when:\n    event:\n    - push\n    - tag\n...\n```\n\n按图索骥，翻阅 CI 文件中提到的“[构建脚本](https://github.com/drone/drone/blob/v1.10.1/scripts/build.sh)”，内容如下：\n\n```\n#!/bin/sh\n\necho \"building docker images for ${GOOS}/${GOARCH} ...\"\n\nREPO=\"github.com/drone/drone\"\n\n# compile the server using the cgo\ngo build -ldflags \"-extldflags \\\"-static\\\"\" -o release/linux/${GOARCH}/drone-server ${REPO}/cmd/drone-server\n\n# compile the runners with gcc disabled\nexport CGO_ENABLED=0\ngo build -o release/linux/${GOARCH}/drone-agent      ${REPO}/cmd/drone-agent\ngo build -o release/linux/${GOARCH}/drone-controller ${REPO}/cmd/drone-controller\n```\n\n继续查看容器 Dockerfile [docker/Dockerfile.server.linux.amd64](https://github.com/drone/drone/blob/v1.10.1/docker/Dockerfile.server.linux.amd64) ，可以看到容器结构：\n\n```\n# docker build --rm -f docker/Dockerfile -t drone/drone .\n\nFROM alpine:3.11 as alpine\nRUN apk add -U --no-cache ca-certificates\n\nFROM alpine:3.11\nEXPOSE 80 443\nVOLUME /data\n\nRUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf\n\nENV GODEBUG netdns=go\nENV XDG_CACHE_HOME /data\nENV DRONE_DATABASE_DRIVER sqlite3\nENV DRONE_DATABASE_DATASOURCE /data/database.sqlite\nENV DRONE_RUNNER_OS=linux\nENV DRONE_RUNNER_ARCH=amd64\nENV DRONE_SERVER_PORT=:80\nENV DRONE_SERVER_HOST=localhost\nENV DRONE_DATADOG_ENABLED=true\nENV DRONE_DATADOG_ENDPOINT=https://stats.drone.ci/api/v1/series\n\nCOPY --from=alpine /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n\nADD release/linux/amd64/drone-server /bin/\nENTRYPOINT [\"/bin/drone-server\"]\n```\n\n线索差不多齐了，我们开始编写基础的容器镜像。\n\n## 编写构建脚本\n\n上一小节中，我们可以看到容器文件中使用的核心的软件 `drone-server` 是从“本地”拷贝至镜像中的，猜测是为了更高的编译效率，使用更短时间编译多平台使用的二进制文件，所以采取了这样的策略。\n\n对于我们来说，只需要使用适用于某一种 CPU 架构和系统的软件，可以考虑将编译环境直接用容器来创建。除了能够更好的保存编译环境外，还能够让编译使用的机器系统环境更加“纯粹和干净”：\n\n```\nFROM golang:1.16.0-alpine3.13 AS Builder\n\nENV DRONE_VERSION 2.1.0\n\nENV CGO_CFLAGS=\"-g -O2 -Wno-return-local-addr\"\n\nRUN apk add build-base && go env -w GO111MODULE=on && \\\n    mkdir /src && cd /src && \\\n    apk add curl && curl -L https://github.com/drone/drone/archive/refs/tags/v${DRONE_VERSION}.tar.gz -o v${DRONE_VERSION}.tar.gz && \\\n    tar zxvf v${DRONE_VERSION}.tar.gz && rm v${DRONE_VERSION}.tar.gz && \\\n    cd /src/drone-${DRONE_VERSION} && \\\n    go mod download && \\\n    go build -ldflags \"-extldflags \\\"-static\\\"\" -tags=\"nolimit\" github.com/drone/drone/cmd/drone-server\n```\n\n为了让构建速度加快，我们可以适当调整 Dockerfile ，添加一些国内的软件源：\n\n```\nFROM golang:1.16.0-alpine3.13 AS Builder\n\nRUN sed -i 's/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/' /etc/apk/repositories && \\\n    echo \"Asia/Shanghai\" > /etc/timezone\n\nRUN apk add build-base && \\\n    go env -w GO111MODULE=on && \\\n    go env -w GOPROXY=https://goproxy.cn,direct\n\nENV DRONE_VERSION 2.1.0\n\nWORKDIR /src\n\n# Build with online code\nRUN apk add curl && curl -L https://github.com/drone/drone/archive/refs/tags/v${DRONE_VERSION}.tar.gz -o v${DRONE_VERSION}.tar.gz && \\\n    tar zxvf v${DRONE_VERSION}.tar.gz && rm v${DRONE_VERSION}.tar.gz\n# OR with offline tarball\n# ADD drone-2.1.0.tar.gz /src/\n\nWORKDIR /src/drone-${DRONE_VERSION}\n\nRUN go mod download\n\nENV CGO_CFLAGS=\"-g -O2 -Wno-return-local-addr\"\n\nRUN go build -ldflags \"-extldflags \\\"-static\\\"\" -tags=\"nolimit\" github.com/drone/drone/cmd/drone-server\n```\n\n将上面的内容保存为 `Dockerfile`，然后执行 `docker build -t drone:2.1.0 .` ，稍等片刻“全功能”的 Drone 就在镜像内构建完毕了，但是镜像尺寸非常大，足足有 1.28GB 之大，所以我们要继续编写一个多阶段构建的镜像，来减少容器尺寸。\n\n### 多阶段镜像构建\n\n在上面的容器声明文件下方继续添加一些内容，结合前文找到的官方构建脚本，我们可以对构建脚本进行一些调整：\n\n```\nFROM golang:1.16.0-alpine3.13 AS Builder\n\nRUN sed -i 's/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/' /etc/apk/repositories && \\\n    echo \"Asia/Shanghai\" > /etc/timezone\n\nRUN apk add build-base git && \\\n    go env -w GO111MODULE=on && \\\n    go env -w GOPROXY=https://goproxy.cn,direct\n\nENV DRONE_VERSION 2.1.0\n\nWORKDIR /src\n\n# Build with online code\nRUN apk add curl && curl -L https://github.com/drone/drone/archive/refs/tags/v${DRONE_VERSION}.tar.gz -o v${DRONE_VERSION}.tar.gz && \\\n    tar zxvf v${DRONE_VERSION}.tar.gz && rm v${DRONE_VERSION}.tar.gz\n# OR with offline tarball\n# ADD drone-1.10.1.tar.gz /src/\n\nWORKDIR /src/drone-${DRONE_VERSION}\n\nRUN go mod download\n\nENV CGO_CFLAGS=\"-g -O2 -Wno-return-local-addr\"\n\nRUN go build -ldflags \"-extldflags \\\"-static\\\"\" -tags=\"nolimit\" github.com/drone/drone/cmd/drone-server\n\n\n\nFROM alpine:3.13 AS Certs\nRUN sed -i 's/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/' /etc/apk/repositories && \\\n    echo \"Asia/Shanghai\" > /etc/timezone\nRUN apk add -U --no-cache ca-certificates\n\n\n\nFROM alpine:3.13\nEXPOSE 80 443\nVOLUME /data\n\nRUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf\n\nENV GODEBUG netdns=go\nENV XDG_CACHE_HOME /data\nENV DRONE_DATABASE_DRIVER sqlite3\nENV DRONE_DATABASE_DATASOURCE /data/database.sqlite\nENV DRONE_RUNNER_OS=linux\nENV DRONE_RUNNER_ARCH=amd64\nENV DRONE_SERVER_PORT=:80\nENV DRONE_SERVER_HOST=localhost\nENV DRONE_DATADOG_ENABLED=true\nENV DRONE_DATADOG_ENDPOINT=https://stats.drone.ci/api/v1/series\n\nCOPY --from=Certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=Builder /src/drone-2.1.0/drone-server /bin/drone-server\nENTRYPOINT [\"/bin/drone-server\"]\n```\n\n再次执行 `docker build -t drone:1.10.1 .`，能够看到镜像尺寸减少到了 `61.7MB` ，和官方提供的 67.3MB 镜像差不多大了。\n\n## 其他\n\n今年早些时候，曾写过一篇关于 Drone 的内容：[《容器方式下的轻量仓库与CI 使用方案：Gitea + Drone 基础篇》](https://soulteary.com/2021/02/25/lightweight-code-warehouse-and-ci-usage-plan-in-docker-with-gitea-and-drone-part-1.html)，前些天在[《站点优化日志（2021.04.12）》](https://soulteary.com/2021/04/12/site-optimization-log.html) 中，也曾提到过我在尝试使用 Gitea + Drone 替换之前个人使用的 GitLab，所以如果你有类似轻量化运行的需求，可以翻阅之前的文章，或许能节约一些折腾过程的时间。\n\n当然，如果你对 GitLab Runner 的编译构建感兴趣，可以翻阅两年前的一篇内容：[《源码编译 GitLab Runner》](https://soulteary.com/2019/08/04/source-code-compilation-gitlab-runner.html)，同样是使用 Golang 编写，但是相比之下，比 Drone 复杂不少。\n\n## 最后\n\n希望这篇文章能够帮到使用 Drone 的你。\n\n–EOF\n","slug":"使用容器方式编译无功能限制的-Drone-CI","published":1,"updated":"2021-08-25T06:48:33.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6p3001gcmv9dhb91uix","content":"<p>因为默认版本的 Drone 包含构建次数限制，如果日常高频使用 Drone，不久之后，便会遇到需要“重新初始化”应用才能继续使用的问题，但其实，作为个人用户，我们其实可以不受此限制影响。</p>\n<p>在使用Mysql时，创建表结构时可以通过关键字auto_increment来指定主键是否自增。但在Postgresql数据库中，虽然可以实现字段的自增，但从本质上来说却并不支持Mysql那样的自增。</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png\" alt=\"image-20210825085148884\"></p>\n<span id=\"more\"></span>\n\n<p>所以本篇文章，就来分享下如何使用容器方式构建无使用限制的 Drone CI。</p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>之所以会有这篇文章出现呢？因为之前折腾群里的同学“公子”曾提到过“Drone 默认镜像是企业版，有 5000 次构建限制，需要重新编译”。考虑到软件的长期稳定使用，对<a href=\"https://docs.drone.io/enterprise/\">官方文档</a>进行翻阅，看到情况确实如此，文档中是如此描述的：“<strong>存在两种版本的 Drone，分别是需要自行构建的社区开源版本，和官方提供的企业版本</strong>”，然而官方并没有更多对于编译构建相关的文档或者说明。</p>\n<h3 id=\"关于-Drone-CI\"><a href=\"#关于-Drone-CI\" class=\"headerlink\" title=\"关于 Drone CI\"></a>关于 Drone CI</h3><p>对于个人开发者或者团队来说，我们最关心的几个问题，莫过于代码是否安全、软件授权方式、以及授权费用了，官方文档中有提及：</p>\n<ul>\n<li>  软件全部开源，官方默认为所有人提供企业版的镜像试用，支持 5000 次构建调用。</li>\n<li>  如果需要使用开源版本，需要自行进行构建。</li>\n<li>  企业版对于个人使用是免费的。</li>\n<li>  如果你的团队、公司（包含非盈利组织）年收入低于100万美元的企业，或者融资少于 500 万美元，可以免费使用。</li>\n<li>  如果你的公司需要付费，最低门槛是每月 299 美元。</li>\n</ul>\n<p>在官方<a href=\"https://www.drone.io/enterprise/\">企业服务页面</a>，我们可以看到不同版本的功能区别，主要在于是否支持：分布式方式运行多个 Runner；使用 K8S Runner；支持组织密钥功能；支持搭配 Vault 使用；支持定时任务；支持使用 postgres、mysql、s3 进行数据存储；支持自动扩容以及<a href=\"https://docs.drone.io/extensions/overview/\">“扩展功能”</a>。</p>\n<p>如果你有上述需求，可以构建“企业版”、反之构建“开源版”即可。不过结合上面的使用限制，对于一般个人和团队来说，直接构建“企业版”会更省事一些，功能更加全面。</p>\n<p>那么，就来看看如何采取类似“官方的方式”编译构建 Drone 的容器镜像吧。</p>\n<h2 id=\"收集-Drone-官方构建资料\"><a href=\"#收集-Drone-官方构建资料\" class=\"headerlink\" title=\"收集 Drone 官方构建资料\"></a>收集 Drone 官方构建资料</h2><p><a href=\"https://docs.drone.io/enterprise/\">翻阅文档</a>，可以看到关于自行构建，只有两条（或者说一条）简单的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 构建开源版</span><br><span class=\"line\">$ go build -tags &quot;oss nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建企业版</span><br><span class=\"line\">$ go build -tags &quot;nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br></pre></td></tr></table></figure>\n\n<p>为了构建出和官方基本一致的镜像，需要从官方仓库中梳理完整的“构建套路”。这里以 <a href=\"https://github.com/drone/drone/tree/v1.10.1\">v1.10.1</a> 代码为基础，进行构建方式梳理。</p>\n<p>从仓库根目录的 <code>BUILDING</code> 和 <code>BUILDING_OSS</code> 文件，可以看到<a href=\"https://github.com/drone/drone/blob/v1.10.1/BUILDING_OSS\">记录了</a>两种发行版软件的安装和构建流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Clone the repository</span><br><span class=\"line\">2. Install go 1.11 or later with Go modules enabled</span><br><span class=\"line\">3. Install binaries to $GOPATH/bin</span><br><span class=\"line\"></span><br><span class=\"line\">    go install -tags &quot;oss nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br><span class=\"line\"></span><br><span class=\"line\">4. Start the server at localhost:8080</span><br><span class=\"line\"></span><br><span class=\"line\">    export DRONE_GITHUB_CLIENT_ID=...</span><br><span class=\"line\">    export DRONE_GITHUB_CLIENT_SECRET=...</span><br><span class=\"line\">    drone-server</span><br></pre></td></tr></table></figure>\n\n<p>继续翻阅项目的 <code>.drone.yml</code> <a href=\"https://github.com/drone/drone/blob/v1.10.1/.drone.yml\">CI 文件</a>，可以看到官方是如何通过 CI 构建和发布软件的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">- name: build</span><br><span class=\"line\">  image: golang:1.14.4</span><br><span class=\"line\">  commands:</span><br><span class=\"line\">  - sh scripts/build.sh</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    GOARCH: amd64</span><br><span class=\"line\">    GOOS: linux</span><br><span class=\"line\"></span><br><span class=\"line\">- name: publish</span><br><span class=\"line\">  image: plugins/docker:18</span><br><span class=\"line\">  settings:</span><br><span class=\"line\">    auto_tag: true</span><br><span class=\"line\">    auto_tag_suffix: linux-amd64</span><br><span class=\"line\">    dockerfile: docker/Dockerfile.server.linux.amd64</span><br><span class=\"line\">    repo: drone/drone</span><br><span class=\"line\">    username:</span><br><span class=\"line\">      from_secret: docker_username</span><br><span class=\"line\">    password:</span><br><span class=\"line\">      from_secret: docker_password</span><br><span class=\"line\">  when:</span><br><span class=\"line\">    event:</span><br><span class=\"line\">    - push</span><br><span class=\"line\">    - tag</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>按图索骥，翻阅 CI 文件中提到的“<a href=\"https://github.com/drone/drone/blob/v1.10.1/scripts/build.sh\">构建脚本</a>”，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;building docker images for $&#123;GOOS&#125;/$&#123;GOARCH&#125; ...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">REPO=&quot;github.com/drone/drone&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># compile the server using the cgo</span><br><span class=\"line\">go build -ldflags &quot;-extldflags \\&quot;-static\\&quot;&quot; -o release/linux/$&#123;GOARCH&#125;/drone-server $&#123;REPO&#125;/cmd/drone-server</span><br><span class=\"line\"></span><br><span class=\"line\"># compile the runners with gcc disabled</span><br><span class=\"line\">export CGO_ENABLED=0</span><br><span class=\"line\">go build -o release/linux/$&#123;GOARCH&#125;/drone-agent      $&#123;REPO&#125;/cmd/drone-agent</span><br><span class=\"line\">go build -o release/linux/$&#123;GOARCH&#125;/drone-controller $&#123;REPO&#125;/cmd/drone-controller</span><br></pre></td></tr></table></figure>\n\n<p>继续查看容器 Dockerfile <a href=\"https://github.com/drone/drone/blob/v1.10.1/docker/Dockerfile.server.linux.amd64\">docker/Dockerfile.server.linux.amd64</a> ，可以看到容器结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker build --rm -f docker/Dockerfile -t drone/drone .</span><br><span class=\"line\"></span><br><span class=\"line\">FROM alpine:3.11 as alpine</span><br><span class=\"line\">RUN apk add -U --no-cache ca-certificates</span><br><span class=\"line\"></span><br><span class=\"line\">FROM alpine:3.11</span><br><span class=\"line\">EXPOSE 80 443</span><br><span class=\"line\">VOLUME /data</span><br><span class=\"line\"></span><br><span class=\"line\">RUN [ ! -e /etc/nsswitch.conf ] &amp;&amp; echo &#x27;hosts: files dns&#x27; &gt; /etc/nsswitch.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ENV GODEBUG netdns=go</span><br><span class=\"line\">ENV XDG_CACHE_HOME /data</span><br><span class=\"line\">ENV DRONE_DATABASE_DRIVER sqlite3</span><br><span class=\"line\">ENV DRONE_DATABASE_DATASOURCE /data/database.sqlite</span><br><span class=\"line\">ENV DRONE_RUNNER_OS=linux</span><br><span class=\"line\">ENV DRONE_RUNNER_ARCH=amd64</span><br><span class=\"line\">ENV DRONE_SERVER_PORT=:80</span><br><span class=\"line\">ENV DRONE_SERVER_HOST=localhost</span><br><span class=\"line\">ENV DRONE_DATADOG_ENABLED=true</span><br><span class=\"line\">ENV DRONE_DATADOG_ENDPOINT=https://stats.drone.ci/api/v1/series</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=alpine /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/</span><br><span class=\"line\"></span><br><span class=\"line\">ADD release/linux/amd64/drone-server /bin/</span><br><span class=\"line\">ENTRYPOINT [&quot;/bin/drone-server&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>线索差不多齐了，我们开始编写基础的容器镜像。</p>\n<h2 id=\"编写构建脚本\"><a href=\"#编写构建脚本\" class=\"headerlink\" title=\"编写构建脚本\"></a>编写构建脚本</h2><p>上一小节中，我们可以看到容器文件中使用的核心的软件 <code>drone-server</code> 是从“本地”拷贝至镜像中的，猜测是为了更高的编译效率，使用更短时间编译多平台使用的二进制文件，所以采取了这样的策略。</p>\n<p>对于我们来说，只需要使用适用于某一种 CPU 架构和系统的软件，可以考虑将编译环境直接用容器来创建。除了能够更好的保存编译环境外，还能够让编译使用的机器系统环境更加“纯粹和干净”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM golang:1.16.0-alpine3.13 AS Builder</span><br><span class=\"line\"></span><br><span class=\"line\">ENV DRONE_VERSION 2.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">ENV CGO_CFLAGS=&quot;-g -O2 -Wno-return-local-addr&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apk add build-base &amp;&amp; go env -w GO111MODULE=on &amp;&amp; \\</span><br><span class=\"line\">    mkdir /src &amp;&amp; cd /src &amp;&amp; \\</span><br><span class=\"line\">    apk add curl &amp;&amp; curl -L https://github.com/drone/drone/archive/refs/tags/v$&#123;DRONE_VERSION&#125;.tar.gz -o v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; \\</span><br><span class=\"line\">    tar zxvf v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; rm v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; \\</span><br><span class=\"line\">    cd /src/drone-$&#123;DRONE_VERSION&#125; &amp;&amp; \\</span><br><span class=\"line\">    go mod download &amp;&amp; \\</span><br><span class=\"line\">    go build -ldflags &quot;-extldflags \\&quot;-static\\&quot;&quot; -tags=&quot;nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br></pre></td></tr></table></figure>\n\n<p>为了让构建速度加快，我们可以适当调整 Dockerfile ，添加一些国内的软件源：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM golang:1.16.0-alpine3.13 AS Builder</span><br><span class=\"line\"></span><br><span class=\"line\">RUN sed -i &#x27;s/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/&#x27; /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apk add build-base &amp;&amp; \\</span><br><span class=\"line\">    go env -w GO111MODULE=on &amp;&amp; \\</span><br><span class=\"line\">    go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class=\"line\"></span><br><span class=\"line\">ENV DRONE_VERSION 2.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\"></span><br><span class=\"line\"># Build with online code</span><br><span class=\"line\">RUN apk add curl &amp;&amp; curl -L https://github.com/drone/drone/archive/refs/tags/v$&#123;DRONE_VERSION&#125;.tar.gz -o v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; \\</span><br><span class=\"line\">    tar zxvf v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; rm v$&#123;DRONE_VERSION&#125;.tar.gz</span><br><span class=\"line\"># OR with offline tarball</span><br><span class=\"line\"># ADD drone-2.1.0.tar.gz /src/</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src/drone-$&#123;DRONE_VERSION&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN go mod download</span><br><span class=\"line\"></span><br><span class=\"line\">ENV CGO_CFLAGS=&quot;-g -O2 -Wno-return-local-addr&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN go build -ldflags &quot;-extldflags \\&quot;-static\\&quot;&quot; -tags=&quot;nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br></pre></td></tr></table></figure>\n\n<p>将上面的内容保存为 <code>Dockerfile</code>，然后执行 <code>docker build -t drone:2.1.0 .</code> ，稍等片刻“全功能”的 Drone 就在镜像内构建完毕了，但是镜像尺寸非常大，足足有 1.28GB 之大，所以我们要继续编写一个多阶段构建的镜像，来减少容器尺寸。</p>\n<h3 id=\"多阶段镜像构建\"><a href=\"#多阶段镜像构建\" class=\"headerlink\" title=\"多阶段镜像构建\"></a>多阶段镜像构建</h3><p>在上面的容器声明文件下方继续添加一些内容，结合前文找到的官方构建脚本，我们可以对构建脚本进行一些调整：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM golang:1.16.0-alpine3.13 AS Builder</span><br><span class=\"line\"></span><br><span class=\"line\">RUN sed -i &#x27;s/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/&#x27; /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apk add build-base git &amp;&amp; \\</span><br><span class=\"line\">    go env -w GO111MODULE=on &amp;&amp; \\</span><br><span class=\"line\">    go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class=\"line\"></span><br><span class=\"line\">ENV DRONE_VERSION 2.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\"></span><br><span class=\"line\"># Build with online code</span><br><span class=\"line\">RUN apk add curl &amp;&amp; curl -L https://github.com/drone/drone/archive/refs/tags/v$&#123;DRONE_VERSION&#125;.tar.gz -o v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; \\</span><br><span class=\"line\">    tar zxvf v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; rm v$&#123;DRONE_VERSION&#125;.tar.gz</span><br><span class=\"line\"># OR with offline tarball</span><br><span class=\"line\"># ADD drone-1.10.1.tar.gz /src/</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src/drone-$&#123;DRONE_VERSION&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN go mod download</span><br><span class=\"line\"></span><br><span class=\"line\">ENV CGO_CFLAGS=&quot;-g -O2 -Wno-return-local-addr&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN go build -ldflags &quot;-extldflags \\&quot;-static\\&quot;&quot; -tags=&quot;nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">FROM alpine:3.13 AS Certs</span><br><span class=\"line\">RUN sed -i &#x27;s/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/&#x27; /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class=\"line\">RUN apk add -U --no-cache ca-certificates</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">FROM alpine:3.13</span><br><span class=\"line\">EXPOSE 80 443</span><br><span class=\"line\">VOLUME /data</span><br><span class=\"line\"></span><br><span class=\"line\">RUN [ ! -e /etc/nsswitch.conf ] &amp;&amp; echo &#x27;hosts: files dns&#x27; &gt; /etc/nsswitch.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ENV GODEBUG netdns=go</span><br><span class=\"line\">ENV XDG_CACHE_HOME /data</span><br><span class=\"line\">ENV DRONE_DATABASE_DRIVER sqlite3</span><br><span class=\"line\">ENV DRONE_DATABASE_DATASOURCE /data/database.sqlite</span><br><span class=\"line\">ENV DRONE_RUNNER_OS=linux</span><br><span class=\"line\">ENV DRONE_RUNNER_ARCH=amd64</span><br><span class=\"line\">ENV DRONE_SERVER_PORT=:80</span><br><span class=\"line\">ENV DRONE_SERVER_HOST=localhost</span><br><span class=\"line\">ENV DRONE_DATADOG_ENABLED=true</span><br><span class=\"line\">ENV DRONE_DATADOG_ENDPOINT=https://stats.drone.ci/api/v1/series</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=Certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/</span><br><span class=\"line\">COPY --from=Builder /src/drone-2.1.0/drone-server /bin/drone-server</span><br><span class=\"line\">ENTRYPOINT [&quot;/bin/drone-server&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>再次执行 <code>docker build -t drone:1.10.1 .</code>，能够看到镜像尺寸减少到了 <code>61.7MB</code> ，和官方提供的 67.3MB 镜像差不多大了。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>今年早些时候，曾写过一篇关于 Drone 的内容：<a href=\"https://soulteary.com/2021/02/25/lightweight-code-warehouse-and-ci-usage-plan-in-docker-with-gitea-and-drone-part-1.html\">《容器方式下的轻量仓库与CI 使用方案：Gitea + Drone 基础篇》</a>，前些天在<a href=\"https://soulteary.com/2021/04/12/site-optimization-log.html\">《站点优化日志（2021.04.12）》</a> 中，也曾提到过我在尝试使用 Gitea + Drone 替换之前个人使用的 GitLab，所以如果你有类似轻量化运行的需求，可以翻阅之前的文章，或许能节约一些折腾过程的时间。</p>\n<p>当然，如果你对 GitLab Runner 的编译构建感兴趣，可以翻阅两年前的一篇内容：<a href=\"https://soulteary.com/2019/08/04/source-code-compilation-gitlab-runner.html\">《源码编译 GitLab Runner》</a>，同样是使用 Golang 编写，但是相比之下，比 Drone 复杂不少。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>希望这篇文章能够帮到使用 Drone 的你。</p>\n<p>–EOF</p>\n","site":{"data":{}},"excerpt":"<p>因为默认版本的 Drone 包含构建次数限制，如果日常高频使用 Drone，不久之后，便会遇到需要“重新初始化”应用才能继续使用的问题，但其实，作为个人用户，我们其实可以不受此限制影响。</p>\n<p>在使用Mysql时，创建表结构时可以通过关键字auto_increment来指定主键是否自增。但在Postgresql数据库中，虽然可以实现字段的自增，但从本质上来说却并不支持Mysql那样的自增。</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png\" alt=\"image-20210825085148884\"></p>","more":"<p>所以本篇文章，就来分享下如何使用容器方式构建无使用限制的 Drone CI。</p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>之所以会有这篇文章出现呢？因为之前折腾群里的同学“公子”曾提到过“Drone 默认镜像是企业版，有 5000 次构建限制，需要重新编译”。考虑到软件的长期稳定使用，对<a href=\"https://docs.drone.io/enterprise/\">官方文档</a>进行翻阅，看到情况确实如此，文档中是如此描述的：“<strong>存在两种版本的 Drone，分别是需要自行构建的社区开源版本，和官方提供的企业版本</strong>”，然而官方并没有更多对于编译构建相关的文档或者说明。</p>\n<h3 id=\"关于-Drone-CI\"><a href=\"#关于-Drone-CI\" class=\"headerlink\" title=\"关于 Drone CI\"></a>关于 Drone CI</h3><p>对于个人开发者或者团队来说，我们最关心的几个问题，莫过于代码是否安全、软件授权方式、以及授权费用了，官方文档中有提及：</p>\n<ul>\n<li>  软件全部开源，官方默认为所有人提供企业版的镜像试用，支持 5000 次构建调用。</li>\n<li>  如果需要使用开源版本，需要自行进行构建。</li>\n<li>  企业版对于个人使用是免费的。</li>\n<li>  如果你的团队、公司（包含非盈利组织）年收入低于100万美元的企业，或者融资少于 500 万美元，可以免费使用。</li>\n<li>  如果你的公司需要付费，最低门槛是每月 299 美元。</li>\n</ul>\n<p>在官方<a href=\"https://www.drone.io/enterprise/\">企业服务页面</a>，我们可以看到不同版本的功能区别，主要在于是否支持：分布式方式运行多个 Runner；使用 K8S Runner；支持组织密钥功能；支持搭配 Vault 使用；支持定时任务；支持使用 postgres、mysql、s3 进行数据存储；支持自动扩容以及<a href=\"https://docs.drone.io/extensions/overview/\">“扩展功能”</a>。</p>\n<p>如果你有上述需求，可以构建“企业版”、反之构建“开源版”即可。不过结合上面的使用限制，对于一般个人和团队来说，直接构建“企业版”会更省事一些，功能更加全面。</p>\n<p>那么，就来看看如何采取类似“官方的方式”编译构建 Drone 的容器镜像吧。</p>\n<h2 id=\"收集-Drone-官方构建资料\"><a href=\"#收集-Drone-官方构建资料\" class=\"headerlink\" title=\"收集 Drone 官方构建资料\"></a>收集 Drone 官方构建资料</h2><p><a href=\"https://docs.drone.io/enterprise/\">翻阅文档</a>，可以看到关于自行构建，只有两条（或者说一条）简单的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 构建开源版</span><br><span class=\"line\">$ go build -tags &quot;oss nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建企业版</span><br><span class=\"line\">$ go build -tags &quot;nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br></pre></td></tr></table></figure>\n\n<p>为了构建出和官方基本一致的镜像，需要从官方仓库中梳理完整的“构建套路”。这里以 <a href=\"https://github.com/drone/drone/tree/v1.10.1\">v1.10.1</a> 代码为基础，进行构建方式梳理。</p>\n<p>从仓库根目录的 <code>BUILDING</code> 和 <code>BUILDING_OSS</code> 文件，可以看到<a href=\"https://github.com/drone/drone/blob/v1.10.1/BUILDING_OSS\">记录了</a>两种发行版软件的安装和构建流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Clone the repository</span><br><span class=\"line\">2. Install go 1.11 or later with Go modules enabled</span><br><span class=\"line\">3. Install binaries to $GOPATH/bin</span><br><span class=\"line\"></span><br><span class=\"line\">    go install -tags &quot;oss nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br><span class=\"line\"></span><br><span class=\"line\">4. Start the server at localhost:8080</span><br><span class=\"line\"></span><br><span class=\"line\">    export DRONE_GITHUB_CLIENT_ID=...</span><br><span class=\"line\">    export DRONE_GITHUB_CLIENT_SECRET=...</span><br><span class=\"line\">    drone-server</span><br></pre></td></tr></table></figure>\n\n<p>继续翻阅项目的 <code>.drone.yml</code> <a href=\"https://github.com/drone/drone/blob/v1.10.1/.drone.yml\">CI 文件</a>，可以看到官方是如何通过 CI 构建和发布软件的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">- name: build</span><br><span class=\"line\">  image: golang:1.14.4</span><br><span class=\"line\">  commands:</span><br><span class=\"line\">  - sh scripts/build.sh</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    GOARCH: amd64</span><br><span class=\"line\">    GOOS: linux</span><br><span class=\"line\"></span><br><span class=\"line\">- name: publish</span><br><span class=\"line\">  image: plugins/docker:18</span><br><span class=\"line\">  settings:</span><br><span class=\"line\">    auto_tag: true</span><br><span class=\"line\">    auto_tag_suffix: linux-amd64</span><br><span class=\"line\">    dockerfile: docker/Dockerfile.server.linux.amd64</span><br><span class=\"line\">    repo: drone/drone</span><br><span class=\"line\">    username:</span><br><span class=\"line\">      from_secret: docker_username</span><br><span class=\"line\">    password:</span><br><span class=\"line\">      from_secret: docker_password</span><br><span class=\"line\">  when:</span><br><span class=\"line\">    event:</span><br><span class=\"line\">    - push</span><br><span class=\"line\">    - tag</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>按图索骥，翻阅 CI 文件中提到的“<a href=\"https://github.com/drone/drone/blob/v1.10.1/scripts/build.sh\">构建脚本</a>”，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;building docker images for $&#123;GOOS&#125;/$&#123;GOARCH&#125; ...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">REPO=&quot;github.com/drone/drone&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># compile the server using the cgo</span><br><span class=\"line\">go build -ldflags &quot;-extldflags \\&quot;-static\\&quot;&quot; -o release/linux/$&#123;GOARCH&#125;/drone-server $&#123;REPO&#125;/cmd/drone-server</span><br><span class=\"line\"></span><br><span class=\"line\"># compile the runners with gcc disabled</span><br><span class=\"line\">export CGO_ENABLED=0</span><br><span class=\"line\">go build -o release/linux/$&#123;GOARCH&#125;/drone-agent      $&#123;REPO&#125;/cmd/drone-agent</span><br><span class=\"line\">go build -o release/linux/$&#123;GOARCH&#125;/drone-controller $&#123;REPO&#125;/cmd/drone-controller</span><br></pre></td></tr></table></figure>\n\n<p>继续查看容器 Dockerfile <a href=\"https://github.com/drone/drone/blob/v1.10.1/docker/Dockerfile.server.linux.amd64\">docker/Dockerfile.server.linux.amd64</a> ，可以看到容器结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker build --rm -f docker/Dockerfile -t drone/drone .</span><br><span class=\"line\"></span><br><span class=\"line\">FROM alpine:3.11 as alpine</span><br><span class=\"line\">RUN apk add -U --no-cache ca-certificates</span><br><span class=\"line\"></span><br><span class=\"line\">FROM alpine:3.11</span><br><span class=\"line\">EXPOSE 80 443</span><br><span class=\"line\">VOLUME /data</span><br><span class=\"line\"></span><br><span class=\"line\">RUN [ ! -e /etc/nsswitch.conf ] &amp;&amp; echo &#x27;hosts: files dns&#x27; &gt; /etc/nsswitch.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ENV GODEBUG netdns=go</span><br><span class=\"line\">ENV XDG_CACHE_HOME /data</span><br><span class=\"line\">ENV DRONE_DATABASE_DRIVER sqlite3</span><br><span class=\"line\">ENV DRONE_DATABASE_DATASOURCE /data/database.sqlite</span><br><span class=\"line\">ENV DRONE_RUNNER_OS=linux</span><br><span class=\"line\">ENV DRONE_RUNNER_ARCH=amd64</span><br><span class=\"line\">ENV DRONE_SERVER_PORT=:80</span><br><span class=\"line\">ENV DRONE_SERVER_HOST=localhost</span><br><span class=\"line\">ENV DRONE_DATADOG_ENABLED=true</span><br><span class=\"line\">ENV DRONE_DATADOG_ENDPOINT=https://stats.drone.ci/api/v1/series</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=alpine /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/</span><br><span class=\"line\"></span><br><span class=\"line\">ADD release/linux/amd64/drone-server /bin/</span><br><span class=\"line\">ENTRYPOINT [&quot;/bin/drone-server&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>线索差不多齐了，我们开始编写基础的容器镜像。</p>\n<h2 id=\"编写构建脚本\"><a href=\"#编写构建脚本\" class=\"headerlink\" title=\"编写构建脚本\"></a>编写构建脚本</h2><p>上一小节中，我们可以看到容器文件中使用的核心的软件 <code>drone-server</code> 是从“本地”拷贝至镜像中的，猜测是为了更高的编译效率，使用更短时间编译多平台使用的二进制文件，所以采取了这样的策略。</p>\n<p>对于我们来说，只需要使用适用于某一种 CPU 架构和系统的软件，可以考虑将编译环境直接用容器来创建。除了能够更好的保存编译环境外，还能够让编译使用的机器系统环境更加“纯粹和干净”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM golang:1.16.0-alpine3.13 AS Builder</span><br><span class=\"line\"></span><br><span class=\"line\">ENV DRONE_VERSION 2.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">ENV CGO_CFLAGS=&quot;-g -O2 -Wno-return-local-addr&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apk add build-base &amp;&amp; go env -w GO111MODULE=on &amp;&amp; \\</span><br><span class=\"line\">    mkdir /src &amp;&amp; cd /src &amp;&amp; \\</span><br><span class=\"line\">    apk add curl &amp;&amp; curl -L https://github.com/drone/drone/archive/refs/tags/v$&#123;DRONE_VERSION&#125;.tar.gz -o v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; \\</span><br><span class=\"line\">    tar zxvf v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; rm v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; \\</span><br><span class=\"line\">    cd /src/drone-$&#123;DRONE_VERSION&#125; &amp;&amp; \\</span><br><span class=\"line\">    go mod download &amp;&amp; \\</span><br><span class=\"line\">    go build -ldflags &quot;-extldflags \\&quot;-static\\&quot;&quot; -tags=&quot;nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br></pre></td></tr></table></figure>\n\n<p>为了让构建速度加快，我们可以适当调整 Dockerfile ，添加一些国内的软件源：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM golang:1.16.0-alpine3.13 AS Builder</span><br><span class=\"line\"></span><br><span class=\"line\">RUN sed -i &#x27;s/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/&#x27; /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apk add build-base &amp;&amp; \\</span><br><span class=\"line\">    go env -w GO111MODULE=on &amp;&amp; \\</span><br><span class=\"line\">    go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class=\"line\"></span><br><span class=\"line\">ENV DRONE_VERSION 2.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\"></span><br><span class=\"line\"># Build with online code</span><br><span class=\"line\">RUN apk add curl &amp;&amp; curl -L https://github.com/drone/drone/archive/refs/tags/v$&#123;DRONE_VERSION&#125;.tar.gz -o v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; \\</span><br><span class=\"line\">    tar zxvf v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; rm v$&#123;DRONE_VERSION&#125;.tar.gz</span><br><span class=\"line\"># OR with offline tarball</span><br><span class=\"line\"># ADD drone-2.1.0.tar.gz /src/</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src/drone-$&#123;DRONE_VERSION&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN go mod download</span><br><span class=\"line\"></span><br><span class=\"line\">ENV CGO_CFLAGS=&quot;-g -O2 -Wno-return-local-addr&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN go build -ldflags &quot;-extldflags \\&quot;-static\\&quot;&quot; -tags=&quot;nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br></pre></td></tr></table></figure>\n\n<p>将上面的内容保存为 <code>Dockerfile</code>，然后执行 <code>docker build -t drone:2.1.0 .</code> ，稍等片刻“全功能”的 Drone 就在镜像内构建完毕了，但是镜像尺寸非常大，足足有 1.28GB 之大，所以我们要继续编写一个多阶段构建的镜像，来减少容器尺寸。</p>\n<h3 id=\"多阶段镜像构建\"><a href=\"#多阶段镜像构建\" class=\"headerlink\" title=\"多阶段镜像构建\"></a>多阶段镜像构建</h3><p>在上面的容器声明文件下方继续添加一些内容，结合前文找到的官方构建脚本，我们可以对构建脚本进行一些调整：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM golang:1.16.0-alpine3.13 AS Builder</span><br><span class=\"line\"></span><br><span class=\"line\">RUN sed -i &#x27;s/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/&#x27; /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apk add build-base git &amp;&amp; \\</span><br><span class=\"line\">    go env -w GO111MODULE=on &amp;&amp; \\</span><br><span class=\"line\">    go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class=\"line\"></span><br><span class=\"line\">ENV DRONE_VERSION 2.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\"></span><br><span class=\"line\"># Build with online code</span><br><span class=\"line\">RUN apk add curl &amp;&amp; curl -L https://github.com/drone/drone/archive/refs/tags/v$&#123;DRONE_VERSION&#125;.tar.gz -o v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; \\</span><br><span class=\"line\">    tar zxvf v$&#123;DRONE_VERSION&#125;.tar.gz &amp;&amp; rm v$&#123;DRONE_VERSION&#125;.tar.gz</span><br><span class=\"line\"># OR with offline tarball</span><br><span class=\"line\"># ADD drone-1.10.1.tar.gz /src/</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src/drone-$&#123;DRONE_VERSION&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN go mod download</span><br><span class=\"line\"></span><br><span class=\"line\">ENV CGO_CFLAGS=&quot;-g -O2 -Wno-return-local-addr&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN go build -ldflags &quot;-extldflags \\&quot;-static\\&quot;&quot; -tags=&quot;nolimit&quot; github.com/drone/drone/cmd/drone-server</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">FROM alpine:3.13 AS Certs</span><br><span class=\"line\">RUN sed -i &#x27;s/https:\\/\\/dl-cdn.alpinelinux.org/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/&#x27; /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class=\"line\">RUN apk add -U --no-cache ca-certificates</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">FROM alpine:3.13</span><br><span class=\"line\">EXPOSE 80 443</span><br><span class=\"line\">VOLUME /data</span><br><span class=\"line\"></span><br><span class=\"line\">RUN [ ! -e /etc/nsswitch.conf ] &amp;&amp; echo &#x27;hosts: files dns&#x27; &gt; /etc/nsswitch.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ENV GODEBUG netdns=go</span><br><span class=\"line\">ENV XDG_CACHE_HOME /data</span><br><span class=\"line\">ENV DRONE_DATABASE_DRIVER sqlite3</span><br><span class=\"line\">ENV DRONE_DATABASE_DATASOURCE /data/database.sqlite</span><br><span class=\"line\">ENV DRONE_RUNNER_OS=linux</span><br><span class=\"line\">ENV DRONE_RUNNER_ARCH=amd64</span><br><span class=\"line\">ENV DRONE_SERVER_PORT=:80</span><br><span class=\"line\">ENV DRONE_SERVER_HOST=localhost</span><br><span class=\"line\">ENV DRONE_DATADOG_ENABLED=true</span><br><span class=\"line\">ENV DRONE_DATADOG_ENDPOINT=https://stats.drone.ci/api/v1/series</span><br><span class=\"line\"></span><br><span class=\"line\">COPY --from=Certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/</span><br><span class=\"line\">COPY --from=Builder /src/drone-2.1.0/drone-server /bin/drone-server</span><br><span class=\"line\">ENTRYPOINT [&quot;/bin/drone-server&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>再次执行 <code>docker build -t drone:1.10.1 .</code>，能够看到镜像尺寸减少到了 <code>61.7MB</code> ，和官方提供的 67.3MB 镜像差不多大了。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>今年早些时候，曾写过一篇关于 Drone 的内容：<a href=\"https://soulteary.com/2021/02/25/lightweight-code-warehouse-and-ci-usage-plan-in-docker-with-gitea-and-drone-part-1.html\">《容器方式下的轻量仓库与CI 使用方案：Gitea + Drone 基础篇》</a>，前些天在<a href=\"https://soulteary.com/2021/04/12/site-optimization-log.html\">《站点优化日志（2021.04.12）》</a> 中，也曾提到过我在尝试使用 Gitea + Drone 替换之前个人使用的 GitLab，所以如果你有类似轻量化运行的需求，可以翻阅之前的文章，或许能节约一些折腾过程的时间。</p>\n<p>当然，如果你对 GitLab Runner 的编译构建感兴趣，可以翻阅两年前的一篇内容：<a href=\"https://soulteary.com/2019/08/04/source-code-compilation-gitlab-runner.html\">《源码编译 GitLab Runner》</a>，同样是使用 Golang 编写，但是相比之下，比 Drone 复杂不少。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>希望这篇文章能够帮到使用 Drone 的你。</p>\n<p>–EOF</p>"},{"title":"如何让 YARN 支持 CNPM 的完整加速","date":"2021-08-20T02:47:42.000Z","_content":"\n> 国内的前端开发人或多或少都了解过 cnpm ，但项目开发因人而异，很多时候不会或不能使用 cnpm ，不计其数的项目在使用 yarn 或者其他包管理器安装依赖。本文将介绍这样的情况下如何加速二进制文件下载。\n<!--more-->\n\n在前一段时间发布的 Github Octoverse 2019 报告中，JavaScript 继续蝉联最受欢迎编程语言。JavaScript 生态的保持繁荣，与 Node.js 的流行密不可分。而说到 JavaScript 生态，不得不提到 npm，npm 不仅是前端开发首选的包管理器，也是除了 Github 之外最重要的代码共享途径。Snyk 2019 开源安全年报中指出，npm 生态的包数量远超其他包管理器。\n\n![各个包管理器生态的包总数](https://gitee.com/hxf88/imgrepo/raw/master/img/bVbAY2R \"各个包管理器生态的包总数\")\n\n现阶段，主流的前端开源项目在发布时都会使用 npm 的在线托管服务 [https://www.npmjs.com/](https://link.segmentfault.com/?url=https%3A%2F%2Fwww.npmjs.com%2F)。但开发者能够使用的包管理器却不止 npm 一个，来自开源社区的 yarn 和 pnpm 正在被越来越多人使用，它们最显著的优点就是加快依赖的安装速度。对于中国开发者，由阿里巴巴开源的 cnpm 也是一个重要的选择。\n\n## 关于 CNPM 的那些事\n\n由 `react` 和 `vue` 引领的前端工程化开发在国内大规模流行以来，前端项目的依赖安装成为了日常工作的重要组成部分。cnpm 的出现解决了由于网络环境造成的安装速度慢问题，受到了大量国内开发者的欢迎。\n\ncnpm 的诞生早于 yarn 和 pnpm ，它使用 `npminstall` 模块执行安装。由淘宝开发团队维护的 npm 仓库镜像，会定时同步 npm 官方的所有模块 。cnpm 无需任何配置就会默认从淘宝镜像下载所有的包，从而达到国内加速的目的。具体的使用方式可以查看官方文档 [https://npm.taobao.org/](https://link.segmentfault.com/?url=https%3A%2F%2Fnpm.taobao.org%2F)。\n\n虽然目前 cnpm 的速度一如既往得快，但对比其他竞品它却不再像刚诞生时那样有优势了，加上实际开发时莫名其妙的报错也难以解决，还有各种各样的其他因素。越来越多的团队又切换回了 npm ，或者转而使用具备更多功能的 yarn 或 pnpm 。\n\n> yarn 是 Facebook 团队开源的包管理器，它能创建更扁平的依赖树，只会安装变更的模块，使用并行下载，用本机缓存加速安装。而 pnpm 作为黑马，其口碑甚至优于 yarn ，但由于笔者没有使用经验，所以不会在本文中介绍它的使用方式。\n\n我想肯定有读者想吐槽，为什么不用 cnpm ，非要折腾？但这并没有具体的答案，每个团队，每个人都有各自的情况，无须妄加批评。终归都是发现问题解决问题。接下来会介绍怎么用最低限度的配置让 yarn 也获得 cnpm 的国内加速能力。\n\n## NPM 和 YARN 使用镜像加速\n\n这个部分不是什么新鲜内容了，所有的包管理器都可以设置仓库地址。具体的细节建议阅读 npm 的官方文档。\n\n除了“众所周知的命令行配置法”以外，也可以在项目中创建 `.npmrc` 文件。如果将该文件一并提交到 Git 就能与所有环境共享该配置，利于多人协作，也可以被 CI 和其他第三方工具使用。因此也是笔者推荐使用的方法。\n\nregistry = https://registry.npm.taobao.org\n\nyarn 同样也会读取这个文件，除非你在 .yarnrc 中覆盖了这一配置。\n\nregistry \"https://registry.npm.taobao.org\"\n\n## 配置二进制文件的镜像地址\n\n单纯的使用国内 npm 镜像并不能解决所有问题。最知名的例子：\n\n为了简化 CSS 的编写，许多项目都会使用预处理器。在国内，预处理器`less`比生态更加完整的 `sass` 处理器流行的原因之一，便是因为 `sass` 的编译工具 `node-sass` 的安装曾经十分困难，许多公司、团队和个人开发者因此决定了选型使用 `less`。\n\n`node-sass` 之所以难以安装，是它在 npm 安装流程之后，还会触发一个而外的编译流程。其中使用了 C++ 编译的二进制文件，该文件根据版本托管在 [https://github.com/sass/node-...](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fsass%2Fnode-sass%2Freleases) 。Github 使用了亚马逊的 AWS 服务作为 CDN，由于某些众所周知的原因，在中国大陆有时会无法访问。于是乎在该文件下载失败后，就会触发本机编译以生成替代的二进制文件，这一过程往往以失败告终（尤其是在 Windows 7 系统）。很多网络教程这时候会建议安装 C++ 相关的编译环境，也有人会说 “用 Linux 保平安”。\n\n但实际上只要能解决二进制文件的下载问题就能大大提高成功率。淘宝镜像上也提供了相应的二进制包，通过设置环境变量使用国内加速。cnpm 内置了这一过程，所以可以自动解决这一情况。\n\n不使用 cnpm 的话，则通过命令行设置环境变量：\n\nyarn config set sass\\_binary\\_site https://npm.taobao.org/mirrors/node-sass/\n\n\nSASS\\_BINARY\\_SITE=https://npm.taobao.org/mirrors/node-sass/ && yarn add node-sass\n\nyarn add node-sass --sass\\_binary\\_site https://npm.taobao.org/mirrors/node-sass/\n\n或者同样将其配置在 `.npmrc` 文件中达到分享配置的效果：\n\nsass\\_binary\\_site = https://npm.taobao.org/mirrors/node-sass/\nelectron\\_mirror = https://npm.taobao.org/mirrors/electron/\n\n`phantomjs` 和 `electron` 等同样可以使用此方法加速，因为他们都允许使用环境变量设置镜像 url。我们可以在 [https://npm.taobao.org/mirrors](https://link.segmentfault.com/?url=https%3A%2F%2Fnpm.taobao.org%2Fmirrors) 上查看所有可用的镜像。\n\n网络上绝大多数的文章也就到此为止了，然而这还不是全部。\n\n## 使用 bin-wrapper-china\n\n`imagemin` 是一系列基于 C++ 实现的图片压缩模块，其中包含了 `pngquant` 和 `mozjpeg` 等知名库，和 `node-sass` 一样需要下载二进制文件。然而它却没有不支持使用环境变量配置镜像仓库 url，自主编译的成功率也要低得多。这时候无论是 npm 还是 yarn 都只能听天由命祈祷网络畅通。\n\n没错，cnpm 通过内置的处理也解决了这种情况，那是不是要吃回头草用 cnpm 呢？\n\n当然不用，查看源码可以发现，相当一部分使用了二进制文件的模块，都会通过 `bin-wrapper` 执行下载和编译。于是乎只要能在下载之前将 `bin-wrapper` 内使用的下载链接替换成镜像仓库的 url，问题便迎刃而解。\n\n笔者为此创建了一个工具 [bin-wrapper-china](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fbest-shot%2Fbin-wrapper-china)，该工具 fork 了原版的 `bin-wrapper`，并读取了 cnpm 所使用的 [binary-mirror-config](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fcnpm%2Fbinary-mirror-config) 获取所有可用的镜像淘宝镜像 url，替换下载文件的链接。这样就可以愉快地使用加速功能。那么问题来了，怎样用 `bin-wrapper-china` 代替 `bin-wrapper` 执行下载呢？\n\n答案是使用 yarn 的杀手级功能 `resolutions` （npm 不支持），它允许我们用 yarn 执行安装时，用指定的模块替换另一个模块，具体的配置方法如下：\n\n{\n  \"resolutions\": {\n    \"bin-wrapper\": \"npm:bin-wrapper-china\"\n  }\n}\n\n`bin-wrapper-china` 的“冒名顶替”发生在安装过程之中，`bin-wrapper` 的运行发生在安装之后 ，所以能够无缝的运行。这样一来 `imagemin` 系列的安装成功率便能大为提高，关于 `resolutions` 的相关说明，详见：\n\n-   [https://yarnpkg.com/lang/en/d...](https://link.segmentfault.com/?url=https%3A%2F%2Fyarnpkg.com%2Flang%2Fen%2Fdocs%2Fselective-version-resolutions%2F)\n-   [https://github.com/yarnpkg/rf...](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fyarnpkg%2Frfcs%2Fblob%2Fmaster%2Fimplemented%2F0000-selective-versions-resolutions.md)\n\n对于支持环境变量的模块，例如 `node-sass` 等，`bin-wrapper-china` 也能提供了 `china-bin-env` 命令代替手动环境变量的支持。但由于我们不建议注入 yarn 或 npm 本身，而环境变量的注入必须在安装之前执行，故在有需要的情况下在项目内手动设置 `preinstall` 命令：\n\n{\n  \"scripts\": {\n    \n    \"preinstall\": \"npm install bin-wrapper-china -D && china-bin-env\",\n    \n    \"preinstall\": \"yarn add bin-wrapper-china -D && china-bin-env\"\n  }\n}\n\n基于 `preinstall` 的操作需要 `bin-wrapper-china` 的提前安装，笔者也希望后续有更好的解决方案。\n\n## 总结\n\n由于 cnpm 的一些功能缺失，我们可能会决定弃用它，但是它的加速能力又是我们所需要的。\n\n总结起来，cnpm 做了三件事：\n\n-   使用淘宝 npm 镜像仓库加速常规模块的安装。\n-   可配置的二进制文件，提前注入环境变量进行加速。\n-   不可配置的二进制文件，强行替换 url 加速下载。\n\n这也是我们要做的三件事（通常配置在项目中）：\n\n-   通过 .npmrc 文件配置 npm 仓库地址为国内镜像地址。\n-   通过 .npmrc 文件配置环境变量，或通过 `bin-wrapper-china` 的 `china-bin-env` 命令注入环境变量。\n-   配置 yarn resolutions， 用 `bin-wrapper-china` 冒充 `bin-wrapper` 实现 url 替换。\n\n当然了，如果你下定决心使用 cnpm ，或者所处的工作网络能够畅通无阻，或者项目不需要安装含二进制文件的模块（例如笔者在项目中用 sass 替换 node-sass），就不需要考虑这问题了。本文虽然推荐使用 yarn ，但其核心流程适用于大多数 Node.js 生态内的包管理器，各位读者有兴趣可以做更多探索。\n\n相关项目：\n\n-   [https://github.com/best-shot/...](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fbest-shot%2Fbin-wrapper-china)\n-   [https://github.com/cnpm/binar...](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fcnpm%2Fbinary-mirror-config)\n","source":"_posts/如何让-YARN-支持-CNPM-的完整加速.md","raw":"---\ntitle: 如何让 YARN 支持 CNPM 的完整加速\ndate: 2021-08-20 10:47:42\ntags:\n- yarn\ncategories: \n- 前端\n---\n\n> 国内的前端开发人或多或少都了解过 cnpm ，但项目开发因人而异，很多时候不会或不能使用 cnpm ，不计其数的项目在使用 yarn 或者其他包管理器安装依赖。本文将介绍这样的情况下如何加速二进制文件下载。\n<!--more-->\n\n在前一段时间发布的 Github Octoverse 2019 报告中，JavaScript 继续蝉联最受欢迎编程语言。JavaScript 生态的保持繁荣，与 Node.js 的流行密不可分。而说到 JavaScript 生态，不得不提到 npm，npm 不仅是前端开发首选的包管理器，也是除了 Github 之外最重要的代码共享途径。Snyk 2019 开源安全年报中指出，npm 生态的包数量远超其他包管理器。\n\n![各个包管理器生态的包总数](https://gitee.com/hxf88/imgrepo/raw/master/img/bVbAY2R \"各个包管理器生态的包总数\")\n\n现阶段，主流的前端开源项目在发布时都会使用 npm 的在线托管服务 [https://www.npmjs.com/](https://link.segmentfault.com/?url=https%3A%2F%2Fwww.npmjs.com%2F)。但开发者能够使用的包管理器却不止 npm 一个，来自开源社区的 yarn 和 pnpm 正在被越来越多人使用，它们最显著的优点就是加快依赖的安装速度。对于中国开发者，由阿里巴巴开源的 cnpm 也是一个重要的选择。\n\n## 关于 CNPM 的那些事\n\n由 `react` 和 `vue` 引领的前端工程化开发在国内大规模流行以来，前端项目的依赖安装成为了日常工作的重要组成部分。cnpm 的出现解决了由于网络环境造成的安装速度慢问题，受到了大量国内开发者的欢迎。\n\ncnpm 的诞生早于 yarn 和 pnpm ，它使用 `npminstall` 模块执行安装。由淘宝开发团队维护的 npm 仓库镜像，会定时同步 npm 官方的所有模块 。cnpm 无需任何配置就会默认从淘宝镜像下载所有的包，从而达到国内加速的目的。具体的使用方式可以查看官方文档 [https://npm.taobao.org/](https://link.segmentfault.com/?url=https%3A%2F%2Fnpm.taobao.org%2F)。\n\n虽然目前 cnpm 的速度一如既往得快，但对比其他竞品它却不再像刚诞生时那样有优势了，加上实际开发时莫名其妙的报错也难以解决，还有各种各样的其他因素。越来越多的团队又切换回了 npm ，或者转而使用具备更多功能的 yarn 或 pnpm 。\n\n> yarn 是 Facebook 团队开源的包管理器，它能创建更扁平的依赖树，只会安装变更的模块，使用并行下载，用本机缓存加速安装。而 pnpm 作为黑马，其口碑甚至优于 yarn ，但由于笔者没有使用经验，所以不会在本文中介绍它的使用方式。\n\n我想肯定有读者想吐槽，为什么不用 cnpm ，非要折腾？但这并没有具体的答案，每个团队，每个人都有各自的情况，无须妄加批评。终归都是发现问题解决问题。接下来会介绍怎么用最低限度的配置让 yarn 也获得 cnpm 的国内加速能力。\n\n## NPM 和 YARN 使用镜像加速\n\n这个部分不是什么新鲜内容了，所有的包管理器都可以设置仓库地址。具体的细节建议阅读 npm 的官方文档。\n\n除了“众所周知的命令行配置法”以外，也可以在项目中创建 `.npmrc` 文件。如果将该文件一并提交到 Git 就能与所有环境共享该配置，利于多人协作，也可以被 CI 和其他第三方工具使用。因此也是笔者推荐使用的方法。\n\nregistry = https://registry.npm.taobao.org\n\nyarn 同样也会读取这个文件，除非你在 .yarnrc 中覆盖了这一配置。\n\nregistry \"https://registry.npm.taobao.org\"\n\n## 配置二进制文件的镜像地址\n\n单纯的使用国内 npm 镜像并不能解决所有问题。最知名的例子：\n\n为了简化 CSS 的编写，许多项目都会使用预处理器。在国内，预处理器`less`比生态更加完整的 `sass` 处理器流行的原因之一，便是因为 `sass` 的编译工具 `node-sass` 的安装曾经十分困难，许多公司、团队和个人开发者因此决定了选型使用 `less`。\n\n`node-sass` 之所以难以安装，是它在 npm 安装流程之后，还会触发一个而外的编译流程。其中使用了 C++ 编译的二进制文件，该文件根据版本托管在 [https://github.com/sass/node-...](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fsass%2Fnode-sass%2Freleases) 。Github 使用了亚马逊的 AWS 服务作为 CDN，由于某些众所周知的原因，在中国大陆有时会无法访问。于是乎在该文件下载失败后，就会触发本机编译以生成替代的二进制文件，这一过程往往以失败告终（尤其是在 Windows 7 系统）。很多网络教程这时候会建议安装 C++ 相关的编译环境，也有人会说 “用 Linux 保平安”。\n\n但实际上只要能解决二进制文件的下载问题就能大大提高成功率。淘宝镜像上也提供了相应的二进制包，通过设置环境变量使用国内加速。cnpm 内置了这一过程，所以可以自动解决这一情况。\n\n不使用 cnpm 的话，则通过命令行设置环境变量：\n\nyarn config set sass\\_binary\\_site https://npm.taobao.org/mirrors/node-sass/\n\n\nSASS\\_BINARY\\_SITE=https://npm.taobao.org/mirrors/node-sass/ && yarn add node-sass\n\nyarn add node-sass --sass\\_binary\\_site https://npm.taobao.org/mirrors/node-sass/\n\n或者同样将其配置在 `.npmrc` 文件中达到分享配置的效果：\n\nsass\\_binary\\_site = https://npm.taobao.org/mirrors/node-sass/\nelectron\\_mirror = https://npm.taobao.org/mirrors/electron/\n\n`phantomjs` 和 `electron` 等同样可以使用此方法加速，因为他们都允许使用环境变量设置镜像 url。我们可以在 [https://npm.taobao.org/mirrors](https://link.segmentfault.com/?url=https%3A%2F%2Fnpm.taobao.org%2Fmirrors) 上查看所有可用的镜像。\n\n网络上绝大多数的文章也就到此为止了，然而这还不是全部。\n\n## 使用 bin-wrapper-china\n\n`imagemin` 是一系列基于 C++ 实现的图片压缩模块，其中包含了 `pngquant` 和 `mozjpeg` 等知名库，和 `node-sass` 一样需要下载二进制文件。然而它却没有不支持使用环境变量配置镜像仓库 url，自主编译的成功率也要低得多。这时候无论是 npm 还是 yarn 都只能听天由命祈祷网络畅通。\n\n没错，cnpm 通过内置的处理也解决了这种情况，那是不是要吃回头草用 cnpm 呢？\n\n当然不用，查看源码可以发现，相当一部分使用了二进制文件的模块，都会通过 `bin-wrapper` 执行下载和编译。于是乎只要能在下载之前将 `bin-wrapper` 内使用的下载链接替换成镜像仓库的 url，问题便迎刃而解。\n\n笔者为此创建了一个工具 [bin-wrapper-china](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fbest-shot%2Fbin-wrapper-china)，该工具 fork 了原版的 `bin-wrapper`，并读取了 cnpm 所使用的 [binary-mirror-config](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fcnpm%2Fbinary-mirror-config) 获取所有可用的镜像淘宝镜像 url，替换下载文件的链接。这样就可以愉快地使用加速功能。那么问题来了，怎样用 `bin-wrapper-china` 代替 `bin-wrapper` 执行下载呢？\n\n答案是使用 yarn 的杀手级功能 `resolutions` （npm 不支持），它允许我们用 yarn 执行安装时，用指定的模块替换另一个模块，具体的配置方法如下：\n\n{\n  \"resolutions\": {\n    \"bin-wrapper\": \"npm:bin-wrapper-china\"\n  }\n}\n\n`bin-wrapper-china` 的“冒名顶替”发生在安装过程之中，`bin-wrapper` 的运行发生在安装之后 ，所以能够无缝的运行。这样一来 `imagemin` 系列的安装成功率便能大为提高，关于 `resolutions` 的相关说明，详见：\n\n-   [https://yarnpkg.com/lang/en/d...](https://link.segmentfault.com/?url=https%3A%2F%2Fyarnpkg.com%2Flang%2Fen%2Fdocs%2Fselective-version-resolutions%2F)\n-   [https://github.com/yarnpkg/rf...](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fyarnpkg%2Frfcs%2Fblob%2Fmaster%2Fimplemented%2F0000-selective-versions-resolutions.md)\n\n对于支持环境变量的模块，例如 `node-sass` 等，`bin-wrapper-china` 也能提供了 `china-bin-env` 命令代替手动环境变量的支持。但由于我们不建议注入 yarn 或 npm 本身，而环境变量的注入必须在安装之前执行，故在有需要的情况下在项目内手动设置 `preinstall` 命令：\n\n{\n  \"scripts\": {\n    \n    \"preinstall\": \"npm install bin-wrapper-china -D && china-bin-env\",\n    \n    \"preinstall\": \"yarn add bin-wrapper-china -D && china-bin-env\"\n  }\n}\n\n基于 `preinstall` 的操作需要 `bin-wrapper-china` 的提前安装，笔者也希望后续有更好的解决方案。\n\n## 总结\n\n由于 cnpm 的一些功能缺失，我们可能会决定弃用它，但是它的加速能力又是我们所需要的。\n\n总结起来，cnpm 做了三件事：\n\n-   使用淘宝 npm 镜像仓库加速常规模块的安装。\n-   可配置的二进制文件，提前注入环境变量进行加速。\n-   不可配置的二进制文件，强行替换 url 加速下载。\n\n这也是我们要做的三件事（通常配置在项目中）：\n\n-   通过 .npmrc 文件配置 npm 仓库地址为国内镜像地址。\n-   通过 .npmrc 文件配置环境变量，或通过 `bin-wrapper-china` 的 `china-bin-env` 命令注入环境变量。\n-   配置 yarn resolutions， 用 `bin-wrapper-china` 冒充 `bin-wrapper` 实现 url 替换。\n\n当然了，如果你下定决心使用 cnpm ，或者所处的工作网络能够畅通无阻，或者项目不需要安装含二进制文件的模块（例如笔者在项目中用 sass 替换 node-sass），就不需要考虑这问题了。本文虽然推荐使用 yarn ，但其核心流程适用于大多数 Node.js 生态内的包管理器，各位读者有兴趣可以做更多探索。\n\n相关项目：\n\n-   [https://github.com/best-shot/...](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fbest-shot%2Fbin-wrapper-china)\n-   [https://github.com/cnpm/binar...](https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fcnpm%2Fbinary-mirror-config)\n","slug":"如何让-YARN-支持-CNPM-的完整加速","published":1,"updated":"2021-08-23T00:38:38.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6p3001hcmv9bkk4b5w6","content":"<blockquote>\n<p>国内的前端开发人或多或少都了解过 cnpm ，但项目开发因人而异，很多时候不会或不能使用 cnpm ，不计其数的项目在使用 yarn 或者其他包管理器安装依赖。本文将介绍这样的情况下如何加速二进制文件下载。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>在前一段时间发布的 Github Octoverse 2019 报告中，JavaScript 继续蝉联最受欢迎编程语言。JavaScript 生态的保持繁荣，与 Node.js 的流行密不可分。而说到 JavaScript 生态，不得不提到 npm，npm 不仅是前端开发首选的包管理器，也是除了 Github 之外最重要的代码共享途径。Snyk 2019 开源安全年报中指出，npm 生态的包数量远超其他包管理器。</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/bVbAY2R\" alt=\"各个包管理器生态的包总数\" title=\"各个包管理器生态的包总数\"></p>\n<p>现阶段，主流的前端开源项目在发布时都会使用 npm 的在线托管服务 <a href=\"https://link.segmentfault.com/?url=https://www.npmjs.com/\">https://www.npmjs.com/</a>。但开发者能够使用的包管理器却不止 npm 一个，来自开源社区的 yarn 和 pnpm 正在被越来越多人使用，它们最显著的优点就是加快依赖的安装速度。对于中国开发者，由阿里巴巴开源的 cnpm 也是一个重要的选择。</p>\n<h2 id=\"关于-CNPM-的那些事\"><a href=\"#关于-CNPM-的那些事\" class=\"headerlink\" title=\"关于 CNPM 的那些事\"></a>关于 CNPM 的那些事</h2><p>由 <code>react</code> 和 <code>vue</code> 引领的前端工程化开发在国内大规模流行以来，前端项目的依赖安装成为了日常工作的重要组成部分。cnpm 的出现解决了由于网络环境造成的安装速度慢问题，受到了大量国内开发者的欢迎。</p>\n<p>cnpm 的诞生早于 yarn 和 pnpm ，它使用 <code>npminstall</code> 模块执行安装。由淘宝开发团队维护的 npm 仓库镜像，会定时同步 npm 官方的所有模块 。cnpm 无需任何配置就会默认从淘宝镜像下载所有的包，从而达到国内加速的目的。具体的使用方式可以查看官方文档 <a href=\"https://link.segmentfault.com/?url=https://npm.taobao.org/\">https://npm.taobao.org/</a>。</p>\n<p>虽然目前 cnpm 的速度一如既往得快，但对比其他竞品它却不再像刚诞生时那样有优势了，加上实际开发时莫名其妙的报错也难以解决，还有各种各样的其他因素。越来越多的团队又切换回了 npm ，或者转而使用具备更多功能的 yarn 或 pnpm 。</p>\n<blockquote>\n<p>yarn 是 Facebook 团队开源的包管理器，它能创建更扁平的依赖树，只会安装变更的模块，使用并行下载，用本机缓存加速安装。而 pnpm 作为黑马，其口碑甚至优于 yarn ，但由于笔者没有使用经验，所以不会在本文中介绍它的使用方式。</p>\n</blockquote>\n<p>我想肯定有读者想吐槽，为什么不用 cnpm ，非要折腾？但这并没有具体的答案，每个团队，每个人都有各自的情况，无须妄加批评。终归都是发现问题解决问题。接下来会介绍怎么用最低限度的配置让 yarn 也获得 cnpm 的国内加速能力。</p>\n<h2 id=\"NPM-和-YARN-使用镜像加速\"><a href=\"#NPM-和-YARN-使用镜像加速\" class=\"headerlink\" title=\"NPM 和 YARN 使用镜像加速\"></a>NPM 和 YARN 使用镜像加速</h2><p>这个部分不是什么新鲜内容了，所有的包管理器都可以设置仓库地址。具体的细节建议阅读 npm 的官方文档。</p>\n<p>除了“众所周知的命令行配置法”以外，也可以在项目中创建 <code>.npmrc</code> 文件。如果将该文件一并提交到 Git 就能与所有环境共享该配置，利于多人协作，也可以被 CI 和其他第三方工具使用。因此也是笔者推荐使用的方法。</p>\n<p>registry = <a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a></p>\n<p>yarn 同样也会读取这个文件，除非你在 .yarnrc 中覆盖了这一配置。</p>\n<p>registry “<a href=\"https://registry.npm.taobao.org&quot;/\">https://registry.npm.taobao.org&quot;</a></p>\n<h2 id=\"配置二进制文件的镜像地址\"><a href=\"#配置二进制文件的镜像地址\" class=\"headerlink\" title=\"配置二进制文件的镜像地址\"></a>配置二进制文件的镜像地址</h2><p>单纯的使用国内 npm 镜像并不能解决所有问题。最知名的例子：</p>\n<p>为了简化 CSS 的编写，许多项目都会使用预处理器。在国内，预处理器<code>less</code>比生态更加完整的 <code>sass</code> 处理器流行的原因之一，便是因为 <code>sass</code> 的编译工具 <code>node-sass</code> 的安装曾经十分困难，许多公司、团队和个人开发者因此决定了选型使用 <code>less</code>。</p>\n<p><code>node-sass</code> 之所以难以安装，是它在 npm 安装流程之后，还会触发一个而外的编译流程。其中使用了 C++ 编译的二进制文件，该文件根据版本托管在 <a href=\"https://link.segmentfault.com/?url=https://github.com/sass/node-sass/releases\">https://github.com/sass/node-…</a> 。Github 使用了亚马逊的 AWS 服务作为 CDN，由于某些众所周知的原因，在中国大陆有时会无法访问。于是乎在该文件下载失败后，就会触发本机编译以生成替代的二进制文件，这一过程往往以失败告终（尤其是在 Windows 7 系统）。很多网络教程这时候会建议安装 C++ 相关的编译环境，也有人会说 “用 Linux 保平安”。</p>\n<p>但实际上只要能解决二进制文件的下载问题就能大大提高成功率。淘宝镜像上也提供了相应的二进制包，通过设置环境变量使用国内加速。cnpm 内置了这一过程，所以可以自动解决这一情况。</p>\n<p>不使用 cnpm 的话，则通过命令行设置环境变量：</p>\n<p>yarn config set sass_binary_site <a href=\"https://npm.taobao.org/mirrors/node-sass/\">https://npm.taobao.org/mirrors/node-sass/</a></p>\n<p>SASS_BINARY_SITE=<a href=\"https://npm.taobao.org/mirrors/node-sass/\">https://npm.taobao.org/mirrors/node-sass/</a> &amp;&amp; yarn add node-sass</p>\n<p>yarn add node-sass –sass_binary_site <a href=\"https://npm.taobao.org/mirrors/node-sass/\">https://npm.taobao.org/mirrors/node-sass/</a></p>\n<p>或者同样将其配置在 <code>.npmrc</code> 文件中达到分享配置的效果：</p>\n<p>sass_binary_site = <a href=\"https://npm.taobao.org/mirrors/node-sass/\">https://npm.taobao.org/mirrors/node-sass/</a><br>electron_mirror = <a href=\"https://npm.taobao.org/mirrors/electron/\">https://npm.taobao.org/mirrors/electron/</a></p>\n<p><code>phantomjs</code> 和 <code>electron</code> 等同样可以使用此方法加速，因为他们都允许使用环境变量设置镜像 url。我们可以在 <a href=\"https://link.segmentfault.com/?url=https://npm.taobao.org/mirrors\">https://npm.taobao.org/mirrors</a> 上查看所有可用的镜像。</p>\n<p>网络上绝大多数的文章也就到此为止了，然而这还不是全部。</p>\n<h2 id=\"使用-bin-wrapper-china\"><a href=\"#使用-bin-wrapper-china\" class=\"headerlink\" title=\"使用 bin-wrapper-china\"></a>使用 bin-wrapper-china</h2><p><code>imagemin</code> 是一系列基于 C++ 实现的图片压缩模块，其中包含了 <code>pngquant</code> 和 <code>mozjpeg</code> 等知名库，和 <code>node-sass</code> 一样需要下载二进制文件。然而它却没有不支持使用环境变量配置镜像仓库 url，自主编译的成功率也要低得多。这时候无论是 npm 还是 yarn 都只能听天由命祈祷网络畅通。</p>\n<p>没错，cnpm 通过内置的处理也解决了这种情况，那是不是要吃回头草用 cnpm 呢？</p>\n<p>当然不用，查看源码可以发现，相当一部分使用了二进制文件的模块，都会通过 <code>bin-wrapper</code> 执行下载和编译。于是乎只要能在下载之前将 <code>bin-wrapper</code> 内使用的下载链接替换成镜像仓库的 url，问题便迎刃而解。</p>\n<p>笔者为此创建了一个工具 <a href=\"https://link.segmentfault.com/?url=https://github.com/best-shot/bin-wrapper-china\">bin-wrapper-china</a>，该工具 fork 了原版的 <code>bin-wrapper</code>，并读取了 cnpm 所使用的 <a href=\"https://link.segmentfault.com/?url=https://github.com/cnpm/binary-mirror-config\">binary-mirror-config</a> 获取所有可用的镜像淘宝镜像 url，替换下载文件的链接。这样就可以愉快地使用加速功能。那么问题来了，怎样用 <code>bin-wrapper-china</code> 代替 <code>bin-wrapper</code> 执行下载呢？</p>\n<p>答案是使用 yarn 的杀手级功能 <code>resolutions</code> （npm 不支持），它允许我们用 yarn 执行安装时，用指定的模块替换另一个模块，具体的配置方法如下：</p>\n<p>{<br>  “resolutions”: {<br>    “bin-wrapper”: “npm:bin-wrapper-china”<br>  }<br>}</p>\n<p><code>bin-wrapper-china</code> 的“冒名顶替”发生在安装过程之中，<code>bin-wrapper</code> 的运行发生在安装之后 ，所以能够无缝的运行。这样一来 <code>imagemin</code> 系列的安装成功率便能大为提高，关于 <code>resolutions</code> 的相关说明，详见：</p>\n<ul>\n<li>  <a href=\"https://link.segmentfault.com/?url=https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">https://yarnpkg.com/lang/en/d…</a></li>\n<li>  <a href=\"https://link.segmentfault.com/?url=https://github.com/yarnpkg/rfcs/blob/master/implemented/0000-selective-versions-resolutions.md\">https://github.com/yarnpkg/rf…</a></li>\n</ul>\n<p>对于支持环境变量的模块，例如 <code>node-sass</code> 等，<code>bin-wrapper-china</code> 也能提供了 <code>china-bin-env</code> 命令代替手动环境变量的支持。但由于我们不建议注入 yarn 或 npm 本身，而环境变量的注入必须在安装之前执行，故在有需要的情况下在项目内手动设置 <code>preinstall</code> 命令：</p>\n<p>{<br>  “scripts”: {</p>\n<pre><code>&quot;preinstall&quot;: &quot;npm install bin-wrapper-china -D &amp;&amp; china-bin-env&quot;,\n\n&quot;preinstall&quot;: &quot;yarn add bin-wrapper-china -D &amp;&amp; china-bin-env&quot;\n</code></pre>\n<p>  }<br>}</p>\n<p>基于 <code>preinstall</code> 的操作需要 <code>bin-wrapper-china</code> 的提前安装，笔者也希望后续有更好的解决方案。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>由于 cnpm 的一些功能缺失，我们可能会决定弃用它，但是它的加速能力又是我们所需要的。</p>\n<p>总结起来，cnpm 做了三件事：</p>\n<ul>\n<li>  使用淘宝 npm 镜像仓库加速常规模块的安装。</li>\n<li>  可配置的二进制文件，提前注入环境变量进行加速。</li>\n<li>  不可配置的二进制文件，强行替换 url 加速下载。</li>\n</ul>\n<p>这也是我们要做的三件事（通常配置在项目中）：</p>\n<ul>\n<li>  通过 .npmrc 文件配置 npm 仓库地址为国内镜像地址。</li>\n<li>  通过 .npmrc 文件配置环境变量，或通过 <code>bin-wrapper-china</code> 的 <code>china-bin-env</code> 命令注入环境变量。</li>\n<li>  配置 yarn resolutions， 用 <code>bin-wrapper-china</code> 冒充 <code>bin-wrapper</code> 实现 url 替换。</li>\n</ul>\n<p>当然了，如果你下定决心使用 cnpm ，或者所处的工作网络能够畅通无阻，或者项目不需要安装含二进制文件的模块（例如笔者在项目中用 sass 替换 node-sass），就不需要考虑这问题了。本文虽然推荐使用 yarn ，但其核心流程适用于大多数 Node.js 生态内的包管理器，各位读者有兴趣可以做更多探索。</p>\n<p>相关项目：</p>\n<ul>\n<li>  <a href=\"https://link.segmentfault.com/?url=https://github.com/best-shot/bin-wrapper-china\">https://github.com/best-shot/…</a></li>\n<li>  <a href=\"https://link.segmentfault.com/?url=https://github.com/cnpm/binary-mirror-config\">https://github.com/cnpm/binar…</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>国内的前端开发人或多或少都了解过 cnpm ，但项目开发因人而异，很多时候不会或不能使用 cnpm ，不计其数的项目在使用 yarn 或者其他包管理器安装依赖。本文将介绍这样的情况下如何加速二进制文件下载。</p>\n</blockquote>","more":"<p>在前一段时间发布的 Github Octoverse 2019 报告中，JavaScript 继续蝉联最受欢迎编程语言。JavaScript 生态的保持繁荣，与 Node.js 的流行密不可分。而说到 JavaScript 生态，不得不提到 npm，npm 不仅是前端开发首选的包管理器，也是除了 Github 之外最重要的代码共享途径。Snyk 2019 开源安全年报中指出，npm 生态的包数量远超其他包管理器。</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/bVbAY2R\" alt=\"各个包管理器生态的包总数\" title=\"各个包管理器生态的包总数\"></p>\n<p>现阶段，主流的前端开源项目在发布时都会使用 npm 的在线托管服务 <a href=\"https://link.segmentfault.com/?url=https://www.npmjs.com/\">https://www.npmjs.com/</a>。但开发者能够使用的包管理器却不止 npm 一个，来自开源社区的 yarn 和 pnpm 正在被越来越多人使用，它们最显著的优点就是加快依赖的安装速度。对于中国开发者，由阿里巴巴开源的 cnpm 也是一个重要的选择。</p>\n<h2 id=\"关于-CNPM-的那些事\"><a href=\"#关于-CNPM-的那些事\" class=\"headerlink\" title=\"关于 CNPM 的那些事\"></a>关于 CNPM 的那些事</h2><p>由 <code>react</code> 和 <code>vue</code> 引领的前端工程化开发在国内大规模流行以来，前端项目的依赖安装成为了日常工作的重要组成部分。cnpm 的出现解决了由于网络环境造成的安装速度慢问题，受到了大量国内开发者的欢迎。</p>\n<p>cnpm 的诞生早于 yarn 和 pnpm ，它使用 <code>npminstall</code> 模块执行安装。由淘宝开发团队维护的 npm 仓库镜像，会定时同步 npm 官方的所有模块 。cnpm 无需任何配置就会默认从淘宝镜像下载所有的包，从而达到国内加速的目的。具体的使用方式可以查看官方文档 <a href=\"https://link.segmentfault.com/?url=https://npm.taobao.org/\">https://npm.taobao.org/</a>。</p>\n<p>虽然目前 cnpm 的速度一如既往得快，但对比其他竞品它却不再像刚诞生时那样有优势了，加上实际开发时莫名其妙的报错也难以解决，还有各种各样的其他因素。越来越多的团队又切换回了 npm ，或者转而使用具备更多功能的 yarn 或 pnpm 。</p>\n<blockquote>\n<p>yarn 是 Facebook 团队开源的包管理器，它能创建更扁平的依赖树，只会安装变更的模块，使用并行下载，用本机缓存加速安装。而 pnpm 作为黑马，其口碑甚至优于 yarn ，但由于笔者没有使用经验，所以不会在本文中介绍它的使用方式。</p>\n</blockquote>\n<p>我想肯定有读者想吐槽，为什么不用 cnpm ，非要折腾？但这并没有具体的答案，每个团队，每个人都有各自的情况，无须妄加批评。终归都是发现问题解决问题。接下来会介绍怎么用最低限度的配置让 yarn 也获得 cnpm 的国内加速能力。</p>\n<h2 id=\"NPM-和-YARN-使用镜像加速\"><a href=\"#NPM-和-YARN-使用镜像加速\" class=\"headerlink\" title=\"NPM 和 YARN 使用镜像加速\"></a>NPM 和 YARN 使用镜像加速</h2><p>这个部分不是什么新鲜内容了，所有的包管理器都可以设置仓库地址。具体的细节建议阅读 npm 的官方文档。</p>\n<p>除了“众所周知的命令行配置法”以外，也可以在项目中创建 <code>.npmrc</code> 文件。如果将该文件一并提交到 Git 就能与所有环境共享该配置，利于多人协作，也可以被 CI 和其他第三方工具使用。因此也是笔者推荐使用的方法。</p>\n<p>registry = <a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a></p>\n<p>yarn 同样也会读取这个文件，除非你在 .yarnrc 中覆盖了这一配置。</p>\n<p>registry “<a href=\"https://registry.npm.taobao.org&quot;/\">https://registry.npm.taobao.org&quot;</a></p>\n<h2 id=\"配置二进制文件的镜像地址\"><a href=\"#配置二进制文件的镜像地址\" class=\"headerlink\" title=\"配置二进制文件的镜像地址\"></a>配置二进制文件的镜像地址</h2><p>单纯的使用国内 npm 镜像并不能解决所有问题。最知名的例子：</p>\n<p>为了简化 CSS 的编写，许多项目都会使用预处理器。在国内，预处理器<code>less</code>比生态更加完整的 <code>sass</code> 处理器流行的原因之一，便是因为 <code>sass</code> 的编译工具 <code>node-sass</code> 的安装曾经十分困难，许多公司、团队和个人开发者因此决定了选型使用 <code>less</code>。</p>\n<p><code>node-sass</code> 之所以难以安装，是它在 npm 安装流程之后，还会触发一个而外的编译流程。其中使用了 C++ 编译的二进制文件，该文件根据版本托管在 <a href=\"https://link.segmentfault.com/?url=https://github.com/sass/node-sass/releases\">https://github.com/sass/node-…</a> 。Github 使用了亚马逊的 AWS 服务作为 CDN，由于某些众所周知的原因，在中国大陆有时会无法访问。于是乎在该文件下载失败后，就会触发本机编译以生成替代的二进制文件，这一过程往往以失败告终（尤其是在 Windows 7 系统）。很多网络教程这时候会建议安装 C++ 相关的编译环境，也有人会说 “用 Linux 保平安”。</p>\n<p>但实际上只要能解决二进制文件的下载问题就能大大提高成功率。淘宝镜像上也提供了相应的二进制包，通过设置环境变量使用国内加速。cnpm 内置了这一过程，所以可以自动解决这一情况。</p>\n<p>不使用 cnpm 的话，则通过命令行设置环境变量：</p>\n<p>yarn config set sass_binary_site <a href=\"https://npm.taobao.org/mirrors/node-sass/\">https://npm.taobao.org/mirrors/node-sass/</a></p>\n<p>SASS_BINARY_SITE=<a href=\"https://npm.taobao.org/mirrors/node-sass/\">https://npm.taobao.org/mirrors/node-sass/</a> &amp;&amp; yarn add node-sass</p>\n<p>yarn add node-sass –sass_binary_site <a href=\"https://npm.taobao.org/mirrors/node-sass/\">https://npm.taobao.org/mirrors/node-sass/</a></p>\n<p>或者同样将其配置在 <code>.npmrc</code> 文件中达到分享配置的效果：</p>\n<p>sass_binary_site = <a href=\"https://npm.taobao.org/mirrors/node-sass/\">https://npm.taobao.org/mirrors/node-sass/</a><br>electron_mirror = <a href=\"https://npm.taobao.org/mirrors/electron/\">https://npm.taobao.org/mirrors/electron/</a></p>\n<p><code>phantomjs</code> 和 <code>electron</code> 等同样可以使用此方法加速，因为他们都允许使用环境变量设置镜像 url。我们可以在 <a href=\"https://link.segmentfault.com/?url=https://npm.taobao.org/mirrors\">https://npm.taobao.org/mirrors</a> 上查看所有可用的镜像。</p>\n<p>网络上绝大多数的文章也就到此为止了，然而这还不是全部。</p>\n<h2 id=\"使用-bin-wrapper-china\"><a href=\"#使用-bin-wrapper-china\" class=\"headerlink\" title=\"使用 bin-wrapper-china\"></a>使用 bin-wrapper-china</h2><p><code>imagemin</code> 是一系列基于 C++ 实现的图片压缩模块，其中包含了 <code>pngquant</code> 和 <code>mozjpeg</code> 等知名库，和 <code>node-sass</code> 一样需要下载二进制文件。然而它却没有不支持使用环境变量配置镜像仓库 url，自主编译的成功率也要低得多。这时候无论是 npm 还是 yarn 都只能听天由命祈祷网络畅通。</p>\n<p>没错，cnpm 通过内置的处理也解决了这种情况，那是不是要吃回头草用 cnpm 呢？</p>\n<p>当然不用，查看源码可以发现，相当一部分使用了二进制文件的模块，都会通过 <code>bin-wrapper</code> 执行下载和编译。于是乎只要能在下载之前将 <code>bin-wrapper</code> 内使用的下载链接替换成镜像仓库的 url，问题便迎刃而解。</p>\n<p>笔者为此创建了一个工具 <a href=\"https://link.segmentfault.com/?url=https://github.com/best-shot/bin-wrapper-china\">bin-wrapper-china</a>，该工具 fork 了原版的 <code>bin-wrapper</code>，并读取了 cnpm 所使用的 <a href=\"https://link.segmentfault.com/?url=https://github.com/cnpm/binary-mirror-config\">binary-mirror-config</a> 获取所有可用的镜像淘宝镜像 url，替换下载文件的链接。这样就可以愉快地使用加速功能。那么问题来了，怎样用 <code>bin-wrapper-china</code> 代替 <code>bin-wrapper</code> 执行下载呢？</p>\n<p>答案是使用 yarn 的杀手级功能 <code>resolutions</code> （npm 不支持），它允许我们用 yarn 执行安装时，用指定的模块替换另一个模块，具体的配置方法如下：</p>\n<p>{<br>  “resolutions”: {<br>    “bin-wrapper”: “npm:bin-wrapper-china”<br>  }<br>}</p>\n<p><code>bin-wrapper-china</code> 的“冒名顶替”发生在安装过程之中，<code>bin-wrapper</code> 的运行发生在安装之后 ，所以能够无缝的运行。这样一来 <code>imagemin</code> 系列的安装成功率便能大为提高，关于 <code>resolutions</code> 的相关说明，详见：</p>\n<ul>\n<li>  <a href=\"https://link.segmentfault.com/?url=https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">https://yarnpkg.com/lang/en/d…</a></li>\n<li>  <a href=\"https://link.segmentfault.com/?url=https://github.com/yarnpkg/rfcs/blob/master/implemented/0000-selective-versions-resolutions.md\">https://github.com/yarnpkg/rf…</a></li>\n</ul>\n<p>对于支持环境变量的模块，例如 <code>node-sass</code> 等，<code>bin-wrapper-china</code> 也能提供了 <code>china-bin-env</code> 命令代替手动环境变量的支持。但由于我们不建议注入 yarn 或 npm 本身，而环境变量的注入必须在安装之前执行，故在有需要的情况下在项目内手动设置 <code>preinstall</code> 命令：</p>\n<p>{<br>  “scripts”: {</p>\n<pre><code>&quot;preinstall&quot;: &quot;npm install bin-wrapper-china -D &amp;&amp; china-bin-env&quot;,\n\n&quot;preinstall&quot;: &quot;yarn add bin-wrapper-china -D &amp;&amp; china-bin-env&quot;\n</code></pre>\n<p>  }<br>}</p>\n<p>基于 <code>preinstall</code> 的操作需要 <code>bin-wrapper-china</code> 的提前安装，笔者也希望后续有更好的解决方案。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>由于 cnpm 的一些功能缺失，我们可能会决定弃用它，但是它的加速能力又是我们所需要的。</p>\n<p>总结起来，cnpm 做了三件事：</p>\n<ul>\n<li>  使用淘宝 npm 镜像仓库加速常规模块的安装。</li>\n<li>  可配置的二进制文件，提前注入环境变量进行加速。</li>\n<li>  不可配置的二进制文件，强行替换 url 加速下载。</li>\n</ul>\n<p>这也是我们要做的三件事（通常配置在项目中）：</p>\n<ul>\n<li>  通过 .npmrc 文件配置 npm 仓库地址为国内镜像地址。</li>\n<li>  通过 .npmrc 文件配置环境变量，或通过 <code>bin-wrapper-china</code> 的 <code>china-bin-env</code> 命令注入环境变量。</li>\n<li>  配置 yarn resolutions， 用 <code>bin-wrapper-china</code> 冒充 <code>bin-wrapper</code> 实现 url 替换。</li>\n</ul>\n<p>当然了，如果你下定决心使用 cnpm ，或者所处的工作网络能够畅通无阻，或者项目不需要安装含二进制文件的模块（例如笔者在项目中用 sass 替换 node-sass），就不需要考虑这问题了。本文虽然推荐使用 yarn ，但其核心流程适用于大多数 Node.js 生态内的包管理器，各位读者有兴趣可以做更多探索。</p>\n<p>相关项目：</p>\n<ul>\n<li>  <a href=\"https://link.segmentfault.com/?url=https://github.com/best-shot/bin-wrapper-china\">https://github.com/best-shot/…</a></li>\n<li>  <a href=\"https://link.segmentfault.com/?url=https://github.com/cnpm/binary-mirror-config\">https://github.com/cnpm/binar…</a></li>\n</ul>"},{"title":"限制wsl2占用过多内存","date":"2021-08-25T02:00:16.000Z","_content":"\n在用户下建立\n\n![image-20210825085148884](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png)\n\n.wslconfig\n\n<!--more-->\n\n```\n[wsl2]\n processors=8\n memory=8GB\n swap=8GB\n localhostForwarding=true\n```\n\n## 定期释放cache内存\n\nLinux内核中有一个参数`/proc/sys/vm/drop_caches`，是可以用来手动释放Linux中的cache缓存，如果发现wsl2的cache过大影响到宿主机正常运行了，可以手动执行以下命令来释放cache：\n\n```text\n echo 3 > /proc/sys/vm/drop_caches\n```\n\n当然也可以设置成定时任务，每隔一段时间释放一次。\n\n简历crontab\n\n```\ncrontab  -e\n\n\n```\n\n输入以下命令：\n\n```\n30 21 * * *  echo 3 > /proc/sys/vm/drop_caches\n```\n\n","source":"_posts/限制wsl2占用过多内存.md","raw":"---\ntitle: 限制wsl2占用过多内存\ndate: 2021-08-25 10:00:16\ntags:\n- es\ncategories: \n- bigdata\n---\n\n在用户下建立\n\n![image-20210825085148884](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png)\n\n.wslconfig\n\n<!--more-->\n\n```\n[wsl2]\n processors=8\n memory=8GB\n swap=8GB\n localhostForwarding=true\n```\n\n## 定期释放cache内存\n\nLinux内核中有一个参数`/proc/sys/vm/drop_caches`，是可以用来手动释放Linux中的cache缓存，如果发现wsl2的cache过大影响到宿主机正常运行了，可以手动执行以下命令来释放cache：\n\n```text\n echo 3 > /proc/sys/vm/drop_caches\n```\n\n当然也可以设置成定时任务，每隔一段时间释放一次。\n\n简历crontab\n\n```\ncrontab  -e\n\n\n```\n\n输入以下命令：\n\n```\n30 21 * * *  echo 3 > /proc/sys/vm/drop_caches\n```\n\n","slug":"限制wsl2占用过多内存","published":1,"updated":"2021-08-25T07:58:56.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksr8n6p7001ncmv91b8j1gps","content":"<p>在用户下建立</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png\" alt=\"image-20210825085148884\"></p>\n<p>.wslconfig</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[wsl2]</span><br><span class=\"line\"> processors=8</span><br><span class=\"line\"> memory=8GB</span><br><span class=\"line\"> swap=8GB</span><br><span class=\"line\"> localhostForwarding=true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定期释放cache内存\"><a href=\"#定期释放cache内存\" class=\"headerlink\" title=\"定期释放cache内存\"></a>定期释放cache内存</h2><p>Linux内核中有一个参数<code>/proc/sys/vm/drop_caches</code>，是可以用来手动释放Linux中的cache缓存，如果发现wsl2的cache过大影响到宿主机正常运行了，可以手动执行以下命令来释放cache：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以设置成定时任务，每隔一段时间释放一次。</p>\n<p>简历crontab</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab  -e</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输入以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30 21 * * *  echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>在用户下建立</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210825085148884.png\" alt=\"image-20210825085148884\"></p>\n<p>.wslconfig</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[wsl2]</span><br><span class=\"line\"> processors=8</span><br><span class=\"line\"> memory=8GB</span><br><span class=\"line\"> swap=8GB</span><br><span class=\"line\"> localhostForwarding=true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定期释放cache内存\"><a href=\"#定期释放cache内存\" class=\"headerlink\" title=\"定期释放cache内存\"></a>定期释放cache内存</h2><p>Linux内核中有一个参数<code>/proc/sys/vm/drop_caches</code>，是可以用来手动释放Linux中的cache缓存，如果发现wsl2的cache过大影响到宿主机正常运行了，可以手动执行以下命令来释放cache：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以设置成定时任务，每隔一段时间释放一次。</p>\n<p>简历crontab</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab  -e</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输入以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30 21 * * *  echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cks9o6obz00000pv9bfzlemsc","category_id":"cks9o6oc500030pv9dbbxenp0","_id":"cks9o6ocd00080pv90ux65vgo"},{"post_id":"cksfr6gyz0000iqv9f2w780jt","category_id":"cksfr6gz30002iqv9bk1d84bw","_id":"cksfr6gzi0007iqv9cttgeb20"},{"post_id":"cksfr6gz20001iqv9cgqy21k7","category_id":"cksfr6gzg0005iqv9e4wv4vvj","_id":"cksfr6gzk000aiqv993nl0fx5"},{"post_id":"cksfr6gzi0008iqv97hgt78ux","category_id":"cksfr6gz30002iqv9bk1d84bw","_id":"cksfr6gzm000eiqv98j258n8x"},{"post_id":"cksfr6gzl000ciqv93llsdc1z","category_id":"cksfr6gz30002iqv9bk1d84bw","_id":"cksfr6gzo000hiqv94paf17dj"},{"post_id":"cksfr6gzj0009iqv92c9l16mn","category_id":"cksfr6gzl000diqv941eg6s8t","_id":"cksfr6gzq000kiqv94fkmak09"},{"post_id":"cksfr6gzp000iiqv94e8h8ljp","category_id":"cksfr6gz30002iqv9bk1d84bw","_id":"cksfr6gzs000niqv965o97oq2"},{"post_id":"cksfr6gzr000liqv9hz2y585g","category_id":"cksfr6gzl000diqv941eg6s8t","_id":"cksfr6gzu000riqv926tuguk1"},{"post_id":"cks9o6och000b0pv9aoazg1cw","category_id":"cksgt5aic0001adv9b6xl3szg","_id":"cksgt5aiq0003adv9he3agci0"},{"post_id":"ckpp6ut6e000hdgv9dias5yhv","category_id":"cksfr6gz30002iqv9bk1d84bw","_id":"cksr8n6nt0003cmv98emc0uy6"},{"post_id":"cksr8n6o80004cmv90p5teh26","category_id":"cksr8n6o90005cmv9efqceezd","_id":"cksr8n6og0009cmv9aol1840p"},{"post_id":"cksr8n6of0008cmv9deifgzwj","category_id":"cksfr6gzg0005iqv9e4wv4vvj","_id":"cksr8n6oh000ccmv91mcxcwsq"},{"post_id":"cksgt5ai30000adv98xnzer6p","category_id":"cksfr6gzg0005iqv9e4wv4vvj","_id":"cksr8n6oi000ecmv9d9kf8tb2"},{"post_id":"cksr8n6oh000dcmv99jhpaz6u","category_id":"cksfr6gzg0005iqv9e4wv4vvj","_id":"cksr8n6om000mcmv9hefffqdg"},{"post_id":"cksr8n6ol000jcmv9cstt1mnk","category_id":"cksfr6gz30002iqv9bk1d84bw","_id":"cksr8n6on000qcmv9fxynccs3"},{"post_id":"cksr8n6oh000bcmv9fz0e14nl","category_id":"cksr8n6oi000gcmv9e6ie7mco","_id":"cksr8n6oo000rcmv9f59a6y2l"},{"post_id":"cksr8n6os000wcmv995av8lvk","category_id":"cksr8n6ot000xcmv972q23q1p","_id":"cksr8n6ow0013cmv90b8pf1et"},{"post_id":"cksr8n6ou000zcmv9d0kw4jfx","category_id":"cksr8n6ov0011cmv9fgjbbar6","_id":"cksr8n6oz001acmv9fpx5227k"},{"post_id":"cksr8n6ov0010cmv971t8eekc","category_id":"cksr8n6ov0011cmv9fgjbbar6","_id":"cksr8n6p1001dcmv91a0t7jy2"},{"post_id":"cksr8n6p3001gcmv9dhb91uix","category_id":"cksr8n6oi000gcmv9e6ie7mco","_id":"cksr8n6p5001lcmv939b97i8t"},{"post_id":"cksr8n6p3001hcmv9bkk4b5w6","category_id":"cksr8n6p4001jcmv93nnxglkh","_id":"cksr8n6p7001ocmv9hzciek01"},{"post_id":"cksr8n6p7001ncmv91b8j1gps","category_id":"cksfr6gzg0005iqv9e4wv4vvj","_id":"cksr8n6p7001qcmv9adhnd4ii"}],"PostTag":[{"post_id":"ckrmzjq0z00006zv9647k5x36","tag_id":"ckrmzjq1300016zv9ffit6nw8","_id":"ckrmzjq1700026zv9dw8x2pz4"},{"post_id":"ckrybznbw00008sv970yy489g","tag_id":"ckrybznc300028sv9hv0ccm1x","_id":"ckrybzncc00068sv96xzx8fcj"},{"post_id":"ckrybznc100018sv9aoil7pt6","tag_id":"ckrybzncb00058sv975xa4bzw","_id":"ckrybznce000a8sv93b3w8tfg"},{"post_id":"ckrybznc800038sv9bqom4ymj","tag_id":"ckrybznce00098sv99jys3y6i","_id":"ckrybznce000c8sv9grd3e24c"},{"post_id":"ckrybzncb00048sv9751w1xrk","tag_id":"ckrybznce000b8sv98f4khbks","_id":"ckrybzncf000e8sv9f4ky47ht"},{"post_id":"ckrybzncc00078sv9g6ct7ol0","tag_id":"ckrybzncf000d8sv94wtjf559","_id":"ckrybzncf000g8sv99zrf3tub"},{"post_id":"ckrybzncd00088sv9g5j11g6g","tag_id":"ckrybzncf000f8sv94y8bf7tm","_id":"ckrybzncg000h8sv94jtt7nfw"},{"post_id":"cks9o6oc400020pv9ddfy3vjv","tag_id":"cks9o6occ00050pv91nvhbwfj","_id":"cks9o6ocd00070pv9dsdiaq4t"},{"post_id":"cks9o6ocb00040pv9hmnfhmfj","tag_id":"cks9o6ocd00060pv91prsf1xy","_id":"cks9o6ocd00090pv9hla0477l"},{"post_id":"cks9o6ocf000a0pv97w01h7il","tag_id":"cks9o6och000c0pv9a1db4hyz","_id":"cks9o6ock000g0pv978lheeps"},{"post_id":"cks9o6oci000d0pv9c8sfc1v1","tag_id":"cks9o6ock000h0pv97ilk3hd1","_id":"cks9o6ock000j0pv98o774o87"},{"post_id":"cks9o6obz00000pv9bfzlemsc","tag_id":"cks9oczx90001plv9b4oae8zk","_id":"cks9oczxk0004plv9h14n4b9t"},{"post_id":"cks9o6obz00000pv9bfzlemsc","tag_id":"cks9oczxj0002plv94ro59x7d","_id":"cks9oczxk0005plv927px3t6f"},{"post_id":"cks9o6obz00000pv9bfzlemsc","tag_id":"cks9oczxk0003plv92cnj0nm8","_id":"cks9oczxk0006plv9bwao6n0m"},{"post_id":"cksfr6gz20001iqv9cgqy21k7","tag_id":"cks9oczxj0002plv94ro59x7d","_id":"cksfr6gzd0004iqv9brlf4dio"},{"post_id":"cksfr6gyz0000iqv9f2w780jt","tag_id":"cksfr6gzc0003iqv97rfa31xr","_id":"cksfr6gzg0006iqv9g03645gd"},{"post_id":"cksfr6gzi0008iqv97hgt78ux","tag_id":"cksfr6gzk000biqv93w982ykp","_id":"cksfr6gzo000giqv939vj7pya"},{"post_id":"cksfr6gzj0009iqv92c9l16mn","tag_id":"cksfr6gzn000fiqv95hz50l5t","_id":"cksfr6gzs000oiqv92ctzdlju"},{"post_id":"cksfr6gzj0009iqv92c9l16mn","tag_id":"cksfr6gzp000jiqv9drn77het","_id":"cksfr6gzt000piqv98phoaf3f"},{"post_id":"cksfr6gzr000liqv9hz2y585g","tag_id":"cksfr6gzp000jiqv9drn77het","_id":"cksfr6gzu000siqv97g1nf2z9"},{"post_id":"cksfr6gzl000ciqv93llsdc1z","tag_id":"cksfr6gzr000miqv95yu25lmd","_id":"cksfr6gzv000tiqv9c3b124kx"},{"post_id":"cksfr6gzp000iiqv94e8h8ljp","tag_id":"cksfr6gzt000qiqv91ny7cadr","_id":"cksfr6gzw000viqv9ehd3hou0"},{"post_id":"cksfr6gzp000iiqv94e8h8ljp","tag_id":"cksfr6gzr000miqv95yu25lmd","_id":"cksfr6gzw000wiqv93ozb4r3c"},{"post_id":"cks9o6och000b0pv9aoazg1cw","tag_id":"cks9oczxj0002plv94ro59x7d","_id":"cksgt5aip0002adv9cona90qu"},{"post_id":"ckpp6ut6e000hdgv9dias5yhv","tag_id":"cksfr6gzc0003iqv97rfa31xr","_id":"cksr8n6ns0002cmv95c34atqw"},{"post_id":"cksr8n6o80004cmv90p5teh26","tag_id":"cksr8n6oc0006cmv9bkvr74g7","_id":"cksr8n6of0007cmv9834acipd"},{"post_id":"cksr8n6of0008cmv9deifgzwj","tag_id":"cksr8n6og000acmv99pvmfpnr","_id":"cksr8n6oi000hcmv9ajb1he3n"},{"post_id":"cksgt5ai30000adv98xnzer6p","tag_id":"cksr8n6oi000fcmv9h58pbwd6","_id":"cksr8n6om000ncmv99nkjdxg1"},{"post_id":"cksr8n6ol000jcmv9cstt1mnk","tag_id":"cksfr6gzc0003iqv97rfa31xr","_id":"cksr8n6on000ocmv916yi6neh"},{"post_id":"cksr8n6oh000bcmv9fz0e14nl","tag_id":"cksr8n6ol000kcmv99bo73hjn","_id":"cksr8n6oq000tcmv91ad7dkb1"},{"post_id":"cksr8n6oh000bcmv9fz0e14nl","tag_id":"cksr8n6on000pcmv9a699dew6","_id":"cksr8n6or000ucmv96mud8tim"},{"post_id":"cksr8n6oh000dcmv99jhpaz6u","tag_id":"cksr8n6oi000fcmv9h58pbwd6","_id":"cksr8n6or000vcmv9d07s23jt"},{"post_id":"cksr8n6os000wcmv995av8lvk","tag_id":"cksfr6gzn000fiqv95hz50l5t","_id":"cksr8n6ot000ycmv9e1yreyqr"},{"post_id":"cksr8n6ou000zcmv9d0kw4jfx","tag_id":"cksfr6gzt000qiqv91ny7cadr","_id":"cksr8n6oy0017cmv93hofbqd3"},{"post_id":"cksr8n6ou000zcmv9d0kw4jfx","tag_id":"cksr8n6ov0012cmv9a4yaf4a1","_id":"cksr8n6oy0019cmv9g1i9eszi"},{"post_id":"cksr8n6ov0010cmv971t8eekc","tag_id":"cksfr6gzt000qiqv91ny7cadr","_id":"cksr8n6p0001bcmv95p6p64e7"},{"post_id":"cksr8n6ov0010cmv971t8eekc","tag_id":"cksr8n6ov0012cmv9a4yaf4a1","_id":"cksr8n6p0001ccmv991w31s8f"},{"post_id":"cksr8n6p3001gcmv9dhb91uix","tag_id":"cksr8n6ol000kcmv99bo73hjn","_id":"cksr8n6p3001icmv98cgtbgky"},{"post_id":"cksr8n6p3001gcmv9dhb91uix","tag_id":"cksr8n6on000pcmv9a699dew6","_id":"cksr8n6p4001kcmv9h3lgcd7q"},{"post_id":"cksr8n6p3001hcmv9bkk4b5w6","tag_id":"ckrybznce000b8sv98f4khbks","_id":"cksr8n6p5001mcmv9fnir76eu"},{"post_id":"cksr8n6p7001ncmv91b8j1gps","tag_id":"cksr8n6og000acmv99pvmfpnr","_id":"cksr8n6p7001pcmv9di768l9v"}],"Tag":[{"name":"gitee typora picgo","_id":"ckrmzjq1300016zv9ffit6nw8"},{"name":"go","_id":"ckrybznc300028sv9hv0ccm1x"},{"name":"windowsTerminal powershell7","_id":"ckrybzncb00058sv975xa4bzw"},{"name":"powershell7","_id":"ckrybznce00098sv99jys3y6i"},{"name":"yarn","_id":"ckrybznce000b8sv98f4khbks"},{"name":"注解 customParam","_id":"ckrybzncf000d8sv94wtjf559"},{"name":"docker 备份","_id":"ckrybzncf000f8sv94y8bf7tm"},{"name":"mybatis 分页","_id":"cks9o6occ00050pv91nvhbwfj"},{"name":"linnux manjarco","_id":"cks9o6ocd00060pv91prsf1xy"},{"name":"golang","_id":"cks9o6och000c0pv9a1db4hyz"},{"name":"linux","_id":"cks9o6ocj000f0pv98tgr7x2j"},{"name":"postgres mysql found_rows()","_id":"cks9o6ock000h0pv97ilk3hd1"},{"name":"hexo","_id":"cks9oczx90001plv9b4oae8zk"},{"name":"shell","_id":"cks9oczxj0002plv94ro59x7d"},{"name":"表单验证","_id":"cks9oczxk0003plv92cnj0nm8"},{"name":"git","_id":"cksfr6gzc0003iqv97rfa31xr"},{"name":"python","_id":"cksfr6gzk000biqv93w982ykp"},{"name":"postgres","_id":"cksfr6gzn000fiqv95hz50l5t"},{"name":"sql","_id":"cksfr6gzp000jiqv9drn77het"},{"name":"gradle","_id":"cksfr6gzr000miqv95yu25lmd"},{"name":"java","_id":"cksfr6gzt000qiqv91ny7cadr"},{"name":"nodejs","_id":"cksr8n6oc0006cmv9bkvr74g7"},{"name":"es","_id":"cksr8n6og000acmv99pvmfpnr"},{"name":"flink","_id":"cksr8n6oi000fcmv9h58pbwd6"},{"name":"drone","_id":"cksr8n6ol000kcmv99bo73hjn"},{"name":"ci","_id":"cksr8n6on000pcmv9a699dew6"},{"name":"mybatis","_id":"cksr8n6ov0012cmv9a4yaf4a1"}]}}