{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/20210508015248.jpg","path":"images/20210508015248.jpg","modified":0,"renderable":0},{"_id":"source/images/20210508015248.webp","path":"images/20210508015248.webp","modified":0,"renderable":0},{"_id":"source/images/DIYgod-avatar2.jpeg","path":"images/DIYgod-avatar2.jpeg","modified":0,"renderable":0},{"_id":"source/images/image-20210507231725024.png","path":"images/image-20210507231725024.png","modified":0,"renderable":0},{"_id":"source/images/image-20210507231725024.webp","path":"images/image-20210507231725024.webp","modified":0,"renderable":0},{"_id":"source/images/image-20210508020412096-0410659.webp","path":"images/image-20210508020412096-0410659.webp","modified":0,"renderable":0},{"_id":"source/images/image-20210508020412096-0411479.webp","path":"images/image-20210508020412096-0411479.webp","modified":0,"renderable":0},{"_id":"source/images/image-20210508020412096-0411479.png","path":"images/image-20210508020412096-0411479.png","modified":0,"renderable":0},{"_id":"source/images/image-20210508020412096.webp","path":"images/image-20210508020412096.webp","modified":0,"renderable":0},{"_id":"source/images/u6VKbdFmzW4P8vD-0462488.webp","path":"images/u6VKbdFmzW4P8vD-0462488.webp","modified":0,"renderable":0},{"_id":"source/images/u6VKbdFmzW4P8vD.webp","path":"images/u6VKbdFmzW4P8vD.webp","modified":0,"renderable":0},{"_id":"source/images/w5yoNzm1lCPQtgZ-0462980.webp","path":"images/w5yoNzm1lCPQtgZ-0462980.webp","modified":0,"renderable":0},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","path":"images/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","modified":0,"renderable":0},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048-0463051.webp","path":"images/w5yoNzm1lCPQtgZ-0463048-0463051.webp","modified":0,"renderable":0},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048.webp","path":"images/w5yoNzm1lCPQtgZ-0463048.webp","modified":0,"renderable":0},{"_id":"source/images/w5yoNzm1lCPQtgZ.webp","path":"images/w5yoNzm1lCPQtgZ.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg","path":"images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.webp","path":"images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD.jpg","path":"images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.jpg","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.webp","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.jpg","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.webp","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.jpg","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.webp","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.jpg","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.webp","path":"images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.jpg","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.webp","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.webp","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.webp","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.jpg","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.jpg","modified":0,"renderable":0},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.webp","path":"images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.webp","modified":0,"renderable":0},{"_id":"themes/sagiri/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/Candyshop.otf","path":"fonts/Candyshop.otf","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/sigmarone1.woff2","path":"fonts/sigmarone1.woff2","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/sigmarone2.woff2","path":"fonts/sigmarone2.woff2","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/sigmarone3.woff2","path":"fonts/sigmarone3.woff2","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod-avatar.jpg","path":"images/DIYgod-avatar.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod-avatar.webp","path":"images/DIYgod-avatar.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/alipay.webp","path":"images/alipay.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod-avatar2.jpeg","path":"images/DIYgod-avatar2.jpeg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod-avatar2.webp","path":"images/DIYgod-avatar2.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card-avatar.jpg","path":"images/card-avatar.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.webp","path":"images/apple-touch-icon-next.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.png","path":"images/cc-by-nc-nd.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card-avatar.webp","path":"images/card-avatar.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card-avatar2.jpeg","path":"images/card-avatar2.jpeg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.png","path":"images/cc-by-nc-sa.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc.png","path":"images/cc-by-nc.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card-avatar2.webp","path":"images/card-avatar2.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.webp","path":"images/cc-by-nc-sa.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc.webp","path":"images/cc-by-nc.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nd.png","path":"images/cc-by-nd.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-sa.png","path":"images/cc-by-sa.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.webp","path":"images/cc-by-nc-nd.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by.png","path":"images/cc-by.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-zero.png","path":"images/cc-zero.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nd.webp","path":"images/cc-by-nd.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-sa.webp","path":"images/cc-by-sa.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-zero.webp","path":"images/cc-zero.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cursor.ico","path":"images/cursor.ico","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by.webp","path":"images/cc-by.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/footer.png","path":"images/footer.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/footer.webp","path":"images/footer.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling.jpg","path":"images/header-darling.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling.webp","path":"images/header-darling.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling2.jpg","path":"images/header-darling2.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling2.webp","path":"images/header-darling2.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling4.jpg","path":"images/header-darling4.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling3.jpg","path":"images/header-darling3.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling3.webp","path":"images/header-darling3.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling4.webp","path":"images/header-darling4.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darlings.jpg","path":"images/header-darlings.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darlings.webp","path":"images/header-darlings.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx-s.png","path":"images/header-gyx-s.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx-s.webp","path":"images/header-gyx-s.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-leg.jpg","path":"images/header-leg.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx.png","path":"images/header-gyx.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx.webp","path":"images/header-gyx.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-sagiri.jpg","path":"images/header-sagiri.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-mai.jpg","path":"images/header-mai.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-sagiri.webp","path":"images/header-sagiri.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header.jpg","path":"images/header.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-leg.webp","path":"images/header-leg.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-mai.webp","path":"images/header-mai.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/scroll.png","path":"images/scroll.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header.webp","path":"images/header.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/scroll.webp","path":"images/scroll.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/searchicon.webp","path":"images/searchicon.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/wechatpay.webp","path":"images/wechatpay.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/js/sagiri.min.js","path":"js/sagiri.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/js/sagiri.min.js.map","path":"js/sagiri.min.js.map","modified":1,"renderable":1},{"_id":"themes/sagiri/source/js/sagiri.min.js.LICENSE.txt","path":"js/sagiri.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/sw-toolbox/sw-toolbox.js","path":"lib/sw-toolbox/sw-toolbox.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/LICENSE.md","path":"lib/velocity-animate/LICENSE.md","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/README.md","path":"lib/velocity-animate/README.md","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/package.json","path":"lib/velocity-animate/package.json","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.js","path":"lib/velocity-animate/velocity.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.min.js","path":"lib/velocity-animate/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.js","path":"lib/velocity-animate/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.min.js","path":"lib/velocity-animate/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.moc","path":"images/live2d/22/22.moc","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.model.json","path":"images/live2d/22/22.model.json","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.model.json","path":"images/live2d/33/33.model.json","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/css/share.min.css","path":"lib/social-share.js/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.moc","path":"images/live2d/33/33.moc","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/js/jquery.share.min.js","path":"lib/social-share.js/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/js/social-share.min.js","path":"lib/social-share.js/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.eot","path":"lib/social-share.js/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.svg","path":"lib/social-share.js/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.ttf","path":"lib/social-share.js/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.woff","path":"lib/social-share.js/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.png","path":"images/live2d/22/22.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.webp","path":"images/live2d/22/22.2048/texture_00.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.png","path":"images/live2d/33/33.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.webp","path":"images/live2d/33/33.2048/texture_00.webp","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/20210426.md","hash":"f3e2e99ed63428d206d7ab327c76fb77f32c971a","modified":1623034889873},{"_id":"source/_posts/20201223.md","hash":"cef6df4e758814d12b64d44f1c151fdb27150d3f","modified":1623034889873},{"_id":"source/.DS_Store","hash":"cafdf4ed51b54ef0c08f45ca2e9d2ad99cce77ac","modified":1623034889873},{"_id":"source/_posts/GraphQL及元数据驱动架构在后端BFF中的实践.md","hash":"c3d5de0d87e26c4c4008e0f821f2a6122a0d0054","modified":1626937225476},{"_id":"source/_posts/Pulsar-入门及介绍.md","hash":"bd5968db9dd37ee0b41a5e219ca43e7765fa2c23","modified":1627441014966},{"_id":"source/_posts/gradle配置.md","hash":"7fded34cfda3f776f194bc99c6f938be2c0a2c0c","modified":1623034889875},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1623034889875},{"_id":"source/_posts/macos设置.md","hash":"6cdbe8cae76e606eae680833a2573788c438743c","modified":1627441013912},{"_id":"source/_posts/iceberg-flink设置.md","hash":"89ff9245c826fdf3d8603cc25840ec183645d431","modified":1626937240216},{"_id":"source/_posts/nginx设置.md","hash":"931c5cd26326c5249348b161e153ce65bcf4cbb1","modified":1626937247445},{"_id":"source/_posts/usr-libexec-java-home奇葩境遇.md","hash":"86343ff124469e8f30695ac87816aba132eadf1e","modified":1626937267794},{"_id":"source/_posts/webp图片踩坑.md","hash":"e66610a62d85258e327ee290778b05246bc164a4","modified":1626937271042},{"_id":"source/_posts/搭建macos的本地k8s环境.md","hash":"2f408ef7cc78f621b9e6e937f83510fad0cd5cc6","modified":1623034889877},{"_id":"source/_posts/利用-GitHub-Action-自动发布-Docker.md","hash":"2c9233462644e6d3886c47266f9a00707fef2362","modified":1626937276259},{"_id":"source/_posts/时间轮算法.md","hash":"2544412b2babd2bc4ed6d9a9b9e0df4db5476e8d","modified":1626937281451},{"_id":"source/_posts/用sdk建设环境信息.md","hash":"91bdc4e20a60486ebfec2619c657d4b92e0dcd6a","modified":1626937287913},{"_id":"source/_posts/用pm2后台运行hexo.md","hash":"8d5817e878b97fe60cd236c495ee2af863a9c3ce","modified":1626937284327},{"_id":"source/_posts/设计模式.md","hash":"c72a2a41b9d8247c95f6c5bf12ec73a893138613","modified":1626937293932},{"_id":"source/about/me.md","hash":"4c6c7e05a6b72f9d6a69141d1eb7e6f82e2821eb","modified":1623034889878},{"_id":"source/images/DIYgod-avatar2.jpeg","hash":"ba161f6d1371fcd8f114c11dec716f44704cda6f","modified":1623034889880},{"_id":"source/images/20210508015248.webp","hash":"cf0b31d85afc18abb010799f624ee587e67274b8","modified":1623034889879},{"_id":"source/images/image-20210507231725024.webp","hash":"6965cab109357ffa56539cd760720e0d5290d5ad","modified":1623034889891},{"_id":"source/images/image-20210508020412096-0410659.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1623034889891},{"_id":"source/images/image-20210508020412096-0411479.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1623034889892},{"_id":"source/images/image-20210508020412096.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1623034889892},{"_id":"source/images/u6VKbdFmzW4P8vD-0462488.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1623034889893},{"_id":"source/images/w5yoNzm1lCPQtgZ-0462980.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889893},{"_id":"source/images/u6VKbdFmzW4P8vD.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1623034889893},{"_id":"source/images/w5yoNzm1lCPQtgZ.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889895},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889894},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048-0463051.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889894},{"_id":"source/images/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889894},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1623034889881},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889883},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889884},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889885},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889886},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1623034889887},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1623034889888},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1623034889887},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1623034889887},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1623034889888},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1623034889888},{"_id":"source/images/20210508015248.jpg","hash":"4a9c0c031d718fbe16e4688850b559f2f627f53b","modified":1623034889879},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1623034889882},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1623034889885},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1623034889884},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1623034889887},{"_id":"source/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1623034889886},{"_id":"source/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1623034889888},{"_id":"source/images/image-20210508020412096-0411479.png","hash":"c85ec3b6551e70ca4c0b61e3509019759e8bf785","modified":1623034889892},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg","hash":"8a5ea329b1054ae64a60a6e6856ab4c582496fd8","modified":1623034889880},{"_id":"source/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD.jpg","hash":"8a5ea329b1054ae64a60a6e6856ab4c582496fd8","modified":1623034889882},{"_id":"source/images/image-20210507231725024.png","hash":"394e54f109af2bc2110f8303aded993782ff1800","modified":1623034889890},{"_id":"themes/sagiri/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206984012},{"_id":"themes/sagiri/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206983945},{"_id":"themes/sagiri/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206983946},{"_id":"themes/sagiri/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206983996},{"_id":"themes/sagiri/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206983997},{"_id":"themes/sagiri/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206983998},{"_id":"themes/sagiri/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206984010},{"_id":"themes/sagiri/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623206984011},{"_id":"themes/sagiri/.gitignore","hash":"aacec766c7c47f83f5dc0dba1b5d330e7299957d","modified":1623206983925},{"_id":"themes/sagiri/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1623206983924},{"_id":"themes/sagiri/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1623206983925},{"_id":"themes/sagiri/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1623206983925},{"_id":"themes/sagiri/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1623206983926},{"_id":"themes/sagiri/LICENSE","hash":"59c9ba55a87ff36cef60087e88bd4ecb6c2fa656","modified":1623206983927},{"_id":"themes/sagiri/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1623206983926},{"_id":"themes/sagiri/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1623206983926},{"_id":"themes/sagiri/package.json","hash":"6f594bfec20b16772a041c4de513e1b656f25640","modified":1625205543816},{"_id":"themes/sagiri/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1623206983926},{"_id":"themes/sagiri/README.md","hash":"69e1bccf354a3f9e7f5da847c5b03fe12f8322c7","modified":1623206983927},{"_id":"themes/sagiri/webpack.config.js","hash":"77fe4f14155d5864836242a109b32560fad101ba","modified":1623206984114},{"_id":"themes/sagiri/_config.yml","hash":"0fb65c2ab5a4daddccf719463cc6773c4e3fc140","modified":1627543379778},{"_id":"themes/sagiri/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1623206983928},{"_id":"themes/sagiri/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1623206983929},{"_id":"themes/sagiri/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1623206983929},{"_id":"themes/sagiri/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1623206983929},{"_id":"themes/sagiri/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1623206983930},{"_id":"themes/sagiri/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1623206983930},{"_id":"themes/sagiri/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1623206983931},{"_id":"themes/sagiri/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1623206983930},{"_id":"themes/sagiri/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1623206983931},{"_id":"themes/sagiri/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1623206983931},{"_id":"themes/sagiri/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1623206983932},{"_id":"themes/sagiri/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1623206983932},{"_id":"themes/sagiri/languages/zh-Hans.yml","hash":"50621422a4e34af7b0b7fbbcd84071dbf8c54800","modified":1623206983932},{"_id":"themes/sagiri/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1623206983933},{"_id":"themes/sagiri/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1623206983933},{"_id":"themes/sagiri/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1623206983960},{"_id":"themes/sagiri/layout/category.swig","hash":"d8a8fff8a88048e9f22e16cccd0ad9f4616dc45a","modified":1623206983960},{"_id":"themes/sagiri/layout/archive.swig","hash":"0d66294ad7c8eac9106afe60dc23b82a8bcac1f7","modified":1623206983960},{"_id":"themes/sagiri/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1623206983961},{"_id":"themes/sagiri/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1623206983961},{"_id":"themes/sagiri/scripts/img.js","hash":"8208369446e084d381d11824828c4f67ede225d8","modified":1627454321740},{"_id":"themes/sagiri/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1623206983963},{"_id":"themes/sagiri/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1623206983963},{"_id":"themes/sagiri/layout/_layout.swig","hash":"87e3ef5a6e71b574827650d69db82db5186e5018","modified":1623206983935},{"_id":"themes/sagiri/layout/page.swig","hash":"88aab03cf8eae38723e9dbb577b7d3c5a4e30d7b","modified":1623206983961},{"_id":"themes/sagiri/layout/tag.swig","hash":"4c45c8fb1223c803ad6810ef7f1e59037ca44dfb","modified":1623206983962},{"_id":"themes/sagiri/src/clipboard.js","hash":"4baacf61c835fdf5a5655f1c2da893ead22901c5","modified":1623206984104},{"_id":"themes/sagiri/src/bootstrap.js","hash":"ec8b018eabcc176c873344d1fd5cbaff16740db1","modified":1623206984103},{"_id":"themes/sagiri/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1623206984103},{"_id":"themes/sagiri/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1623206984103},{"_id":"themes/sagiri/src/kanban.js","hash":"4bbec857c26eddf005ac4171d85b7747902afbe3","modified":1623206984105},{"_id":"themes/sagiri/src/index.js","hash":"4f953f2bb64fe39c3d23beb929f26bcef8ccf2ad","modified":1623206984105},{"_id":"themes/sagiri/src/evanyou.js","hash":"6c96bbc6b2f667fef833492a5c4aca14aed9c721","modified":1623206984105},{"_id":"themes/sagiri/src/leancloud.js","hash":"04cdd7e7ae77113940c4ccf363677fdc15800d53","modified":1623206984105},{"_id":"themes/sagiri/src/mix.js","hash":"4c19936cd810154424928a0bd78b11e5857af29a","modified":1623206984109},{"_id":"themes/sagiri/src/online.js","hash":"6a609e05a83bbaa6934b19af7419ae6d1ec8ae92","modified":1623206072621},{"_id":"themes/sagiri/src/motion.js","hash":"a25ff81d7c7797de62c68b3b1d2c378714bb8564","modified":1623206984110},{"_id":"themes/sagiri/src/pisces.js","hash":"5435227d07e0b68956434059331e3b1e0ca27cb1","modified":1623206984110},{"_id":"themes/sagiri/src/pjax.js","hash":"6f12048d1d6db7a3f1928bdc25617d04831cb89b","modified":1623206984111},{"_id":"themes/sagiri/src/post-details.js","hash":"d47606954d3f7260780e9697b61b98913cc88416","modified":1623206984111},{"_id":"themes/sagiri/src/scroll.js","hash":"e8247a81985cfe433b58a4fe97e4f0647643b93c","modified":1623206984111},{"_id":"themes/sagiri/src/search.js","hash":"639e5887e7b6a1911fd634cb6c8ce69b5d4e4488","modified":1623206984112},{"_id":"themes/sagiri/src/share.js","hash":"65723b7da17d8e9149ce2f4bcaae60e7d1c81354","modified":1623206984112},{"_id":"themes/sagiri/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1623206984112},{"_id":"themes/sagiri/src/since.js","hash":"b302b356980f6ffb05d5b0c35fdb2a87b26764a1","modified":1623206984113},{"_id":"themes/sagiri/src/cursor-effects.js","hash":"a11acc813a04f7910670206307be16a0fe713115","modified":1623206984104},{"_id":"themes/sagiri/src/title.js","hash":"9bd4a96c4bae595a060d1510d252939699559fc1","modified":1623206984113},{"_id":"themes/sagiri/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1623206983934},{"_id":"themes/sagiri/layout/_macro/post-collapse.swig","hash":"3afe74eb3ae25fa127d9dd63e5390edde5c69185","modified":1623206983935},{"_id":"themes/sagiri/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1623206983934},{"_id":"themes/sagiri/src/type.js","hash":"ba1b2eac5891319a77417f27681b77c9b3c4d3e9","modified":1623206984113},{"_id":"themes/sagiri/src/zoom.js","hash":"d54bdda5f6108855e89c35fdd6684cb9308e233c","modified":1623206984114},{"_id":"themes/sagiri/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1623206983935},{"_id":"themes/sagiri/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1623206983936},{"_id":"themes/sagiri/src/utils.js","hash":"d9125debbeb43a145af5c2b8013fcb9336ccdef1","modified":1623206984114},{"_id":"themes/sagiri/layout/_macro/post.swig","hash":"09faabf67872379fc614b0efbd51608f8c6cec62","modified":1623206983936},{"_id":"themes/sagiri/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1623206983937},{"_id":"themes/sagiri/layout/_partials/footer.swig","hash":"61f137f84ac0237d9a163f39f36fa32eb7bd22e4","modified":1623206983938},{"_id":"themes/sagiri/layout/_partials/comments.swig","hash":"8c09a6eb22a3c663ec9d7dfdcd40299729f9031c","modified":1623206983937},{"_id":"themes/sagiri/layout/_macro/sidebar.swig","hash":"ff81d6a6fd483fc11dfeedd2c8ede1f3f5c2724d","modified":1623206983937},{"_id":"themes/sagiri/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1623206983940},{"_id":"themes/sagiri/layout/_partials/pagination.swig","hash":"359971397fd42138ae8fd04adf852f82a81d73b3","modified":1623206983940},{"_id":"themes/sagiri/layout/_partials/header.swig","hash":"eb54eb8068ce63834c74e8e75607658ece70b847","modified":1623206983939},{"_id":"themes/sagiri/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1623206983940},{"_id":"themes/sagiri/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1623206983944},{"_id":"themes/sagiri/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1623206983944},{"_id":"themes/sagiri/layout/_partials/head.swig","hash":"691c8d5413784afeea6e61daaad0116511fd7df8","modified":1623206983938},{"_id":"themes/sagiri/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1623206983955},{"_id":"themes/sagiri/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1623206983955},{"_id":"themes/sagiri/layout/_scripts/vendors.swig","hash":"6c0697b604c602a7cefdca4b25a1873b9d629e7c","modified":1623206983946},{"_id":"themes/sagiri/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1623206983956},{"_id":"themes/sagiri/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1623206983956},{"_id":"themes/sagiri/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1623206983964},{"_id":"themes/sagiri/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1623206983964},{"_id":"themes/sagiri/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1623206983965},{"_id":"themes/sagiri/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1623206983965},{"_id":"themes/sagiri/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1623206983965},{"_id":"themes/sagiri/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1623206983966},{"_id":"themes/sagiri/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1623206983966},{"_id":"themes/sagiri/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1623206983966},{"_id":"themes/sagiri/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1623206983967},{"_id":"themes/sagiri/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1623206983955},{"_id":"themes/sagiri/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1623206983956},{"_id":"themes/sagiri/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1623206983957},{"_id":"themes/sagiri/source/css/main.styl","hash":"891bf6fc7832a89e7ff8b5e1cb09cdab17c034e7","modified":1623206984011},{"_id":"themes/sagiri/source/fonts/Candyshop.otf","hash":"2d4fffc6d278cc8010f75422246bf368a764c125","modified":1623206984012},{"_id":"themes/sagiri/source/fonts/sigmarone3.woff2","hash":"5f62e2560d08e71274fac25c49825113a09776c7","modified":1623206984013},{"_id":"themes/sagiri/source/fonts/sigmarone2.woff2","hash":"feaa47ccbf19dfb2812fa8306f421b88e90af723","modified":1623206984013},{"_id":"themes/sagiri/source/images/DIYgod-avatar.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1623206984014},{"_id":"themes/sagiri/source/fonts/sigmarone1.woff2","hash":"35d4f8be95cbf9ced2c3eae1bfe63d5ce8ee7214","modified":1623206984012},{"_id":"themes/sagiri/source/images/DIYgod-avatar.webp","hash":"a7200fad65f069ca3f3256b4dd573d9d2e36c829","modified":1623206984014},{"_id":"themes/sagiri/source/images/DIYgod.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1623206072560},{"_id":"themes/sagiri/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1623206072560},{"_id":"themes/sagiri/source/images/alipay.webp","hash":"e4b890a58f4fa1448a0a2d5c9a6c9a747ab5cae5","modified":1623206984016},{"_id":"themes/sagiri/source/images/DIYgod-avatar2.jpeg","hash":"ba161f6d1371fcd8f114c11dec716f44704cda6f","modified":1623206984015},{"_id":"themes/sagiri/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1623206984017},{"_id":"themes/sagiri/source/images/alipay.png","hash":"bc3750d18e6bf1d5f1e24c25455b00d26c3ff447","modified":1623206984016},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1623206984016},{"_id":"themes/sagiri/source/images/DIYgod-avatar2.webp","hash":"fa07ba341621ea2b35393feabe797c4262ddae55","modified":1623206984015},{"_id":"themes/sagiri/source/images/card.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1623206072562},{"_id":"themes/sagiri/source/images/card-avatar.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1623206984018},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.png","hash":"f7839bdd799c452a4e807a2365849acc0748b3fd","modified":1623206984019},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.webp","hash":"a67fcf955e00f160cf687335673a8cbdc587d456","modified":1623206984017},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.png","hash":"cb36e36c3e3959a54ac289e309a4a89a016107bc","modified":1623206984020},{"_id":"themes/sagiri/source/images/cc-by-nc.png","hash":"eaf656bdd1ff61c345a7d42b94ac6f25435f5c42","modified":1623206984021},{"_id":"themes/sagiri/source/images/card-avatar.webp","hash":"980ebd262b2c68baa784a58be7afaa55edd60f28","modified":1623206984018},{"_id":"themes/sagiri/source/images/cc-by-nc.webp","hash":"5c8a54299712f843d290fed413925a2c3c3318c4","modified":1623206984021},{"_id":"themes/sagiri/source/images/card-avatar2.webp","hash":"f4641971faa9e8059e3181abee3fed52736e2ca0","modified":1623206984019},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.webp","hash":"5fde7a2f79adc7d200cac995df45a84d64b2494c","modified":1623206984020},{"_id":"themes/sagiri/source/images/cc-by-nd.png","hash":"6420f0e99cb3e90d3c37e0e8513d16ada14fed37","modified":1623206984021},{"_id":"themes/sagiri/source/images/cc-by-sa.png","hash":"d62ae0fd7204bf889b3f2cbe89eae5865a71c056","modified":1623206984022},{"_id":"themes/sagiri/source/images/cc-by.png","hash":"63f01c43cb5d03cb83d3c867c5ecb768cd89d9df","modified":1623206984023},{"_id":"themes/sagiri/source/images/cc-zero.png","hash":"fd4ce5a5851ef47c3b525652cc3ae8128d405c8f","modified":1623206984023},{"_id":"themes/sagiri/source/images/cc-by-nd.webp","hash":"2a5cc8580f7aadb947e558360bda5dd663eeecc1","modified":1623206984022},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.webp","hash":"a9da48b761a7586f899f826170bc86d26c2ec08a","modified":1623206984020},{"_id":"themes/sagiri/source/images/cc-zero.webp","hash":"bbe5c624b52986f383c0bc0aed4e4c93b1f3b680","modified":1623206984024},{"_id":"themes/sagiri/source/images/cursor.ico","hash":"cd8349fb9cef6c217fc364cf35eae6819cebf5d6","modified":1623206984024},{"_id":"themes/sagiri/source/images/cc-by-sa.webp","hash":"9afcad8c2cb3f4170b2a8bb5fd6fcc4c34616c19","modified":1623206984022},{"_id":"themes/sagiri/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1623206072565},{"_id":"themes/sagiri/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1623206072566},{"_id":"themes/sagiri/source/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1623206072565},{"_id":"themes/sagiri/source/images/favicon.ico","hash":"51cfa2cab8ae30b79cd7360dba747e705ad93bb4","modified":1623206072566},{"_id":"themes/sagiri/source/images/cc-by.webp","hash":"9a364fca486147d5fe120487edbcc5617d4a1759","modified":1623206984023},{"_id":"themes/sagiri/source/images/footer.webp","hash":"d5b03e8d76bcfc4f966ea3408bdc0b90874ca0e8","modified":1623206984025},{"_id":"themes/sagiri/source/images/footer.png","hash":"5f27807ccb8beeed9a909571783797901c52c3b7","modified":1623206984024},{"_id":"themes/sagiri/source/images/header-darling.webp","hash":"84ea4042c5e4a57e9b1832fdf4db536aa9d2e040","modified":1623206984026},{"_id":"themes/sagiri/source/images/header-darling.jpg","hash":"428d430fd9086c207a4a18d6c55308a74441bfe5","modified":1623206984026},{"_id":"themes/sagiri/source/images/header-gyx-s.webp","hash":"d16a445dadc05c1976ffbf3ab88de618d1db360a","modified":1623206984042},{"_id":"themes/sagiri/source/images/header-sagiri.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1623206984055},{"_id":"themes/sagiri/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1623206984067},{"_id":"themes/sagiri/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1623206984069},{"_id":"themes/sagiri/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1623206984068},{"_id":"themes/sagiri/source/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1623206984069},{"_id":"themes/sagiri/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1623206984068},{"_id":"themes/sagiri/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1623206984068},{"_id":"themes/sagiri/source/images/scroll.webp","hash":"f5e9b67b639f03e0a1ccf171b17d1b5ee811765d","modified":1623206984069},{"_id":"themes/sagiri/source/images/searchicon.webp","hash":"4dc91243df4ec53a3a98fd0ec9a4abaa15606dd3","modified":1623206984070},{"_id":"themes/sagiri/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1623206984070},{"_id":"themes/sagiri/source/images/header.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1623206984056},{"_id":"themes/sagiri/source/images/wechatpay.png","hash":"0c730f3963f3042d0dfcc78837d9a4cf2f05f8fc","modified":1623206984070},{"_id":"themes/sagiri/source/images/wechatpay.webp","hash":"d69056969d3e7101ebb9f4d3a382722093fff86c","modified":1623206984071},{"_id":"themes/sagiri/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1623206983939},{"_id":"themes/sagiri/source/js/sagiri.min.js.LICENSE.txt","hash":"0fb9313bdafca45073c08270d1df087eedbef9c4","modified":1623206984074},{"_id":"themes/sagiri/layout/_partials/head/external-fonts.swig","hash":"b3bb94baa38c4406b619b9e12f482991af8c9c6a","modified":1623206983939},{"_id":"themes/sagiri/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1623206983941},{"_id":"themes/sagiri/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1623206983942},{"_id":"themes/sagiri/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1623206983941},{"_id":"themes/sagiri/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1623206983942},{"_id":"themes/sagiri/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1623206983943},{"_id":"themes/sagiri/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1623206983943},{"_id":"themes/sagiri/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1623206983945},{"_id":"themes/sagiri/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1623206983945},{"_id":"themes/sagiri/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1623206983946},{"_id":"themes/sagiri/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1623206983942},{"_id":"themes/sagiri/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1623206983947},{"_id":"themes/sagiri/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1623206983947},{"_id":"themes/sagiri/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1623206983948},{"_id":"themes/sagiri/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1623206983948},{"_id":"themes/sagiri/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1623206983950},{"_id":"themes/sagiri/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1623206983949},{"_id":"themes/sagiri/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1623206983948},{"_id":"themes/sagiri/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1623206983949},{"_id":"themes/sagiri/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1623206983951},{"_id":"themes/sagiri/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1623206983950},{"_id":"themes/sagiri/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1623206983951},{"_id":"themes/sagiri/layout/_third-party/comments/disqus.swig","hash":"44db46b891650375ec1119de667656292441c908","modified":1623206983952},{"_id":"themes/sagiri/layout/_third-party/analytics/lean-analytics.swig","hash":"17d29648b8c7ac4a0f1aca9f7d409d7c15cde1c8","modified":1623206983950},{"_id":"themes/sagiri/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1623206983951},{"_id":"themes/sagiri/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1623206983952},{"_id":"themes/sagiri/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1623206983953},{"_id":"themes/sagiri/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1623206983953},{"_id":"themes/sagiri/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1623206983953},{"_id":"themes/sagiri/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1623206983954},{"_id":"themes/sagiri/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1623206983954},{"_id":"themes/sagiri/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1623206983958},{"_id":"themes/sagiri/layout/_third-party/comments/valine.swig","hash":"1b492d528a7d48216d4548011000fced2f4a538d","modified":1623206983954},{"_id":"themes/sagiri/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1623206983996},{"_id":"themes/sagiri/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1623206983959},{"_id":"themes/sagiri/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1623206983959},{"_id":"themes/sagiri/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1623206983958},{"_id":"themes/sagiri/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1623206983996},{"_id":"themes/sagiri/source/css/_mixins/Pisces.styl","hash":"0fe615385932fa8712513ed2046d72cfe88bd2d7","modified":1623206983997},{"_id":"themes/sagiri/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1623206984010},{"_id":"themes/sagiri/source/css/_mixins/base.styl","hash":"036429baccd0b35de273625f8655b7c9b009bc46","modified":1623206983997},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1623206984084},{"_id":"themes/sagiri/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1623206984009},{"_id":"themes/sagiri/source/css/_variables/Pisces.styl","hash":"9341024f4db35632feeb6822e88afb80f3658564","modified":1623206984010},{"_id":"themes/sagiri/source/css/_variables/base.styl","hash":"160f18a96f6451ce2f89563efefb41005a42cb55","modified":1623206984011},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1623206984087},{"_id":"themes/sagiri/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1623206984088},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1623206984087},{"_id":"themes/sagiri/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1623206984086},{"_id":"themes/sagiri/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1623206984088},{"_id":"themes/sagiri/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1623206984089},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1623206984090},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1623206984089},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1623206984089},{"_id":"themes/sagiri/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1623206984091},{"_id":"themes/sagiri/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1623206984090},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1623206984090},{"_id":"themes/sagiri/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1623206984091},{"_id":"themes/sagiri/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1623206984091},{"_id":"themes/sagiri/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1623206984092},{"_id":"themes/sagiri/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1623206984092},{"_id":"themes/sagiri/source/lib/velocity-animate/LICENSE.md","hash":"15e34f281b5684c052b25312be271735e2030379","modified":1623206984099},{"_id":"themes/sagiri/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1623206984092},{"_id":"themes/sagiri/source/lib/sw-toolbox/sw-toolbox.js","hash":"4750ebaf8cc28da8c1a9843ba0ebeca0fd812487","modified":1623206984097},{"_id":"themes/sagiri/source/lib/velocity-animate/package.json","hash":"6911ae2c4a3bd5073e74acc935644efccda6f9d0","modified":1623206984099},{"_id":"themes/sagiri/source/lib/velocity-animate/README.md","hash":"62bf5d569f4f2217a83ebc673d762fc0360cc07d","modified":1623206984099},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1623206984101},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.js","hash":"924f7ccc5d6504bcf581352e410722fbd4ee5051","modified":1623206984102},{"_id":"themes/sagiri/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1623206983958},{"_id":"themes/sagiri/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1623206983957},{"_id":"themes/sagiri/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1623206983968},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1623206984102},{"_id":"themes/sagiri/source/css/_common/components/back-to-top.styl","hash":"5d39998b755152cfb9e48a0c7e87dfdec9f185f9","modified":1623206983968},{"_id":"themes/sagiri/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1623206983969},{"_id":"themes/sagiri/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1623206983969},{"_id":"themes/sagiri/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1623206983969},{"_id":"themes/sagiri/source/css/_common/components/pagination.styl","hash":"39970bedf79ea1c6c6b2669acb21f0fea32a93d1","modified":1623206983975},{"_id":"themes/sagiri/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1623206983984},{"_id":"themes/sagiri/source/css/_common/scaffolding/base.styl","hash":"a9396c9cb667fc1b8d47b341ceb2beae269c1b08","modified":1623206983993},{"_id":"themes/sagiri/source/css/_common/outline/outline.styl","hash":"287296c977dddcf8196e10255235d016b6abcf68","modified":1623206983993},{"_id":"themes/sagiri/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1623206983994},{"_id":"themes/sagiri/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1623206983994},{"_id":"themes/sagiri/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1623206983995},{"_id":"themes/sagiri/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1623206983995},{"_id":"themes/sagiri/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1623206983999},{"_id":"themes/sagiri/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1623206983994},{"_id":"themes/sagiri/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1623206984000},{"_id":"themes/sagiri/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1623206983998},{"_id":"themes/sagiri/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1623206984000},{"_id":"themes/sagiri/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1623206983999},{"_id":"themes/sagiri/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1623206984003},{"_id":"themes/sagiri/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1623206984001},{"_id":"themes/sagiri/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1623206984000},{"_id":"themes/sagiri/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1623206984001},{"_id":"themes/sagiri/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1623206984004},{"_id":"themes/sagiri/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1623206984003},{"_id":"themes/sagiri/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1623206984004},{"_id":"themes/sagiri/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1623206984003},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_brand.styl","hash":"c27cd870ac870c8b740e79d916db1088f1d53101","modified":1623206984006},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_darling.styl","hash":"dcf18c2edff6f63504d2e38c686eab8001bf5b95","modified":1623206984006},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_footer.styl","hash":"0e09d9876f6f1b7aa0c6b4fde0eeaf00cdfb7634","modified":1623206984006},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_archive.styl","hash":"5fc138c64c3935448f7ff09eeb95d7d29b1cdeb9","modified":1623206984005},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_layout.styl","hash":"92a48de3c9ad7cba4b2973256c904a999e687771","modified":1623206984007},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_links.styl","hash":"a4593517234513ef939a66b49e7cab9374a5f861","modified":1623206984007},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_posts.styl","hash":"0399d3112ed99074df61f7b6e994dd2284d9e39f","modified":1623206984008},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_menu.styl","hash":"356dc43a48581948b148be4aa1479136daf4a936","modified":1623206984008},{"_id":"themes/sagiri/source/css/_schemes/Pisces/index.styl","hash":"dd4475245862d4478d7da83f47f988b2ca57e1e9","modified":1623206984009},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_mai.styl","hash":"042ec4dfc3672d01447876323b7ac3dc41fa766f","modified":1623206984007},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_sidebar.styl","hash":"f01c3db533b85c81715f13634a064215dbc128fd","modified":1623206984008},{"_id":"themes/sagiri/source/images/live2d/33/33.model.json","hash":"be96f72ae0f7fc77bfb6661caecd7a819c23611d","modified":1623206984067},{"_id":"themes/sagiri/source/images/live2d/22/22.model.json","hash":"bdbd71cb422fc16192d7bee838d099e68d41fec0","modified":1623206984060},{"_id":"themes/sagiri/source/lib/social-share.js/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1623206984093},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1623206984094},{"_id":"themes/sagiri/source/lib/social-share.js/js/social-share.min.js","hash":"4798c0fe6c75506eebbbb3cab8cf01dcb7f59908","modified":1623206984096},{"_id":"themes/sagiri/source/lib/social-share.js/js/jquery.share.min.js","hash":"7d3a7135cee30a5ccc38e2818a5bf8c03f7028a0","modified":1623206984096},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1623206984094},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1623206984095},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1623206984095},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1623206984098},{"_id":"themes/sagiri/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1623206983970},{"_id":"themes/sagiri/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1623206983970},{"_id":"themes/sagiri/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1623206983971},{"_id":"themes/sagiri/source/css/_common/components/header/menu.styl","hash":"edc7952499d96fe73cddaf15450a7b416ddf0175","modified":1623206983971},{"_id":"themes/sagiri/source/css/_common/components/header/site-meta.styl","hash":"325d9fbca3bea9cbdc5141e46dbbc07cade733bc","modified":1623206983971},{"_id":"themes/sagiri/source/css/_common/components/header/site-nav.styl","hash":"8f746dcf0f12852884c2409af68ccadd17434dff","modified":1623206983972},{"_id":"themes/sagiri/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1623206983972},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1623206984098},{"_id":"themes/sagiri/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1623206983974},{"_id":"themes/sagiri/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1623206983973},{"_id":"themes/sagiri/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1623206983973},{"_id":"themes/sagiri/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1623206983974},{"_id":"themes/sagiri/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1623206983975},{"_id":"themes/sagiri/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1623206983974},{"_id":"themes/sagiri/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1623206983976},{"_id":"themes/sagiri/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1623206983975},{"_id":"themes/sagiri/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1623206983977},{"_id":"themes/sagiri/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1623206983977},{"_id":"themes/sagiri/source/css/_common/components/post/post-collapse.styl","hash":"deb446c348fc423d3406945088f0f8f9cbbc06ab","modified":1623206983976},{"_id":"themes/sagiri/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1623206983978},{"_id":"themes/sagiri/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1623206983978},{"_id":"themes/sagiri/source/css/_common/components/post/post-nav.styl","hash":"0e281f7a5456cb0829a704eb8ea3e42540aefe76","modified":1623206983978},{"_id":"themes/sagiri/source/css/_common/components/post/post-expand.styl","hash":"266e807edc07a5ba8db12e6c9a0fa090747bde9e","modified":1623206983977},{"_id":"themes/sagiri/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1623206983979},{"_id":"themes/sagiri/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1623206983979},{"_id":"themes/sagiri/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1623206983979},{"_id":"themes/sagiri/source/css/_common/components/post/post-title.styl","hash":"63ceb42f7d4a162c1e277bd1db1dd50371b79490","modified":1623206983980},{"_id":"themes/sagiri/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1623206983980},{"_id":"themes/sagiri/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1623206983980},{"_id":"themes/sagiri/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1623206983985},{"_id":"themes/sagiri/source/css/_common/components/post/post.styl","hash":"6711a9fe08c33578a3aa22a6d9f1f1ee4e26db74","modified":1623206983981},{"_id":"themes/sagiri/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1623206983985},{"_id":"themes/sagiri/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1623206983986},{"_id":"themes/sagiri/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1623206983986},{"_id":"themes/sagiri/source/css/_common/components/tags/group-pictures.styl","hash":"f37c7598c03d2dd28925711b1176cb424fae7268","modified":1623206983986},{"_id":"themes/sagiri/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1623206983987},{"_id":"themes/sagiri/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1623206983987},{"_id":"themes/sagiri/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1623206983988},{"_id":"themes/sagiri/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1623206983988},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1623206983981},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1623206983981},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1623206983982},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1623206983982},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"115be924fecaee8072c2f3be068b5e4717d3c2a9","modified":1623206983982},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1623206983983},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar.styl","hash":"fa448a9e784b08f459eeeff4d815aa8788a2dca4","modified":1623206983984},{"_id":"themes/sagiri/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1623206983988},{"_id":"themes/sagiri/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1623206983984},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"332a98c13976b464310125fb4c992b03997670ca","modified":1623206983983},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1623206983983},{"_id":"themes/sagiri/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1623206983989},{"_id":"themes/sagiri/source/css/_common/components/third-party/balloon.styl","hash":"6bbf6ec67610ee80e1178a59234050ac2d085837","modified":1623206983989},{"_id":"themes/sagiri/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1623206983990},{"_id":"themes/sagiri/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1623206983990},{"_id":"themes/sagiri/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1623206983990},{"_id":"themes/sagiri/source/css/_common/components/third-party/headroom.styl","hash":"8618c8805fcfb06659f8f83976529dfc4c3d5d0b","modified":1623206983991},{"_id":"themes/sagiri/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1623206983992},{"_id":"themes/sagiri/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1623206983992},{"_id":"themes/sagiri/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1623206983991},{"_id":"themes/sagiri/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1623206983991},{"_id":"themes/sagiri/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1623206984001},{"_id":"themes/sagiri/source/css/_common/components/third-party/third-party.styl","hash":"34c6e5aa49b0221f3ceac323a979a51d3b7d0506","modified":1623206983992},{"_id":"themes/sagiri/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1623206984002},{"_id":"themes/sagiri/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1623206984005},{"_id":"themes/sagiri/source/images/card-avatar2.jpeg","hash":"0c26051e7302dcde32d546da24cc24de9f1ad23c","modified":1623206984019},{"_id":"themes/sagiri/source/images/header.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1623206984056},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.webp","hash":"e5dafe1d0eb1859c5be3643fc0723e4d0b10f7f8","modified":1623206984059},{"_id":"themes/sagiri/src/live2d.js","hash":"81846d8c45195df78620b46f200b74f1243b297b","modified":1623206984109},{"_id":"themes/sagiri/yarn.lock","hash":"01aac03ba17f9d884222e2d69c11683a73609a61","modified":1625205547527},{"_id":"themes/sagiri/source/images/header-darling2.jpg","hash":"e2ae6c5df17411838955d231e9a76321b2001c5c","modified":1623206984027},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.webp","hash":"ea15326bcbb692a272dbd793163e55c030fedda8","modified":1623206984065},{"_id":"themes/sagiri/source/images/header-gyx.webp","hash":"194c54813297f72538dd2ae62ae538ce9ba4245d","modified":1623206984047},{"_id":"themes/sagiri/source/images/header-mai.webp","hash":"a5aa4f650bf5a998fd792d035b76171e908d9c32","modified":1623206984054},{"_id":"themes/sagiri/source/images/live2d/22/22.moc","hash":"63a7992de8c4658ee432822b5710565481610f0e","modified":1623206984060},{"_id":"themes/sagiri/source/images/header-darling2.webp","hash":"9f283b3656471833c7f768e97852140dfe12742f","modified":1623206984028},{"_id":"themes/sagiri/source/images/live2d/33/33.moc","hash":"80a030342ac1b6a7cd8acb441bcb207d8803b76b","modified":1623206984067},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.png","hash":"b002297b31421137a64fad594f7593133cea3cbf","modified":1623206984058},{"_id":"themes/sagiri/source/images/header-gyx-s.png","hash":"2b6b2f9904f0bbd35715adae276e7d8fc20572f2","modified":1623206984042},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.js","hash":"4241265a2c7755b42d5aa478b46e77efd8093c23","modified":1623206984101},{"_id":"themes/sagiri/source/images/header-mai.jpg","hash":"b9890a3d76f62437462475a2c51c6b8442898379","modified":1623206984053},{"_id":"themes/sagiri/source/images/header-darlings.webp","hash":"0d3e794a5a402d615ec4a36fb525fedc3487a026","modified":1623206984041},{"_id":"themes/sagiri/source/images/header-sagiri.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1623206984055},{"_id":"themes/sagiri/source/images/header-darlings.jpg","hash":"20156313f1e9b02f28da3f5ca7b7ac607c6ea4f0","modified":1623206984040},{"_id":"themes/sagiri/source/images/header-darling4.webp","hash":"cd9c479ef8c5d0e1d5d6d77259ca5e1522db9b8f","modified":1623206984038},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1623206984086},{"_id":"themes/sagiri/source/images/header-darling3.jpg","hash":"da8965efff676a86af6ed61451c3c13fe8a30bf3","modified":1623206984030},{"_id":"themes/sagiri/source/images/header-darling3.webp","hash":"d8cdee7124b0a0e21fa9cc82bbb64134d3778061","modified":1623206984032},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.png","hash":"6d710da6056de69bfe0c33ac1b9e837b327b2f7b","modified":1623206984064},{"_id":"themes/sagiri/source/js/sagiri.min.js","hash":"39e43550a15e8badfc6a1c83a3c9b4bef9aeeab9","modified":1623206984074},{"_id":"themes/sagiri/source/images/header-darling4.jpg","hash":"e64b1131d266f98e81d68ca36dcf5324cb901e50","modified":1623206984037},{"_id":"themes/sagiri/source/images/header-leg.jpg","hash":"426445281820258e0859b78e3b5e8279546dc3f5","modified":1623206984050},{"_id":"themes/sagiri/source/images/header-leg.webp","hash":"fd1692cd000bc739cc478785f2fbb2daa759ca5f","modified":1623206984052},{"_id":"themes/sagiri/source/images/header-gyx.png","hash":"c72a623d4407c90df6cfb6ca22b1337ded8d831f","modified":1623206984046},{"_id":"themes/sagiri/source/js/sagiri.min.js.map","hash":"f12cafe8e1ebefcd405252903a6c88fdd497dd35","modified":1627521908752},{"_id":"themes/sagiri/package-lock.json","hash":"a71773c4d9878d30bd70b1dd5752cd691ef1662a","modified":1625205543808},{"_id":"source/_posts/shiro.md","hash":"a9f6f387a95683096ce70681b079ca5bb3a54835","modified":1627441016394},{"_id":"source/_posts/image-20210611150230176.png","hash":"43fcdacd8b11170621c8f8dc38516ef4be230c32","modified":1623394956575},{"_id":"public/atom.xml","hash":"7f45b303641bf85eb6f99e0cad11c23ba994fb0a","modified":1627446356625},{"_id":"public/sitemap.xml","hash":"e2eb75a0af5478d429b0da53489c435ee762f1e4","modified":1627446356625},{"_id":"public/about/me.html","hash":"dc42987344c226bbf108c0c48ee80ad9d702f301","modified":1626847719117},{"_id":"public/shiro/index.html","hash":"557bd64dcd3e75c1f57f70e61788a431d1965105","modified":1627446308863},{"_id":"public/hello-world/index.html","hash":"e8945496adf87fb9d033856255b9c36d539bdbad","modified":1626923741552},{"_id":"public/搭建macos的本地k8s环境/index.html","hash":"c228e20f40e41d468495e02bdb5b5fdae1110dda","modified":1626847719117},{"_id":"public/usr-libexec-java-home奇葩境遇/index.html","hash":"a6c8bb6919ce16f3285502e3f44cfead83fd77f9","modified":1627446308863},{"_id":"public/gradle配置/index.html","hash":"6394d27e34cf233964c0d0a2b0d492bbabd94b06","modified":1626847719117},{"_id":"public/用sdk建设环境信息/index.html","hash":"40289f8c8bf1a58fc8b444e14fd8ba36f520434a","modified":1627446308863},{"_id":"public/利用-GitHub-Action-自动发布-Docker/index.html","hash":"43d16e7b7dd65c8d45a1b0b042157e0583a2ebef","modified":1627446308863},{"_id":"public/Pulsar-入门及介绍/index.html","hash":"356700116f648f74c5f1c9a3beabddf087777d1e","modified":1627446308863},{"_id":"public/GraphQL及元数据驱动架构在后端BFF中的实践/index.html","hash":"0ccabfed7524cd654943157515c9e72ed86d409d","modified":1627446308863},{"_id":"public/webp图片踩坑/index.html","hash":"ed235b8f6d50fd63cbab4ba9f4044765fc238954","modified":1627446308863},{"_id":"public/nginx设置/index.html","hash":"0e76dbe1a706ecb8da89eb2d58a6be7515ad08dc","modified":1627446308863},{"_id":"public/用pm2后台运行hexo/index.html","hash":"65d86f0a70c267eb91444aac9148b0d9c65afab5","modified":1627446308863},{"_id":"public/iceberg-flink设置/index.html","hash":"7689d730f015849bba1028c3023dca23e261e9b4","modified":1627446308863},{"_id":"public/macos设置/index.html","hash":"f8fe51a9d781be390147b8f02894d74ebb718b29","modified":1627446308863},{"_id":"public/20210426/index.html","hash":"7e5f3a9241eb8f25eeb9beac544d6f9b43570534","modified":1626847719117},{"_id":"public/20201223/index.html","hash":"6ec97e0f007c89cf0cf8e85759ac5db0115e0084","modified":1626847719117},{"_id":"public/时间轮算法/index.html","hash":"f21d3c369bc82ad31f4c49f376c945d224ae38bb","modified":1627446308863},{"_id":"public/设计模式/index.html","hash":"54e0db8f8a6939868fea99bd96fbe2008fed7fe0","modified":1627446308863},{"_id":"public/archives/2020/12/index.html","hash":"69e45978dd92124164d2b55675df8c3c5a87db34","modified":1626847719117},{"_id":"public/archives/index.html","hash":"2ea97ffb33e369491ade14447094d982fd1d0a30","modified":1627446356625},{"_id":"public/archives/2021/index.html","hash":"ad3a69aba33d4e26218912102c17486f38841496","modified":1627446356625},{"_id":"public/archives/2021/04/index.html","hash":"d354bb5a125105102fabafedf4075ed17ea1f2d7","modified":1626847719117},{"_id":"public/archives/2021/05/index.html","hash":"db8364b063815ee708548168381293e9b3d3a205","modified":1626923741552},{"_id":"public/archives/2021/06/index.html","hash":"be860960e93ff541bb738d7b7b9560adc50f033c","modified":1627446308863},{"_id":"public/archives/2020/index.html","hash":"e09a75d9b6ebf4ca69c8c87ffc320d760dd5a445","modified":1626847719117},{"_id":"public/index.html","hash":"b71731df5ccb100ab708d2e4b847d818a3ed2300","modified":1627446356625},{"_id":"public/page/2/index.html","hash":"72d63b65bb28f8edc8b970ee8d13b1c12fd3f0b1","modified":1627446356625},{"_id":"public/images/image-20210507231725024.webp","hash":"6965cab109357ffa56539cd760720e0d5290d5ad","modified":1626847719117},{"_id":"public/images/20210508015248.webp","hash":"cf0b31d85afc18abb010799f624ee587e67274b8","modified":1626847719117},{"_id":"public/images/DIYgod-avatar2.jpeg","hash":"ba161f6d1371fcd8f114c11dec716f44704cda6f","modified":1626847719117},{"_id":"public/images/image-20210508020412096-0410659.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1626847719117},{"_id":"public/images/u6VKbdFmzW4P8vD-0462488.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1626847719117},{"_id":"public/images/image-20210508020412096.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1626847719117},{"_id":"public/images/u6VKbdFmzW4P8vD.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1626847719117},{"_id":"public/images/w5yoNzm1lCPQtgZ-0462980.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/w5yoNzm1lCPQtgZ-0463048-0463051.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/image-20210508020412096-0411479.webp","hash":"22593ce5afd756b01f8d6a8d9cb6919df1238f37","modified":1626847719117},{"_id":"public/images/w5yoNzm1lCPQtgZ.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/w5yoNzm1lCPQtgZ-0463048.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.webp","hash":"3bbeca0c0afd882c7c82cef29fa0cac6dedbb36c","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.webp","hash":"60102bf87ad8d9a8825cca2c8c28b3a3fec863d7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463339.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.webp","hash":"c2d2782eb84e23ffa89d6d5b7fd75efb5060cff1","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/y4XQL2kOSgxojRT.jpg","hash":"47ddbfb15201948fa615044cf1f5df9dd5edd783","modified":1626847719117},{"_id":"public/fonts/Candyshop.otf","hash":"2d4fffc6d278cc8010f75422246bf368a764c125","modified":1626847719117},{"_id":"public/fonts/sigmarone2.woff2","hash":"feaa47ccbf19dfb2812fa8306f421b88e90af723","modified":1626847719117},{"_id":"public/fonts/sigmarone1.woff2","hash":"35d4f8be95cbf9ced2c3eae1bfe63d5ce8ee7214","modified":1626847719117},{"_id":"public/fonts/sigmarone3.woff2","hash":"5f62e2560d08e71274fac25c49825113a09776c7","modified":1626847719117},{"_id":"public/images/DIYgod-avatar.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1626847719117},{"_id":"public/images/alipay.png","hash":"bc3750d18e6bf1d5f1e24c25455b00d26c3ff447","modified":1626847719117},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1625103584694},{"_id":"public/images/DIYgod-avatar.webp","hash":"a7200fad65f069ca3f3256b4dd573d9d2e36c829","modified":1626847719117},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1626847719117},{"_id":"public/images/DIYgod.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1625103584694},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1626847719117},{"_id":"public/images/alipay.webp","hash":"e4b890a58f4fa1448a0a2d5c9a6c9a747ab5cae5","modified":1626847719117},{"_id":"public/images/DIYgod-avatar2.webp","hash":"fa07ba341621ea2b35393feabe797c4262ddae55","modified":1626847719117},{"_id":"public/images/card-avatar.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1626847719117},{"_id":"public/images/card.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1625103584694},{"_id":"public/images/cc-by-nc-sa.png","hash":"cb36e36c3e3959a54ac289e309a4a89a016107bc","modified":1626847719117},{"_id":"public/images/cc-by-nc-nd.png","hash":"f7839bdd799c452a4e807a2365849acc0748b3fd","modified":1626847719117},{"_id":"public/images/apple-touch-icon-next.webp","hash":"a67fcf955e00f160cf687335673a8cbdc587d456","modified":1626847719117},{"_id":"public/images/cc-by-nc-sa.webp","hash":"5fde7a2f79adc7d200cac995df45a84d64b2494c","modified":1626847719117},{"_id":"public/images/cc-by-nc.webp","hash":"5c8a54299712f843d290fed413925a2c3c3318c4","modified":1626847719117},{"_id":"public/images/card-avatar2.webp","hash":"f4641971faa9e8059e3181abee3fed52736e2ca0","modified":1626847719117},{"_id":"public/images/card-avatar.webp","hash":"980ebd262b2c68baa784a58be7afaa55edd60f28","modified":1626847719117},{"_id":"public/images/cc-by-nd.png","hash":"6420f0e99cb3e90d3c37e0e8513d16ada14fed37","modified":1626847719117},{"_id":"public/images/cc-by-nc.png","hash":"eaf656bdd1ff61c345a7d42b94ac6f25435f5c42","modified":1626847719117},{"_id":"public/images/cc-by-sa.png","hash":"d62ae0fd7204bf889b3f2cbe89eae5865a71c056","modified":1626847719117},{"_id":"public/images/cc-zero.png","hash":"fd4ce5a5851ef47c3b525652cc3ae8128d405c8f","modified":1626847719117},{"_id":"public/images/cc-by.png","hash":"63f01c43cb5d03cb83d3c867c5ecb768cd89d9df","modified":1626847719117},{"_id":"public/images/cc-by-nd.webp","hash":"2a5cc8580f7aadb947e558360bda5dd663eeecc1","modified":1626847719117},{"_id":"public/images/cc-by-sa.webp","hash":"9afcad8c2cb3f4170b2a8bb5fd6fcc4c34616c19","modified":1626847719117},{"_id":"public/images/cc-by-nc-nd.webp","hash":"a9da48b761a7586f899f826170bc86d26c2ec08a","modified":1626847719117},{"_id":"public/images/cc-zero.webp","hash":"bbe5c624b52986f383c0bc0aed4e4c93b1f3b680","modified":1626847719117},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1625103584694},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1625103584694},{"_id":"public/images/favicon.ico","hash":"51cfa2cab8ae30b79cd7360dba747e705ad93bb4","modified":1625103584694},{"_id":"public/images/cc-by.webp","hash":"9a364fca486147d5fe120487edbcc5617d4a1759","modified":1626847719117},{"_id":"public/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1625103584694},{"_id":"public/images/cursor.ico","hash":"cd8349fb9cef6c217fc364cf35eae6819cebf5d6","modified":1626847719117},{"_id":"public/images/footer.webp","hash":"d5b03e8d76bcfc4f966ea3408bdc0b90874ca0e8","modified":1626847719117},{"_id":"public/images/footer.png","hash":"5f27807ccb8beeed9a909571783797901c52c3b7","modified":1626847719117},{"_id":"public/images/header-darling.webp","hash":"84ea4042c5e4a57e9b1832fdf4db536aa9d2e040","modified":1626847719117},{"_id":"public/images/header-darling.jpg","hash":"428d430fd9086c207a4a18d6c55308a74441bfe5","modified":1626847719117},{"_id":"public/images/header-gyx-s.webp","hash":"d16a445dadc05c1976ffbf3ab88de618d1db360a","modified":1626847719117},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1626847719117},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1626847719117},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1626847719117},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1626847719117},{"_id":"public/images/header-sagiri.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1626847719117},{"_id":"public/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1626847719117},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1626847719117},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1626847719117},{"_id":"public/images/searchicon.webp","hash":"4dc91243df4ec53a3a98fd0ec9a4abaa15606dd3","modified":1626847719117},{"_id":"public/images/scroll.webp","hash":"f5e9b67b639f03e0a1ccf171b17d1b5ee811765d","modified":1626847719117},{"_id":"public/images/wechatpay.webp","hash":"d69056969d3e7101ebb9f4d3a382722093fff86c","modified":1626847719117},{"_id":"public/images/wechatpay.png","hash":"0c730f3963f3042d0dfcc78837d9a4cf2f05f8fc","modified":1626847719117},{"_id":"public/images/header.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1626847719117},{"_id":"public/js/sagiri.min.js.LICENSE.txt","hash":"0fb9313bdafca45073c08270d1df087eedbef9c4","modified":1626847719117},{"_id":"public/lib/social-share.js/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1626847719117},{"_id":"public/lib/social-share.js/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1626847719117},{"_id":"public/lib/social-share.js/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1626847719117},{"_id":"public/lib/social-share.js/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1626847719117},{"_id":"public/images/20210508015248.jpg","hash":"4a9c0c031d718fbe16e4688850b559f2f627f53b","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0462980.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ.jpg","hash":"a9685bc43715414af010c79abeb6cb393bb6fff7","modified":1626847719117},{"_id":"public/images/card-avatar2.jpeg","hash":"0c26051e7302dcde32d546da24cc24de9f1ad23c","modified":1626847719117},{"_id":"public/images/header-darling2.webp","hash":"9f283b3656471833c7f768e97852140dfe12742f","modified":1626847719117},{"_id":"public/images/header-sagiri.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1626847719117},{"_id":"public/images/header.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1626847719117},{"_id":"public/images/live2d/33/33.2048/texture_00.webp","hash":"ea15326bcbb692a272dbd793163e55c030fedda8","modified":1626847719117},{"_id":"public/images/live2d/22/22.2048/texture_00.webp","hash":"e5dafe1d0eb1859c5be3643fc0723e4d0b10f7f8","modified":1626847719117},{"_id":"public/css/main.css","hash":"a01c7e5bf97dc65321ef6f5e9dc4421098835fc0","modified":1626847719117},{"_id":"public/images/header-darling2.jpg","hash":"e2ae6c5df17411838955d231e9a76321b2001c5c","modified":1626847719117},{"_id":"public/images/header-gyx.webp","hash":"194c54813297f72538dd2ae62ae538ce9ba4245d","modified":1626847719117},{"_id":"public/images/header-mai.webp","hash":"a5aa4f650bf5a998fd792d035b76171e908d9c32","modified":1626847719117},{"_id":"public/images/live2d/22/22.moc","hash":"63a7992de8c4658ee432822b5710565481610f0e","modified":1626847719117},{"_id":"public/images/live2d/33/33.moc","hash":"80a030342ac1b6a7cd8acb441bcb207d8803b76b","modified":1626847719117},{"_id":"public/images/live2d/22/22.2048/texture_00.png","hash":"b002297b31421137a64fad594f7593133cea3cbf","modified":1626847719117},{"_id":"public/images/image-20210508020412096-0411479.png","hash":"c85ec3b6551e70ca4c0b61e3509019759e8bf785","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg","hash":"8a5ea329b1054ae64a60a6e6856ab4c582496fd8","modified":1626847719117},{"_id":"public/images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD.jpg","hash":"8a5ea329b1054ae64a60a6e6856ab4c582496fd8","modified":1626847719117},{"_id":"public/lib/velocity-animate/LICENSE.html","hash":"516383f7a076681d4d3a0e8e67e09c76059a75b8","modified":1626847719117},{"_id":"public/lib/velocity-animate/package.json","hash":"9bc53f857417d3e025f784f408a6472065c4d139","modified":1626847719117},{"_id":"public/lib/velocity-animate/README.html","hash":"e06a59498dab29f89a37c399b36a26658a2c3ce3","modified":1626847719117},{"_id":"public/images/live2d/22/22.model.json","hash":"c16b957438809a40df4c187ac285aaee0671e816","modified":1626847719117},{"_id":"public/images/live2d/33/33.model.json","hash":"1927910d9b88eff5d6ab1c6a604374efe8aed88e","modified":1626847719117},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1626847719117},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"ee1ffc6d2703dd2c591e2f4d4ed55ff82cba64f1","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1626847719117},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1626847719117},{"_id":"public/lib/sw-toolbox/sw-toolbox.js","hash":"7e2fd42a8ddb17450970c30a9bc5274f720e602c","modified":1626847719117},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1626847719117},{"_id":"public/lib/velocity-animate/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1626847719117},{"_id":"public/lib/social-share.js/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1626847719117},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1626847719117},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1626847719117},{"_id":"public/images/header-gyx-s.png","hash":"2b6b2f9904f0bbd35715adae276e7d8fc20572f2","modified":1626847719117},{"_id":"public/images/header-mai.jpg","hash":"b9890a3d76f62437462475a2c51c6b8442898379","modified":1626847719117},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1626847719117},{"_id":"public/lib/velocity-animate/velocity.ui.js","hash":"7731c1bc444855b9b18bfb265cd1c4a169e6be37","modified":1626847719117},{"_id":"public/lib/social-share.js/js/jquery.share.min.js","hash":"7d3a7135cee30a5ccc38e2818a5bf8c03f7028a0","modified":1626847719117},{"_id":"public/lib/social-share.js/js/social-share.min.js","hash":"4798c0fe6c75506eebbbb3cab8cf01dcb7f59908","modified":1626847719117},{"_id":"public/images/image-20210507231725024.png","hash":"394e54f109af2bc2110f8303aded993782ff1800","modified":1626847719117},{"_id":"public/images/header-darlings.webp","hash":"0d3e794a5a402d615ec4a36fb525fedc3487a026","modified":1626847719117},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"e88e1996b1efe8de6be95e38679b3afae1985017","modified":1626847719117},{"_id":"public/lib/velocity-animate/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1626847719117},{"_id":"public/images/header-darlings.jpg","hash":"20156313f1e9b02f28da3f5ca7b7ac607c6ea4f0","modified":1626847719117},{"_id":"public/images/header-darling4.webp","hash":"cd9c479ef8c5d0e1d5d6d77259ca5e1522db9b8f","modified":1626847719117},{"_id":"public/images/header-darling3.webp","hash":"d8cdee7124b0a0e21fa9cc82bbb64134d3778061","modified":1626847719117},{"_id":"public/images/header-darling3.jpg","hash":"da8965efff676a86af6ed61451c3c13fe8a30bf3","modified":1626847719117},{"_id":"public/images/header-leg.webp","hash":"fd1692cd000bc739cc478785f2fbb2daa759ca5f","modified":1626847719117},{"_id":"public/images/live2d/33/33.2048/texture_00.png","hash":"6d710da6056de69bfe0c33ac1b9e837b327b2f7b","modified":1626847719117},{"_id":"public/images/header-leg.jpg","hash":"426445281820258e0859b78e3b5e8279546dc3f5","modified":1626847719117},{"_id":"public/images/header-darling4.jpg","hash":"e64b1131d266f98e81d68ca36dcf5324cb901e50","modified":1626847719117},{"_id":"public/lib/velocity-animate/velocity.js","hash":"44ae2520aa8ad47cf56b67bdba64e18d542c8618","modified":1626847719117},{"_id":"public/images/header-gyx.png","hash":"c72a623d4407c90df6cfb6ca22b1337ded8d831f","modified":1626847719117},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1626847719117},{"_id":"public/js/sagiri.min.js.map","hash":"9cc42ca41c31e864166928e9cc685779143387d6","modified":1626847719117},{"_id":"public/js/sagiri.min.js","hash":"1b78494738ea55f3ffa3acaa9984c4fb4d1341e7","modified":1626847719117},{"_id":"source/_posts/python学习.md","hash":"849a44f4399db87357f02182ac7eee05753e4f75","modified":1626937256733},{"_id":"source/_posts/学习Maven之Maven-Surefire-Plugin-JUnit篇.md","hash":"7799317c497523215d91a52d098a320c79875bd3","modified":1626923730212},{"_id":"public/学习Maven之Maven-Surefire-Plugin-JUnit篇/index.html","hash":"e42da2e17e9e18016e67b3e27e6479fb6ae9f5d7","modified":1627446356625},{"_id":"public/python学习/index.html","hash":"cb10effff826a7729f46a62246a05fff1ba70242","modified":1627446308863},{"_id":"public/archives/2021/07/index.html","hash":"78715ea0289cbb67ffcbb0efe71ed62a7cb0f8e7","modified":1627446356625},{"_id":"source/_posts/一文教你用Typora-Gitee-码云-PicGo-实现-云-markdown笔记.md","hash":"2648a50f20ca809e2916fc900d259574d08977e2","modified":1627521441750},{"_id":"public/一文教你用Typora-Gitee-码云-PicGo-实现-云-markdown笔记/index.html","hash":"1714d336d85c4e5f1ba04cdd0f408456cd38d5ae","modified":1627446356625},{"_id":"public/tags/gitee-typora-picgo/index.html","hash":"40bf0c277fbaf72ff42fe43086fdef3fe3837e1a","modified":1627446356625},{"_id":"source/_posts/go加速.md","hash":"3dde350070a2bbfba58448819bdf64020b382e9a","modified":1627528500725},{"_id":"source/_posts/windowsTerminal美化.md","hash":"e21c921faf4260a035f519ee22072537eda7f258","modified":1627615658210},{"_id":"source/_posts/powershell7不识别最新path.md","hash":"d57502c548142d2a05d6d691bbc87e0ca52179c4","modified":1627609226376},{"_id":"source/_posts/yarn设置淘宝镜像源.md","hash":"c431eaacc75b57c9e9271ceea44b644daf646d44","modified":1627521484350},{"_id":"source/_posts/注解customParam在并发下问题.md","hash":"85f361ee35936b4ffcb0ad6e600cf8f7625e4602","modified":1628043781457},{"_id":"source/_posts/用-Docker-每日自动化备份-MySQL-Postgres-或-MongoDB-并上传到-minio.md","hash":"ad340bf56b195cdcaab1f806c4c8583a5ed9e45f","modified":1627540722078}],"Category":[],"Data":[],"Page":[{"title":"About me","date":"2020-12-22T13:57:51.000Z","_content":"","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2020-12-22 21:57:51\n---\n","updated":"2021-06-07T03:01:29.878Z","path":"about/me.html","comments":1,"layout":"page","_id":"ckpp6ut4w0000dgv9c1nv3q9d","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"20201223","date":"2020-12-23T07:04:53.000Z","_content":"\n<u>中台数据完成部署：</u>\n\n**datax-web中k8s镜像部署**\n\n增量时间使用\n\nhttps://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md","source":"_posts/20201223.md","raw":"---\ntitle: 20201223\ndate: 2020-12-23 15:04:53\ntags:\n---\n\n<u>中台数据完成部署：</u>\n\n**datax-web中k8s镜像部署**\n\n增量时间使用\n\nhttps://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md","slug":"20201223","published":1,"updated":"2021-06-07T03:01:29.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpp6ut550001dgv9dhoyekhf","content":"<p><u>中台数据完成部署：</u></p>\n<p><strong>datax-web中k8s镜像部署</strong></p>\n<p>增量时间使用</p>\n<p><a href=\"https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md\">https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><u>中台数据完成部署：</u></p>\n<p><strong>datax-web中k8s镜像部署</strong></p>\n<p>增量时间使用</p>\n<p><a href=\"https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md\">https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md</a></p>\n"},{"title":"20210426","date":"2021-04-26T02:48:35.000Z","_content":"","source":"_posts/20210426.md","raw":"---\ntitle: 20210426\ndate: 2021-04-26 10:48:35\ntags:\n---\n","slug":"20210426","published":1,"updated":"2021-06-07T03:01:29.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpp6ut570002dgv94sa2ep9v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"gradle配置","date":"2021-05-10T03:32:41.000Z","_content":"\ngrade配置：\n\n在~/.gradle/目录下新建 init.gradle文件\n\n```\nallprojects{\n\trepositories {\n\t\tdef REPOSITORY_URL = 'http://mvnrepo.alibaba-inc.com/mvn/repository/'\n\t\tall { ArtifactRepository repo ->\n\t\t\tif(repo instanceof MavenArtifactRepository){\n\t\t\t\tdef url = repo.url.toString()\n\t\t\t\tif (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {\n\t\t\t\t\tproject.logger.lifecycle \"Repository ${repo.url} replaced by $REPOSITORY_URL.\"\n\t\t\t\t\tremove repo\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmaven {\n\t\t //允许url改变\n\t\t allowInsecureProtocol = true\n\t\t\turl REPOSITORY_URL\n\t\t}\n\t}\n}\n```\n\n- `./gradlew idea`来初始化项目,打出以下信息说明maven地址已经修改成功了\n\n- 牛刀小试一下\n\n- ```\n  `git clone https://github.com/elastic/elasticsearch.git`\n  ```\n\n  ./gradlew idea\n\n","source":"_posts/gradle配置.md","raw":"---\ntitle: gradle配置\ndate: 2021-05-10 11:32:41\ntags:\n---\n\ngrade配置：\n\n在~/.gradle/目录下新建 init.gradle文件\n\n```\nallprojects{\n\trepositories {\n\t\tdef REPOSITORY_URL = 'http://mvnrepo.alibaba-inc.com/mvn/repository/'\n\t\tall { ArtifactRepository repo ->\n\t\t\tif(repo instanceof MavenArtifactRepository){\n\t\t\t\tdef url = repo.url.toString()\n\t\t\t\tif (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {\n\t\t\t\t\tproject.logger.lifecycle \"Repository ${repo.url} replaced by $REPOSITORY_URL.\"\n\t\t\t\t\tremove repo\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmaven {\n\t\t //允许url改变\n\t\t allowInsecureProtocol = true\n\t\t\turl REPOSITORY_URL\n\t\t}\n\t}\n}\n```\n\n- `./gradlew idea`来初始化项目,打出以下信息说明maven地址已经修改成功了\n\n- 牛刀小试一下\n\n- ```\n  `git clone https://github.com/elastic/elasticsearch.git`\n  ```\n\n  ./gradlew idea\n\n","slug":"gradle配置","published":1,"updated":"2021-06-07T03:01:29.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpp6ut580003dgv9egdm93a2","content":"<p>grade配置：</p>\n<p>在~/.gradle/目录下新建 init.gradle文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects&#123;</span><br><span class=\"line\">\trepositories &#123;</span><br><span class=\"line\">\t\tdef REPOSITORY_URL = &#x27;http://mvnrepo.alibaba-inc.com/mvn/repository/&#x27;</span><br><span class=\"line\">\t\tall &#123; ArtifactRepository repo -&gt;</span><br><span class=\"line\">\t\t\tif(repo instanceof MavenArtifactRepository)&#123;</span><br><span class=\"line\">\t\t\t\tdef url = repo.url.toString()</span><br><span class=\"line\">\t\t\t\tif (url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;) || url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t\t\tproject.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span><br><span class=\"line\">\t\t\t\t\tremove repo</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmaven &#123;</span><br><span class=\"line\">\t\t //允许url改变</span><br><span class=\"line\">\t\t allowInsecureProtocol = true</span><br><span class=\"line\">\t\t\turl REPOSITORY_URL</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>./gradlew idea</code>来初始化项目,打出以下信息说明maven地址已经修改成功了</p>\n</li>\n<li><p>牛刀小试一下</p>\n</li>\n<li><pre><code>`git clone https://github.com/elastic/elasticsearch.git`\n</code></pre>\n<p>./gradlew idea</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>grade配置：</p>\n<p>在~/.gradle/目录下新建 init.gradle文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects&#123;</span><br><span class=\"line\">\trepositories &#123;</span><br><span class=\"line\">\t\tdef REPOSITORY_URL = &#x27;http://mvnrepo.alibaba-inc.com/mvn/repository/&#x27;</span><br><span class=\"line\">\t\tall &#123; ArtifactRepository repo -&gt;</span><br><span class=\"line\">\t\t\tif(repo instanceof MavenArtifactRepository)&#123;</span><br><span class=\"line\">\t\t\t\tdef url = repo.url.toString()</span><br><span class=\"line\">\t\t\t\tif (url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;) || url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t\t\tproject.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span><br><span class=\"line\">\t\t\t\t\tremove repo</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmaven &#123;</span><br><span class=\"line\">\t\t //允许url改变</span><br><span class=\"line\">\t\t allowInsecureProtocol = true</span><br><span class=\"line\">\t\t\turl REPOSITORY_URL</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>./gradlew idea</code>来初始化项目,打出以下信息说明maven地址已经修改成功了</p>\n</li>\n<li><p>牛刀小试一下</p>\n</li>\n<li><pre><code>`git clone https://github.com/elastic/elasticsearch.git`\n</code></pre>\n<p>./gradlew idea</p>\n</li>\n</ul>\n"},{"title":"Pulsar 入门及介绍","date":"2021-05-08T08:16:08.000Z","_content":"\n# Pulsar 入门及介绍\n\n![pulsar-start.md---008eGmZEly1gpmzjhe824j31400u0wni.jpg](../images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg)(#背景 \"背景\")背景\n\n我们最近在做新业务的技术选型，其中涉及到了对消息中间件的选择；结合我们的实际情况希望它能满足以下几个要求：\n<!-- more -->\n* 友好的云原生支持：因为现在的主力语言是 `Go`，同时在运维上能够足够简单。\n* 官方支持多种语言的 `SDK`：还有一些 `Python`、`Java` 相关的代码需要维护。\n* 最好是有一些方便好用的特性，比如：延时消息、死信队列、多租户等。\n\n当然还有一些水平扩容、吞吐量、低延迟这些特性就不用多说了，几乎所有成熟的消息中间件都能满足这些要求。\n\n基于以上的筛选条件，`Pulsar` 进入了我们的视野。\n\n作为 `Apache` 下的顶级项目，以上特性都能很好的支持。\n\n下面我们来它有什么过人之处。\n\n# [](#架构 \"架构\")架构\n\n![w5yoNzm1lCPQtgZ](../images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg)\n\n从官方的架构图中可以看出 `Pulsar` 主要有以下组件组成：\n\n1.  `Broker` 无状态组件，可以水平扩展，主要用于生产者、消费者连接；与 Kafka 的 broker 类似，但没有数据存储功能，因此扩展更加轻松。\n2.  `BookKeeper` 集群：主要用于数据的持久化存储。\n3.  `Zookeeper` 用于存储 `broker` 与 `BookKeeper` 的元数据。\n\n整体一看似乎比 Kafka 所依赖的组件还多，这样确实会提供系统的复杂性；但同样的好处也很明显。\n\n`Pulsar` 的存储于计算是分离的，当需要扩容时会非常简单，直接新增 `broker` 即可，没有其他的心智负担。\n\n当存储成为瓶颈时也只需要扩容 `BookKeeper`，不需要人为的做重平衡，`BookKeeper` 会自动负载。\n\n同样的操作，`Kafka` 就要复杂的多了。\n\n## [](#特性 \"特性\")特性\n\n### [](#多租户 \"多租户\")多租户\n\n多租户也是一个刚需功能，可以在同一个集群中对不同业务、团队的数据进行隔离。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">persistent://core/order/create-order</div></pre></td></tr></tbody></table>\n\n以这个 topic 名称为例，在 `core` 这个租户下有一个 `order` 的 `namespace`，最终才是 `create-order` 的 `topic` 名称。\n\n在实际使用中租户一般是按照业务团队进行划分，`namespace` 则是当前团队下的不同业务；这样便可以很清晰的对 topic 进行管理。\n\n通常有对比才会有伤害，在没有多租户的消息中间件中是如何处理这类问题的呢：\n\n1.  干脆不分这么细，所有业务线混着用，当团队较小时可能问题不大；一旦业务增加，管理起来会非常麻烦。\n2.  自己在 topic 之前做一层抽象，但其实本质上也是在实现多租户。\n3.  各个业务团队各自维护自己的集群，这样当然也能解决问题，但运维复杂度自然也就提高了。\n\n以上就很直观的看出多租户的重要性了。\n\n### [](#Function-函数计算 \"Function 函数计算\")Function 函数计算\n\n`Pulsar` 还支持轻量级的函数计算，例如需要对某些消息进行数据清洗、转换，然后再发布到另一个 topic 中。\n\n这类需求就可以编写一个简单的函数，`Pulsar` 提供了 `SDK` 可以方便的对数据进行处理，最后使用官方工具发布到 `broker` 中。\n\n在这之前这类简单的需求可能也需要自己处理流处理引擎。\n\n## [](#应用 \"应用\")应用\n\n除此之外的上层应用，比如生产者、消费者这类概念与使用大家都差不多。\n\n比如 `Pulsar` 支持四种消费模式：\n\n* `Exclusive`：独占模式，同时只有一个消费者可以启动并消费数据；通过 `SubscriptionName` 标明是同一个消费者），适用范围较小。\n* `Failover` 故障转移模式：在独占模式基础之上可以同时启动多个 `consumer`，一旦一个 `consumer` 挂掉之后其余的可以快速顶上，但也只有一个 `consumer` 可以消费；部分场景可用。\n* `Shared` 共享模式：可以有 N 个消费者同时运行，消息按照 `round-robin` 轮询投递到每个 `consumer` 中；当某个 `consumer` 宕机没有 `ack` 时，该消息将会被投递给其他消费者。这种消费模式可以提高消费能力，但消息无法做到有序。\n* `KeyShared` 共享模式：基于共享模式；相当于对同一个`topic`中的消息进行分组，同一分组内的消息只能被同一个消费者有序消费。\n\n第三种共享消费模式应该是使用最多的，当对消息有顺序要求时可以使用 `KeyShared` 模式。\n\n## [](#SDK \"SDK\")SDK\n\n\n\n![y4XQL2kOSgxojRT](../images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg)官方支持的 `SDK` 非常丰富；我也在官方的 `SDK` 的基础之上封装了一个内部使用的 `SDK`。\n\n因为我们使用了 [dig](https://pkg.go.dev/go.uber.org/dig) 这样的轻量级依赖注入库，所以使用起来大概是这个样子：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">SetUpPulsar(lookupURL)</div><div class=\"line\">container := dig.New()</div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">\t\tTopic:            <span class=\"string\">\"persistent://core/order/create-order\"</span>,</div><div class=\"line\">\t\tSubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">\t\tType:             pulsar.Shared,</div><div class=\"line\">\t\tName:             <span class=\"string\">\"consumer01\"</span>,</div><div class=\"line\">\t}, ConsumerOrder)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">\t\tTopic:            <span class=\"string\">\"persistent://core/order/update-order\"</span>,</div><div class=\"line\">\t\tSubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">\t\tType:             pulsar.Shared,</div><div class=\"line\">\t\tName:             <span class=\"string\">\"consumer02\"</span>,</div><div class=\"line\">\t}, ConsumerInvoice)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Invoke(StartConsumer)</div></pre></td></tr></tbody></table>\n\n其中的两个 `container.Provide()` 函数用于注入 `consumer` 对象。\n\n`container.Invoke(StartConsumer)` 会从容器中取出所有的 `consumer` 对象，同时开始消费。\n\n这时以我有限的 `Go` 开发经验也在思考一个问题，在 `Go` 中是否需要依赖注入？\n\n先来看看使用 `Dig` 这类库所带来的好处：\n\n* 对象交由容器管理，很方便的实现单例。\n* 当各个对象之前依赖关系复杂时，可以减少许多创建、获取对象的代码，依赖关系更清晰。\n\n同样的坏处也有：\n\n* 跟踪阅读代码时没有那么直观，不能一眼看出某个依赖对象是如何创建的。\n* 与 Go 所推崇的简洁之道不符。\n\n对于使用过 `Spring` 的 `Java` 开发者来说肯定直呼真香，毕竟还是熟悉的味道；但对于完全没有接触过类似需求的 `Gopher` 来说貌似也不是刚需。\n\n目前市面上各式各样的 Go 依赖注入库层出不穷，也不乏许多大厂出品，可见还是很有市场的。\n\n我相信有很多 `Gopher` 非常反感将 `Java` 中的一些复杂概念引入到 `Go`，但我觉得依赖注入本身是不受语言限制，各种语言也都有自己的实现，只是 Java 中的 Spring 不仅仅只是一个依赖注入框架，还有许多复杂功能，让许多开发者望而生畏。\n\n如果只是依赖注入这个细分需求，实现起来并不复杂，并不会给带来太多复杂度。如果花时间去看源码，在理解概念的基础上很快就能掌握。\n\n回到 `SDK` 本身来说，`Go` 的 `SDK` 现阶段要比 `Java` 版本的功能少（准确来说只有 `Java` 版的功能最丰富），但核心的都有了，并不影响日常使用。\n\n# [](#总结 \"总结\")总结\n\n本文介绍了 `Pulsar` 的一些基本概念与优点，同时顺便讨论一下 `Go` 的依赖注入；如果大家和我们一样在做技术选型，不妨考虑一下 `Pulsar`。\n\n后续会继续分享 Pulsar 的相关内容，有相关经验的朋友也可以在评论区留下自己的见解。\n\n[![crossoverJie wechat](/uploads/weixinfooter1.jpg)](/uploads/weixinfooter1.jpg)\n\n我很有眼光！\n\n请我吃🍗\n\n赏\n\n[![crossoverJie WeChat Pay](/weixin-reward-image.jpg)](/weixin-reward-image.jpg)\n\n微信打赏\n\n[![crossoverJie Alipay](/alipay-reward-image.jpg)](/alipay-reward-image.jpg)\n\n支付宝打赏\n\n[#Go](/tags/Go/) [#消息队列](/tags/消息队列/)\n\n[利用 GitHub Action 自动发布 Docker](/2021/03/26/go/github-actions/ \"利用 GitHub Action 自动发布 Docker\")","source":"_posts/Pulsar-入门及介绍.md","raw":"---\ntitle: Pulsar 入门及介绍\ndate: 2021-05-08 16:16:08\ntags:\n---\n\n# Pulsar 入门及介绍\n\n![pulsar-start.md---008eGmZEly1gpmzjhe824j31400u0wni.jpg](../images/Pulsar-入门及介绍/u6VKbdFmzW4P8vD-0462488.jpg)(#背景 \"背景\")背景\n\n我们最近在做新业务的技术选型，其中涉及到了对消息中间件的选择；结合我们的实际情况希望它能满足以下几个要求：\n<!-- more -->\n* 友好的云原生支持：因为现在的主力语言是 `Go`，同时在运维上能够足够简单。\n* 官方支持多种语言的 `SDK`：还有一些 `Python`、`Java` 相关的代码需要维护。\n* 最好是有一些方便好用的特性，比如：延时消息、死信队列、多租户等。\n\n当然还有一些水平扩容、吞吐量、低延迟这些特性就不用多说了，几乎所有成熟的消息中间件都能满足这些要求。\n\n基于以上的筛选条件，`Pulsar` 进入了我们的视野。\n\n作为 `Apache` 下的顶级项目，以上特性都能很好的支持。\n\n下面我们来它有什么过人之处。\n\n# [](#架构 \"架构\")架构\n\n![w5yoNzm1lCPQtgZ](../images/Pulsar-入门及介绍/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg)\n\n从官方的架构图中可以看出 `Pulsar` 主要有以下组件组成：\n\n1.  `Broker` 无状态组件，可以水平扩展，主要用于生产者、消费者连接；与 Kafka 的 broker 类似，但没有数据存储功能，因此扩展更加轻松。\n2.  `BookKeeper` 集群：主要用于数据的持久化存储。\n3.  `Zookeeper` 用于存储 `broker` 与 `BookKeeper` 的元数据。\n\n整体一看似乎比 Kafka 所依赖的组件还多，这样确实会提供系统的复杂性；但同样的好处也很明显。\n\n`Pulsar` 的存储于计算是分离的，当需要扩容时会非常简单，直接新增 `broker` 即可，没有其他的心智负担。\n\n当存储成为瓶颈时也只需要扩容 `BookKeeper`，不需要人为的做重平衡，`BookKeeper` 会自动负载。\n\n同样的操作，`Kafka` 就要复杂的多了。\n\n## [](#特性 \"特性\")特性\n\n### [](#多租户 \"多租户\")多租户\n\n多租户也是一个刚需功能，可以在同一个集群中对不同业务、团队的数据进行隔离。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">persistent://core/order/create-order</div></pre></td></tr></tbody></table>\n\n以这个 topic 名称为例，在 `core` 这个租户下有一个 `order` 的 `namespace`，最终才是 `create-order` 的 `topic` 名称。\n\n在实际使用中租户一般是按照业务团队进行划分，`namespace` 则是当前团队下的不同业务；这样便可以很清晰的对 topic 进行管理。\n\n通常有对比才会有伤害，在没有多租户的消息中间件中是如何处理这类问题的呢：\n\n1.  干脆不分这么细，所有业务线混着用，当团队较小时可能问题不大；一旦业务增加，管理起来会非常麻烦。\n2.  自己在 topic 之前做一层抽象，但其实本质上也是在实现多租户。\n3.  各个业务团队各自维护自己的集群，这样当然也能解决问题，但运维复杂度自然也就提高了。\n\n以上就很直观的看出多租户的重要性了。\n\n### [](#Function-函数计算 \"Function 函数计算\")Function 函数计算\n\n`Pulsar` 还支持轻量级的函数计算，例如需要对某些消息进行数据清洗、转换，然后再发布到另一个 topic 中。\n\n这类需求就可以编写一个简单的函数，`Pulsar` 提供了 `SDK` 可以方便的对数据进行处理，最后使用官方工具发布到 `broker` 中。\n\n在这之前这类简单的需求可能也需要自己处理流处理引擎。\n\n## [](#应用 \"应用\")应用\n\n除此之外的上层应用，比如生产者、消费者这类概念与使用大家都差不多。\n\n比如 `Pulsar` 支持四种消费模式：\n\n* `Exclusive`：独占模式，同时只有一个消费者可以启动并消费数据；通过 `SubscriptionName` 标明是同一个消费者），适用范围较小。\n* `Failover` 故障转移模式：在独占模式基础之上可以同时启动多个 `consumer`，一旦一个 `consumer` 挂掉之后其余的可以快速顶上，但也只有一个 `consumer` 可以消费；部分场景可用。\n* `Shared` 共享模式：可以有 N 个消费者同时运行，消息按照 `round-robin` 轮询投递到每个 `consumer` 中；当某个 `consumer` 宕机没有 `ack` 时，该消息将会被投递给其他消费者。这种消费模式可以提高消费能力，但消息无法做到有序。\n* `KeyShared` 共享模式：基于共享模式；相当于对同一个`topic`中的消息进行分组，同一分组内的消息只能被同一个消费者有序消费。\n\n第三种共享消费模式应该是使用最多的，当对消息有顺序要求时可以使用 `KeyShared` 模式。\n\n## [](#SDK \"SDK\")SDK\n\n\n\n![y4XQL2kOSgxojRT](../images/Pulsar-入门及介绍/y4XQL2kOSgxojRT-0463341.jpg)官方支持的 `SDK` 非常丰富；我也在官方的 `SDK` 的基础之上封装了一个内部使用的 `SDK`。\n\n因为我们使用了 [dig](https://pkg.go.dev/go.uber.org/dig) 这样的轻量级依赖注入库，所以使用起来大概是这个样子：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">SetUpPulsar(lookupURL)</div><div class=\"line\">container := dig.New()</div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">\t\tTopic:            <span class=\"string\">\"persistent://core/order/create-order\"</span>,</div><div class=\"line\">\t\tSubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">\t\tType:             pulsar.Shared,</div><div class=\"line\">\t\tName:             <span class=\"string\">\"consumer01\"</span>,</div><div class=\"line\">\t}, ConsumerOrder)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">\t\tTopic:            <span class=\"string\">\"persistent://core/order/update-order\"</span>,</div><div class=\"line\">\t\tSubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">\t\tType:             pulsar.Shared,</div><div class=\"line\">\t\tName:             <span class=\"string\">\"consumer02\"</span>,</div><div class=\"line\">\t}, ConsumerInvoice)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Invoke(StartConsumer)</div></pre></td></tr></tbody></table>\n\n其中的两个 `container.Provide()` 函数用于注入 `consumer` 对象。\n\n`container.Invoke(StartConsumer)` 会从容器中取出所有的 `consumer` 对象，同时开始消费。\n\n这时以我有限的 `Go` 开发经验也在思考一个问题，在 `Go` 中是否需要依赖注入？\n\n先来看看使用 `Dig` 这类库所带来的好处：\n\n* 对象交由容器管理，很方便的实现单例。\n* 当各个对象之前依赖关系复杂时，可以减少许多创建、获取对象的代码，依赖关系更清晰。\n\n同样的坏处也有：\n\n* 跟踪阅读代码时没有那么直观，不能一眼看出某个依赖对象是如何创建的。\n* 与 Go 所推崇的简洁之道不符。\n\n对于使用过 `Spring` 的 `Java` 开发者来说肯定直呼真香，毕竟还是熟悉的味道；但对于完全没有接触过类似需求的 `Gopher` 来说貌似也不是刚需。\n\n目前市面上各式各样的 Go 依赖注入库层出不穷，也不乏许多大厂出品，可见还是很有市场的。\n\n我相信有很多 `Gopher` 非常反感将 `Java` 中的一些复杂概念引入到 `Go`，但我觉得依赖注入本身是不受语言限制，各种语言也都有自己的实现，只是 Java 中的 Spring 不仅仅只是一个依赖注入框架，还有许多复杂功能，让许多开发者望而生畏。\n\n如果只是依赖注入这个细分需求，实现起来并不复杂，并不会给带来太多复杂度。如果花时间去看源码，在理解概念的基础上很快就能掌握。\n\n回到 `SDK` 本身来说，`Go` 的 `SDK` 现阶段要比 `Java` 版本的功能少（准确来说只有 `Java` 版的功能最丰富），但核心的都有了，并不影响日常使用。\n\n# [](#总结 \"总结\")总结\n\n本文介绍了 `Pulsar` 的一些基本概念与优点，同时顺便讨论一下 `Go` 的依赖注入；如果大家和我们一样在做技术选型，不妨考虑一下 `Pulsar`。\n\n后续会继续分享 Pulsar 的相关内容，有相关经验的朋友也可以在评论区留下自己的见解。\n\n[![crossoverJie wechat](/uploads/weixinfooter1.jpg)](/uploads/weixinfooter1.jpg)\n\n我很有眼光！\n\n请我吃🍗\n\n赏\n\n[![crossoverJie WeChat Pay](/weixin-reward-image.jpg)](/weixin-reward-image.jpg)\n\n微信打赏\n\n[![crossoverJie Alipay](/alipay-reward-image.jpg)](/alipay-reward-image.jpg)\n\n支付宝打赏\n\n[#Go](/tags/Go/) [#消息队列](/tags/消息队列/)\n\n[利用 GitHub Action 自动发布 Docker](/2021/03/26/go/github-actions/ \"利用 GitHub Action 自动发布 Docker\")","slug":"Pulsar-入门及介绍","published":1,"updated":"2021-07-28T02:56:54.966Z","_id":"ckpp6ut590004dgv9hs7e2bm5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Pulsar-入门及介绍\"><a href=\"#Pulsar-入门及介绍\" class=\"headerlink\" title=\"Pulsar 入门及介绍\"></a>Pulsar 入门及介绍</h1><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/u6VKbdFmzW4P8vD-0462488.jpg\" alt=\"pulsar-start.md---008eGmZEly1gpmzjhe824j31400u0wni.jpg\">(#背景 “背景”)背景</p>\n<p>我们最近在做新业务的技术选型，其中涉及到了对消息中间件的选择；结合我们的实际情况希望它能满足以下几个要求：</p>\n<span id=\"more\"></span>\n<ul>\n<li>友好的云原生支持：因为现在的主力语言是 <code>Go</code>，同时在运维上能够足够简单。</li>\n<li>官方支持多种语言的 <code>SDK</code>：还有一些 <code>Python</code>、<code>Java</code> 相关的代码需要维护。</li>\n<li>最好是有一些方便好用的特性，比如：延时消息、死信队列、多租户等。</li>\n</ul>\n<p>当然还有一些水平扩容、吞吐量、低延迟这些特性就不用多说了，几乎所有成熟的消息中间件都能满足这些要求。</p>\n<p>基于以上的筛选条件，<code>Pulsar</code> 进入了我们的视野。</p>\n<p>作为 <code>Apache</code> 下的顶级项目，以上特性都能很好的支持。</p>\n<p>下面我们来它有什么过人之处。</p>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a><a href=\"#%E6%9E%B6%E6%9E%84\" title=\"架构\"></a>架构</h1><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg\" alt=\"w5yoNzm1lCPQtgZ\"></p>\n<p>从官方的架构图中可以看出 <code>Pulsar</code> 主要有以下组件组成：</p>\n<ol>\n<li> <code>Broker</code> 无状态组件，可以水平扩展，主要用于生产者、消费者连接；与 Kafka 的 broker 类似，但没有数据存储功能，因此扩展更加轻松。</li>\n<li> <code>BookKeeper</code> 集群：主要用于数据的持久化存储。</li>\n<li> <code>Zookeeper</code> 用于存储 <code>broker</code> 与 <code>BookKeeper</code> 的元数据。</li>\n</ol>\n<p>整体一看似乎比 Kafka 所依赖的组件还多，这样确实会提供系统的复杂性；但同样的好处也很明显。</p>\n<p><code>Pulsar</code> 的存储于计算是分离的，当需要扩容时会非常简单，直接新增 <code>broker</code> 即可，没有其他的心智负担。</p>\n<p>当存储成为瓶颈时也只需要扩容 <code>BookKeeper</code>，不需要人为的做重平衡，<code>BookKeeper</code> 会自动负载。</p>\n<p>同样的操作，<code>Kafka</code> 就要复杂的多了。</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a><a href=\"#%E7%89%B9%E6%80%A7\" title=\"特性\"></a>特性</h2><h3 id=\"多租户\"><a href=\"#多租户\" class=\"headerlink\" title=\"多租户\"></a><a href=\"#%E5%A4%9A%E7%A7%9F%E6%88%B7\" title=\"多租户\"></a>多租户</h3><p>多租户也是一个刚需功能，可以在同一个集群中对不同业务、团队的数据进行隔离。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">persistent://core/order/create-order</div></pre></td></tr></tbody></table>\n\n<p>以这个 topic 名称为例，在 <code>core</code> 这个租户下有一个 <code>order</code> 的 <code>namespace</code>，最终才是 <code>create-order</code> 的 <code>topic</code> 名称。</p>\n<p>在实际使用中租户一般是按照业务团队进行划分，<code>namespace</code> 则是当前团队下的不同业务；这样便可以很清晰的对 topic 进行管理。</p>\n<p>通常有对比才会有伤害，在没有多租户的消息中间件中是如何处理这类问题的呢：</p>\n<ol>\n<li> 干脆不分这么细，所有业务线混着用，当团队较小时可能问题不大；一旦业务增加，管理起来会非常麻烦。</li>\n<li> 自己在 topic 之前做一层抽象，但其实本质上也是在实现多租户。</li>\n<li> 各个业务团队各自维护自己的集群，这样当然也能解决问题，但运维复杂度自然也就提高了。</li>\n</ol>\n<p>以上就很直观的看出多租户的重要性了。</p>\n<h3 id=\"Function-函数计算\"><a href=\"#Function-函数计算\" class=\"headerlink\" title=\"Function 函数计算\"></a><a href=\"#Function-%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97\" title=\"Function 函数计算\"></a>Function 函数计算</h3><p><code>Pulsar</code> 还支持轻量级的函数计算，例如需要对某些消息进行数据清洗、转换，然后再发布到另一个 topic 中。</p>\n<p>这类需求就可以编写一个简单的函数，<code>Pulsar</code> 提供了 <code>SDK</code> 可以方便的对数据进行处理，最后使用官方工具发布到 <code>broker</code> 中。</p>\n<p>在这之前这类简单的需求可能也需要自己处理流处理引擎。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a><a href=\"#%E5%BA%94%E7%94%A8\" title=\"应用\"></a>应用</h2><p>除此之外的上层应用，比如生产者、消费者这类概念与使用大家都差不多。</p>\n<p>比如 <code>Pulsar</code> 支持四种消费模式：</p>\n<ul>\n<li><code>Exclusive</code>：独占模式，同时只有一个消费者可以启动并消费数据；通过 <code>SubscriptionName</code> 标明是同一个消费者），适用范围较小。</li>\n<li><code>Failover</code> 故障转移模式：在独占模式基础之上可以同时启动多个 <code>consumer</code>，一旦一个 <code>consumer</code> 挂掉之后其余的可以快速顶上，但也只有一个 <code>consumer</code> 可以消费；部分场景可用。</li>\n<li><code>Shared</code> 共享模式：可以有 N 个消费者同时运行，消息按照 <code>round-robin</code> 轮询投递到每个 <code>consumer</code> 中；当某个 <code>consumer</code> 宕机没有 <code>ack</code> 时，该消息将会被投递给其他消费者。这种消费模式可以提高消费能力，但消息无法做到有序。</li>\n<li><code>KeyShared</code> 共享模式：基于共享模式；相当于对同一个<code>topic</code>中的消息进行分组，同一分组内的消息只能被同一个消费者有序消费。</li>\n</ul>\n<p>第三种共享消费模式应该是使用最多的，当对消息有顺序要求时可以使用 <code>KeyShared</code> 模式。</p>\n<h2 id=\"SDK\"><a href=\"#SDK\" class=\"headerlink\" title=\"SDK\"></a><a href=\"#SDK\" title=\"SDK\"></a>SDK</h2><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/y4XQL2kOSgxojRT-0463341.jpg\" alt=\"y4XQL2kOSgxojRT\">官方支持的 <code>SDK</code> 非常丰富；我也在官方的 <code>SDK</code> 的基础之上封装了一个内部使用的 <code>SDK</code>。</p>\n<p>因为我们使用了 <a href=\"https://pkg.go.dev/go.uber.org/dig\">dig</a> 这样的轻量级依赖注入库，所以使用起来大概是这个样子：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">SetUpPulsar(lookupURL)</div><div class=\"line\">container := dig.New()</div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">        Topic:            <span class=\"string\">\"persistent://core/order/create-order\"</span>,</div><div class=\"line\">        SubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">        Type:             pulsar.Shared,</div><div class=\"line\">        Name:             <span class=\"string\">\"consumer01\"</span>,</div><div class=\"line\">    }, ConsumerOrder)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">        Topic:            <span class=\"string\">\"persistent://core/order/update-order\"</span>,</div><div class=\"line\">        SubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">        Type:             pulsar.Shared,</div><div class=\"line\">        Name:             <span class=\"string\">\"consumer02\"</span>,</div><div class=\"line\">    }, ConsumerInvoice)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Invoke(StartConsumer)</div></pre></td></tr></tbody></table>\n\n<p>其中的两个 <code>container.Provide()</code> 函数用于注入 <code>consumer</code> 对象。</p>\n<p><code>container.Invoke(StartConsumer)</code> 会从容器中取出所有的 <code>consumer</code> 对象，同时开始消费。</p>\n<p>这时以我有限的 <code>Go</code> 开发经验也在思考一个问题，在 <code>Go</code> 中是否需要依赖注入？</p>\n<p>先来看看使用 <code>Dig</code> 这类库所带来的好处：</p>\n<ul>\n<li>对象交由容器管理，很方便的实现单例。</li>\n<li>当各个对象之前依赖关系复杂时，可以减少许多创建、获取对象的代码，依赖关系更清晰。</li>\n</ul>\n<p>同样的坏处也有：</p>\n<ul>\n<li>跟踪阅读代码时没有那么直观，不能一眼看出某个依赖对象是如何创建的。</li>\n<li>与 Go 所推崇的简洁之道不符。</li>\n</ul>\n<p>对于使用过 <code>Spring</code> 的 <code>Java</code> 开发者来说肯定直呼真香，毕竟还是熟悉的味道；但对于完全没有接触过类似需求的 <code>Gopher</code> 来说貌似也不是刚需。</p>\n<p>目前市面上各式各样的 Go 依赖注入库层出不穷，也不乏许多大厂出品，可见还是很有市场的。</p>\n<p>我相信有很多 <code>Gopher</code> 非常反感将 <code>Java</code> 中的一些复杂概念引入到 <code>Go</code>，但我觉得依赖注入本身是不受语言限制，各种语言也都有自己的实现，只是 Java 中的 Spring 不仅仅只是一个依赖注入框架，还有许多复杂功能，让许多开发者望而生畏。</p>\n<p>如果只是依赖注入这个细分需求，实现起来并不复杂，并不会给带来太多复杂度。如果花时间去看源码，在理解概念的基础上很快就能掌握。</p>\n<p>回到 <code>SDK</code> 本身来说，<code>Go</code> 的 <code>SDK</code> 现阶段要比 <code>Java</code> 版本的功能少（准确来说只有 <code>Java</code> 版的功能最丰富），但核心的都有了，并不影响日常使用。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"></a>总结</h1><p>本文介绍了 <code>Pulsar</code> 的一些基本概念与优点，同时顺便讨论一下 <code>Go</code> 的依赖注入；如果大家和我们一样在做技术选型，不妨考虑一下 <code>Pulsar</code>。</p>\n<p>后续会继续分享 Pulsar 的相关内容，有相关经验的朋友也可以在评论区留下自己的见解。</p>\n<p><a href=\"/uploads/weixinfooter1.jpg\"><img src=\"/uploads/weixinfooter1.jpg\" alt=\"crossoverJie wechat\"></a></p>\n<p>我很有眼光！</p>\n<p>请我吃🍗</p>\n<p>赏</p>\n<p><a href=\"/weixin-reward-image.jpg\"><img src=\"/weixin-reward-image.jpg\" alt=\"crossoverJie WeChat Pay\"></a></p>\n<p>微信打赏</p>\n<p><a href=\"/alipay-reward-image.jpg\"><img src=\"/alipay-reward-image.jpg\" alt=\"crossoverJie Alipay\"></a></p>\n<p>支付宝打赏</p>\n<p><a href=\"/tags/Go/\">#Go</a> <a href=\"/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/\">#消息队列</a></p>\n<p><a href=\"/2021/03/26/go/github-actions/\" title=\"利用 GitHub Action 自动发布 Docker\">利用 GitHub Action 自动发布 Docker</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Pulsar-入门及介绍\"><a href=\"#Pulsar-入门及介绍\" class=\"headerlink\" title=\"Pulsar 入门及介绍\"></a>Pulsar 入门及介绍</h1><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/u6VKbdFmzW4P8vD-0462488.jpg\" alt=\"pulsar-start.md---008eGmZEly1gpmzjhe824j31400u0wni.jpg\">(#背景 “背景”)背景</p>\n<p>我们最近在做新业务的技术选型，其中涉及到了对消息中间件的选择；结合我们的实际情况希望它能满足以下几个要求：</p>","more":"<ul>\n<li>友好的云原生支持：因为现在的主力语言是 <code>Go</code>，同时在运维上能够足够简单。</li>\n<li>官方支持多种语言的 <code>SDK</code>：还有一些 <code>Python</code>、<code>Java</code> 相关的代码需要维护。</li>\n<li>最好是有一些方便好用的特性，比如：延时消息、死信队列、多租户等。</li>\n</ul>\n<p>当然还有一些水平扩容、吞吐量、低延迟这些特性就不用多说了，几乎所有成熟的消息中间件都能满足这些要求。</p>\n<p>基于以上的筛选条件，<code>Pulsar</code> 进入了我们的视野。</p>\n<p>作为 <code>Apache</code> 下的顶级项目，以上特性都能很好的支持。</p>\n<p>下面我们来它有什么过人之处。</p>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a><a href=\"#%E6%9E%B6%E6%9E%84\" title=\"架构\"></a>架构</h1><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/w5yoNzm1lCPQtgZ-0463048-0463051-0463203.jpg\" alt=\"w5yoNzm1lCPQtgZ\"></p>\n<p>从官方的架构图中可以看出 <code>Pulsar</code> 主要有以下组件组成：</p>\n<ol>\n<li> <code>Broker</code> 无状态组件，可以水平扩展，主要用于生产者、消费者连接；与 Kafka 的 broker 类似，但没有数据存储功能，因此扩展更加轻松。</li>\n<li> <code>BookKeeper</code> 集群：主要用于数据的持久化存储。</li>\n<li> <code>Zookeeper</code> 用于存储 <code>broker</code> 与 <code>BookKeeper</code> 的元数据。</li>\n</ol>\n<p>整体一看似乎比 Kafka 所依赖的组件还多，这样确实会提供系统的复杂性；但同样的好处也很明显。</p>\n<p><code>Pulsar</code> 的存储于计算是分离的，当需要扩容时会非常简单，直接新增 <code>broker</code> 即可，没有其他的心智负担。</p>\n<p>当存储成为瓶颈时也只需要扩容 <code>BookKeeper</code>，不需要人为的做重平衡，<code>BookKeeper</code> 会自动负载。</p>\n<p>同样的操作，<code>Kafka</code> 就要复杂的多了。</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a><a href=\"#%E7%89%B9%E6%80%A7\" title=\"特性\"></a>特性</h2><h3 id=\"多租户\"><a href=\"#多租户\" class=\"headerlink\" title=\"多租户\"></a><a href=\"#%E5%A4%9A%E7%A7%9F%E6%88%B7\" title=\"多租户\"></a>多租户</h3><p>多租户也是一个刚需功能，可以在同一个集群中对不同业务、团队的数据进行隔离。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">persistent://core/order/create-order</div></pre></td></tr></tbody></table>\n\n<p>以这个 topic 名称为例，在 <code>core</code> 这个租户下有一个 <code>order</code> 的 <code>namespace</code>，最终才是 <code>create-order</code> 的 <code>topic</code> 名称。</p>\n<p>在实际使用中租户一般是按照业务团队进行划分，<code>namespace</code> 则是当前团队下的不同业务；这样便可以很清晰的对 topic 进行管理。</p>\n<p>通常有对比才会有伤害，在没有多租户的消息中间件中是如何处理这类问题的呢：</p>\n<ol>\n<li> 干脆不分这么细，所有业务线混着用，当团队较小时可能问题不大；一旦业务增加，管理起来会非常麻烦。</li>\n<li> 自己在 topic 之前做一层抽象，但其实本质上也是在实现多租户。</li>\n<li> 各个业务团队各自维护自己的集群，这样当然也能解决问题，但运维复杂度自然也就提高了。</li>\n</ol>\n<p>以上就很直观的看出多租户的重要性了。</p>\n<h3 id=\"Function-函数计算\"><a href=\"#Function-函数计算\" class=\"headerlink\" title=\"Function 函数计算\"></a><a href=\"#Function-%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97\" title=\"Function 函数计算\"></a>Function 函数计算</h3><p><code>Pulsar</code> 还支持轻量级的函数计算，例如需要对某些消息进行数据清洗、转换，然后再发布到另一个 topic 中。</p>\n<p>这类需求就可以编写一个简单的函数，<code>Pulsar</code> 提供了 <code>SDK</code> 可以方便的对数据进行处理，最后使用官方工具发布到 <code>broker</code> 中。</p>\n<p>在这之前这类简单的需求可能也需要自己处理流处理引擎。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a><a href=\"#%E5%BA%94%E7%94%A8\" title=\"应用\"></a>应用</h2><p>除此之外的上层应用，比如生产者、消费者这类概念与使用大家都差不多。</p>\n<p>比如 <code>Pulsar</code> 支持四种消费模式：</p>\n<ul>\n<li><code>Exclusive</code>：独占模式，同时只有一个消费者可以启动并消费数据；通过 <code>SubscriptionName</code> 标明是同一个消费者），适用范围较小。</li>\n<li><code>Failover</code> 故障转移模式：在独占模式基础之上可以同时启动多个 <code>consumer</code>，一旦一个 <code>consumer</code> 挂掉之后其余的可以快速顶上，但也只有一个 <code>consumer</code> 可以消费；部分场景可用。</li>\n<li><code>Shared</code> 共享模式：可以有 N 个消费者同时运行，消息按照 <code>round-robin</code> 轮询投递到每个 <code>consumer</code> 中；当某个 <code>consumer</code> 宕机没有 <code>ack</code> 时，该消息将会被投递给其他消费者。这种消费模式可以提高消费能力，但消息无法做到有序。</li>\n<li><code>KeyShared</code> 共享模式：基于共享模式；相当于对同一个<code>topic</code>中的消息进行分组，同一分组内的消息只能被同一个消费者有序消费。</li>\n</ul>\n<p>第三种共享消费模式应该是使用最多的，当对消息有顺序要求时可以使用 <code>KeyShared</code> 模式。</p>\n<h2 id=\"SDK\"><a href=\"#SDK\" class=\"headerlink\" title=\"SDK\"></a><a href=\"#SDK\" title=\"SDK\"></a>SDK</h2><p><img src=\"../images/Pulsar-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/y4XQL2kOSgxojRT-0463341.jpg\" alt=\"y4XQL2kOSgxojRT\">官方支持的 <code>SDK</code> 非常丰富；我也在官方的 <code>SDK</code> 的基础之上封装了一个内部使用的 <code>SDK</code>。</p>\n<p>因为我们使用了 <a href=\"https://pkg.go.dev/go.uber.org/dig\">dig</a> 这样的轻量级依赖注入库，所以使用起来大概是这个样子：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">SetUpPulsar(lookupURL)</div><div class=\"line\">container := dig.New()</div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">        Topic:            <span class=\"string\">\"persistent://core/order/create-order\"</span>,</div><div class=\"line\">        SubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">        Type:             pulsar.Shared,</div><div class=\"line\">        Name:             <span class=\"string\">\"consumer01\"</span>,</div><div class=\"line\">    }, ConsumerOrder)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Provide(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">ConsumerConfigInstance</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> NewConsumer(&amp;pulsar.ConsumerOptions{</div><div class=\"line\">        Topic:            <span class=\"string\">\"persistent://core/order/update-order\"</span>,</div><div class=\"line\">        SubscriptionName: <span class=\"string\">\"order-sub\"</span>,</div><div class=\"line\">        Type:             pulsar.Shared,</div><div class=\"line\">        Name:             <span class=\"string\">\"consumer02\"</span>,</div><div class=\"line\">    }, ConsumerInvoice)</div><div class=\"line\"></div><div class=\"line\">})</div><div class=\"line\"></div><div class=\"line\">container.Invoke(StartConsumer)</div></pre></td></tr></tbody></table>\n\n<p>其中的两个 <code>container.Provide()</code> 函数用于注入 <code>consumer</code> 对象。</p>\n<p><code>container.Invoke(StartConsumer)</code> 会从容器中取出所有的 <code>consumer</code> 对象，同时开始消费。</p>\n<p>这时以我有限的 <code>Go</code> 开发经验也在思考一个问题，在 <code>Go</code> 中是否需要依赖注入？</p>\n<p>先来看看使用 <code>Dig</code> 这类库所带来的好处：</p>\n<ul>\n<li>对象交由容器管理，很方便的实现单例。</li>\n<li>当各个对象之前依赖关系复杂时，可以减少许多创建、获取对象的代码，依赖关系更清晰。</li>\n</ul>\n<p>同样的坏处也有：</p>\n<ul>\n<li>跟踪阅读代码时没有那么直观，不能一眼看出某个依赖对象是如何创建的。</li>\n<li>与 Go 所推崇的简洁之道不符。</li>\n</ul>\n<p>对于使用过 <code>Spring</code> 的 <code>Java</code> 开发者来说肯定直呼真香，毕竟还是熟悉的味道；但对于完全没有接触过类似需求的 <code>Gopher</code> 来说貌似也不是刚需。</p>\n<p>目前市面上各式各样的 Go 依赖注入库层出不穷，也不乏许多大厂出品，可见还是很有市场的。</p>\n<p>我相信有很多 <code>Gopher</code> 非常反感将 <code>Java</code> 中的一些复杂概念引入到 <code>Go</code>，但我觉得依赖注入本身是不受语言限制，各种语言也都有自己的实现，只是 Java 中的 Spring 不仅仅只是一个依赖注入框架，还有许多复杂功能，让许多开发者望而生畏。</p>\n<p>如果只是依赖注入这个细分需求，实现起来并不复杂，并不会给带来太多复杂度。如果花时间去看源码，在理解概念的基础上很快就能掌握。</p>\n<p>回到 <code>SDK</code> 本身来说，<code>Go</code> 的 <code>SDK</code> 现阶段要比 <code>Java</code> 版本的功能少（准确来说只有 <code>Java</code> 版的功能最丰富），但核心的都有了，并不影响日常使用。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"></a>总结</h1><p>本文介绍了 <code>Pulsar</code> 的一些基本概念与优点，同时顺便讨论一下 <code>Go</code> 的依赖注入；如果大家和我们一样在做技术选型，不妨考虑一下 <code>Pulsar</code>。</p>\n<p>后续会继续分享 Pulsar 的相关内容，有相关经验的朋友也可以在评论区留下自己的见解。</p>\n<p><a href=\"/uploads/weixinfooter1.jpg\"><img src=\"/uploads/weixinfooter1.jpg\" alt=\"crossoverJie wechat\"></a></p>\n<p>我很有眼光！</p>\n<p>请我吃🍗</p>\n<p>赏</p>\n<p><a href=\"/weixin-reward-image.jpg\"><img src=\"/weixin-reward-image.jpg\" alt=\"crossoverJie WeChat Pay\"></a></p>\n<p>微信打赏</p>\n<p><a href=\"/alipay-reward-image.jpg\"><img src=\"/alipay-reward-image.jpg\" alt=\"crossoverJie Alipay\"></a></p>\n<p>支付宝打赏</p>\n<p><a href=\"/tags/Go/\">#Go</a> <a href=\"/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/\">#消息队列</a></p>\n<p><a href=\"/2021/03/26/go/github-actions/\" title=\"利用 GitHub Action 自动发布 Docker\">利用 GitHub Action 自动发布 Docker</a></p>"},{"title":"iceberg-flink设置","date":"2021-04-29T05:00:10.000Z","_content":"\n1.下载flink\n\n`wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.11.3/flink-1.11.3-bin-scala_2.12.tgz`\n\n2.修改start-cluster.sh\n<!-- more -->\n添加如下内容\n\n`export HADOOP_CLASSPATH=$HADOOP_HOME/bin/hadoop classpath`\n\n```\n./bin/start-cluster.sh\n```\n\nwget https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar\n\nwget https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar\n\n启动shell\n\n```\n./bin/sql-client.sh embedded \\\n    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/iceberg-flink-runtime-0.10.0.jar \\\n    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n    shell\n```\n\n创建hive catalog\n\n`CREATE CATALOG hive_catalog WITH (`\n  `'type'='iceberg',`\n  `'catalog-type'='hive',`\n  `'uri'='thrift://localhost:9083',`\n  `'clients'='5',`\n  `'property-version'='1',`\n  `'warehouse'='hdfs://nn:8020/warehouse/path'`\n`);`\n\n\n\nHdfs 启动\n\nssh免密\n\nvim authorized_keys \n\n第一步格式hdfs\n\nhadoop namenode -format\n\n`start-dfs.sh` \n\n启动hive-metastore\n\nVI hive-site.xml\n\n```xml\n<property>\n          <name>hive.metastore.uris</name>\n          <value>thrift://localhost:9083</value>\n   </property>\n```\n\nHive 数据库初始化：\n\nhdfs dfs -mkdir -p /tmp/hive\n\n hdfs dfs -mkdir -p /hive/warehouse\n\n hdfs dfs -chmod -R g+w,o+w /tmp \n\nhdfs dfs -chmod -R g+w,o+w /hive \n\n```shell\nschematool -dbType mysql -initSchema\n```\n\n```shell\nhive --service metastore\n```\n\nflink-hive\n\n要配置环境变量\n\n```\nexport HIVE_CONF_DIR=${HIVE_HOME}/conf\n```\n\nCREATE CATALOG hive_catalog WITH (\n  'type'='iceberg',\n  'catalog-type'='hive',\n  'uri'='thrift://localhost:9083',\n  'clients'='5',\n  'property-version'='1',\n  'warehouse'='hdfs://localhost:9000/hive/warehouse'\n);\n\nCREATE CATALOG my_catalog WITH (\n  'type'='iceberg',\n  'catalog-impl'='com.my.custom.CatalogImpl',\n  'my-additional-catalog-config'='my-value'\n);\n\nSql-client-default.yaml配置：\n\ncatalogs: # empty list\n  - name: gmall\n    type: hive\n    hive-conf-dir: /opt/module/hive/conf/\n    hive-version: 1.2.1\n    default-database: gmallFlink SQL> CREATE TABLE gmall.gmall.sample (\n\n    >     `id BIGINT COMMENT 'unique id',`\n    >     `data STRING`\n    >     `);`\n    >     `[INFO] Table has been created.`\n\n```\nCREATE TABLE  gmall.gmall.sample_like LIKE gmall.gmall.sample;\n```\n\n```\nALTER TABLE gmall.gmall.sample SET ('write.format.default'='avro')\n```\n\n```\nALTER TABLE gmall.gmall.sample RENAME TO gmall.gmall.new_sample;\nDROP TABLE gmall.gmall.sample;\n\n```\n\nCREATE CATALOG hive_catalog WITH (\n  'type'='iceberg',\n  'catalog-type'='hive',\n  'uri'='thrift://localhost:9083',\n  'clients'='5',\n  'property-version'='1',\n  'warehouse'='hdfs://localhost:8020/hive/warehouse'\n);\n\nCREATE TABLE sample (\n    id BIGINT COMMENT 'unique id',\n    data STRING\n);\n\n","source":"_posts/iceberg-flink设置.md","raw":"---\ntitle: iceberg-flink设置\ndate: 2021-04-29 13:00:10\ntags:\n---\n\n1.下载flink\n\n`wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.11.3/flink-1.11.3-bin-scala_2.12.tgz`\n\n2.修改start-cluster.sh\n<!-- more -->\n添加如下内容\n\n`export HADOOP_CLASSPATH=$HADOOP_HOME/bin/hadoop classpath`\n\n```\n./bin/start-cluster.sh\n```\n\nwget https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar\n\nwget https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar\n\n启动shell\n\n```\n./bin/sql-client.sh embedded \\\n    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/iceberg-flink-runtime-0.10.0.jar \\\n    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n    shell\n```\n\n创建hive catalog\n\n`CREATE CATALOG hive_catalog WITH (`\n  `'type'='iceberg',`\n  `'catalog-type'='hive',`\n  `'uri'='thrift://localhost:9083',`\n  `'clients'='5',`\n  `'property-version'='1',`\n  `'warehouse'='hdfs://nn:8020/warehouse/path'`\n`);`\n\n\n\nHdfs 启动\n\nssh免密\n\nvim authorized_keys \n\n第一步格式hdfs\n\nhadoop namenode -format\n\n`start-dfs.sh` \n\n启动hive-metastore\n\nVI hive-site.xml\n\n```xml\n<property>\n          <name>hive.metastore.uris</name>\n          <value>thrift://localhost:9083</value>\n   </property>\n```\n\nHive 数据库初始化：\n\nhdfs dfs -mkdir -p /tmp/hive\n\n hdfs dfs -mkdir -p /hive/warehouse\n\n hdfs dfs -chmod -R g+w,o+w /tmp \n\nhdfs dfs -chmod -R g+w,o+w /hive \n\n```shell\nschematool -dbType mysql -initSchema\n```\n\n```shell\nhive --service metastore\n```\n\nflink-hive\n\n要配置环境变量\n\n```\nexport HIVE_CONF_DIR=${HIVE_HOME}/conf\n```\n\nCREATE CATALOG hive_catalog WITH (\n  'type'='iceberg',\n  'catalog-type'='hive',\n  'uri'='thrift://localhost:9083',\n  'clients'='5',\n  'property-version'='1',\n  'warehouse'='hdfs://localhost:9000/hive/warehouse'\n);\n\nCREATE CATALOG my_catalog WITH (\n  'type'='iceberg',\n  'catalog-impl'='com.my.custom.CatalogImpl',\n  'my-additional-catalog-config'='my-value'\n);\n\nSql-client-default.yaml配置：\n\ncatalogs: # empty list\n  - name: gmall\n    type: hive\n    hive-conf-dir: /opt/module/hive/conf/\n    hive-version: 1.2.1\n    default-database: gmallFlink SQL> CREATE TABLE gmall.gmall.sample (\n\n    >     `id BIGINT COMMENT 'unique id',`\n    >     `data STRING`\n    >     `);`\n    >     `[INFO] Table has been created.`\n\n```\nCREATE TABLE  gmall.gmall.sample_like LIKE gmall.gmall.sample;\n```\n\n```\nALTER TABLE gmall.gmall.sample SET ('write.format.default'='avro')\n```\n\n```\nALTER TABLE gmall.gmall.sample RENAME TO gmall.gmall.new_sample;\nDROP TABLE gmall.gmall.sample;\n\n```\n\nCREATE CATALOG hive_catalog WITH (\n  'type'='iceberg',\n  'catalog-type'='hive',\n  'uri'='thrift://localhost:9083',\n  'clients'='5',\n  'property-version'='1',\n  'warehouse'='hdfs://localhost:8020/hive/warehouse'\n);\n\nCREATE TABLE sample (\n    id BIGINT COMMENT 'unique id',\n    data STRING\n);\n\n","slug":"iceberg-flink设置","published":1,"updated":"2021-07-22T07:00:40.216Z","_id":"ckpp6ut5a0006dgv95xgzh3zx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.下载flink</p>\n<p><code>wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.11.3/flink-1.11.3-bin-scala_2.12.tgz</code></p>\n<p>2.修改start-cluster.sh</p>\n<span id=\"more\"></span>\n<p>添加如下内容</p>\n<p><code>export HADOOP_CLASSPATH=$HADOOP_HOME/bin/hadoop classpath</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/start-cluster.sh</span><br></pre></td></tr></table></figure>\n\n<p>wget <a href=\"https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar\">https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar</a></p>\n<p>wget <a href=\"https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar\">https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar</a></p>\n<p>启动shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/sql-client.sh embedded \\</span><br><span class=\"line\">    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/iceberg-flink-runtime-0.10.0.jar \\</span><br><span class=\"line\">    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\</span><br><span class=\"line\">    shell</span><br></pre></td></tr></table></figure>\n\n<p>创建hive catalog</p>\n<p><code>CREATE CATALOG hive_catalog WITH (</code><br>  <code>&#39;type&#39;=&#39;iceberg&#39;,</code><br>  <code>&#39;catalog-type&#39;=&#39;hive&#39;,</code><br>  <code>&#39;uri&#39;=&#39;thrift://localhost:9083&#39;,</code><br>  <code>&#39;clients&#39;=&#39;5&#39;,</code><br>  <code>&#39;property-version&#39;=&#39;1&#39;,</code><br>  <code>&#39;warehouse&#39;=&#39;hdfs://nn:8020/warehouse/path&#39;</code><br><code>);</code></p>\n<p>Hdfs 启动</p>\n<p>ssh免密</p>\n<p>vim authorized_keys </p>\n<p>第一步格式hdfs</p>\n<p>hadoop namenode -format</p>\n<p><code>start-dfs.sh</code> </p>\n<p>启动hive-metastore</p>\n<p>VI hive-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.uris<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>thrift://localhost:9083<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Hive 数据库初始化：</p>\n<p>hdfs dfs -mkdir -p /tmp/hive</p>\n<p> hdfs dfs -mkdir -p /hive/warehouse</p>\n<p> hdfs dfs -chmod -R g+w,o+w /tmp </p>\n<p>hdfs dfs -chmod -R g+w,o+w /hive </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive --service metastore</span><br></pre></td></tr></table></figure>\n\n<p>flink-hive</p>\n<p>要配置环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HIVE_CONF_DIR=$&#123;HIVE_HOME&#125;/conf</span><br></pre></td></tr></table></figure>\n\n<p>CREATE CATALOG hive_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-type’=’hive’,<br>  ‘uri’=’thrift://localhost:9083’,<br>  ‘clients’=’5’,<br>  ‘property-version’=’1’,<br>  ‘warehouse’=’hdfs://localhost:9000/hive/warehouse’<br>);</p>\n<p>CREATE CATALOG my_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-impl’=’com.my.custom.CatalogImpl’,<br>  ‘my-additional-catalog-config’=’my-value’<br>);</p>\n<p>Sql-client-default.yaml配置：</p>\n<p>catalogs: # empty list</p>\n<ul>\n<li><p>name: gmall<br>type: hive<br>hive-conf-dir: /opt/module/hive/conf/<br>hive-version: 1.2.1<br>default-database: gmallFlink SQL&gt; CREATE TABLE gmall.gmall.sample (</p>\n<blockquote>\n<pre><code>`id BIGINT COMMENT &#39;unique id&#39;,`\n`data STRING`\n`);`\n`[INFO] Table has been created.`\n</code></pre>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE  gmall.gmall.sample_like LIKE gmall.gmall.sample;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE gmall.gmall.sample SET (&#x27;write.format.default&#x27;=&#x27;avro&#x27;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE gmall.gmall.sample RENAME TO gmall.gmall.new_sample;</span><br><span class=\"line\">DROP TABLE gmall.gmall.sample;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>CREATE CATALOG hive_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-type’=’hive’,<br>  ‘uri’=’thrift://localhost:9083’,<br>  ‘clients’=’5’,<br>  ‘property-version’=’1’,<br>  ‘warehouse’=’hdfs://localhost:8020/hive/warehouse’<br>);</p>\n<p>CREATE TABLE sample (<br>    id BIGINT COMMENT ‘unique id’,<br>    data STRING<br>);</p>\n","site":{"data":{}},"excerpt":"<p>1.下载flink</p>\n<p><code>wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.11.3/flink-1.11.3-bin-scala_2.12.tgz</code></p>\n<p>2.修改start-cluster.sh</p>","more":"<p>添加如下内容</p>\n<p><code>export HADOOP_CLASSPATH=$HADOOP_HOME/bin/hadoop classpath</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/start-cluster.sh</span><br></pre></td></tr></table></figure>\n\n<p>wget <a href=\"https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar\">https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/0.10.0/iceberg-flink-runtime-0.10.0.jar</a></p>\n<p>wget <a href=\"https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar\">https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-hive-2.3.6_2.11/1.11.0/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar</a></p>\n<p>启动shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/sql-client.sh embedded \\</span><br><span class=\"line\">    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/iceberg-flink-runtime-0.10.0.jar \\</span><br><span class=\"line\">    -j /Users/Terminus/software/flink-1.11.3/plugins/iceberg/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\</span><br><span class=\"line\">    shell</span><br></pre></td></tr></table></figure>\n\n<p>创建hive catalog</p>\n<p><code>CREATE CATALOG hive_catalog WITH (</code><br>  <code>&#39;type&#39;=&#39;iceberg&#39;,</code><br>  <code>&#39;catalog-type&#39;=&#39;hive&#39;,</code><br>  <code>&#39;uri&#39;=&#39;thrift://localhost:9083&#39;,</code><br>  <code>&#39;clients&#39;=&#39;5&#39;,</code><br>  <code>&#39;property-version&#39;=&#39;1&#39;,</code><br>  <code>&#39;warehouse&#39;=&#39;hdfs://nn:8020/warehouse/path&#39;</code><br><code>);</code></p>\n<p>Hdfs 启动</p>\n<p>ssh免密</p>\n<p>vim authorized_keys </p>\n<p>第一步格式hdfs</p>\n<p>hadoop namenode -format</p>\n<p><code>start-dfs.sh</code> </p>\n<p>启动hive-metastore</p>\n<p>VI hive-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.uris<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>thrift://localhost:9083<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Hive 数据库初始化：</p>\n<p>hdfs dfs -mkdir -p /tmp/hive</p>\n<p> hdfs dfs -mkdir -p /hive/warehouse</p>\n<p> hdfs dfs -chmod -R g+w,o+w /tmp </p>\n<p>hdfs dfs -chmod -R g+w,o+w /hive </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive --service metastore</span><br></pre></td></tr></table></figure>\n\n<p>flink-hive</p>\n<p>要配置环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HIVE_CONF_DIR=$&#123;HIVE_HOME&#125;/conf</span><br></pre></td></tr></table></figure>\n\n<p>CREATE CATALOG hive_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-type’=’hive’,<br>  ‘uri’=’thrift://localhost:9083’,<br>  ‘clients’=’5’,<br>  ‘property-version’=’1’,<br>  ‘warehouse’=’hdfs://localhost:9000/hive/warehouse’<br>);</p>\n<p>CREATE CATALOG my_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-impl’=’com.my.custom.CatalogImpl’,<br>  ‘my-additional-catalog-config’=’my-value’<br>);</p>\n<p>Sql-client-default.yaml配置：</p>\n<p>catalogs: # empty list</p>\n<ul>\n<li><p>name: gmall<br>type: hive<br>hive-conf-dir: /opt/module/hive/conf/<br>hive-version: 1.2.1<br>default-database: gmallFlink SQL&gt; CREATE TABLE gmall.gmall.sample (</p>\n<blockquote>\n<pre><code>`id BIGINT COMMENT &#39;unique id&#39;,`\n`data STRING`\n`);`\n`[INFO] Table has been created.`\n</code></pre>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE  gmall.gmall.sample_like LIKE gmall.gmall.sample;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE gmall.gmall.sample SET (&#x27;write.format.default&#x27;=&#x27;avro&#x27;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE gmall.gmall.sample RENAME TO gmall.gmall.new_sample;</span><br><span class=\"line\">DROP TABLE gmall.gmall.sample;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>CREATE CATALOG hive_catalog WITH (<br>  ‘type’=’iceberg’,<br>  ‘catalog-type’=’hive’,<br>  ‘uri’=’thrift://localhost:9083’,<br>  ‘clients’=’5’,<br>  ‘property-version’=’1’,<br>  ‘warehouse’=’hdfs://localhost:8020/hive/warehouse’<br>);</p>\n<p>CREATE TABLE sample (<br>    id BIGINT COMMENT ‘unique id’,<br>    data STRING<br>);</p>"},{"title":"macos设置","date":"2021-04-28T07:49:27.000Z","_content":"\n### 必要姿势: 允许安装任何来源程序\n\n打开终端 -> `sudo spctl --master-disable` . 滴滴答答,输入你的管理员密码就解开了\n\n当提示资源已损坏，请移入回收站，请用以下方式\n\n**`运行“终端”，然后复制这段代码“- [ ] sudo xattr -r -d com.apple.quarantine”，然后上“访达”找到“应用程序”里有问题的那个软件，把它拖到“终端”这段代码的页面，然后输入本机密码（密码不显示，输入完回车就可以），接下来就是见证奇迹的时刻了~`**\n\n## 工作流(花样姿势)\n\n<!-- more -->\n\n> 有了基础的包管理和服务管理,我们才能耍的更好\n\n\n\n### 必要姿势: 允许安装任何来源程序\n\n\n\n在 macos 10.12+开始,这个允许安装任何来源的应用功能就给安全机制(官方说为了安全,你信么!!)给屏蔽了...\n\n\n\n但是有木有法子解开呢...我列出来肯定有了啦..姿势如下!\n\n\n\n打开终端 -> `sudo spctl --master-disable` . 滴滴答答,输入你的管理员密码就解开了\n\n\n\n### 姿势1: 快速预览\n\n\n\n快速预览是 Macos内置的一个功能,就是你选中一个文件的时候,直接空格键(`space`)可以看到一些信息.\n\n比如图片,文档!\n\n\n\n但是内置的往往不够强大..万能的基友的社区就有人做了这么些插件来丰富快速预览;\n\n\n\n传送门: [quick-look-plugins](https://github.com/sindresorhus/quick-look-plugins);\n\n\n\n装了这个可预览的功能起码丰富了一倍不止. 代码高亮,Markdown生成预览,excel,zip 包等等...\n\n\n\n### 姿势2: 终端强化\n\n\n\n内置的`terminal`说实在的,真不够友好...所以社区就造就了一个`iterm2`\n\n\n\n传送门 :[ iterm2 : 提供了多套内置主题,可定制的东西多了](https://www.iterm2.com/).\n\n\n\n你觉得我在推崇这个? 不不不,作为一个伪前端,有什么比用前端搞的终端更来的贴心....\n\n\n\n这个,大佬们我推崇的是这个,看下面\n\n\n\n传送门:[**Hyper**: 基于 electron搞得,高度自定义,配置就是一个 js(热更新),插件都是 npm 包,各种花样 style](https://hyper.is/)\n\n\n\n1.x系列还有一些中文输入的 bug ,但是2.x 简直好用!!可以花时间去折腾下.用过都说好!\n\n\n\n**好吧,丰富的定制化只是外在的..那么内在呢?** \n\n\n\n我推崇的是这个(`ZSH`),有人说 `fishshell`!萝卜青菜各有所爱哈!\n\n\n\n传送门: [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh);\n\n\n\n**zsh推荐启用的几个插件(没有的都可以用 brew 安装)**:[**插件列表及介绍**](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins)\n\n\n\n打开`.zshrc`,找到 plugins 启用,名字就是插件,插件之间空格隔开\n\n\n\n```\n#必备的两个插件\nbrew install zsh-autosuggestions\nbrew install zsh-completions\n```\n\n\n\n```\nplugins=(git autojump node npm brew osx extract redis-cli autopep8 history last-working-dir\n\n pip python sudo web-search)\n```\n\n\n\n前几个属于必备的:\n\n\n\n1. git : 提供了丰富的 git `alias`\n2. autojump : 还在一直 `cd xxx`? 只要访问过的(会索引缓存路径),一键直达:`j(autojump) xxx`\n3. node : 打开 node api 文档\n4. npm : npm 智能提示\n5. brew: brew 的智能提示和补全\n\n\n\n后面一些看着装了.有 python 和 redis,也有访问目录的,也有直接打开搜索引擎的\n\n\n\n### 姿势3: 你喜欢 vim?\n\n\n\n但又发现去配置一个成型的 vim 工作量太大,找各种各样的插件...\n\n\n\n那么你可以试试这个...基于 `neovim(自命是 vim 与时俱进的继承者)` 基础上的傻瓜包\n\n\n\n传送门: [spacevim : 社区驱动的 vim 工作环境](https://github.com/SpaceVim/SpaceVim)\n\n\n\n### 姿势4: Alfred\n\n\n\n> 肯定会有人说系统内置的`Spotlight`不够用么? 能索引快速跳转的地方也很多\n\n\n\n但是Alfred 的强大不仅仅文件的索引...而是可拓展性`workflows`;\n\n\n\n传送门:[workflows](https://www.alfredapp.com/workflows/);\n\n\n\n这货让`Alfred`的使用效率大大的提高;\n\n\n\n这里我就推荐几个;\n\n\n\n- Dash : 快速索引跳转到 dash 手册的\n- CalireSearch : 索引 calibre 里面的书籍进行跳转\n- Github repos : 快速跳转到自己的一些 github 仓(需要配置 token)\n- NpmSearch : 快速搜索 npmjs.org 上的某个包,直接浏览器打开\n- StackOverflow: .so + question 筛选出问题列表,浏览器打开\n- Colors: 颜色处理\n\n\n\n之前掘金还有人写了个搜索知乎的... 你动手能力够强也可以自己写一个工作流.\n\n\n\n### 姿势5: 编辑器?IDE?\n\n\n\n- 首推:[`VSCode`(开源免费)](https://code.visualstudio.com/download) : 非常强大的编辑器\n- 其次[`Sublime Text 3`(付费,但可免费使用)](https://www.sublimetext.com/) 或者 [`Atom`(开源免费)](https://atom.io/)\n- 最后[`Webstorm`(付费)](https://www.jetbrains.com/webstorm/download/#section=mac)\n\n\n\n若是兼顾混合开发,**安卓开发**首选`Android Studio`, **IOS开发**首选`XCode`。\n\n\n\n具体可以参考[Flutter for MacOS](https://flutter.io/docs/get-started/install/macos)\n\n\n\n### 姿势6: 想看个本地视频,有什么播放器推荐!\n\n\n\n足够强大,格式也丰富,功能比 `appstore` 一些付费的还多,除了稳定性还有待完善,其他完美了\n\n\n\n传送门: [IINA](https://github.com/lhc70000/iina) , 可以用`brew cask`安装`brew cask install iina`\n\n\n\n### 姿势7: 修改 hosts?\n\n\n\n会命令行的直接粗暴;\n\n\n\n- `sudo vim /etc/hosts` : 然后保存就行\n\n\n\n那么有木有可视化工具管理!!有的..\n\n\n\n传送门:[SwitchHosts](https://github.com/oldj/SwitchHosts)\n\n\n\n### 姿势8: 快捷键有点多,有没有方便记忆的工具\n\n\n\n有的,[**CheatSheet**](https://www.mediaatelier.com/CheatSheet/): 长按 Command 键即可调出应用程序的部分快捷键表(为什么是局部!因为有些 APP 的快捷键它读取不到)\n\n\n\n### 姿势9: 如何远程控制协助!Mac QQ 木有这功能!\n\n\n\n有时候遇到困难要抱好心大佬的大腿,怎么办!!\n\n\n\n亦或者有时候看到一些菜鸟,心血来潮想\"指点江山\",怎么破!\n\n\n\n这时候就需要这个闻名已久的软件了;\n\n\n\n[teamviewer](https://www.teamviewer.com/zhCN/): 全平台的远程会议或协助软件,非商用免费!!!!!!(你懂的)\n\n\n\n`mac`与`mac`之间可以通过内置的远程控制来协助\n\n\n\n### 姿势10: 让 MAC 更像 GNU ,命令行更加丰富\n\n\n\n> Coreutils - GNU core utilities\n>\n> The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.\n>\n> These are the core utilities which are expected to exist on every operating system.\n\n\n\n```\nbrew install coreutils\n```\n\n\n\n### 姿势11: `exa`:更现代化的`ls`命令,用`Rust`写的`\n\n\n\n> A modern version of ‘ls’. https://the.exa.website/\n\n\n\n```\nbrew install exa\n```\n\n\n\n### 姿势12: 免费好用的系统维护工具\n\n\n\n> 很多人去找什么`clean`的付费版,其实国内的鹅厂还是挺良心的\n\n\n\n-[Tencent Lemon Cleaner](https://mac.gj.qq.com/) : 监控和清除垃圾,省了两个`app`的钱\n\n\n\n## 软件推荐\n\n\n\n> 可以用 `brew cask` 用 `#` , 付费用 `$` 表示 , 免费则没有任何符号, `$$`代表付费服务\n\n\n\n- [motrix](https://github.com/agalwood/Motrix) : 全平台的下载工具,底层用的`aria`,速度贼快\n- [KeepingYouAwake](https://github.com/newmarcel/KeepingYouAwake): 很赞的一个小工具,让你的本本不被睡眠(时间可控)\n- [VS Code - #](https://code.visualstudio.com/Download): 非常棒的代码编辑器\n- [MindNode2 - $](https://mindnode.com/): 思维导图软件,很简洁,官方计划年末升级到5\n- [VMware Fusion- $/#](https://www.vmware.com/products/fusion/fusion-evaluation.html): 非常好用的虚拟机软件\n- [FileZilla - #](https://filezilla-project.org/): 开源免费好用的 FTP 软件(全平台)\n- [DBeaver -$/#](https://dbeaver.io/download/) : 非常实用的GUI数据库管理,支持多种数据库\n- [VirtualBox - #](https://www.virtualbox.org/wiki/Downloads) : 开源全平台的虚拟机\n- [Camtasia - $](https://www.techsmith.com/video-editor.html): 知名的屏幕录制工具,用来做视频教程妥妥的\n- [Magnet - $](http://magnet.crowdcafe.com/):窗口快速排版工具\n- [eagle - $](https://eagle.cool/macOS): 设计师必备,素材管理工具,很强大\n- [Navicat permium - $](https://www.navicat.com/en/download/navicat-premium): 全平台的多数据库管理工具(很强大)\n- [SourceTree](https://www.sourcetreeapp.com/): 全平台的 GUI git 管理客户端\n- [智图](https://zhitu.isux.us/) : 腾讯出品的图片压缩平台,有客户端!!\n- [Robo 3T](https://robomongo.org/): MongoDB数据库的本地管理工具\n- [微信开发者工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html):基于`nw.js` 的,但是只打包了 win 和 mac 端!!不解\n- [Trello - #/$$](https://trello.com/) : 办公协助软件,用过都说好..我单纯用来做个人列表清单规划(个人免费),有客户端\n- [Dr.Unarchive](https://www.drcleaner.com/dr-unarchiver/): 解压缩软件,类似 win 上的好压,就是不知道有没有后x(appstore 有)\n- [wiznote - $$](https://www.wiz.cn/):全平台的笔记软件,十多年的国产老牌..值得信赖\n- [Calibre - #](https://calibre-ebook.com/): 很强大的图书管理(全平台),可以用来建立一个本地图书库\n- [Gifox](https://gifox.io/ - $): 很喜欢这个 GIF 录制工具,小巧美观,也很便宜\n- [Dash - $$](https://kapeli.com/dash) : 很全面的手册汇总\n- [charles - $$](https://www.charlesproxy.com/) : http 的抓包分析\n\n\n\n对于**PS 全家桶**和**ms office 全家桶**这些就看人下载了.网上也有和谐的姿势(你懂的!)\n\n\n\n像**QQ,优酷,腾讯视频,有道词典,QQ音乐,网易云音乐**这些,\n\n\n\n在`App store`也有(部分应用可以直接`brew cask`),\n\n\n\n但是啊,这里的版本可能不如他们推送的快.还有会有部分的功能限制(商店的限制比较多).\n\n\n\n官网自家提供的有些需要用到**管理员**特权或者一些系统级的服务!!!\n\n\n\n**macos 也可以编译安装一些软件的**!!!!\n\n\n\n**Q: 也有可能想说 `markdown`这些的工具呢?**\n\n\n\n`VSCode` 或者 `Atom`结合插件来写 markdown 我感觉已经很不错了,\n\n\n\n可以做到各种高亮,快捷键补全,导出 PDF 等.\n\n\n\n有人说我喜欢做事有安排!有没有清单类的应用!有挺多的,但是感觉毫无卵用.\n\n内置的待办事项(适合当天)+邮件里面的日程安排(重复,未来,整天的行程安排)已经完美了..\n\n\n\n## 总结\n\n\n\n哦,对了,有人可能也想知道 `Linux`或者 `unix` 的命令能不能直接在 `macos` 使用;\n\n早期的 mac 是基于 bsd 搞的,所以有一定的 unix 血统...\n\n虽有部分命令相同,但是还有一些参数上的差异.\n\n\n\n还有一些需要额外去安装,比如 `wget`,`htop`这些\n\n\n\n双方都有的命令(`mv`,`cp`,`history`,`file`,`more`....)这些,\n\n功能大同小异(更多的是参数上的区别!!!)\n\n\n\n软件不在多,够用就好...\n\n有一些比较敏感的就不推荐了(世界那么大,你不想看看!知识怎么学习的快!)\n\n倘若盲目的去找工具,装那么一大坨很少用或者基本不会用到.纯属浪费生命和电脑磁盘空间\n\n软件推荐：\n\ngit-fork\n\n命令推荐：\n\nkafkacat\n\n安装命令\n\n`brew install kafkacat`\n\n# 查看过滤出来的文件\n$ find . -name '.DS_Store'\n# 删除\n$ find . -name '.DS_Store' -type f -exec rm -f {} \\;\n# 再次检查\n$ find . -name '.DS_Store'\n\nmaven 4个线程执行\n\n```\nmvn -T 4 clean install\n```","source":"_posts/macos设置.md","raw":"---\ntitle: macos设置\ndate: 2021-04-28 15:49:27\ntags:\n---\n\n### 必要姿势: 允许安装任何来源程序\n\n打开终端 -> `sudo spctl --master-disable` . 滴滴答答,输入你的管理员密码就解开了\n\n当提示资源已损坏，请移入回收站，请用以下方式\n\n**`运行“终端”，然后复制这段代码“- [ ] sudo xattr -r -d com.apple.quarantine”，然后上“访达”找到“应用程序”里有问题的那个软件，把它拖到“终端”这段代码的页面，然后输入本机密码（密码不显示，输入完回车就可以），接下来就是见证奇迹的时刻了~`**\n\n## 工作流(花样姿势)\n\n<!-- more -->\n\n> 有了基础的包管理和服务管理,我们才能耍的更好\n\n\n\n### 必要姿势: 允许安装任何来源程序\n\n\n\n在 macos 10.12+开始,这个允许安装任何来源的应用功能就给安全机制(官方说为了安全,你信么!!)给屏蔽了...\n\n\n\n但是有木有法子解开呢...我列出来肯定有了啦..姿势如下!\n\n\n\n打开终端 -> `sudo spctl --master-disable` . 滴滴答答,输入你的管理员密码就解开了\n\n\n\n### 姿势1: 快速预览\n\n\n\n快速预览是 Macos内置的一个功能,就是你选中一个文件的时候,直接空格键(`space`)可以看到一些信息.\n\n比如图片,文档!\n\n\n\n但是内置的往往不够强大..万能的基友的社区就有人做了这么些插件来丰富快速预览;\n\n\n\n传送门: [quick-look-plugins](https://github.com/sindresorhus/quick-look-plugins);\n\n\n\n装了这个可预览的功能起码丰富了一倍不止. 代码高亮,Markdown生成预览,excel,zip 包等等...\n\n\n\n### 姿势2: 终端强化\n\n\n\n内置的`terminal`说实在的,真不够友好...所以社区就造就了一个`iterm2`\n\n\n\n传送门 :[ iterm2 : 提供了多套内置主题,可定制的东西多了](https://www.iterm2.com/).\n\n\n\n你觉得我在推崇这个? 不不不,作为一个伪前端,有什么比用前端搞的终端更来的贴心....\n\n\n\n这个,大佬们我推崇的是这个,看下面\n\n\n\n传送门:[**Hyper**: 基于 electron搞得,高度自定义,配置就是一个 js(热更新),插件都是 npm 包,各种花样 style](https://hyper.is/)\n\n\n\n1.x系列还有一些中文输入的 bug ,但是2.x 简直好用!!可以花时间去折腾下.用过都说好!\n\n\n\n**好吧,丰富的定制化只是外在的..那么内在呢?** \n\n\n\n我推崇的是这个(`ZSH`),有人说 `fishshell`!萝卜青菜各有所爱哈!\n\n\n\n传送门: [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh);\n\n\n\n**zsh推荐启用的几个插件(没有的都可以用 brew 安装)**:[**插件列表及介绍**](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins)\n\n\n\n打开`.zshrc`,找到 plugins 启用,名字就是插件,插件之间空格隔开\n\n\n\n```\n#必备的两个插件\nbrew install zsh-autosuggestions\nbrew install zsh-completions\n```\n\n\n\n```\nplugins=(git autojump node npm brew osx extract redis-cli autopep8 history last-working-dir\n\n pip python sudo web-search)\n```\n\n\n\n前几个属于必备的:\n\n\n\n1. git : 提供了丰富的 git `alias`\n2. autojump : 还在一直 `cd xxx`? 只要访问过的(会索引缓存路径),一键直达:`j(autojump) xxx`\n3. node : 打开 node api 文档\n4. npm : npm 智能提示\n5. brew: brew 的智能提示和补全\n\n\n\n后面一些看着装了.有 python 和 redis,也有访问目录的,也有直接打开搜索引擎的\n\n\n\n### 姿势3: 你喜欢 vim?\n\n\n\n但又发现去配置一个成型的 vim 工作量太大,找各种各样的插件...\n\n\n\n那么你可以试试这个...基于 `neovim(自命是 vim 与时俱进的继承者)` 基础上的傻瓜包\n\n\n\n传送门: [spacevim : 社区驱动的 vim 工作环境](https://github.com/SpaceVim/SpaceVim)\n\n\n\n### 姿势4: Alfred\n\n\n\n> 肯定会有人说系统内置的`Spotlight`不够用么? 能索引快速跳转的地方也很多\n\n\n\n但是Alfred 的强大不仅仅文件的索引...而是可拓展性`workflows`;\n\n\n\n传送门:[workflows](https://www.alfredapp.com/workflows/);\n\n\n\n这货让`Alfred`的使用效率大大的提高;\n\n\n\n这里我就推荐几个;\n\n\n\n- Dash : 快速索引跳转到 dash 手册的\n- CalireSearch : 索引 calibre 里面的书籍进行跳转\n- Github repos : 快速跳转到自己的一些 github 仓(需要配置 token)\n- NpmSearch : 快速搜索 npmjs.org 上的某个包,直接浏览器打开\n- StackOverflow: .so + question 筛选出问题列表,浏览器打开\n- Colors: 颜色处理\n\n\n\n之前掘金还有人写了个搜索知乎的... 你动手能力够强也可以自己写一个工作流.\n\n\n\n### 姿势5: 编辑器?IDE?\n\n\n\n- 首推:[`VSCode`(开源免费)](https://code.visualstudio.com/download) : 非常强大的编辑器\n- 其次[`Sublime Text 3`(付费,但可免费使用)](https://www.sublimetext.com/) 或者 [`Atom`(开源免费)](https://atom.io/)\n- 最后[`Webstorm`(付费)](https://www.jetbrains.com/webstorm/download/#section=mac)\n\n\n\n若是兼顾混合开发,**安卓开发**首选`Android Studio`, **IOS开发**首选`XCode`。\n\n\n\n具体可以参考[Flutter for MacOS](https://flutter.io/docs/get-started/install/macos)\n\n\n\n### 姿势6: 想看个本地视频,有什么播放器推荐!\n\n\n\n足够强大,格式也丰富,功能比 `appstore` 一些付费的还多,除了稳定性还有待完善,其他完美了\n\n\n\n传送门: [IINA](https://github.com/lhc70000/iina) , 可以用`brew cask`安装`brew cask install iina`\n\n\n\n### 姿势7: 修改 hosts?\n\n\n\n会命令行的直接粗暴;\n\n\n\n- `sudo vim /etc/hosts` : 然后保存就行\n\n\n\n那么有木有可视化工具管理!!有的..\n\n\n\n传送门:[SwitchHosts](https://github.com/oldj/SwitchHosts)\n\n\n\n### 姿势8: 快捷键有点多,有没有方便记忆的工具\n\n\n\n有的,[**CheatSheet**](https://www.mediaatelier.com/CheatSheet/): 长按 Command 键即可调出应用程序的部分快捷键表(为什么是局部!因为有些 APP 的快捷键它读取不到)\n\n\n\n### 姿势9: 如何远程控制协助!Mac QQ 木有这功能!\n\n\n\n有时候遇到困难要抱好心大佬的大腿,怎么办!!\n\n\n\n亦或者有时候看到一些菜鸟,心血来潮想\"指点江山\",怎么破!\n\n\n\n这时候就需要这个闻名已久的软件了;\n\n\n\n[teamviewer](https://www.teamviewer.com/zhCN/): 全平台的远程会议或协助软件,非商用免费!!!!!!(你懂的)\n\n\n\n`mac`与`mac`之间可以通过内置的远程控制来协助\n\n\n\n### 姿势10: 让 MAC 更像 GNU ,命令行更加丰富\n\n\n\n> Coreutils - GNU core utilities\n>\n> The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.\n>\n> These are the core utilities which are expected to exist on every operating system.\n\n\n\n```\nbrew install coreutils\n```\n\n\n\n### 姿势11: `exa`:更现代化的`ls`命令,用`Rust`写的`\n\n\n\n> A modern version of ‘ls’. https://the.exa.website/\n\n\n\n```\nbrew install exa\n```\n\n\n\n### 姿势12: 免费好用的系统维护工具\n\n\n\n> 很多人去找什么`clean`的付费版,其实国内的鹅厂还是挺良心的\n\n\n\n-[Tencent Lemon Cleaner](https://mac.gj.qq.com/) : 监控和清除垃圾,省了两个`app`的钱\n\n\n\n## 软件推荐\n\n\n\n> 可以用 `brew cask` 用 `#` , 付费用 `$` 表示 , 免费则没有任何符号, `$$`代表付费服务\n\n\n\n- [motrix](https://github.com/agalwood/Motrix) : 全平台的下载工具,底层用的`aria`,速度贼快\n- [KeepingYouAwake](https://github.com/newmarcel/KeepingYouAwake): 很赞的一个小工具,让你的本本不被睡眠(时间可控)\n- [VS Code - #](https://code.visualstudio.com/Download): 非常棒的代码编辑器\n- [MindNode2 - $](https://mindnode.com/): 思维导图软件,很简洁,官方计划年末升级到5\n- [VMware Fusion- $/#](https://www.vmware.com/products/fusion/fusion-evaluation.html): 非常好用的虚拟机软件\n- [FileZilla - #](https://filezilla-project.org/): 开源免费好用的 FTP 软件(全平台)\n- [DBeaver -$/#](https://dbeaver.io/download/) : 非常实用的GUI数据库管理,支持多种数据库\n- [VirtualBox - #](https://www.virtualbox.org/wiki/Downloads) : 开源全平台的虚拟机\n- [Camtasia - $](https://www.techsmith.com/video-editor.html): 知名的屏幕录制工具,用来做视频教程妥妥的\n- [Magnet - $](http://magnet.crowdcafe.com/):窗口快速排版工具\n- [eagle - $](https://eagle.cool/macOS): 设计师必备,素材管理工具,很强大\n- [Navicat permium - $](https://www.navicat.com/en/download/navicat-premium): 全平台的多数据库管理工具(很强大)\n- [SourceTree](https://www.sourcetreeapp.com/): 全平台的 GUI git 管理客户端\n- [智图](https://zhitu.isux.us/) : 腾讯出品的图片压缩平台,有客户端!!\n- [Robo 3T](https://robomongo.org/): MongoDB数据库的本地管理工具\n- [微信开发者工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html):基于`nw.js` 的,但是只打包了 win 和 mac 端!!不解\n- [Trello - #/$$](https://trello.com/) : 办公协助软件,用过都说好..我单纯用来做个人列表清单规划(个人免费),有客户端\n- [Dr.Unarchive](https://www.drcleaner.com/dr-unarchiver/): 解压缩软件,类似 win 上的好压,就是不知道有没有后x(appstore 有)\n- [wiznote - $$](https://www.wiz.cn/):全平台的笔记软件,十多年的国产老牌..值得信赖\n- [Calibre - #](https://calibre-ebook.com/): 很强大的图书管理(全平台),可以用来建立一个本地图书库\n- [Gifox](https://gifox.io/ - $): 很喜欢这个 GIF 录制工具,小巧美观,也很便宜\n- [Dash - $$](https://kapeli.com/dash) : 很全面的手册汇总\n- [charles - $$](https://www.charlesproxy.com/) : http 的抓包分析\n\n\n\n对于**PS 全家桶**和**ms office 全家桶**这些就看人下载了.网上也有和谐的姿势(你懂的!)\n\n\n\n像**QQ,优酷,腾讯视频,有道词典,QQ音乐,网易云音乐**这些,\n\n\n\n在`App store`也有(部分应用可以直接`brew cask`),\n\n\n\n但是啊,这里的版本可能不如他们推送的快.还有会有部分的功能限制(商店的限制比较多).\n\n\n\n官网自家提供的有些需要用到**管理员**特权或者一些系统级的服务!!!\n\n\n\n**macos 也可以编译安装一些软件的**!!!!\n\n\n\n**Q: 也有可能想说 `markdown`这些的工具呢?**\n\n\n\n`VSCode` 或者 `Atom`结合插件来写 markdown 我感觉已经很不错了,\n\n\n\n可以做到各种高亮,快捷键补全,导出 PDF 等.\n\n\n\n有人说我喜欢做事有安排!有没有清单类的应用!有挺多的,但是感觉毫无卵用.\n\n内置的待办事项(适合当天)+邮件里面的日程安排(重复,未来,整天的行程安排)已经完美了..\n\n\n\n## 总结\n\n\n\n哦,对了,有人可能也想知道 `Linux`或者 `unix` 的命令能不能直接在 `macos` 使用;\n\n早期的 mac 是基于 bsd 搞的,所以有一定的 unix 血统...\n\n虽有部分命令相同,但是还有一些参数上的差异.\n\n\n\n还有一些需要额外去安装,比如 `wget`,`htop`这些\n\n\n\n双方都有的命令(`mv`,`cp`,`history`,`file`,`more`....)这些,\n\n功能大同小异(更多的是参数上的区别!!!)\n\n\n\n软件不在多,够用就好...\n\n有一些比较敏感的就不推荐了(世界那么大,你不想看看!知识怎么学习的快!)\n\n倘若盲目的去找工具,装那么一大坨很少用或者基本不会用到.纯属浪费生命和电脑磁盘空间\n\n软件推荐：\n\ngit-fork\n\n命令推荐：\n\nkafkacat\n\n安装命令\n\n`brew install kafkacat`\n\n# 查看过滤出来的文件\n$ find . -name '.DS_Store'\n# 删除\n$ find . -name '.DS_Store' -type f -exec rm -f {} \\;\n# 再次检查\n$ find . -name '.DS_Store'\n\nmaven 4个线程执行\n\n```\nmvn -T 4 clean install\n```","slug":"macos设置","published":1,"updated":"2021-07-28T02:56:53.912Z","_id":"ckpp6ut5b0007dgv99yhp12jm","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"必要姿势-允许安装任何来源程序\"><a href=\"#必要姿势-允许安装任何来源程序\" class=\"headerlink\" title=\"必要姿势: 允许安装任何来源程序\"></a>必要姿势: 允许安装任何来源程序</h3><p>打开终端 -&gt; <code>sudo spctl --master-disable</code> . 滴滴答答,输入你的管理员密码就解开了</p>\n<p>当提示资源已损坏，请移入回收站，请用以下方式</p>\n<p><strong><code>运行“终端”，然后复制这段代码“- [ ] sudo xattr -r -d com.apple.quarantine”，然后上“访达”找到“应用程序”里有问题的那个软件，把它拖到“终端”这段代码的页面，然后输入本机密码（密码不显示，输入完回车就可以），接下来就是见证奇迹的时刻了~</code></strong></p>\n<h2 id=\"工作流-花样姿势\"><a href=\"#工作流-花样姿势\" class=\"headerlink\" title=\"工作流(花样姿势)\"></a>工作流(花样姿势)</h2><span id=\"more\"></span>\n\n<blockquote>\n<p>有了基础的包管理和服务管理,我们才能耍的更好</p>\n</blockquote>\n<h3 id=\"必要姿势-允许安装任何来源程序-1\"><a href=\"#必要姿势-允许安装任何来源程序-1\" class=\"headerlink\" title=\"必要姿势: 允许安装任何来源程序\"></a>必要姿势: 允许安装任何来源程序</h3><p>在 macos 10.12+开始,这个允许安装任何来源的应用功能就给安全机制(官方说为了安全,你信么!!)给屏蔽了…</p>\n<p>但是有木有法子解开呢…我列出来肯定有了啦..姿势如下!</p>\n<p>打开终端 -&gt; <code>sudo spctl --master-disable</code> . 滴滴答答,输入你的管理员密码就解开了</p>\n<h3 id=\"姿势1-快速预览\"><a href=\"#姿势1-快速预览\" class=\"headerlink\" title=\"姿势1: 快速预览\"></a>姿势1: 快速预览</h3><p>快速预览是 Macos内置的一个功能,就是你选中一个文件的时候,直接空格键(<code>space</code>)可以看到一些信息.</p>\n<p>比如图片,文档!</p>\n<p>但是内置的往往不够强大..万能的基友的社区就有人做了这么些插件来丰富快速预览;</p>\n<p>传送门: <a href=\"https://github.com/sindresorhus/quick-look-plugins\">quick-look-plugins</a>;</p>\n<p>装了这个可预览的功能起码丰富了一倍不止. 代码高亮,Markdown生成预览,excel,zip 包等等…</p>\n<h3 id=\"姿势2-终端强化\"><a href=\"#姿势2-终端强化\" class=\"headerlink\" title=\"姿势2: 终端强化\"></a>姿势2: 终端强化</h3><p>内置的<code>terminal</code>说实在的,真不够友好…所以社区就造就了一个<code>iterm2</code></p>\n<p>传送门 :<a href=\"https://www.iterm2.com/\"> iterm2 : 提供了多套内置主题,可定制的东西多了</a>.</p>\n<p>你觉得我在推崇这个? 不不不,作为一个伪前端,有什么比用前端搞的终端更来的贴心….</p>\n<p>这个,大佬们我推崇的是这个,看下面</p>\n<p>传送门:<a href=\"https://hyper.is/\"><strong>Hyper</strong>: 基于 electron搞得,高度自定义,配置就是一个 js(热更新),插件都是 npm 包,各种花样 style</a></p>\n<p>1.x系列还有一些中文输入的 bug ,但是2.x 简直好用!!可以花时间去折腾下.用过都说好!</p>\n<p><strong>好吧,丰富的定制化只是外在的..那么内在呢?</strong> </p>\n<p>我推崇的是这个(<code>ZSH</code>),有人说 <code>fishshell</code>!萝卜青菜各有所爱哈!</p>\n<p>传送门: <a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a>;</p>\n<p><strong>zsh推荐启用的几个插件(没有的都可以用 brew 安装)</strong>:<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\"><strong>插件列表及介绍</strong></a></p>\n<p>打开<code>.zshrc</code>,找到 plugins 启用,名字就是插件,插件之间空格隔开</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#必备的两个插件</span><br><span class=\"line\">brew install zsh-autosuggestions</span><br><span class=\"line\">brew install zsh-completions</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(git autojump node npm brew osx extract redis-cli autopep8 history last-working-dir</span><br><span class=\"line\"></span><br><span class=\"line\"> pip python sudo web-search)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>前几个属于必备的:</p>\n<ol>\n<li>git : 提供了丰富的 git <code>alias</code></li>\n<li>autojump : 还在一直 <code>cd xxx</code>? 只要访问过的(会索引缓存路径),一键直达:<code>j(autojump) xxx</code></li>\n<li>node : 打开 node api 文档</li>\n<li>npm : npm 智能提示</li>\n<li>brew: brew 的智能提示和补全</li>\n</ol>\n<p>后面一些看着装了.有 python 和 redis,也有访问目录的,也有直接打开搜索引擎的</p>\n<h3 id=\"姿势3-你喜欢-vim\"><a href=\"#姿势3-你喜欢-vim\" class=\"headerlink\" title=\"姿势3: 你喜欢 vim?\"></a>姿势3: 你喜欢 vim?</h3><p>但又发现去配置一个成型的 vim 工作量太大,找各种各样的插件…</p>\n<p>那么你可以试试这个…基于 <code>neovim(自命是 vim 与时俱进的继承者)</code> 基础上的傻瓜包</p>\n<p>传送门: <a href=\"https://github.com/SpaceVim/SpaceVim\">spacevim : 社区驱动的 vim 工作环境</a></p>\n<h3 id=\"姿势4-Alfred\"><a href=\"#姿势4-Alfred\" class=\"headerlink\" title=\"姿势4: Alfred\"></a>姿势4: Alfred</h3><blockquote>\n<p>肯定会有人说系统内置的<code>Spotlight</code>不够用么? 能索引快速跳转的地方也很多</p>\n</blockquote>\n<p>但是Alfred 的强大不仅仅文件的索引…而是可拓展性<code>workflows</code>;</p>\n<p>传送门:<a href=\"https://www.alfredapp.com/workflows/\">workflows</a>;</p>\n<p>这货让<code>Alfred</code>的使用效率大大的提高;</p>\n<p>这里我就推荐几个;</p>\n<ul>\n<li>Dash : 快速索引跳转到 dash 手册的</li>\n<li>CalireSearch : 索引 calibre 里面的书籍进行跳转</li>\n<li>Github repos : 快速跳转到自己的一些 github 仓(需要配置 token)</li>\n<li>NpmSearch : 快速搜索 npmjs.org 上的某个包,直接浏览器打开</li>\n<li>StackOverflow: .so + question 筛选出问题列表,浏览器打开</li>\n<li>Colors: 颜色处理</li>\n</ul>\n<p>之前掘金还有人写了个搜索知乎的… 你动手能力够强也可以自己写一个工作流.</p>\n<h3 id=\"姿势5-编辑器-IDE\"><a href=\"#姿势5-编辑器-IDE\" class=\"headerlink\" title=\"姿势5: 编辑器?IDE?\"></a>姿势5: 编辑器?IDE?</h3><ul>\n<li>首推:<a href=\"https://code.visualstudio.com/download\"><code>VSCode</code>(开源免费)</a> : 非常强大的编辑器</li>\n<li>其次<a href=\"https://www.sublimetext.com/\"><code>Sublime Text 3</code>(付费,但可免费使用)</a> 或者 <a href=\"https://atom.io/\"><code>Atom</code>(开源免费)</a></li>\n<li>最后<a href=\"https://www.jetbrains.com/webstorm/download/#section=mac\"><code>Webstorm</code>(付费)</a></li>\n</ul>\n<p>若是兼顾混合开发,<strong>安卓开发</strong>首选<code>Android Studio</code>, <strong>IOS开发</strong>首选<code>XCode</code>。</p>\n<p>具体可以参考<a href=\"https://flutter.io/docs/get-started/install/macos\">Flutter for MacOS</a></p>\n<h3 id=\"姿势6-想看个本地视频-有什么播放器推荐\"><a href=\"#姿势6-想看个本地视频-有什么播放器推荐\" class=\"headerlink\" title=\"姿势6: 想看个本地视频,有什么播放器推荐!\"></a>姿势6: 想看个本地视频,有什么播放器推荐!</h3><p>足够强大,格式也丰富,功能比 <code>appstore</code> 一些付费的还多,除了稳定性还有待完善,其他完美了</p>\n<p>传送门: <a href=\"https://github.com/lhc70000/iina\">IINA</a> , 可以用<code>brew cask</code>安装<code>brew cask install iina</code></p>\n<h3 id=\"姿势7-修改-hosts\"><a href=\"#姿势7-修改-hosts\" class=\"headerlink\" title=\"姿势7: 修改 hosts?\"></a>姿势7: 修改 hosts?</h3><p>会命令行的直接粗暴;</p>\n<ul>\n<li><code>sudo vim /etc/hosts</code> : 然后保存就行</li>\n</ul>\n<p>那么有木有可视化工具管理!!有的..</p>\n<p>传送门:<a href=\"https://github.com/oldj/SwitchHosts\">SwitchHosts</a></p>\n<h3 id=\"姿势8-快捷键有点多-有没有方便记忆的工具\"><a href=\"#姿势8-快捷键有点多-有没有方便记忆的工具\" class=\"headerlink\" title=\"姿势8: 快捷键有点多,有没有方便记忆的工具\"></a>姿势8: 快捷键有点多,有没有方便记忆的工具</h3><p>有的,<a href=\"https://www.mediaatelier.com/CheatSheet/\"><strong>CheatSheet</strong></a>: 长按 Command 键即可调出应用程序的部分快捷键表(为什么是局部!因为有些 APP 的快捷键它读取不到)</p>\n<h3 id=\"姿势9-如何远程控制协助-Mac-QQ-木有这功能\"><a href=\"#姿势9-如何远程控制协助-Mac-QQ-木有这功能\" class=\"headerlink\" title=\"姿势9: 如何远程控制协助!Mac QQ 木有这功能!\"></a>姿势9: 如何远程控制协助!Mac QQ 木有这功能!</h3><p>有时候遇到困难要抱好心大佬的大腿,怎么办!!</p>\n<p>亦或者有时候看到一些菜鸟,心血来潮想”指点江山”,怎么破!</p>\n<p>这时候就需要这个闻名已久的软件了;</p>\n<p><a href=\"https://www.teamviewer.com/zhCN/\">teamviewer</a>: 全平台的远程会议或协助软件,非商用免费!!!!!!(你懂的)</p>\n<p><code>mac</code>与<code>mac</code>之间可以通过内置的远程控制来协助</p>\n<h3 id=\"姿势10-让-MAC-更像-GNU-命令行更加丰富\"><a href=\"#姿势10-让-MAC-更像-GNU-命令行更加丰富\" class=\"headerlink\" title=\"姿势10: 让 MAC 更像 GNU ,命令行更加丰富\"></a>姿势10: 让 MAC 更像 GNU ,命令行更加丰富</h3><blockquote>\n<p>Coreutils - GNU core utilities</p>\n<p>The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.</p>\n<p>These are the core utilities which are expected to exist on every operating system.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install coreutils</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"姿势11-exa-更现代化的ls命令-用Rust写的\"><a href=\"#姿势11-exa-更现代化的ls命令-用Rust写的\" class=\"headerlink\" title=\"姿势11: exa:更现代化的ls命令,用Rust写的`\"></a>姿势11: <code>exa</code>:更现代化的<code>ls</code>命令,用<code>Rust</code>写的`</h3><blockquote>\n<p>A modern version of ‘ls’. <a href=\"https://the.exa.website/\">https://the.exa.website/</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install exa</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"姿势12-免费好用的系统维护工具\"><a href=\"#姿势12-免费好用的系统维护工具\" class=\"headerlink\" title=\"姿势12: 免费好用的系统维护工具\"></a>姿势12: 免费好用的系统维护工具</h3><blockquote>\n<p>很多人去找什么<code>clean</code>的付费版,其实国内的鹅厂还是挺良心的</p>\n</blockquote>\n<p>-<a href=\"https://mac.gj.qq.com/\">Tencent Lemon Cleaner</a> : 监控和清除垃圾,省了两个<code>app</code>的钱</p>\n<h2 id=\"软件推荐\"><a href=\"#软件推荐\" class=\"headerlink\" title=\"软件推荐\"></a>软件推荐</h2><blockquote>\n<p>可以用 <code>brew cask</code> 用 <code>#</code> , 付费用 <code>$</code> 表示 , 免费则没有任何符号, <code>$$</code>代表付费服务</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/agalwood/Motrix\">motrix</a> : 全平台的下载工具,底层用的<code>aria</code>,速度贼快</li>\n<li><a href=\"https://github.com/newmarcel/KeepingYouAwake\">KeepingYouAwake</a>: 很赞的一个小工具,让你的本本不被睡眠(时间可控)</li>\n<li><a href=\"https://code.visualstudio.com/Download\">VS Code - #</a>: 非常棒的代码编辑器</li>\n<li><a href=\"https://mindnode.com/\">MindNode2 - $</a>: 思维导图软件,很简洁,官方计划年末升级到5</li>\n<li><a href=\"https://www.vmware.com/products/fusion/fusion-evaluation.html\">VMware Fusion- $/#</a>: 非常好用的虚拟机软件</li>\n<li><a href=\"https://filezilla-project.org/\">FileZilla - #</a>: 开源免费好用的 FTP 软件(全平台)</li>\n<li><a href=\"https://dbeaver.io/download/\">DBeaver -$/#</a> : 非常实用的GUI数据库管理,支持多种数据库</li>\n<li><a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox - #</a> : 开源全平台的虚拟机</li>\n<li><a href=\"https://www.techsmith.com/video-editor.html\">Camtasia - $</a>: 知名的屏幕录制工具,用来做视频教程妥妥的</li>\n<li><a href=\"http://magnet.crowdcafe.com/\">Magnet - $</a>:窗口快速排版工具</li>\n<li><a href=\"https://eagle.cool/macOS\">eagle - $</a>: 设计师必备,素材管理工具,很强大</li>\n<li><a href=\"https://www.navicat.com/en/download/navicat-premium\">Navicat permium - $</a>: 全平台的多数据库管理工具(很强大)</li>\n<li><a href=\"https://www.sourcetreeapp.com/\">SourceTree</a>: 全平台的 GUI git 管理客户端</li>\n<li><a href=\"https://zhitu.isux.us/\">智图</a> : 腾讯出品的图片压缩平台,有客户端!!</li>\n<li><a href=\"https://robomongo.org/\">Robo 3T</a>: MongoDB数据库的本地管理工具</li>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\">微信开发者工具</a>:基于<code>nw.js</code> 的,但是只打包了 win 和 mac 端!!不解</li>\n<li><a href=\"https://trello.com/\">Trello - #/$$</a> : 办公协助软件,用过都说好..我单纯用来做个人列表清单规划(个人免费),有客户端</li>\n<li><a href=\"https://www.drcleaner.com/dr-unarchiver/\">Dr.Unarchive</a>: 解压缩软件,类似 win 上的好压,就是不知道有没有后x(appstore 有)</li>\n<li><a href=\"https://www.wiz.cn/\">wiznote - $$</a>:全平台的笔记软件,十多年的国产老牌..值得信赖</li>\n<li><a href=\"https://calibre-ebook.com/\">Calibre - #</a>: 很强大的图书管理(全平台),可以用来建立一个本地图书库</li>\n<li>[Gifox](<a href=\"https://gifox.io/\">https://gifox.io/</a> - $): 很喜欢这个 GIF 录制工具,小巧美观,也很便宜</li>\n<li><a href=\"https://kapeli.com/dash\">Dash - $$</a> : 很全面的手册汇总</li>\n<li><a href=\"https://www.charlesproxy.com/\">charles - $$</a> : http 的抓包分析</li>\n</ul>\n<p>对于<strong>PS 全家桶</strong>和<strong>ms office 全家桶</strong>这些就看人下载了.网上也有和谐的姿势(你懂的!)</p>\n<p>像<strong>QQ,优酷,腾讯视频,有道词典,QQ音乐,网易云音乐</strong>这些,</p>\n<p>在<code>App store</code>也有(部分应用可以直接<code>brew cask</code>),</p>\n<p>但是啊,这里的版本可能不如他们推送的快.还有会有部分的功能限制(商店的限制比较多).</p>\n<p>官网自家提供的有些需要用到<strong>管理员</strong>特权或者一些系统级的服务!!!</p>\n<p><strong>macos 也可以编译安装一些软件的</strong>!!!!</p>\n<p><strong>Q: 也有可能想说 <code>markdown</code>这些的工具呢?</strong></p>\n<p><code>VSCode</code> 或者 <code>Atom</code>结合插件来写 markdown 我感觉已经很不错了,</p>\n<p>可以做到各种高亮,快捷键补全,导出 PDF 等.</p>\n<p>有人说我喜欢做事有安排!有没有清单类的应用!有挺多的,但是感觉毫无卵用.</p>\n<p>内置的待办事项(适合当天)+邮件里面的日程安排(重复,未来,整天的行程安排)已经完美了..</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>哦,对了,有人可能也想知道 <code>Linux</code>或者 <code>unix</code> 的命令能不能直接在 <code>macos</code> 使用;</p>\n<p>早期的 mac 是基于 bsd 搞的,所以有一定的 unix 血统…</p>\n<p>虽有部分命令相同,但是还有一些参数上的差异.</p>\n<p>还有一些需要额外去安装,比如 <code>wget</code>,<code>htop</code>这些</p>\n<p>双方都有的命令(<code>mv</code>,<code>cp</code>,<code>history</code>,<code>file</code>,<code>more</code>….)这些,</p>\n<p>功能大同小异(更多的是参数上的区别!!!)</p>\n<p>软件不在多,够用就好…</p>\n<p>有一些比较敏感的就不推荐了(世界那么大,你不想看看!知识怎么学习的快!)</p>\n<p>倘若盲目的去找工具,装那么一大坨很少用或者基本不会用到.纯属浪费生命和电脑磁盘空间</p>\n<p>软件推荐：</p>\n<p>git-fork</p>\n<p>命令推荐：</p>\n<p>kafkacat</p>\n<p>安装命令</p>\n<p><code>brew install kafkacat</code></p>\n<h1 id=\"查看过滤出来的文件\"><a href=\"#查看过滤出来的文件\" class=\"headerlink\" title=\"查看过滤出来的文件\"></a>查看过滤出来的文件</h1><p>$ find . -name ‘.DS_Store’</p>\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><p>$ find . -name ‘.DS_Store’ -type f -exec rm -f {} ;</p>\n<h1 id=\"再次检查\"><a href=\"#再次检查\" class=\"headerlink\" title=\"再次检查\"></a>再次检查</h1><p>$ find . -name ‘.DS_Store’</p>\n<p>maven 4个线程执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -T 4 clean install</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"必要姿势-允许安装任何来源程序\"><a href=\"#必要姿势-允许安装任何来源程序\" class=\"headerlink\" title=\"必要姿势: 允许安装任何来源程序\"></a>必要姿势: 允许安装任何来源程序</h3><p>打开终端 -&gt; <code>sudo spctl --master-disable</code> . 滴滴答答,输入你的管理员密码就解开了</p>\n<p>当提示资源已损坏，请移入回收站，请用以下方式</p>\n<p><strong><code>运行“终端”，然后复制这段代码“- [ ] sudo xattr -r -d com.apple.quarantine”，然后上“访达”找到“应用程序”里有问题的那个软件，把它拖到“终端”这段代码的页面，然后输入本机密码（密码不显示，输入完回车就可以），接下来就是见证奇迹的时刻了~</code></strong></p>\n<h2 id=\"工作流-花样姿势\"><a href=\"#工作流-花样姿势\" class=\"headerlink\" title=\"工作流(花样姿势)\"></a>工作流(花样姿势)</h2>","more":"<blockquote>\n<p>有了基础的包管理和服务管理,我们才能耍的更好</p>\n</blockquote>\n<h3 id=\"必要姿势-允许安装任何来源程序-1\"><a href=\"#必要姿势-允许安装任何来源程序-1\" class=\"headerlink\" title=\"必要姿势: 允许安装任何来源程序\"></a>必要姿势: 允许安装任何来源程序</h3><p>在 macos 10.12+开始,这个允许安装任何来源的应用功能就给安全机制(官方说为了安全,你信么!!)给屏蔽了…</p>\n<p>但是有木有法子解开呢…我列出来肯定有了啦..姿势如下!</p>\n<p>打开终端 -&gt; <code>sudo spctl --master-disable</code> . 滴滴答答,输入你的管理员密码就解开了</p>\n<h3 id=\"姿势1-快速预览\"><a href=\"#姿势1-快速预览\" class=\"headerlink\" title=\"姿势1: 快速预览\"></a>姿势1: 快速预览</h3><p>快速预览是 Macos内置的一个功能,就是你选中一个文件的时候,直接空格键(<code>space</code>)可以看到一些信息.</p>\n<p>比如图片,文档!</p>\n<p>但是内置的往往不够强大..万能的基友的社区就有人做了这么些插件来丰富快速预览;</p>\n<p>传送门: <a href=\"https://github.com/sindresorhus/quick-look-plugins\">quick-look-plugins</a>;</p>\n<p>装了这个可预览的功能起码丰富了一倍不止. 代码高亮,Markdown生成预览,excel,zip 包等等…</p>\n<h3 id=\"姿势2-终端强化\"><a href=\"#姿势2-终端强化\" class=\"headerlink\" title=\"姿势2: 终端强化\"></a>姿势2: 终端强化</h3><p>内置的<code>terminal</code>说实在的,真不够友好…所以社区就造就了一个<code>iterm2</code></p>\n<p>传送门 :<a href=\"https://www.iterm2.com/\"> iterm2 : 提供了多套内置主题,可定制的东西多了</a>.</p>\n<p>你觉得我在推崇这个? 不不不,作为一个伪前端,有什么比用前端搞的终端更来的贴心….</p>\n<p>这个,大佬们我推崇的是这个,看下面</p>\n<p>传送门:<a href=\"https://hyper.is/\"><strong>Hyper</strong>: 基于 electron搞得,高度自定义,配置就是一个 js(热更新),插件都是 npm 包,各种花样 style</a></p>\n<p>1.x系列还有一些中文输入的 bug ,但是2.x 简直好用!!可以花时间去折腾下.用过都说好!</p>\n<p><strong>好吧,丰富的定制化只是外在的..那么内在呢?</strong> </p>\n<p>我推崇的是这个(<code>ZSH</code>),有人说 <code>fishshell</code>!萝卜青菜各有所爱哈!</p>\n<p>传送门: <a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a>;</p>\n<p><strong>zsh推荐启用的几个插件(没有的都可以用 brew 安装)</strong>:<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\"><strong>插件列表及介绍</strong></a></p>\n<p>打开<code>.zshrc</code>,找到 plugins 启用,名字就是插件,插件之间空格隔开</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#必备的两个插件</span><br><span class=\"line\">brew install zsh-autosuggestions</span><br><span class=\"line\">brew install zsh-completions</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(git autojump node npm brew osx extract redis-cli autopep8 history last-working-dir</span><br><span class=\"line\"></span><br><span class=\"line\"> pip python sudo web-search)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>前几个属于必备的:</p>\n<ol>\n<li>git : 提供了丰富的 git <code>alias</code></li>\n<li>autojump : 还在一直 <code>cd xxx</code>? 只要访问过的(会索引缓存路径),一键直达:<code>j(autojump) xxx</code></li>\n<li>node : 打开 node api 文档</li>\n<li>npm : npm 智能提示</li>\n<li>brew: brew 的智能提示和补全</li>\n</ol>\n<p>后面一些看着装了.有 python 和 redis,也有访问目录的,也有直接打开搜索引擎的</p>\n<h3 id=\"姿势3-你喜欢-vim\"><a href=\"#姿势3-你喜欢-vim\" class=\"headerlink\" title=\"姿势3: 你喜欢 vim?\"></a>姿势3: 你喜欢 vim?</h3><p>但又发现去配置一个成型的 vim 工作量太大,找各种各样的插件…</p>\n<p>那么你可以试试这个…基于 <code>neovim(自命是 vim 与时俱进的继承者)</code> 基础上的傻瓜包</p>\n<p>传送门: <a href=\"https://github.com/SpaceVim/SpaceVim\">spacevim : 社区驱动的 vim 工作环境</a></p>\n<h3 id=\"姿势4-Alfred\"><a href=\"#姿势4-Alfred\" class=\"headerlink\" title=\"姿势4: Alfred\"></a>姿势4: Alfred</h3><blockquote>\n<p>肯定会有人说系统内置的<code>Spotlight</code>不够用么? 能索引快速跳转的地方也很多</p>\n</blockquote>\n<p>但是Alfred 的强大不仅仅文件的索引…而是可拓展性<code>workflows</code>;</p>\n<p>传送门:<a href=\"https://www.alfredapp.com/workflows/\">workflows</a>;</p>\n<p>这货让<code>Alfred</code>的使用效率大大的提高;</p>\n<p>这里我就推荐几个;</p>\n<ul>\n<li>Dash : 快速索引跳转到 dash 手册的</li>\n<li>CalireSearch : 索引 calibre 里面的书籍进行跳转</li>\n<li>Github repos : 快速跳转到自己的一些 github 仓(需要配置 token)</li>\n<li>NpmSearch : 快速搜索 npmjs.org 上的某个包,直接浏览器打开</li>\n<li>StackOverflow: .so + question 筛选出问题列表,浏览器打开</li>\n<li>Colors: 颜色处理</li>\n</ul>\n<p>之前掘金还有人写了个搜索知乎的… 你动手能力够强也可以自己写一个工作流.</p>\n<h3 id=\"姿势5-编辑器-IDE\"><a href=\"#姿势5-编辑器-IDE\" class=\"headerlink\" title=\"姿势5: 编辑器?IDE?\"></a>姿势5: 编辑器?IDE?</h3><ul>\n<li>首推:<a href=\"https://code.visualstudio.com/download\"><code>VSCode</code>(开源免费)</a> : 非常强大的编辑器</li>\n<li>其次<a href=\"https://www.sublimetext.com/\"><code>Sublime Text 3</code>(付费,但可免费使用)</a> 或者 <a href=\"https://atom.io/\"><code>Atom</code>(开源免费)</a></li>\n<li>最后<a href=\"https://www.jetbrains.com/webstorm/download/#section=mac\"><code>Webstorm</code>(付费)</a></li>\n</ul>\n<p>若是兼顾混合开发,<strong>安卓开发</strong>首选<code>Android Studio</code>, <strong>IOS开发</strong>首选<code>XCode</code>。</p>\n<p>具体可以参考<a href=\"https://flutter.io/docs/get-started/install/macos\">Flutter for MacOS</a></p>\n<h3 id=\"姿势6-想看个本地视频-有什么播放器推荐\"><a href=\"#姿势6-想看个本地视频-有什么播放器推荐\" class=\"headerlink\" title=\"姿势6: 想看个本地视频,有什么播放器推荐!\"></a>姿势6: 想看个本地视频,有什么播放器推荐!</h3><p>足够强大,格式也丰富,功能比 <code>appstore</code> 一些付费的还多,除了稳定性还有待完善,其他完美了</p>\n<p>传送门: <a href=\"https://github.com/lhc70000/iina\">IINA</a> , 可以用<code>brew cask</code>安装<code>brew cask install iina</code></p>\n<h3 id=\"姿势7-修改-hosts\"><a href=\"#姿势7-修改-hosts\" class=\"headerlink\" title=\"姿势7: 修改 hosts?\"></a>姿势7: 修改 hosts?</h3><p>会命令行的直接粗暴;</p>\n<ul>\n<li><code>sudo vim /etc/hosts</code> : 然后保存就行</li>\n</ul>\n<p>那么有木有可视化工具管理!!有的..</p>\n<p>传送门:<a href=\"https://github.com/oldj/SwitchHosts\">SwitchHosts</a></p>\n<h3 id=\"姿势8-快捷键有点多-有没有方便记忆的工具\"><a href=\"#姿势8-快捷键有点多-有没有方便记忆的工具\" class=\"headerlink\" title=\"姿势8: 快捷键有点多,有没有方便记忆的工具\"></a>姿势8: 快捷键有点多,有没有方便记忆的工具</h3><p>有的,<a href=\"https://www.mediaatelier.com/CheatSheet/\"><strong>CheatSheet</strong></a>: 长按 Command 键即可调出应用程序的部分快捷键表(为什么是局部!因为有些 APP 的快捷键它读取不到)</p>\n<h3 id=\"姿势9-如何远程控制协助-Mac-QQ-木有这功能\"><a href=\"#姿势9-如何远程控制协助-Mac-QQ-木有这功能\" class=\"headerlink\" title=\"姿势9: 如何远程控制协助!Mac QQ 木有这功能!\"></a>姿势9: 如何远程控制协助!Mac QQ 木有这功能!</h3><p>有时候遇到困难要抱好心大佬的大腿,怎么办!!</p>\n<p>亦或者有时候看到一些菜鸟,心血来潮想”指点江山”,怎么破!</p>\n<p>这时候就需要这个闻名已久的软件了;</p>\n<p><a href=\"https://www.teamviewer.com/zhCN/\">teamviewer</a>: 全平台的远程会议或协助软件,非商用免费!!!!!!(你懂的)</p>\n<p><code>mac</code>与<code>mac</code>之间可以通过内置的远程控制来协助</p>\n<h3 id=\"姿势10-让-MAC-更像-GNU-命令行更加丰富\"><a href=\"#姿势10-让-MAC-更像-GNU-命令行更加丰富\" class=\"headerlink\" title=\"姿势10: 让 MAC 更像 GNU ,命令行更加丰富\"></a>姿势10: 让 MAC 更像 GNU ,命令行更加丰富</h3><blockquote>\n<p>Coreutils - GNU core utilities</p>\n<p>The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.</p>\n<p>These are the core utilities which are expected to exist on every operating system.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install coreutils</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"姿势11-exa-更现代化的ls命令-用Rust写的\"><a href=\"#姿势11-exa-更现代化的ls命令-用Rust写的\" class=\"headerlink\" title=\"姿势11: exa:更现代化的ls命令,用Rust写的`\"></a>姿势11: <code>exa</code>:更现代化的<code>ls</code>命令,用<code>Rust</code>写的`</h3><blockquote>\n<p>A modern version of ‘ls’. <a href=\"https://the.exa.website/\">https://the.exa.website/</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install exa</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"姿势12-免费好用的系统维护工具\"><a href=\"#姿势12-免费好用的系统维护工具\" class=\"headerlink\" title=\"姿势12: 免费好用的系统维护工具\"></a>姿势12: 免费好用的系统维护工具</h3><blockquote>\n<p>很多人去找什么<code>clean</code>的付费版,其实国内的鹅厂还是挺良心的</p>\n</blockquote>\n<p>-<a href=\"https://mac.gj.qq.com/\">Tencent Lemon Cleaner</a> : 监控和清除垃圾,省了两个<code>app</code>的钱</p>\n<h2 id=\"软件推荐\"><a href=\"#软件推荐\" class=\"headerlink\" title=\"软件推荐\"></a>软件推荐</h2><blockquote>\n<p>可以用 <code>brew cask</code> 用 <code>#</code> , 付费用 <code>$</code> 表示 , 免费则没有任何符号, <code>$$</code>代表付费服务</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/agalwood/Motrix\">motrix</a> : 全平台的下载工具,底层用的<code>aria</code>,速度贼快</li>\n<li><a href=\"https://github.com/newmarcel/KeepingYouAwake\">KeepingYouAwake</a>: 很赞的一个小工具,让你的本本不被睡眠(时间可控)</li>\n<li><a href=\"https://code.visualstudio.com/Download\">VS Code - #</a>: 非常棒的代码编辑器</li>\n<li><a href=\"https://mindnode.com/\">MindNode2 - $</a>: 思维导图软件,很简洁,官方计划年末升级到5</li>\n<li><a href=\"https://www.vmware.com/products/fusion/fusion-evaluation.html\">VMware Fusion- $/#</a>: 非常好用的虚拟机软件</li>\n<li><a href=\"https://filezilla-project.org/\">FileZilla - #</a>: 开源免费好用的 FTP 软件(全平台)</li>\n<li><a href=\"https://dbeaver.io/download/\">DBeaver -$/#</a> : 非常实用的GUI数据库管理,支持多种数据库</li>\n<li><a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox - #</a> : 开源全平台的虚拟机</li>\n<li><a href=\"https://www.techsmith.com/video-editor.html\">Camtasia - $</a>: 知名的屏幕录制工具,用来做视频教程妥妥的</li>\n<li><a href=\"http://magnet.crowdcafe.com/\">Magnet - $</a>:窗口快速排版工具</li>\n<li><a href=\"https://eagle.cool/macOS\">eagle - $</a>: 设计师必备,素材管理工具,很强大</li>\n<li><a href=\"https://www.navicat.com/en/download/navicat-premium\">Navicat permium - $</a>: 全平台的多数据库管理工具(很强大)</li>\n<li><a href=\"https://www.sourcetreeapp.com/\">SourceTree</a>: 全平台的 GUI git 管理客户端</li>\n<li><a href=\"https://zhitu.isux.us/\">智图</a> : 腾讯出品的图片压缩平台,有客户端!!</li>\n<li><a href=\"https://robomongo.org/\">Robo 3T</a>: MongoDB数据库的本地管理工具</li>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\">微信开发者工具</a>:基于<code>nw.js</code> 的,但是只打包了 win 和 mac 端!!不解</li>\n<li><a href=\"https://trello.com/\">Trello - #/$$</a> : 办公协助软件,用过都说好..我单纯用来做个人列表清单规划(个人免费),有客户端</li>\n<li><a href=\"https://www.drcleaner.com/dr-unarchiver/\">Dr.Unarchive</a>: 解压缩软件,类似 win 上的好压,就是不知道有没有后x(appstore 有)</li>\n<li><a href=\"https://www.wiz.cn/\">wiznote - $$</a>:全平台的笔记软件,十多年的国产老牌..值得信赖</li>\n<li><a href=\"https://calibre-ebook.com/\">Calibre - #</a>: 很强大的图书管理(全平台),可以用来建立一个本地图书库</li>\n<li>[Gifox](<a href=\"https://gifox.io/\">https://gifox.io/</a> - $): 很喜欢这个 GIF 录制工具,小巧美观,也很便宜</li>\n<li><a href=\"https://kapeli.com/dash\">Dash - $$</a> : 很全面的手册汇总</li>\n<li><a href=\"https://www.charlesproxy.com/\">charles - $$</a> : http 的抓包分析</li>\n</ul>\n<p>对于<strong>PS 全家桶</strong>和<strong>ms office 全家桶</strong>这些就看人下载了.网上也有和谐的姿势(你懂的!)</p>\n<p>像<strong>QQ,优酷,腾讯视频,有道词典,QQ音乐,网易云音乐</strong>这些,</p>\n<p>在<code>App store</code>也有(部分应用可以直接<code>brew cask</code>),</p>\n<p>但是啊,这里的版本可能不如他们推送的快.还有会有部分的功能限制(商店的限制比较多).</p>\n<p>官网自家提供的有些需要用到<strong>管理员</strong>特权或者一些系统级的服务!!!</p>\n<p><strong>macos 也可以编译安装一些软件的</strong>!!!!</p>\n<p><strong>Q: 也有可能想说 <code>markdown</code>这些的工具呢?</strong></p>\n<p><code>VSCode</code> 或者 <code>Atom</code>结合插件来写 markdown 我感觉已经很不错了,</p>\n<p>可以做到各种高亮,快捷键补全,导出 PDF 等.</p>\n<p>有人说我喜欢做事有安排!有没有清单类的应用!有挺多的,但是感觉毫无卵用.</p>\n<p>内置的待办事项(适合当天)+邮件里面的日程安排(重复,未来,整天的行程安排)已经完美了..</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>哦,对了,有人可能也想知道 <code>Linux</code>或者 <code>unix</code> 的命令能不能直接在 <code>macos</code> 使用;</p>\n<p>早期的 mac 是基于 bsd 搞的,所以有一定的 unix 血统…</p>\n<p>虽有部分命令相同,但是还有一些参数上的差异.</p>\n<p>还有一些需要额外去安装,比如 <code>wget</code>,<code>htop</code>这些</p>\n<p>双方都有的命令(<code>mv</code>,<code>cp</code>,<code>history</code>,<code>file</code>,<code>more</code>….)这些,</p>\n<p>功能大同小异(更多的是参数上的区别!!!)</p>\n<p>软件不在多,够用就好…</p>\n<p>有一些比较敏感的就不推荐了(世界那么大,你不想看看!知识怎么学习的快!)</p>\n<p>倘若盲目的去找工具,装那么一大坨很少用或者基本不会用到.纯属浪费生命和电脑磁盘空间</p>\n<p>软件推荐：</p>\n<p>git-fork</p>\n<p>命令推荐：</p>\n<p>kafkacat</p>\n<p>安装命令</p>\n<p><code>brew install kafkacat</code></p>\n<h1 id=\"查看过滤出来的文件\"><a href=\"#查看过滤出来的文件\" class=\"headerlink\" title=\"查看过滤出来的文件\"></a>查看过滤出来的文件</h1><p>$ find . -name ‘.DS_Store’</p>\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><p>$ find . -name ‘.DS_Store’ -type f -exec rm -f {} ;</p>\n<h1 id=\"再次检查\"><a href=\"#再次检查\" class=\"headerlink\" title=\"再次检查\"></a>再次检查</h1><p>$ find . -name ‘.DS_Store’</p>\n<p>maven 4个线程执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -T 4 clean install</span><br></pre></td></tr></table></figure>"},{"title":"nginx设置","date":"2021-04-29T02:45:53.000Z","_content":"\nnginx相关命令\n\n `nginx -s reload`\n\nnginx安装\n<!-- more -->\n","source":"_posts/nginx设置.md","raw":"---\ntitle: nginx设置\ndate: 2021-04-29 10:45:53\ntags:\n---\n\nnginx相关命令\n\n `nginx -s reload`\n\nnginx安装\n<!-- more -->\n","slug":"nginx设置","published":1,"updated":"2021-07-22T07:00:47.445Z","_id":"ckpp6ut5c0008dgv9drxn3g2j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>nginx相关命令</p>\n<p> <code>nginx -s reload</code></p>\n<p>nginx安装</p>\n<span id=\"more\"></span>\n","site":{"data":{}},"excerpt":"<p>nginx相关命令</p>\n<p> <code>nginx -s reload</code></p>\n<p>nginx安装</p>","more":""},{"title":"/usr/libexec/java_home奇葩境遇","date":"2021-05-10T09:36:05.000Z","_content":"\njava_home是oracle的java安装包带进来的，最好不用他安装程序，对系统破坏性极大，还不能删除掉。\n\n后面只能再次安装oracle 的java的安装包\n<!-- more -->\n该程序会造成java JAVA_HOME无效。","source":"_posts/usr-libexec-java-home奇葩境遇.md","raw":"---\ntitle: /usr/libexec/java_home奇葩境遇\ndate: 2021-05-10 17:36:05\ntags:\n---\n\njava_home是oracle的java安装包带进来的，最好不用他安装程序，对系统破坏性极大，还不能删除掉。\n\n后面只能再次安装oracle 的java的安装包\n<!-- more -->\n该程序会造成java JAVA_HOME无效。","slug":"usr-libexec-java-home奇葩境遇","published":1,"updated":"2021-07-22T07:01:07.794Z","_id":"ckpp6ut5c0009dgv9c6diha3x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>java_home是oracle的java安装包带进来的，最好不用他安装程序，对系统破坏性极大，还不能删除掉。</p>\n<p>后面只能再次安装oracle 的java的安装包</p>\n<span id=\"more\"></span>\n<p>该程序会造成java JAVA_HOME无效。</p>\n","site":{"data":{}},"excerpt":"<p>java_home是oracle的java安装包带进来的，最好不用他安装程序，对系统破坏性极大，还不能删除掉。</p>\n<p>后面只能再次安装oracle 的java的安装包</p>","more":"<p>该程序会造成java JAVA_HOME无效。</p>"},{"title":"webp图片踩坑","date":"2021-05-07T17:50:02.000Z","_content":"\n通过这个命令解决vendor报错\n< !--more-->\n`node node_modules/cwebp-bin/lib/install.js`\n\n![](../images/image-20210507231725024.png)\n\n<!-- more -->","source":"_posts/webp图片踩坑.md","raw":"---\ntitle: webp图片踩坑\ndate: 2021-05-08 01:50:02\ntags:\n---\n\n通过这个命令解决vendor报错\n< !--more-->\n`node node_modules/cwebp-bin/lib/install.js`\n\n![](../images/image-20210507231725024.png)\n\n<!-- more -->","slug":"webp图片踩坑","published":1,"updated":"2021-07-22T07:01:11.042Z","_id":"ckpp6ut5d000adgv9hzmcb4g5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>通过这个命令解决vendor报错<br>&lt; !–more–&gt;<br><code>node node_modules/cwebp-bin/lib/install.js</code></p>\n<p><img src=\"../images/image-20210507231725024.png\"></p>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p>通过这个命令解决vendor报错<br>&lt; !–more–&gt;<br><code>node node_modules/cwebp-bin/lib/install.js</code></p>\n<p><img src=\"../images/image-20210507231725024.png\"></p>","more":""},{"title":"利用 GitHub Action 自动发布 Docker","date":"2021-05-08T08:45:54.000Z","_content":"\n[![](https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg)](https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg)\n\n# [](#前言 \"前言\")前言\n\n最近公司内部项目的发布流程接入了 `GitHub Actions`，整个体验过程还是比较美好的；本文主要目的是对于没有还接触过 `GitHub Actions`的新手，能够利用它快速构建自动测试及打包推送 `Docker` 镜像等自动化流程。\n\n# [](#创建项目 \"创建项目\")创建项目\n<!-- more -->\n本文主要以 `Go` 语言为例，当然其他语言也是类似的，与语言本身关系不大。\n\n这里我们首先在 `GitHub` 上创建一个项目，编写了几段简单的代码 `main.go`：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"string\">\"0.0.1\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetVersion</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> version</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</div><div class=\"line\">\tfmt.Println(GetVersion())</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n内容非常简单，只是打印了了版本号；同时配套了一个单元测试 `main_test.go`：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetVersion1</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">\ttests := []<span class=\"keyword\">struct</span> {</div><div class=\"line\">\t\tname <span class=\"keyword\">string</span></div><div class=\"line\">\t\twant <span class=\"keyword\">string</span></div><div class=\"line\">\t}{</div><div class=\"line\">\t\t{name: <span class=\"string\">\"test1\"</span>, want: <span class=\"string\">\"0.0.1\"</span>},</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests {</div><div class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := GetVersion(); got != tt.want {</div><div class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"GetVersion() = %v, want %v\"</span>, got, tt.want)</div><div class=\"line\">\t\t\t}</div><div class=\"line\">\t\t})</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n我们可以执行 `go test` 运行该单元测试。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go <span class=\"built_in\">test</span>                          </div><div class=\"line\">PASS</div><div class=\"line\">ok      <a class=\"vglnk\" href=\"http://github.com/crossoverJie/go-docker\" rel=\"nofollow\"><span>github</span><span>.</span><span>com</span><span>/</span><span>crossoverJie</span><span>/</span><span>go</span><span>-</span><span>docker</span></a>       1.729s</div></pre></td></tr></tbody></table>\n\n## [](#自动测试 \"自动测试\")自动测试\n\n当然以上流程完全可以利用 `Actions` 自动化搞定。\n\n首选我们需要在项目根路径创建一个 _\\`.github/workflows/_.yml\\`\\* 的配置文件，新增如下内容：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">name:</span> go-docker</div><div class=\"line\"><span class=\"attr\">on:</span> push</div><div class=\"line\"><span class=\"attr\">jobs:</span></div><div class=\"line\"><span class=\"attr\">  test:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    if:</span> github.ref == <span class=\"string\">'refs/heads/main'</span> || startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - uses:</span> actions/checkout@v2</div><div class=\"line\"><span class=\"attr\">      - name:</span> Run Unit Tests</div><div class=\"line\"><span class=\"attr\">        run:</span> go test</div></pre></td></tr></tbody></table>\n\n简单解释下：\n\n* `name` 不必多说，是为当前工作流创建一个名词。\n* `on` 指在什么事件下触发，这里指代码发生 `push` 时触发，更多事件定义可以参考官方文档：\n\n[Events that trigger workflows](https://docs.github.com/en/actions/reference/events-that-trigger-workflows)\n\n* `jobs` 则是定义任务，这里只有一个名为 `test` 的任务。\n\n该任务是运行在 `ubuntu-latest` 的环境下，只有在 `main` 分支有推送或是有 `tag` 推送时运行。\n\n运行时会使用 `actions/checkout@v2` 这个由他人封装好的 `Action`，当然这里使用的是由官方提供的拉取代码 `Action`。\n\n* 基于这个逻辑，我们可以灵活的分享和使用他人的 `Action` 来简化流程，这点也是 `GitHub Action`扩展性非常强的地方。\n\n最后的 `run` 则是运行自己命令，这里自然就是触发单元测试了。\n\n* 如果是 Java 便可改为 `mvn test`.\n\n之后一旦我们在 `main` 分支上推送代码，或者有其他分支的代码合并过来时都会自动运行单元测试，非常方便。\n\n[![](https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg)](https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg)\n\n[![](https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg)](https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg)\n\n与我们本地运行效果一致。\n\n## [](#自动发布 \"自动发布\")自动发布\n\n接下来考虑自动打包 `Docker` 镜像，同时上传到 `Docker Hub`；为此首先创建 `Dockerfile` ：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.15</span> AS builder</div><div class=\"line\">ARG VERSION=<span class=\"number\">0.0</span>.<span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /go/src/app</span></div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> main.go .</span></div><div class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go build -o main -ldflags=<span class=\"string\">\"-X 'main.version=<span class=\"variable\">${VERSION}</span>'\"</span> main.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">FROM</span> debian:stable-slim</div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=builder /go/src/app/main /go/bin/main</span></div><div class=\"line\"><span class=\"keyword\">ENV</span> PATH=<span class=\"string\">\"/go/bin:${PATH}\"</span></div><div class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"main\"</span>]</span></div></pre></td></tr></tbody></table>\n\n这里利用 `ldflags` 可在编译期间将一些参数传递进打包程序中，比如打包时间、go 版本、git 版本等。\n\n这里只是将 `VERSION` 传入了 `main.version` 变量中，这样在运行时就便能取到了。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t go-docker:last .</div><div class=\"line\">docker run --rm go-docker:0.0.10</div><div class=\"line\">0.0.10</div></pre></td></tr></tbody></table>\n\n接着继续编写 `docker.yml` 新增自动打包 `Docker` 以及推送到 `docker hub` 中。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    needs:</span> test</div><div class=\"line\"><span class=\"attr\">    if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - name:</span> Extract Version</div><div class=\"line\"><span class=\"attr\">        id:</span> version_step</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo \"##[set-output name=version;]VERSION=${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up QEMU</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-qemu-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up Docker Buildx</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-buildx-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Login to DockerHub</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/login-action@v1</div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          username:</span> ${{ secrets.DOCKER_USER_NAME }}</div><div class=\"line\"><span class=\"attr\">          password:</span> ${{ secrets.DOCKER_ACCESS_TOKEN }}</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> PrepareReg Names</div><div class=\"line\"><span class=\"attr\">        id:</span> read-docker-image-identifiers</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo VERSION_TAG=$(echo $<span class=\"template-variable\">{{ steps.version_step.outputs.version_tag }}</span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\">          echo LASTEST_TAG=$(echo $<span class=\"template-variable\">{{ steps.version_step.outputs.latest_tag  }}</span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Build and push Docker images</div><div class=\"line\"><span class=\"attr\">        id:</span> docker_build</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/build-push-action@v2<span class=\"number\">.3</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          push:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          tags:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\">{{env.VERSION_TAG}}</span></div><div class=\"line\">            $<span class=\"template-variable\">{{env.LASTEST_TAG}}</span></div><div class=\"line\"><span class=\"attr\">          build-args:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\">{{steps.version_step.outputs.version}}</span></div></pre></td></tr></tbody></table>\n\n新增了一个 `deploy` 的 job。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">needs:</span> test</div><div class=\"line\"><span class=\"attr\">if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div></pre></td></tr></tbody></table>\n\n运行的条件是上一步的单测流程跑通，同时有新的 `tag` 生成时才会触发后续的 `steps`。\n\n`name: Login to DockerHub`\n\n在这一步中我们需要登录到 `DockerHub`，所以首先需要在 GitHub 项目中配置 hub 的 `user_name` 以及 `access_token`.\n\n[![](https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg)](https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg)\n\n[![](https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg)](https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg)\n\n配置好后便能在 action 中使用该变量了。\n\n[![](https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg)](https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg)\n\n这里使用的是由 docker 官方提供的登录 action\\(`docker/login-action`\\)。\n\n有一点要非常注意，我们需要将镜像名称改为小写，不然会上传失败，比如我的名称中 `J` 字母是大写的，直接上传时就会报错。\n\n[![](https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg)](https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg)\n\n所以在上传之前先要执行该步骤转换为小写。\n\n[![](https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg)](https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg)\n\n最后再用这两个变量上传到 Docker Hub。\n\n[![](https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg)](https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg)\n\n今后只要我们打上 `tag` 时，`Action` 就会自动执行单测、构建、上传的流程。\n\n# [](#总结 \"总结\")总结\n\n`GitHub Actions` 非常灵活，你所需要的大部分功能都能在 `marketplace` 找到现成的直接使用，\n\n比如可以利用 `ssh` 登录自己的服务器，执行一些命令或脚本，这样想象空间就很大了。\n\n使用起来就像是搭积木一样，可以很灵活的完成自己的需求。\n\n参考链接：\n\n[How to Build a CI/CD Pipeline with Go, GitHub Actions and Docker](https://tonyuk.medium.com/how-to-build-a-ci-cd-pipeline-with-go-github-actions-and-docker-3c69e50b6043)","source":"_posts/利用-GitHub-Action-自动发布-Docker.md","raw":"---\ntitle: 利用 GitHub Action 自动发布 Docker\ndate: 2021-05-08 16:45:54\ntags:\n---\n\n[![](https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg)](https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg)\n\n# [](#前言 \"前言\")前言\n\n最近公司内部项目的发布流程接入了 `GitHub Actions`，整个体验过程还是比较美好的；本文主要目的是对于没有还接触过 `GitHub Actions`的新手，能够利用它快速构建自动测试及打包推送 `Docker` 镜像等自动化流程。\n\n# [](#创建项目 \"创建项目\")创建项目\n<!-- more -->\n本文主要以 `Go` 语言为例，当然其他语言也是类似的，与语言本身关系不大。\n\n这里我们首先在 `GitHub` 上创建一个项目，编写了几段简单的代码 `main.go`：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"string\">\"0.0.1\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetVersion</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> {</div><div class=\"line\">\t<span class=\"keyword\">return</span> version</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</div><div class=\"line\">\tfmt.Println(GetVersion())</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n内容非常简单，只是打印了了版本号；同时配套了一个单元测试 `main_test.go`：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetVersion1</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">\ttests := []<span class=\"keyword\">struct</span> {</div><div class=\"line\">\t\tname <span class=\"keyword\">string</span></div><div class=\"line\">\t\twant <span class=\"keyword\">string</span></div><div class=\"line\">\t}{</div><div class=\"line\">\t\t{name: <span class=\"string\">\"test1\"</span>, want: <span class=\"string\">\"0.0.1\"</span>},</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests {</div><div class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := GetVersion(); got != tt.want {</div><div class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"GetVersion() = %v, want %v\"</span>, got, tt.want)</div><div class=\"line\">\t\t\t}</div><div class=\"line\">\t\t})</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n我们可以执行 `go test` 运行该单元测试。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go <span class=\"built_in\">test</span>                          </div><div class=\"line\">PASS</div><div class=\"line\">ok      <a class=\"vglnk\" href=\"http://github.com/crossoverJie/go-docker\" rel=\"nofollow\"><span>github</span><span>.</span><span>com</span><span>/</span><span>crossoverJie</span><span>/</span><span>go</span><span>-</span><span>docker</span></a>       1.729s</div></pre></td></tr></tbody></table>\n\n## [](#自动测试 \"自动测试\")自动测试\n\n当然以上流程完全可以利用 `Actions` 自动化搞定。\n\n首选我们需要在项目根路径创建一个 _\\`.github/workflows/_.yml\\`\\* 的配置文件，新增如下内容：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">name:</span> go-docker</div><div class=\"line\"><span class=\"attr\">on:</span> push</div><div class=\"line\"><span class=\"attr\">jobs:</span></div><div class=\"line\"><span class=\"attr\">  test:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    if:</span> github.ref == <span class=\"string\">'refs/heads/main'</span> || startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - uses:</span> actions/checkout@v2</div><div class=\"line\"><span class=\"attr\">      - name:</span> Run Unit Tests</div><div class=\"line\"><span class=\"attr\">        run:</span> go test</div></pre></td></tr></tbody></table>\n\n简单解释下：\n\n* `name` 不必多说，是为当前工作流创建一个名词。\n* `on` 指在什么事件下触发，这里指代码发生 `push` 时触发，更多事件定义可以参考官方文档：\n\n[Events that trigger workflows](https://docs.github.com/en/actions/reference/events-that-trigger-workflows)\n\n* `jobs` 则是定义任务，这里只有一个名为 `test` 的任务。\n\n该任务是运行在 `ubuntu-latest` 的环境下，只有在 `main` 分支有推送或是有 `tag` 推送时运行。\n\n运行时会使用 `actions/checkout@v2` 这个由他人封装好的 `Action`，当然这里使用的是由官方提供的拉取代码 `Action`。\n\n* 基于这个逻辑，我们可以灵活的分享和使用他人的 `Action` 来简化流程，这点也是 `GitHub Action`扩展性非常强的地方。\n\n最后的 `run` 则是运行自己命令，这里自然就是触发单元测试了。\n\n* 如果是 Java 便可改为 `mvn test`.\n\n之后一旦我们在 `main` 分支上推送代码，或者有其他分支的代码合并过来时都会自动运行单元测试，非常方便。\n\n[![](https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg)](https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg)\n\n[![](https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg)](https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg)\n\n与我们本地运行效果一致。\n\n## [](#自动发布 \"自动发布\")自动发布\n\n接下来考虑自动打包 `Docker` 镜像，同时上传到 `Docker Hub`；为此首先创建 `Dockerfile` ：\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.15</span> AS builder</div><div class=\"line\">ARG VERSION=<span class=\"number\">0.0</span>.<span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /go/src/app</span></div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> main.go .</span></div><div class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go build -o main -ldflags=<span class=\"string\">\"-X 'main.version=<span class=\"variable\">${VERSION}</span>'\"</span> main.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">FROM</span> debian:stable-slim</div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=builder /go/src/app/main /go/bin/main</span></div><div class=\"line\"><span class=\"keyword\">ENV</span> PATH=<span class=\"string\">\"/go/bin:${PATH}\"</span></div><div class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"main\"</span>]</span></div></pre></td></tr></tbody></table>\n\n这里利用 `ldflags` 可在编译期间将一些参数传递进打包程序中，比如打包时间、go 版本、git 版本等。\n\n这里只是将 `VERSION` 传入了 `main.version` 变量中，这样在运行时就便能取到了。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t go-docker:last .</div><div class=\"line\">docker run --rm go-docker:0.0.10</div><div class=\"line\">0.0.10</div></pre></td></tr></tbody></table>\n\n接着继续编写 `docker.yml` 新增自动打包 `Docker` 以及推送到 `docker hub` 中。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    needs:</span> test</div><div class=\"line\"><span class=\"attr\">    if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - name:</span> Extract Version</div><div class=\"line\"><span class=\"attr\">        id:</span> version_step</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo \"##[set-output name=version;]VERSION=${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up QEMU</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-qemu-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up Docker Buildx</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-buildx-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Login to DockerHub</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/login-action@v1</div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          username:</span> ${{ secrets.DOCKER_USER_NAME }}</div><div class=\"line\"><span class=\"attr\">          password:</span> ${{ secrets.DOCKER_ACCESS_TOKEN }}</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> PrepareReg Names</div><div class=\"line\"><span class=\"attr\">        id:</span> read-docker-image-identifiers</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo VERSION_TAG=$(echo $<span class=\"template-variable\">{{ steps.version_step.outputs.version_tag }}</span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\">          echo LASTEST_TAG=$(echo $<span class=\"template-variable\">{{ steps.version_step.outputs.latest_tag  }}</span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Build and push Docker images</div><div class=\"line\"><span class=\"attr\">        id:</span> docker_build</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/build-push-action@v2<span class=\"number\">.3</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          push:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          tags:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\">{{env.VERSION_TAG}}</span></div><div class=\"line\">            $<span class=\"template-variable\">{{env.LASTEST_TAG}}</span></div><div class=\"line\"><span class=\"attr\">          build-args:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\">{{steps.version_step.outputs.version}}</span></div></pre></td></tr></tbody></table>\n\n新增了一个 `deploy` 的 job。\n\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">needs:</span> test</div><div class=\"line\"><span class=\"attr\">if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div></pre></td></tr></tbody></table>\n\n运行的条件是上一步的单测流程跑通，同时有新的 `tag` 生成时才会触发后续的 `steps`。\n\n`name: Login to DockerHub`\n\n在这一步中我们需要登录到 `DockerHub`，所以首先需要在 GitHub 项目中配置 hub 的 `user_name` 以及 `access_token`.\n\n[![](https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg)](https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg)\n\n[![](https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg)](https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg)\n\n配置好后便能在 action 中使用该变量了。\n\n[![](https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg)](https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg)\n\n这里使用的是由 docker 官方提供的登录 action\\(`docker/login-action`\\)。\n\n有一点要非常注意，我们需要将镜像名称改为小写，不然会上传失败，比如我的名称中 `J` 字母是大写的，直接上传时就会报错。\n\n[![](https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg)](https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg)\n\n所以在上传之前先要执行该步骤转换为小写。\n\n[![](https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg)](https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg)\n\n最后再用这两个变量上传到 Docker Hub。\n\n[![](https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg)](https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg)\n\n今后只要我们打上 `tag` 时，`Action` 就会自动执行单测、构建、上传的流程。\n\n# [](#总结 \"总结\")总结\n\n`GitHub Actions` 非常灵活，你所需要的大部分功能都能在 `marketplace` 找到现成的直接使用，\n\n比如可以利用 `ssh` 登录自己的服务器，执行一些命令或脚本，这样想象空间就很大了。\n\n使用起来就像是搭积木一样，可以很灵活的完成自己的需求。\n\n参考链接：\n\n[How to Build a CI/CD Pipeline with Go, GitHub Actions and Docker](https://tonyuk.medium.com/how-to-build-a-ci-cd-pipeline-with-go-github-actions-and-docker-3c69e50b6043)","slug":"利用-GitHub-Action-自动发布-Docker","published":1,"updated":"2021-07-22T07:01:16.259Z","_id":"ckpp6ut5e000bdgv9cguze59h","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg\"><img src=\"https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg\"></a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a href=\"#%E5%89%8D%E8%A8%80\" title=\"前言\"></a>前言</h1><p>最近公司内部项目的发布流程接入了 <code>GitHub Actions</code>，整个体验过程还是比较美好的；本文主要目的是对于没有还接触过 <code>GitHub Actions</code>的新手，能够利用它快速构建自动测试及打包推送 <code>Docker</code> 镜像等自动化流程。</p>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a><a href=\"#%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\" title=\"创建项目\"></a>创建项目</h1><span id=\"more\"></span>\n<p>本文主要以 <code>Go</code> 语言为例，当然其他语言也是类似的，与语言本身关系不大。</p>\n<p>这里我们首先在 <code>GitHub</code> 上创建一个项目，编写了几段简单的代码 <code>main.go</code>：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"string\">\"0.0.1\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetVersion</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> version</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</div><div class=\"line\">    fmt.Println(GetVersion())</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n<p>内容非常简单，只是打印了了版本号；同时配套了一个单元测试 <code>main_test.go</code>：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetVersion1</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">    tests := []<span class=\"keyword\">struct</span> {</div><div class=\"line\">        name <span class=\"keyword\">string</span></div><div class=\"line\">        want <span class=\"keyword\">string</span></div><div class=\"line\">    }{</div><div class=\"line\">        {name: <span class=\"string\">\"test1\"</span>, want: <span class=\"string\">\"0.0.1\"</span>},</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests {</div><div class=\"line\">        t.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">            <span class=\"keyword\">if</span> got := GetVersion(); got != tt.want {</div><div class=\"line\">                t.Errorf(<span class=\"string\">\"GetVersion() = %v, want %v\"</span>, got, tt.want)</div><div class=\"line\">            }</div><div class=\"line\">        })</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n<p>我们可以执行 <code>go test</code> 运行该单元测试。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go <span class=\"built_in\">test</span>                          </div><div class=\"line\">PASS</div><div class=\"line\">ok      <a class=\"vglnk\" href=\"http://github.com/crossoverJie/go-docker\" rel=\"nofollow\"><span>github</span><span>.</span><span>com</span><span>/</span><span>crossoverJie</span><span>/</span><span>go</span><span>-</span><span>docker</span></a>       1.729s</div></pre></td></tr></tbody></table>\n\n<h2 id=\"自动测试\"><a href=\"#自动测试\" class=\"headerlink\" title=\"自动测试\"></a><a href=\"#%E8%87%AA%E5%8A%A8%E6%B5%8B%E8%AF%95\" title=\"自动测试\"></a>自动测试</h2><p>当然以上流程完全可以利用 <code>Actions</code> 自动化搞定。</p>\n<p>首选我们需要在项目根路径创建一个 _`.github/workflows/_.yml`* 的配置文件，新增如下内容：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">name:</span> go-docker</div><div class=\"line\"><span class=\"attr\">on:</span> push</div><div class=\"line\"><span class=\"attr\">jobs:</span></div><div class=\"line\"><span class=\"attr\">  test:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    if:</span> github.ref == <span class=\"string\">'refs/heads/main'</span> || startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - uses:</span> actions/checkout@v2</div><div class=\"line\"><span class=\"attr\">      - name:</span> Run Unit Tests</div><div class=\"line\"><span class=\"attr\">        run:</span> go test</div></pre></td></tr></tbody></table>\n\n<p>简单解释下：</p>\n<ul>\n<li><code>name</code> 不必多说，是为当前工作流创建一个名词。</li>\n<li><code>on</code> 指在什么事件下触发，这里指代码发生 <code>push</code> 时触发，更多事件定义可以参考官方文档：</li>\n</ul>\n<p><a href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows\">Events that trigger workflows</a></p>\n<ul>\n<li><code>jobs</code> 则是定义任务，这里只有一个名为 <code>test</code> 的任务。</li>\n</ul>\n<p>该任务是运行在 <code>ubuntu-latest</code> 的环境下，只有在 <code>main</code> 分支有推送或是有 <code>tag</code> 推送时运行。</p>\n<p>运行时会使用 <code>actions/checkout@v2</code> 这个由他人封装好的 <code>Action</code>，当然这里使用的是由官方提供的拉取代码 <code>Action</code>。</p>\n<ul>\n<li>基于这个逻辑，我们可以灵活的分享和使用他人的 <code>Action</code> 来简化流程，这点也是 <code>GitHub Action</code>扩展性非常强的地方。</li>\n</ul>\n<p>最后的 <code>run</code> 则是运行自己命令，这里自然就是触发单元测试了。</p>\n<ul>\n<li>如果是 Java 便可改为 <code>mvn test</code>.</li>\n</ul>\n<p>之后一旦我们在 <code>main</code> 分支上推送代码，或者有其他分支的代码合并过来时都会自动运行单元测试，非常方便。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg\"><img src=\"https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg\"></a></p>\n<p><a href=\"https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg\"><img src=\"https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg\"></a></p>\n<p>与我们本地运行效果一致。</p>\n<h2 id=\"自动发布\"><a href=\"#自动发布\" class=\"headerlink\" title=\"自动发布\"></a><a href=\"#%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83\" title=\"自动发布\"></a>自动发布</h2><p>接下来考虑自动打包 <code>Docker</code> 镜像，同时上传到 <code>Docker Hub</code>；为此首先创建 <code>Dockerfile</code> ：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.15</span> AS builder</div><div class=\"line\">ARG VERSION=<span class=\"number\">0.0</span>.<span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /go/src/app</span></div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> main.go .</span></div><div class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go build -o main -ldflags=<span class=\"string\">\"-X 'main.version=<span class=\"variable\">${VERSION}</span>'\"</span> main.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">FROM</span> debian:stable-slim</div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=builder /go/src/app/main /go/bin/main</span></div><div class=\"line\"><span class=\"keyword\">ENV</span> PATH=<span class=\"string\">\"/go/bin:${PATH}\"</span></div><div class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"main\"</span>]</span></div></pre></td></tr></tbody></table>\n\n<p>这里利用 <code>ldflags</code> 可在编译期间将一些参数传递进打包程序中，比如打包时间、go 版本、git 版本等。</p>\n<p>这里只是将 <code>VERSION</code> 传入了 <code>main.version</code> 变量中，这样在运行时就便能取到了。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t go-docker:last .</div><div class=\"line\">docker run --rm go-docker:0.0.10</div><div class=\"line\">0.0.10</div></pre></td></tr></tbody></table>\n\n<p>接着继续编写 <code>docker.yml</code> 新增自动打包 <code>Docker</code> 以及推送到 <code>docker hub</code> 中。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    needs:</span> test</div><div class=\"line\"><span class=\"attr\">    if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - name:</span> Extract Version</div><div class=\"line\"><span class=\"attr\">        id:</span> version_step</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo \"##[set-output name=version;]VERSION=${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up QEMU</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-qemu-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up Docker Buildx</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-buildx-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Login to DockerHub</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/login-action@v1</div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          username:</span> $</div><div class=\"line\"><span class=\"attr\">          password:</span> $</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> PrepareReg Names</div><div class=\"line\"><span class=\"attr\">        id:</span> read-docker-image-identifiers</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo VERSION_TAG=$(echo $<span class=\"template-variable\"></span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\">          echo LASTEST_TAG=$(echo $<span class=\"template-variable\"></span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Build and push Docker images</div><div class=\"line\"><span class=\"attr\">        id:</span> docker_build</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/build-push-action@v2<span class=\"number\">.3</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          push:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          tags:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div><div class=\"line\"><span class=\"attr\">          build-args:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div></pre></td></tr></tbody></table>\n\n<p>新增了一个 <code>deploy</code> 的 job。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">needs:</span> test</div><div class=\"line\"><span class=\"attr\">if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div></pre></td></tr></tbody></table>\n\n<p>运行的条件是上一步的单测流程跑通，同时有新的 <code>tag</code> 生成时才会触发后续的 <code>steps</code>。</p>\n<p><code>name: Login to DockerHub</code></p>\n<p>在这一步中我们需要登录到 <code>DockerHub</code>，所以首先需要在 GitHub 项目中配置 hub 的 <code>user_name</code> 以及 <code>access_token</code>.</p>\n<p><a href=\"https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg\"><img src=\"https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg\"></a></p>\n<p><a href=\"https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg\"><img src=\"https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg\"></a></p>\n<p>配置好后便能在 action 中使用该变量了。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg\"><img src=\"https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg\"></a></p>\n<p>这里使用的是由 docker 官方提供的登录 action(<code>docker/login-action</code>)。</p>\n<p>有一点要非常注意，我们需要将镜像名称改为小写，不然会上传失败，比如我的名称中 <code>J</code> 字母是大写的，直接上传时就会报错。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg\"><img src=\"https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg\"></a></p>\n<p>所以在上传之前先要执行该步骤转换为小写。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg\"><img src=\"https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg\"></a></p>\n<p>最后再用这两个变量上传到 Docker Hub。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg\"><img src=\"https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg\"></a></p>\n<p>今后只要我们打上 <code>tag</code> 时，<code>Action</code> 就会自动执行单测、构建、上传的流程。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"></a>总结</h1><p><code>GitHub Actions</code> 非常灵活，你所需要的大部分功能都能在 <code>marketplace</code> 找到现成的直接使用，</p>\n<p>比如可以利用 <code>ssh</code> 登录自己的服务器，执行一些命令或脚本，这样想象空间就很大了。</p>\n<p>使用起来就像是搭积木一样，可以很灵活的完成自己的需求。</p>\n<p>参考链接：</p>\n<p><a href=\"https://tonyuk.medium.com/how-to-build-a-ci-cd-pipeline-with-go-github-actions-and-docker-3c69e50b6043\">How to Build a CI/CD Pipeline with Go, GitHub Actions and Docker</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg\"><img src=\"https://i.loli.net/2021/03/26/UIZzdFfNb7exGvE.jpg\"></a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a href=\"#%E5%89%8D%E8%A8%80\" title=\"前言\"></a>前言</h1><p>最近公司内部项目的发布流程接入了 <code>GitHub Actions</code>，整个体验过程还是比较美好的；本文主要目的是对于没有还接触过 <code>GitHub Actions</code>的新手，能够利用它快速构建自动测试及打包推送 <code>Docker</code> 镜像等自动化流程。</p>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a><a href=\"#%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\" title=\"创建项目\"></a>创建项目</h1>","more":"<p>本文主要以 <code>Go</code> 语言为例，当然其他语言也是类似的，与语言本身关系不大。</p>\n<p>这里我们首先在 <code>GitHub</code> 上创建一个项目，编写了几段简单的代码 <code>main.go</code>：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"string\">\"0.0.1\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetVersion</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> version</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</div><div class=\"line\">    fmt.Println(GetVersion())</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n<p>内容非常简单，只是打印了了版本号；同时配套了一个单元测试 <code>main_test.go</code>：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetVersion1</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">    tests := []<span class=\"keyword\">struct</span> {</div><div class=\"line\">        name <span class=\"keyword\">string</span></div><div class=\"line\">        want <span class=\"keyword\">string</span></div><div class=\"line\">    }{</div><div class=\"line\">        {name: <span class=\"string\">\"test1\"</span>, want: <span class=\"string\">\"0.0.1\"</span>},</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests {</div><div class=\"line\">        t.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> {</div><div class=\"line\">            <span class=\"keyword\">if</span> got := GetVersion(); got != tt.want {</div><div class=\"line\">                t.Errorf(<span class=\"string\">\"GetVersion() = %v, want %v\"</span>, got, tt.want)</div><div class=\"line\">            }</div><div class=\"line\">        })</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></tbody></table>\n\n<p>我们可以执行 <code>go test</code> 运行该单元测试。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go <span class=\"built_in\">test</span>                          </div><div class=\"line\">PASS</div><div class=\"line\">ok      <a class=\"vglnk\" href=\"http://github.com/crossoverJie/go-docker\" rel=\"nofollow\"><span>github</span><span>.</span><span>com</span><span>/</span><span>crossoverJie</span><span>/</span><span>go</span><span>-</span><span>docker</span></a>       1.729s</div></pre></td></tr></tbody></table>\n\n<h2 id=\"自动测试\"><a href=\"#自动测试\" class=\"headerlink\" title=\"自动测试\"></a><a href=\"#%E8%87%AA%E5%8A%A8%E6%B5%8B%E8%AF%95\" title=\"自动测试\"></a>自动测试</h2><p>当然以上流程完全可以利用 <code>Actions</code> 自动化搞定。</p>\n<p>首选我们需要在项目根路径创建一个 _`.github/workflows/_.yml`* 的配置文件，新增如下内容：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">name:</span> go-docker</div><div class=\"line\"><span class=\"attr\">on:</span> push</div><div class=\"line\"><span class=\"attr\">jobs:</span></div><div class=\"line\"><span class=\"attr\">  test:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    if:</span> github.ref == <span class=\"string\">'refs/heads/main'</span> || startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - uses:</span> actions/checkout@v2</div><div class=\"line\"><span class=\"attr\">      - name:</span> Run Unit Tests</div><div class=\"line\"><span class=\"attr\">        run:</span> go test</div></pre></td></tr></tbody></table>\n\n<p>简单解释下：</p>\n<ul>\n<li><code>name</code> 不必多说，是为当前工作流创建一个名词。</li>\n<li><code>on</code> 指在什么事件下触发，这里指代码发生 <code>push</code> 时触发，更多事件定义可以参考官方文档：</li>\n</ul>\n<p><a href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows\">Events that trigger workflows</a></p>\n<ul>\n<li><code>jobs</code> 则是定义任务，这里只有一个名为 <code>test</code> 的任务。</li>\n</ul>\n<p>该任务是运行在 <code>ubuntu-latest</code> 的环境下，只有在 <code>main</code> 分支有推送或是有 <code>tag</code> 推送时运行。</p>\n<p>运行时会使用 <code>actions/checkout@v2</code> 这个由他人封装好的 <code>Action</code>，当然这里使用的是由官方提供的拉取代码 <code>Action</code>。</p>\n<ul>\n<li>基于这个逻辑，我们可以灵活的分享和使用他人的 <code>Action</code> 来简化流程，这点也是 <code>GitHub Action</code>扩展性非常强的地方。</li>\n</ul>\n<p>最后的 <code>run</code> 则是运行自己命令，这里自然就是触发单元测试了。</p>\n<ul>\n<li>如果是 Java 便可改为 <code>mvn test</code>.</li>\n</ul>\n<p>之后一旦我们在 <code>main</code> 分支上推送代码，或者有其他分支的代码合并过来时都会自动运行单元测试，非常方便。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg\"><img src=\"https://i.loli.net/2021/03/26/K7YuUF2iTJzRpwd.jpg\"></a></p>\n<p><a href=\"https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg\"><img src=\"https://i.loli.net/2021/03/26/NbIpDG1vA8fwK4z.jpg\"></a></p>\n<p>与我们本地运行效果一致。</p>\n<h2 id=\"自动发布\"><a href=\"#自动发布\" class=\"headerlink\" title=\"自动发布\"></a><a href=\"#%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83\" title=\"自动发布\"></a>自动发布</h2><p>接下来考虑自动打包 <code>Docker</code> 镜像，同时上传到 <code>Docker Hub</code>；为此首先创建 <code>Dockerfile</code> ：</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.15</span> AS builder</div><div class=\"line\">ARG VERSION=<span class=\"number\">0.0</span>.<span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /go/src/app</span></div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> main.go .</span></div><div class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go build -o main -ldflags=<span class=\"string\">\"-X 'main.version=<span class=\"variable\">${VERSION}</span>'\"</span> main.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">FROM</span> debian:stable-slim</div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=builder /go/src/app/main /go/bin/main</span></div><div class=\"line\"><span class=\"keyword\">ENV</span> PATH=<span class=\"string\">\"/go/bin:${PATH}\"</span></div><div class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"main\"</span>]</span></div></pre></td></tr></tbody></table>\n\n<p>这里利用 <code>ldflags</code> 可在编译期间将一些参数传递进打包程序中，比如打包时间、go 版本、git 版本等。</p>\n<p>这里只是将 <code>VERSION</code> 传入了 <code>main.version</code> 变量中，这样在运行时就便能取到了。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t go-docker:last .</div><div class=\"line\">docker run --rm go-docker:0.0.10</div><div class=\"line\">0.0.10</div></pre></td></tr></tbody></table>\n\n<p>接着继续编写 <code>docker.yml</code> 新增自动打包 <code>Docker</code> 以及推送到 <code>docker hub</code> 中。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">    runs-on:</span> ubuntu-latest</div><div class=\"line\"><span class=\"attr\">    needs:</span> test</div><div class=\"line\"><span class=\"attr\">    if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div><div class=\"line\"><span class=\"attr\">    steps:</span></div><div class=\"line\"><span class=\"attr\">      - name:</span> Extract Version</div><div class=\"line\"><span class=\"attr\">        id:</span> version_step</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo \"##[set-output name=version;]VERSION=${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$\"refs/tags/v\"}\"</div><div class=\"line\">          echo \"##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up QEMU</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-qemu-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Set up Docker Buildx</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/setup-buildx-action@v1</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Login to DockerHub</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/login-action@v1</div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          username:</span> $</div><div class=\"line\"><span class=\"attr\">          password:</span> $</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> PrepareReg Names</div><div class=\"line\"><span class=\"attr\">        id:</span> read-docker-image-identifiers</div><div class=\"line\"><span class=\"attr\">        run:</span> <span class=\"string\">|</span></div><div class=\"line\">          echo VERSION_TAG=$(echo $<span class=\"template-variable\"></span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\">          echo LASTEST_TAG=$(echo $<span class=\"template-variable\"></span> | tr '[:upper:]' '[:lower:]') &gt;&gt; $GITHUB_ENV</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">      - name:</span> Build and push Docker images</div><div class=\"line\"><span class=\"attr\">        id:</span> docker_build</div><div class=\"line\"><span class=\"attr\">        uses:</span> docker/build-push-action@v2<span class=\"number\">.3</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"attr\">        with:</span></div><div class=\"line\"><span class=\"attr\">          push:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          tags:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div><div class=\"line\"><span class=\"attr\">          build-args:</span> <span class=\"string\">|</span></div><div class=\"line\">            $<span class=\"template-variable\"></span></div></pre></td></tr></tbody></table>\n\n<p>新增了一个 <code>deploy</code> 的 job。</p>\n<table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">needs:</span> test</div><div class=\"line\"><span class=\"attr\">if:</span> startsWith(github.ref, <span class=\"string\">'refs/tags'</span>)</div></pre></td></tr></tbody></table>\n\n<p>运行的条件是上一步的单测流程跑通，同时有新的 <code>tag</code> 生成时才会触发后续的 <code>steps</code>。</p>\n<p><code>name: Login to DockerHub</code></p>\n<p>在这一步中我们需要登录到 <code>DockerHub</code>，所以首先需要在 GitHub 项目中配置 hub 的 <code>user_name</code> 以及 <code>access_token</code>.</p>\n<p><a href=\"https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg\"><img src=\"https://i.loli.net/2021/03/26/A8DtcYazfU1HC7O.jpg\"></a></p>\n<p><a href=\"https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg\"><img src=\"https://i.loli.net/2021/03/26/XI8u4nU6lEP1bCF.jpg\"></a></p>\n<p>配置好后便能在 action 中使用该变量了。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg\"><img src=\"https://i.loli.net/2021/03/26/KzOQB8L7SRFDVNr.jpg\"></a></p>\n<p>这里使用的是由 docker 官方提供的登录 action(<code>docker/login-action</code>)。</p>\n<p>有一点要非常注意，我们需要将镜像名称改为小写，不然会上传失败，比如我的名称中 <code>J</code> 字母是大写的，直接上传时就会报错。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg\"><img src=\"https://i.loli.net/2021/03/26/a5WBhtEorzelfOK.jpg\"></a></p>\n<p>所以在上传之前先要执行该步骤转换为小写。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg\"><img src=\"https://i.loli.net/2021/03/26/LPcNBvznGqEd9jy.jpg\"></a></p>\n<p>最后再用这两个变量上传到 Docker Hub。</p>\n<p><a href=\"https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg\"><img src=\"https://i.loli.net/2021/03/26/cw4EekaZXpJi1Kh.jpg\"></a></p>\n<p>今后只要我们打上 <code>tag</code> 时，<code>Action</code> 就会自动执行单测、构建、上传的流程。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\"></a>总结</h1><p><code>GitHub Actions</code> 非常灵活，你所需要的大部分功能都能在 <code>marketplace</code> 找到现成的直接使用，</p>\n<p>比如可以利用 <code>ssh</code> 登录自己的服务器，执行一些命令或脚本，这样想象空间就很大了。</p>\n<p>使用起来就像是搭积木一样，可以很灵活的完成自己的需求。</p>\n<p>参考链接：</p>\n<p><a href=\"https://tonyuk.medium.com/how-to-build-a-ci-cd-pipeline-with-go-github-actions-and-docker-3c69e50b6043\">How to Build a CI/CD Pipeline with Go, GitHub Actions and Docker</a></p>"},{"title":"时间轮算法","date":"2021-04-25T10:42:31.000Z","_content":"\n参考nettey源码HashedWheelTimer\n<!-- more -->","source":"_posts/时间轮算法.md","raw":"---\ntitle: 时间轮算法\ndate: 2021-04-25 18:42:31\ntags:\n---\n\n参考nettey源码HashedWheelTimer\n<!-- more -->","slug":"时间轮算法","published":1,"updated":"2021-07-22T07:01:21.451Z","_id":"ckpp6ut5f000ddgv91s8q760i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考nettey源码HashedWheelTimer</p>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p>参考nettey源码HashedWheelTimer</p>","more":""},{"title":"用pm2后台运行hexo","date":"2021-05-07T09:40:19.000Z","_content":"\n**安装pm2**\n\n```shell\nnpm  install -g pm2\n```\n<!-- more -->\n在博客根目录下面创建一个**hexo_run.js**\n\n```javascript\n//run\nconst { exec } = require('child_process')\nexec('hexo server',(error, stdout, stderr) => {\n        if(error){\n                console.log('exec error: ${error}')\n                return\n        }\n        console.log('stdout: ${stdout}');\n        console.log('stderr: ${stderr}');\n})\n```\n\n在根目录下\n\n```shell\npm2 start hexo_run.js\n```\n\n结果如下图\n![image-20210508020412096](../images/image-20210508020412096-0411479.png)\n","source":"_posts/用pm2后台运行hexo.md","raw":"---\ntitle: 用pm2后台运行hexo\ndate: 2021-05-07 17:40:19\ntags:\n---\n\n**安装pm2**\n\n```shell\nnpm  install -g pm2\n```\n<!-- more -->\n在博客根目录下面创建一个**hexo_run.js**\n\n```javascript\n//run\nconst { exec } = require('child_process')\nexec('hexo server',(error, stdout, stderr) => {\n        if(error){\n                console.log('exec error: ${error}')\n                return\n        }\n        console.log('stdout: ${stdout}');\n        console.log('stderr: ${stderr}');\n})\n```\n\n在根目录下\n\n```shell\npm2 start hexo_run.js\n```\n\n结果如下图\n![image-20210508020412096](../images/image-20210508020412096-0411479.png)\n","slug":"用pm2后台运行hexo","published":1,"updated":"2021-07-22T07:01:24.327Z","_id":"ckpp6ut5x000edgv99cyv2fkl","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>安装pm2</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm  install -g pm2</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>在博客根目录下面创建一个<strong>hexo_run.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//run</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; exec &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\">exec(<span class=\"string\">&#x27;hexo server&#x27;</span>,<span class=\"function\">(<span class=\"params\">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;exec error: $&#123;error&#125;&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在根目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start hexo_run.js</span><br></pre></td></tr></table></figure>\n\n<p>结果如下图<br><img src=\"../images/image-20210508020412096-0411479.png\" alt=\"image-20210508020412096\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>安装pm2</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm  install -g pm2</span><br></pre></td></tr></table></figure>","more":"<p>在博客根目录下面创建一个<strong>hexo_run.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//run</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; exec &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\">exec(<span class=\"string\">&#x27;hexo server&#x27;</span>,<span class=\"function\">(<span class=\"params\">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;exec error: $&#123;error&#125;&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在根目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start hexo_run.js</span><br></pre></td></tr></table></figure>\n\n<p>结果如下图<br><img src=\"../images/image-20210508020412096-0411479.png\" alt=\"image-20210508020412096\"></p>"},{"title":"用sdk建设环境信息","date":"2021-05-10T03:15:32.000Z","_content":"\n安装命令：\n\ncurl -s https://get.sdkman.io | bash\n\nsdk生效\n\n​    source \"/Users/Terminus/.sdkman/bin/sdkman-init.sh\"\n\nsdk 安装gradle\n\nsdk install gradle\n<!-- more -->\n","source":"_posts/用sdk建设环境信息.md","raw":"---\ntitle: 用sdk建设环境信息\ndate: 2021-05-10 11:15:32\ntags:\n---\n\n安装命令：\n\ncurl -s https://get.sdkman.io | bash\n\nsdk生效\n\n​    source \"/Users/Terminus/.sdkman/bin/sdkman-init.sh\"\n\nsdk 安装gradle\n\nsdk install gradle\n<!-- more -->\n","slug":"用sdk建设环境信息","published":1,"updated":"2021-07-22T07:01:27.913Z","_id":"ckpp6ut5y000fdgv9hbkrd75g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>安装命令：</p>\n<p>curl -s <a href=\"https://get.sdkman.io/\">https://get.sdkman.io</a> | bash</p>\n<p>sdk生效</p>\n<p>​    source “/Users/Terminus/.sdkman/bin/sdkman-init.sh”</p>\n<p>sdk 安装gradle</p>\n<p>sdk install gradle</p>\n<span id=\"more\"></span>\n","site":{"data":{}},"excerpt":"<p>安装命令：</p>\n<p>curl -s <a href=\"https://get.sdkman.io/\">https://get.sdkman.io</a> | bash</p>\n<p>sdk生效</p>\n<p>​    source “/Users/Terminus/.sdkman/bin/sdkman-init.sh”</p>\n<p>sdk 安装gradle</p>\n<p>sdk install gradle</p>","more":""},{"title":"设计模式","date":"2020-12-28T10:02:30.000Z","_content":"```plantuml\n@startmindmap\n* 设计模式\n** 面向对象\n** 工厂模式\n** 适配器模式\n@endmindmap\n```\n<!-- more -->","source":"_posts/设计模式.md","raw":"---\ntitle: 设计模式\ndate: 2020-12-28 18:02:30\ntags:\n---\n```plantuml\n@startmindmap\n* 设计模式\n** 面向对象\n** 工厂模式\n** 适配器模式\n@endmindmap\n```\n<!-- more -->","slug":"设计模式","published":1,"updated":"2021-07-22T07:01:33.932Z","_id":"ckpp6ut5z000gdgv90d1y7bv2","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startmindmap</span><br><span class=\"line\">* 设计模式</span><br><span class=\"line\">** 面向对象</span><br><span class=\"line\">** 工厂模式</span><br><span class=\"line\">** 适配器模式</span><br><span class=\"line\">@endmindmap</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startmindmap</span><br><span class=\"line\">* 设计模式</span><br><span class=\"line\">** 面向对象</span><br><span class=\"line\">** 工厂模式</span><br><span class=\"line\">** 适配器模式</span><br><span class=\"line\">@endmindmap</span><br></pre></td></tr></table></figure>","more":""},{"title":"GraphQL及元数据驱动架构在后端BFF中的实践","date":"2021-05-08T03:14:25.000Z","_content":"\n \n\n> GraphQL是Facebook提出的一种数据查询语言，核心特性是数据聚合和按需索取，目前被广泛应用于前后端之间，解决客户端灵活使用数据问题。本文介绍的是GraphQL的另一种实践，我们将GraphQL下沉至后端BFF（Backend For Frontend）层之下，结合元数据技术，实现数据和加工逻辑的按需查询和执行。这样不仅解决了后端BFF层灵活使用数据的问题，这些字段加工逻辑还可以直接复用，大幅度提升了研发的效率。\n>\n> 本文介绍的实践方案已经在美团部分业务场景中落地，并取得不错效果，希望这些经验能够对大家有帮助。\n<!-- more -->\nBFF一词来自Sam Newman的一篇博文《[Pattern:Backends For Frontends](https://samnewman.io/patterns/architectural/bff/)》，指的是服务于前端的后端。BFF是解决什么问题的呢？据原文描述，随着移动互联网的兴起，原适应于桌面Web的服务端功能希望同时提供给移动App使用，而在这个过程中存在这样的问题：\n\n* 移动App和桌面Web在UI部分存在差异。\n\n* 移动App涉及不同的端，不仅有iOS、还有Android，这些不同端的UI之间存在差异。\n\n* 原有后端功能和桌面Web UI之间已经存在了较大的耦合。\n\n因为端的差异性存在，服务端的功能要针对端的差异进行适配和裁剪，而服务端的业务功能本身是相对单一的，这就产生了一个矛盾——服务端的单一业务功能和端的差异性诉求之间的矛盾。那么这个问题怎么解决呢？这也是文章的副标题所描述的\"Single-purpose Edge Services for UIs and external parties\"，引入BFF，由BFF来针对多端差异做适配，这也是目前业界广泛使用的一种模式。\n\n![](https://img-blog.csdnimg.cn/img_convert/f95ef4461eb139612078136232f13a5a.png)\n\n图1 BFF示意图\n\n在实际业务的实践中，导致这种端差异性的原因有很多，有技术的原因，也有业务的原因。比如，用户的客户端是Android还是iOS，是大屏还是小屏，是什么版本。再比如，业务属于哪个行业，产品形态是什么，功能投放在什么场景，面向的用户群体是谁等等。这些因素都会带来面向端的功能逻辑的差异性。\n\n在这个问题上，笔者所在团队负责的商品展示业务有一定的发言权，同样的商品业务，在C端的展示功能逻辑，深刻受到商品类型、所在行业、交易形态、投放场所、面向群体等因素的影响。同时，面向消费者端的功能频繁迭代的属性，更是加剧并深化了这种矛盾，使其演化成了一种服务端单一稳定与端的差异灵活之间的矛盾，这也是商品展示（商品展示BFF）业务系统存在的必然性原因。本文主要在美团到店商品展示场景的背景下，介绍面临的一些问题及解决思路。\n\n## 2 BFF背景下的核心矛盾\n\nBFF这层的引入是解决服务端单一稳定与端的差异灵活诉求之间的矛盾，这个矛盾并不是不存在，而是转移了。由原来后端和前端之间的矛盾转移成了BFF和前端之间的矛盾。笔者所在团队的主要工作，就是和这种矛盾作斗争。下面以具体的业务场景为例，结合当前的业务特点，说明在BFF的生产模式下，我们所面临的具体问题。下图是两个不同行业的团购货架展示模块，这两个模块我们认为是两个商品的展示场景，它们是两套独立定义的产品逻辑，并且会各自迭代。\n\n![](https://img-blog.csdnimg.cn/img_convert/1aa3a779c43374c8038fada6b5c78290.png)\n\n图2 展示场景\n\n在业务发展初期，这样的场景不多。BFF层系统“烟囱式”建设，功能快速开发上线满足业务的诉求，在这样的情况下，这种矛盾表现的不明显。而随着业务发展，行业的开拓，形成了许许多多这样的商品展示功能，矛盾逐渐加剧，主要表现在以下两个方面：\n\n* **业务支撑效率**：随着商品展示场景变得越来越多，API呈爆炸趋势，业务支撑效率和人力成线性关系，系统能力难以支撑业务场景的规模化拓展。\n\n* **系统复杂度高**：核心功能持续迭代，内部逻辑充斥着`if…else…`，代码过程式编写，系统复杂度较高，难以修改和维护。\n\n那么这些问题是怎么产生的呢？这要结合“烟囱式”系统建设的背景和商品展示场景所面临的业务，以及系统特点来进行理解。\n\n**特点一：外部依赖多、场景间取数存在差异、用户体验要求高**\n\n图例展示了两个不同行业的团购货架模块，这样一个看似不大的模块，后端在BFF层要调用20个以上的下游服务才能把数据拿全，这是其一。在上面两个不同的场景中，需要的数据源集合存在差异，而且这种差异普遍存在，这是其二，比如足疗团购货架需要的某个数据源，在丽人团购货架上不需要，丽人团购货架需要的某个数据源，足疗团购货架不需要。尽管依赖下游服务多，同时还要保证C端的用户体验，这是其三。\n\n这几个特点给技术带来了不小的难题：1）聚合大小难控制，聚合功能是分场景建设？还是统一建设？如果分场景建设，必然存在不同场景重复编写类似聚合逻辑的问题。如果统一建设，那么一个大而全的数据聚合中必然会存在无效的调用。2）聚合逻辑的复杂性控制问题，在这么多的数据源的情况下，不仅要考虑业务逻辑怎么写，还要考虑异步调用的编排，在代码复杂度未能良好控制的情况下，后续聚合的变更修改将会是一个难题。\n\n**特点二：展示逻辑多、场景之间存在差异，共性个性逻辑耦合**\n\n我们可以明显地识别某一类场景的逻辑是存在共性的，比如团单相关的展示场景。直观可以看出基本上都是展示团单维度的信息，但这只是表象。实际上在模块的生成过程中存在诸多的差异，比如以下两种差异：\n\n* **字段拼接逻辑差异**：比如以上图中两个团购货架的团购标题为例，同样是标题，在丽人团购货架中的展示规则是：**\\[类型\\] + 团购标题**，而在足疗团购货架的展示规则是：**团购标题**。\n\n* **排序过滤逻辑差异**：比如同样是团单列表，A场景按照销量倒排序，B场景按照价格排序，不同场景的排序逻辑不同。\n\n诸如此类的**展示逻辑**的差异性还有很多。类似的场景实际上在内部存在很多差异的逻辑，后端如何应对这种差异性是一个难题，下面是最常见的一种写法，通过读取具体的条件字段来做判断实现逻辑路由，如下所示：\n\n```go\nif(category == \"丽人\") {  title = \"[\" + category + \"]\" + productTitle;} else if (category == \"足疗\") {  title = productTitle；}\n```\n\n这种方案在功能实现方面没有问题，也能够复用共同的逻辑。但是实际上在场景非常多的情况下，将会有非常多的差异性判断逻辑叠加在一起，功能一直会被持续迭代的情况下，可以想象，系统将会变得越来越复杂，越来越难以修改和维护。\n\n**总结**：在BFF这层，不同商品展示场景存在差异。在业务发展初期，系统通过独立建设的方式支持业务快速试错，在这种情况下，业务差异性带来的问题不明显。而随着业务的不断发展，需要搭建及运营的场景越来越多，呈规模化趋势。此时，业务对技术效率提出了更高的要求。**在这种场景多、场景间存在差异的背景下，如何满足场景拓展效率同时能够控制系统的复杂性，就是我们业务场景中面临的核心问题**。\n\n## 3 BFF应用模式分析\n\n目前，业界针对此类的解决方案主要有两种模式，一种是后端BFF模式；另一种是前端BFF模式。\n\n### 3.1 后端BFF模式\n\n后端BFF模式指的是BFF由后端同学负责，这种模式目前最广泛的实践是基于GraphQL搭建的后端BFF方案，具体是：后端将展示字段封装成展示服务，通过GraphQL编排之后暴露给前端使用。如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/9186b94e756d77bc0b098a1807e44e5a.png)\n\n图3 后端BFF模式\n\n这种模式最大的特性和优势是，当展示字段已经存在的情况下，后端不需要关心前端差异性需求，按需查询的能力由GraphQL支持。这个特性可以很好地应对不同场景存在展示字段差异性这个问题，前端直接基于GraphQL按需查询数据即可，后端不需要变更。同时，借助GraphQL的编排和聚合查询能力，后端可以将逻辑分解在不同的展示服务中，因此在一定程度上能够化解BFF这层的复杂性。\n\n但是基于这种模式，仍然存在几个问题：展示服务颗粒度问题、数据图划分问题以及字段扩散问题，下图是基于当前模式的具体案例：\n\n![](https://img-blog.csdnimg.cn/img_convert/8dd8ffdccae5273f1c723e7bba3e4e5a.png)\n\n图4 后端BFF模式（案例）\n\n**1）展示服务颗粒度设计问题**\n\n这种方案要求展示逻辑和取数逻辑封装在一个模块中，形成一个展示服务（Presentation Service），如上图所示。而实际上展示逻辑和取数逻辑是多对多的关系，还是以前文提到的例子说明：\n\n> **背景**：有两个展示服务，分别封装了商品标题和商品标签的查询能力。\n>\n> **情景**：此时PM提了一个需求，希望商品在某个场景的标题以“\\[类型\\]+商品标题”的形式展示，此时商品标题的拼接依赖类型数据，而此时类型数据商品标签展示服务中已经调用了。\n>\n> **问题**：商品标题展示服务自己调用类型数据还是将两个展示服务合并到一起？\n\n以上描述的问题的是展示服务颗粒度把控的问题，我们可以怀疑上述的示例是不是因为展示服务的颗粒度过小？那么反过来看一看，如果将两个服务合并到一起，那么势必又会存在冗余。这是展示服务设计的难点，**核心原因在于，展示逻辑和取数逻辑本身是多对多的关系，结果却被设计放在了一起**。\n\n**2）数据图划分问题**\n\n通过GraphQL将多个展示服务的数据聚合到一张图（GraphQL Schema）中，形成一个数据视图，需要数据的时候只要数据在图中，就可以基于Query按需查询。那么问题来了，这个图应该怎么组织？是一张图还是多张图？图过大的话，势必带来复杂的数据关系维护问题，图过小则将会降低方案本身的价值。\n\n**3）展示服务内部复杂性 + 模型扩散问题**\n\n上文提到过一个商品标题的展示存在不同拼接逻辑的情况，在商品展示场景，这种逻辑特别普遍。比如同样是价格，A行业展示优惠后价格，B行业展示优惠前价格；同样是标签位置，C行业展示服务时长，而D行业展示商品特性等。\n\n那么问题来了，展示模型如何设计？以标题字段为例，是在展示模型上放个`title`字段就可以，还是分别放个`title`和`titleWithCategory`？如果是前者那么服务内部必然会存在`if…else…`这种逻辑，用于区分`title`的拼接方式，这同样会导致展示服务内部的复杂性。如果是多个字段，那么可以想象，展示服务的模型字段也将会不断扩散。\n\n**总结**：后端BFF模式能够在一定程度上化解后端逻辑的复杂性，同时提供一个展示字段的复用机制。但是仍然存在未决问题，如展示服务的颗粒度设计问题，数据图的划分问题，以及展示服务内部的复杂性和字段扩散问题。目前这种模式实践的代表有Facebook、爱彼迎、eBay、爱奇艺、携程、去哪儿等等。\n\n### 3.2 前端BFF模式\n\n前端BFF模式在Sam Newman的文章中的\"And Autonomy\"部分有特别的介绍，指的是BFF本身由前端团队自己负责，如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/94d1b0ff6f68b252711f342b3b0fd0ae.png)\n\n图5 前端BFF模式\n\n这种模式的理念是，本来能一个团队交付的需求，没必要拆成两个团队，两个团队本身带来较大的沟通协作成本。本质上，也是一种将“敌我矛盾”转化为“人民内部矛盾”的思路。前端完全接手BFF的开发工作，实现数据查询的自给自足，大大减少了前后端的协作成本。但是这种模式没有提到我们关心的一些核心问题，如：复杂性如何应对、差异性如何应对、展示模型如何设计等等问题。除此之外，这种模式也存在一些前提条件及弊端，比如较为完备的前端基础设施；前端不仅仅需要关心渲染、还需要了解业务逻辑等。\n\n**总结**：前端BFF模式通过前端自主查询和使用数据，从而达到降低跨团队协作的成本，提升BFF研发效率的效果。目前这种模式的实践代表是阿里巴巴。\n\n## 4 基于GraphQL及元数据的信息聚合架构设计\n\n### 4.1 整体思路\n\n通过对后端BFF和前端BFF两种模式的分析，我们最终选择后端BFF模式，前端BFF这个方案对目前的研发模式影响较大，不仅需要大量的前端资源，而且需要建设完善的前端基础设施，方案实施成本比较高昂。\n\n前文提到的后端GraphQL BFF模式代入我们的具体场景虽然存在一些问题，但是总体有非常大的参考价值，比如展示字段的复用思路、数据的按需查询思路等等。在商品展示场景中，**有80\\%的工作集中在数据的聚合和集成部分**，并且这部分具有很强的复用价值，因此信息的查询和聚合是我们面临的主要矛盾。因此，我们的思路是：**基于GraphQL+后端BFF方案改进，实现取数逻辑和展示逻辑的可沉淀、可组合、可复用**，整体架构如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/21ffacbebfc1c0c59f6a6f1f421e55ac.png)\n\n图6 基于GraphQL BFF的改进思路\n\n从上图可看出，与传统GraphQL BFF方案最大的差别在于我们将GraphQL下放至数据聚合部分，由于数据来源于商品领域，领域是相对稳定的，因此数据图规模可控且相对稳定。除此之外，整体架构的核心设计还包括以下三个方面：1）取数展示分离；2）查询模型归一；3）元数据驱动架构。\n\n我们通过取数展示分离解决展示服务颗粒度问题，同时使得展示逻辑和取数逻辑可沉淀、可复用；通过查询模型归一化设计解决展示字段扩散的问题；通过元数据驱动架构实现能力的可视化，业务组件编排执行的自动化，这能够让业务开发同学聚焦于业务逻辑的本身。下面将针对这三个部分逐一展开介绍。\n\n### 4.2 核心设计\n\n4.2.1 取数展示分离\n\n上文提到，在商品展示场景中，展示逻辑和取数逻辑是多对多的关系，而传统的基于GraphQL的后端BFF实践方案把它们封装在一起，这是导致展示服务颗粒度难以设计的根本原因。思考一下取数逻辑和展示逻辑的关注点是什么？取数逻辑关注怎么查询和聚合数据，而展示逻辑关注怎么加工生成需要的展示字段，它们的关注点不一样，放在一起也会增加展示服务的复杂性。因此，我们的思路是将取数逻辑和展示逻辑分离开来，单独封装成逻辑单元，分别叫取数单元和展示单元。在取数展示分离之后，GraphQL也随之下沉，用于实现数据的按需聚合，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/eeb60decd04420062983c3711804700e.png)\n\n图7 取数展示分离+元数据描述\n\n那么取数和展示逻辑的封装颗粒度是怎么样的呢？不能太小也不能太大，在颗粒度的设计上，我们有两个核心考量：1）**复用**，展示逻辑和取数逻辑在商品展示场景中，都是可以被复用的资产，我们希望它们能沉淀下来，被单独按需使用；2）**简单**，保持简单，这样容易修改和维护。基于这两点考虑，颗粒度的定义如下：\n\n* **取数单元**：尽量只封装1个外部数据源，同时负责对外部数据源返回的模型进行简化，这部分生成的模型我们称之为取数模型。\n\n* **展示单元**：尽量只封装1个展示字段的加工逻辑。\n\n分开的好处是简单且可被组合使用，那么具体如何实现组合使用呢？我们的思路是通过元数据来描述它们之间的关系，基于元数据由统一的执行框架来关联运行，具体设计下文会展开介绍。通过取数和展示的分离，元数据的关联和运行时的组合调用，可以保持逻辑单元的简单，同时又满足复用诉求，这也很好地解决了传统方案中存在的**展示服务的颗粒度问题**。\n\n4.2.2 查询模型归一\n\n展示单元的加工结果通过什么样的接口透出呢？接下来，我们介绍一下查询接口设计的问题。\n\n**1）查询接口设计的难点**\n\n常见查询接口的设计模式有以下两种：\n\n* **强类型模式**：强类型模式指的是查询接口返回的是POJO对象，每一个查询结果对应POJO中的一个明确的具有特定业务含义的字段。\n\n* **弱类型模式**：弱类型模式指的是查询结果以K-V或JSON模式返回，没有明确的静态字段。\n\n以上两种模式在业界都有广泛应用，且它们都有明确的优缺点。强类型模式对开发者友好，但是业务是不断迭代的，与此同时，系统沉淀的展示单元会不断丰富，在这样的情况下，接口返回的DTO中的字段将会愈来愈多，每次新功能的支持，都要伴随着接口查询模型的修改，JAR版本的升级。而JAR的升级涉及数据提供方和数据消费两方，存在明显效率问题。另外，可以想象，查询模型的不断迭代，最终将会包括成百上千个字段，难以维护。\n\n而弱类型模式恰好可以弥补这一缺点，但是弱类型模式对于开发者来说非常不友好，接口查询模型中有哪些查询结果对于开发者来说在开发的过程中完全没有感觉，但是程序员的天性就是喜欢通过代码去理解逻辑，而非配置和文档。其实，这两种接口设计模式都存在着一个共性问题——缺少抽象，下面两节，我们将介绍在接口返回的查询模型设计方面的抽象思路及框架能力支持。\n\n**2）查询模型归一化设计**\n\n回到商品展示场景中，一个展示字段有多种不同的实现，如商品标题的两种不同实现方式：1）商品标题；2）\\[类目\\]+商品标题。商品标题和这两种展示逻辑的关系本质上是一种抽象-具体的关系。识别这个关键点，思路就明了了，我们的思路是对查询模型做抽象。查询模型上都是抽象的展示字段，一个展示字段对应多个展示单元，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/d6223539b474bfdd2a7673c39752bcee.png)\n\n图8 查询模型归一化 + 元数据描述\n\n在实现层面，同样基于元数据描述展示字段和展示单元之间的关系，基于以上的设计思路，可以在一定程度上减缓模型的扩散，但是还不能避免扩展。比如除了价格、库存、销量等每个商品都有的标准属性之外，不同的商品类型一般还会有这个商品特有的属性。比如密室主题拼场商品才有“几人拼”这样的描述属性，这种字段本身抽象的意义不大，且放在商品查询模型中作为一个单独的字段会导致模型扩张，针对这类问题，我们的解决思路是引入扩展属性，扩展属性专门承载这类非标准的字段。通过标准字段 + 扩展属性的方式建立查询模型，能够较好地解决**字段扩散**的问题。\n\n4.2.3 元数据驱动架构\n\n到目前为止，我们定义了如何分解**业务逻辑单元**以及如何设计**查询模型**，并提到用元数据描述它们之间的关系。基于以上定义实现的业务逻辑及模型，都具备很强的复用价值，可以作为业务资产沉淀下来。那么，为什么用元数据描述业务功能及模型之间的关系呢？\n\n我们引入元数据描述主要有两个目的：1）代码逻辑的自动编排，通过元数据描述业务逻辑之间的关联关系，运行时可以自动基于元数据实现逻辑之间的关联执行，从而可以消除大量的人工逻辑编排代码；2）业务功能的可视化，元数据本身描述了业务逻辑所提供的功能，如下面两个示例：\n\n> 团单基础售价字符串展示，例：30元。 \n>\n> 团单市场价展示字段，例：100元。\n\n这些元数据上报到系统中，可以用于展示当前系统所提供的功能。通过元数据描述组件及组件之间关联关系，通过框架解析元数据自动进行业务组件的调用执行，形成了如下的元数据架构：\n\n![](https://img-blog.csdnimg.cn/img_convert/2acb91a2cdbee4b5eccf5309f5a295e1.png)\n\n图9 元数据驱动架构\n\n整体架构由三个核心部分组成：\n\n* **业务能力**：标准的业务逻辑单元，包括取数单元、展示单元和查询模型，这些都是关键的可复用资产。\n\n* **元数据**：描述业务功能（如：展示单元、取数单元）以及业务功能之间的关联关系，比如展示单元依赖的数据，展示单元映射的展示字段等。\n\n* **执行引擎**：负责消费元数据，并基于元数据对业务逻辑进行调度和执行。\n\n通过以上三个部分有机的组合在一起，形成了一个元数据驱动风格的架构。\n\n## 5 针对GraphQL的优化实践\n\n### 5.1 使用简化\n\n**1）GraphQL直接使用问题**\n\n引入GraphQL，会引入一些额外的复杂性，比如会涉及到GraphQL带来的一些概念如：Schema、RuntimeWiring，下面是基于GraphQL原生Java框架的开发过程：\n\n![](https://img-blog.csdnimg.cn/img_convert/1897c77958b24b0253e5968bb06dd147.png)\n\n图10 原生GraphQL使用流程\n\n这些概念对于未接触过GraphQL的同学来说，增加了学习和理解的成本，而这些概念和业务领域通常没有什么关系。而我们仅仅希望使用GraphQL的按需查询特性，却被GraphQL本身拖累了，业务开发同学的关注点应该聚焦在业务逻辑本身才对，这个问题如何解决呢？\n\n著名计算机科学家David Wheeler说了一句名言，\"All problems in computer science can be solved by another level of indirection\"。没有加一层解决不了的问题，本质上是需要有人来对这事负责，因此我们在原生GraphQL之上增加了一层执行引擎层来解决这些问题，目标是屏蔽GraphQL的复杂性，让开发人员只需要关注业务逻辑。\n\n**2）取数接口标准化**\n\n首先要简化数据的接入，原生的`DataFetcher`和`DataLoader`都是处在一个比较高的抽象层次，缺少业务语义，而在查询场景，我们能够归纳出，所有的查询都属于以下三种模式：\n\n* **1查1**：根据一个条件查询一个结果。\n\n* **1查N**：根据一个条件查询多个结果。\n\n* **N查N**：一查一或一查多的批量版本。\n\n由此，我们对查询接口进行了标准化，业务开发同学基于场景判断是那种，按需选择使用即可，取数接口标准化设计如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/71923ee77268f32e6ce9789d1b8dfc9f.png)\n\n图11 查询接口标准化\n\n业务开发同学按需选择所需要使用的取数器，通过泛型指定结果类型，1查1和1查N比较简单，N查N我们对其定义为批量查询接口，用于满足\"N+1\"的场景，其中`batchSize`字段用于指定分片大小，`batchKey`用于指定查询Key，业务开发只需要指定参数，其他的框架会自动处理。除此之外，我们还约束了返回结果必须是`CompleteFuture`，用于满足聚合查询的全链路异步化。\n\n**3）聚合编排自动化**\n\n取数接口标准化使得数据源的语义更清晰，开发过程按需选择即可，简化了业务的开发。但是此时业务开发同学写好`Fetcher`之后，还需要去另一个地方去写`Schema`，而且写完`Schema`还要再写`Schema`和`Fetcher`的映射关系，业务开发更享受写代码的过程，不太愿意写完代码还要去另外一个地方取配置，并且同时维护代码和对应配置也提高了出错的可能性，能否将这些冗杂的步骤移除掉？\n\n`Schema`和`RuntimeWiring`本质上是想描述某些信息，如果这些信息换一种方式描述是不是也可以。我们的优化思路是，在业务开发过程中标记注解，通过注解标注的元数据描述这些信息，其他的事情交给框架来做。解决思路示意图如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/a1adc237e833aad26cf198c0c5dd6bc2.png)\n\n图12 注解元数据描述Schema和RuntimeWiring\n\n### 5.2 性能优化\n\n5.2.1 GraphQL性能问题\n\n虽然GraphQL已经开源了，但是Facebook只开源了相关标准，并没有给出解决方案。GraphQL-Java框架是由社区贡献的，基于开源的GraphQL-Java作为按需查询引擎的方案，我们发现了GraphQL应用方面的一些问题，这些问题有部分是由于使用姿势不当所导致的，也有部分是GraphQL本身实现的问题，比如我们遇到的几个典型的问题：\n\n* 耗CPU的查询解析，包括`Schema`的解析和`Query`的解析。\n\n* 当查询模型比较复杂特别是存在大列表时候的延时问题。\n\n* 基于反射的模型转换CPU消耗问题。\n\n* `DataLoader`的层级调度问题。\n\n于是，我们对使用方式和框架做了一些优化与改造，以解决上面列举的问题。本章着重介绍我们在GraphQL-Java方面的优化和改造思路。\n\n5.2.2 GraphQL编译优化\n\n**1）GraphQL语言原理概述**\n\nGraphQL是一种查询语言，目的是基于直观和灵活的语法构建客户端应用程序，用于描述其数据需求和交互。GraphQL属于一种领域特定语言（DSL），而我们所使用的GraphQL-Java客户端在语言编译层面是基于ANTLR 4实现的，ANTLR 4是一种基于Java编写的语言定义和识别工具，Antlr是一种元语言（Meta-Language），它们的关系如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/780967a52c449d978d352760694363ae.png)\n\n图13 GraphQL语言基本原理示意图\n\nGraphQL执行引擎所接受的`Schema`及`Query`都是基于GraphQL定义的语言所表达的内容，GraphQL执行引擎不能直接理解GraphQL，在执行之前必须由GraphQL编译器翻译成GraphQL执行引擎可理解的文档对象。而GraphQL编译器是基于Java的，经验表明在大流量场景实时解释的情况下，这部分代码将会成为CPU热点，而且还占用响应延迟，`Schema`或`Query`越复杂，性能损耗越明显。\n\n**2）Schema及Query编译缓存**\n\n`Schema`表达的是数据视图和取数模型同构，相对稳定，个数也不多，在我们的业务场景一个服务也就一个。因此，我们的做法是在启动的时候就将基于`Schema`构造的GraphQL执行引擎构造好，作为单例缓存下来。对于`Query`来说，每个场景的`Query`有些差异，因此`Query`的解析结果不能作为单例，我们的做法是实现`PreparsedDocumentProvider`接口，基于`Query`作为Key将`Query`编译结果缓存下来。如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/ddbeff75483900054a0216acf3a52f2d.png)\n\n图14 Query缓存实现示意图\n\n5.2.3 GraphQL执行引擎优化\n\n**1）GraphQL执行机制及问题**\n\n我们先一起了解一下GraphQL-Java执行引擎的运行机制是怎么样的。假设在执行策略上我们选取的是`AsyncExecutionStrategy`，来看看GraphQL执行引擎的执行过程：\n\n![](https://img-blog.csdnimg.cn/img_convert/d792881807f277fcc7d02794f645a8b0.png)\n\n图15 GraphQL执行引擎执行过程\n\n以上时序图做了些简化，去除了一些与重点无关的信息，`AsyncExecutionStrategy`的`execute`方法是对象执行策略的异步化模式实现，是查询执行的起点，也是根节点查询的入口，`AsyncExecutionStrategy`对对象的多个字段的查询逻辑，采取的是循环+异步化的实现方式，我们从`AsyncExecutionStrategy`的`execute`方法触发，理解GraphQL查询过程如下：\n\n1.  调用当前字段所绑定的`DataFetcher`的`get`方法，如果字段没有绑定`DataFetcher`，则通过默认的`PropertyDataFetcher`查询字段，`PropertyDataFetcher`的实现是基于反射从源对象中读取查询字段。\n\n2.  将从`DataFetcher`查询得到结果包装成`CompletableFuture`，如果结果本身是`CompletableFuture`，那么不会包装。\n\n3.  结果`CompletableFuture`完成之后，调用`completeValue`，基于结果类型分别处理。\n\n* 如果查询结果是列表类型，那么会对列表类型进行遍历，针对每个元素在递归执行`completeValue`。\n\n* 如果结果类型是对象类型，那么会对对象执行`execute`，又回到了起点，也就是`AsyncExecutionStrategy的execute`。\n\n以上是GraphQL的执行过程，这个过程有什么问题呢？下面基于图上的标记顺序一起看看GraphQL在我们的业务场景中应用和实践所遇到的问题，这些问题不代表在其他场景也是问题，仅供参考：\n\n**问题1**：`PropertyDataFetcher`CPU热点问题，`PropertyDataFetcher`在整个查询过程中属于热点代码，而其本身的实现也有一些优化空间，在运行时`PropertyDataFetcher`的执行会成为CPU热点。（具体问题可参考GitHub上的commit和Conversion：<https://github.com/graphql-java/graphql-java/pull/1815>）\n\n![](https://img-blog.csdnimg.cn/img_convert/c3a377dc5b480b403a67a2f8cb5cd0aa.png)图16 PropertyDataFetcher成为CPU热点\n\n**问题2**：列表的计算耗时问题，列表计算是循环的，对于查询结果中存在大列表的场景，此时循环会造成整体查询明显的延迟。我们举个具体的例子，假设查询结果中存在一个列表大小是1000，每个元素的处理是0.01ms，那么总体耗时就是10ms，基于GraphQL的查机制，这个10ms会阻塞整个链路。\n\n**2）类型转换优化**\n\n通过GraphQL查询引擎拿到的GraphQL模型，和业务实现的`DataFetcher`返回的取数模型是同构，但是所有字段的类型都会被转换成GraphQL内部类型。`PropertyDataFetcher`之所以会成为CPU热点，问题就在于这个模型转换过程，业务定义的模型到GraphQL类型模型转换过程示意图如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/eda15725d57060f766fa2800784e4c3f.png)\n\n图17 业务模型到GraphQL模型转换示意图\n\n当查询结果模型中的字段非常多的时候，比如上万个，意味着每次查询有上万次的`PropertyDataFetcher`操作，实际就反映到了CPU热点问题上，这个问题我们的解决思路是保持原有业务模型不变，将非`PropertyDataFetcher`查询的结果反过来填充到业务模型上。如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/00312b3068556d24deb0f880e5c2103a.png)\n\n图18 查询结果模型反向填充示意图\n\n基于这个思路，我们通过GraphQL执行引擎拿到的结果就是业务`Fetcher`返回的对象模型，这样不仅仅解决了因字段反射转换带来的CPU热点问题，同时对于业务开发来说增加了友好性。因为GraphQL模型类似JSON模型，这种模型是缺少业务类型的，业务开发直接使用起来非常麻烦。以上优化在一个场景上试点测试，结果显示该场景的平均响应时间缩短1.457ms，平均99线缩短5.82ms，平均CPU利用率降低约12\\%。\n\n**3）列表计算优化**\n\n当列表元素比较多的时候，默认的单线程遍历列表元素计算的方式所带来的延迟消耗非常明显，对于响应时间比较敏感的场景这个延迟优化很有必要。针对这个问题我们的解决思路是充分利用CPU多核心计算的能力，将列表拆分成任务，通过多线程并行执行，实现机制如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/0858f511ea09ad5454793bd7ec11760e.png)\n\n图19 列表遍历多核计算思路\n\n5.2.4 GraphQL-DataLoader调度优化\n\n**1）DataLoader基本原理**\n\n先简单介绍一下DataLoader的基本原理，DataLoader有两个方法，一个是`load`，一个是`dispatch`，在解决N+1问题的场景中，DataLoader是这么用的：\n\n![](https://img-blog.csdnimg.cn/img_convert/a41035acc9fa1a6bcafc9ebf069b1071.png)\n\n图20 DataLoader基本原理\n\n整体分为2个阶段，第一个阶段调用`load`，调用N次，第二个阶段调用`dispatch`，调用`dispatch`的时候会真正的执行数据查询，从而达到批量查询+分片的效果。\n\n**2）DataLoader调度问题**\n\nGraphQL-Java对DataLoader的集成支持的实现在`FieldLevelTrackingApproach`中，`FieldLevelTrackingApproach`的实现会存在怎样的问题呢？下面基于一张图表达原生DataLoader调度机制所产生的问题：\n\n![](https://img-blog.csdnimg.cn/img_convert/7b544ddbe308313dfbb784d2cb3d4e50.png)\n\n图21 GraphQL-Java对DataLoader调度存在的问题\n\n问题很明显，基于`FieldLevelTrackingApproach`的实现，下一层级的`DataLoader`的`dispatch`是需要等到本层级的结果都回来之后才发出。基于这样的实现，查询总耗时的计算公式等于：TOTAL = MAX（Level  1 Latency）+ MAX（Level 2 Latency）+ MAX（Level 3 Latency）+ … ，**总查询耗时等于每层耗时最大的值加起来，而实际上如果链路编排由业务开发同学自己来写的话，理论上的效果是总耗时等于所有链路最长的那个链路所耗的时间**，这个才是合理的。而`FieldLevelTrackingApproach`的实现所表现出来的结果是反常识的，至于为什么这么实现，目前我们理解可能是设计者基于简单和通用方面的考虑。\n\n问题在于以上的实现在有些业务场景下是不能接受的，比如我们的列表场景的响应时间约束一共也就不到100ms，其中几十ms是因为这个原因搭进去的。针对这个问题的解决思路，一种方式是对于响应时间要求特别高的场景独立编排，不采用GraphQL；另一种方式是在GraphQL层面解决这个问题，保持架构的统一性。接下来，介绍一下我们是如何扩展GraphQL-Java执行引擎来解决这个问题的。\n\n**3）DataLoader调度优化**\n\n针对DataLoader调度的性能问题，**我们的解决思路是在最后一次调用某个****`DataLoader`的`load`之后，立即调用`dispatch`方法发出查询请求**，问题是我们怎么知道哪一次的load是最后一次load呢？这个问题也是解决DataLoader调度问题的难点，以下举个例子来解释我们的解决思路：\n\n![](https://img-blog.csdnimg.cn/img_convert/bd9ac368a374d5463c9c5ea6e41bd720.png)\n\n图22 查询对象结果示意图\n\n假设我们查询到的模型结构如下：根节点是`Query`下的字段，字段名叫`subjects`，`subject`引用的是个列表，`subject`下有两个元素，都是`ModelA`的对象实例，`ModelA`有两个字段，`fieldA`和`fieldB`，`subjects[0]`的`fieldA`关联是`ModelB`的一个实例，`subjects[0]`的`fieldB`关联多个`ModelC`实例。\n\n为了方便理解，我们定义一些概念，字段、字段实例、字段实例执行完、字段实例值大小等等：\n\n* **字段**：具有唯一路径，是静态的，和运行时对象大小没有关系，如：`subjects`和`subjects/fieldA`。\n\n* **字段实例**：字段的实例，具有唯一路径，是动态的，跟运行时对象大小有关系，如：`subjects[0]/fieldA`和`subjects[1]/fieldA`是字段`subjects/fieldA`的实例。\n\n* **字段实例执行完**：字段实例关联的对象实例都被GraphQL执行完了。\n\n* **字段实例值大小**：字段实例引用对象实例的个数，如以上示例，`subjects[0]/fieldA`字段实例值大小是1，`subjects[0]/fieldB`字段实例值大小是3。\n\n除了以上定义之外，我们的业务场景还满足以下条件：\n\n* 只有1个根节点，且根节点是列表。\n\n* `DataLoader`一定属于某个字段，某个字段下的`DataLoader`应该被执行次数等于其下的对象实例个数。\n\n基于以上信息，我们可以得出以下问题分析：\n\n* 在执行字段实例的时候，我们可以知道当前字段实例的大小，字段实例的大小等于字段关联`DataLoader`在当前实例下需要执行`load`的次数，因此在执行`load`之后，我们可以知道当前对象实例是否是其所在字段实例的最后一个对象。\n\n* 一个对象的实例可能会挂在不同的字段实例下，所以仅当当前对象实例是其所在字段实例的最后一个对象实例的时候，不代表当前对象实例是所有对象实例中的最后一个，当且仅当对象实例所在节点实例是节点的最后一个实例的时候才成立。\n\n* 我们可从字段实例大小推算字段实例的个数，比如我们知道`subjects`的大小是2，那么就知道`subjects`字段有两个字段实例`subjects[0]`和`subjects[1]`，也就知道字段`subjects/fieldA`有两个实例，`subjects[0]/fieldA`和`subjects[1]/fieldA`，因此我们从根节点可以往下推断出某个字段实例是否执行完。\n\n通过以上分析，我们可以得出，一个对象执行完的条件是其所在的字段实例以及其所在的字段所有的父亲字段实例都执行完，且当前执行的对象实例是其所在字段实例的最后一个对象实例的时候。\n\n基于这个判断逻辑，我们的实现方案是在每次调用完`DataFetcher`的时候，判断是否需要发起`dispatch`，如果是则发起。另外，以上时机和条件存在漏发`dispatch`的问题，有个特殊情况，当当前对象实例不是最后一个，但是剩下的对象大小都为0的时候，那么就永远不会触发当前对象关联的`DataLoader`的`load`了，所以在对象大小为0的时候，需要额外再判断一次。\n\n根据以上的逻辑分析，我们实现了`DataLoader`调用链路的最优化，达到理论最优的效果。\n\n## 6 新架构对研发模式的影响\n\n生产力决定生产关系，元数据驱动信息聚合架构是展示场景搭建的核心生产力，而业务开发模式和过程是生产关系，因此也会随之改变。下面我们将会从开发模式和流程两个角度来介绍新架构对研发带来的影响。\n\n### 6.1 聚焦业务的开发模式\n\n新架构提供了一套基于业务抽象出的标准化代码分解约束。以前开发同学对系统的理解很可能就是“查一查服务，把数据粘在一起”，而现在，研发同学对于业务的理解及代码分解思路将会是一致的。比如展示单元代表的是展示逻辑，取数单元代表的是取数逻辑。同时，很多冗杂且容易出错的逻辑已经被框架屏蔽掉了，研发同学能够有更多的精力聚焦于业务逻辑本身，比如：业务数据的理解和封装，展示逻辑的理解和编写，以及查询模型的抽象和建设。如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/ef9c7ad70499f66a090c1a53e358176d.png)\n\n图23 业务开发聚焦业务本身\n\n### 6.2 研发流程升级\n\n新架构不仅仅影响了研发的代码编写，同时也影响着研发流程的改进，基于元数据架构实现的可视化及配置化能力，现有研发流程和之前研发流程相比有了明显的区别，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/3b542c0413452e6b5f48505faa1c2d4f.png)\n\n图24 基于开发框架搭建展示场景前后研发流程对比\n\n以前是“一杆子捅到底”的开发模式，每个展示场景的搭建需要经历过从接口的沟通到API的开发整个过程，基于新架构之后，系统自动具备多层复用及可视化、配置化能力。\n\n**情况一**：这是最好的情况，此时取数功能和展示功能都已经被沉淀下来，研发同学需要做的只是创建查询方案，基于运营平台按需选择需要的展示单元，拿着查询方案ID基于查询接口就可以查到需要的展示信息了，可视化、配置化界面如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/8472176f0fbaaa163b4534eed899f7d8.png)\n\n图25 可视化及文案按需选用\n\n**情况二**：此时可能没有展示功能，但是通过运营平台查看到，数据源已经接入过，那么也不难，只需要基于现有的数据源编写一段加工逻辑即可，这段加工逻辑是非常爽的一段纯逻辑的编写，数据源列表如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/cdcff0b999c17ac971ebd80e2842e42a.png)\n\n图26 数据源列表可视化\n\n**情况三**：最坏的情况是此时系统不能满足当前的查询能力，这种情况比较少见，因为后端服务是比较稳定的，那么也无需惊慌，只需要按照标准规范将数据源接入进来，然后编写加工逻辑片段即可，之后这些能力是可以被持续复用的。\n\n## 7 总结\n\n商品展示场景的复杂性体现在：场景多、依赖多、逻辑多，以及不同场景之间存在差异。在这样的背景下，如果是业务初期，怎么快怎么来，采用“烟囱式”个性化建设的方式不必有过多的质疑。但是随着业务的不断发展，功能的不断迭代，以及场景的规模化趋势，“烟囱式”个性化建设的弊端会慢慢凸显出来，包括代码复杂度高、缺少能力沉淀等问题。\n\n本文以基于对美团到店商品展示场景所面临的核心矛盾分析，介绍了：\n\n* 业界不同的BFF应用模式，以及不同模式的优势和缺点。\n\n* 基于GraphQL BFF模式改进的元数据驱动的架构方案设计。\n\n* 我们在GraphQL实践过程中遇到的问题及解决思路。\n\n* 新架构对研发模式产生的影响呈现。\n\n目前，笔者所在团队负责的核心商品展示场景都已迁入新架构，基于新的研发模式，我们实现了50\\%以上的展示逻辑复用以及1倍以上的效率提升。希望本文对大家能够有所帮助。\n\n## 8 参考文献\n\n\\[1\\]<https://samnewman.io/patterns/architectural/bff/>\n\n\\[2\\]<https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation>\n\n\\[3\\][了解电商后台系统，看这篇就够了](http://www.woshipm.com/pd/3712746.html)\n\n\\[4\\][框架定义-百度百科](https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6/1212667?fr=aladdin)\n\n\\[5\\][高效研发-闲鱼在数据聚合上的探索与实践](https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA%3D%3D&chksm=fd54d63aca235f2c5abf8f65b3a0f235b55723d014aa4c7c75c48fcb5ce5c32b14fb43e5b40b&idx=1&mid=2247483947&mpshare=1&scene=21&sn=d1b600e57cca8c7304cca77a693c0b32&srcid=0404dHE42TNCAGO7clq9K2ep#wechat_redirect)\n\n\\[6\\] 《系统架构-复杂系统的产品设计与开发》\n\n**阅读更多**\n\n\\---\n\n[前端](https://t.1yb.co/jo7r)** |**[ ](https://t.1yb.co/jo7v)[算法](https://t.1yb.co/jsdG)** |** [后端](https://t.1yb.co/jsWK)** | **[数据](https://t.1yb.co/jqRZ)\n\n[安全](https://t.1yb.co/jo7v)** | **[Android](https://t.1yb.co/jui4)** |** [iOS](https://t.1yb.co/jtXE) ** |** [运维](https://t.1yb.co/jo7K)** | **[测试](https://t.1yb.co/jtsX)\n\n\\----------  END  \\----------\n\n**招聘信息**\n\n美团到店综合研发中心长期招聘前端、后端、数据仓库、机器学习/数据挖掘算法工程师，坐标上海，欢迎感兴趣的同学发送简历至：tech\\@meituan.com（邮件标题注明：美团到店综合研发中心—上海）。\n\n**也许你还想看**\n\n**  | **[移动端UI一致性解决方案](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd124aae8a65c3b888df80cc15d2f6dbd25c7e7094f3dc665c8e9079963b709043ac6fe865a7&idx=1&mid=2651755491&scene=21&sn=4ac719deb5781e9060b4d023bc75691f#wechat_redirect)\n\n**  |** [外卖客户端容器化架构的演进](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd1252888a65db9e9aac10fb930f5ad6a2f62b47b6df868c7cb975ebf613650ad3c4b8ade51e&idx=1&mid=2651753413&scene=21&sn=e987b6a105d65952de35c86e5f19ba03#wechat_redirect)\n\n**  |** [美团外卖iOS多端复用的推动、支撑与思考](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd12aeee8a6527f8a297d0dc797b81492837019c821898ae21c3e158831aaa7a383d5155ec9b&idx=1&mid=2651748259&scene=21&sn=a7ef0d515e94631c8d86bdbbf81da143#wechat_redirect)\n\n![](https://img-blog.csdnimg.cn/img_convert/0ff5c1ae9c5bc0135299c86b4d6026a6.png)","source":"_posts/GraphQL及元数据驱动架构在后端BFF中的实践.md","raw":"---\ntitle: GraphQL及元数据驱动架构在后端BFF中的实践\ndate: 2021-05-08 11:14:25\ntags:\n---\n\n \n\n> GraphQL是Facebook提出的一种数据查询语言，核心特性是数据聚合和按需索取，目前被广泛应用于前后端之间，解决客户端灵活使用数据问题。本文介绍的是GraphQL的另一种实践，我们将GraphQL下沉至后端BFF（Backend For Frontend）层之下，结合元数据技术，实现数据和加工逻辑的按需查询和执行。这样不仅解决了后端BFF层灵活使用数据的问题，这些字段加工逻辑还可以直接复用，大幅度提升了研发的效率。\n>\n> 本文介绍的实践方案已经在美团部分业务场景中落地，并取得不错效果，希望这些经验能够对大家有帮助。\n<!-- more -->\nBFF一词来自Sam Newman的一篇博文《[Pattern:Backends For Frontends](https://samnewman.io/patterns/architectural/bff/)》，指的是服务于前端的后端。BFF是解决什么问题的呢？据原文描述，随着移动互联网的兴起，原适应于桌面Web的服务端功能希望同时提供给移动App使用，而在这个过程中存在这样的问题：\n\n* 移动App和桌面Web在UI部分存在差异。\n\n* 移动App涉及不同的端，不仅有iOS、还有Android，这些不同端的UI之间存在差异。\n\n* 原有后端功能和桌面Web UI之间已经存在了较大的耦合。\n\n因为端的差异性存在，服务端的功能要针对端的差异进行适配和裁剪，而服务端的业务功能本身是相对单一的，这就产生了一个矛盾——服务端的单一业务功能和端的差异性诉求之间的矛盾。那么这个问题怎么解决呢？这也是文章的副标题所描述的\"Single-purpose Edge Services for UIs and external parties\"，引入BFF，由BFF来针对多端差异做适配，这也是目前业界广泛使用的一种模式。\n\n![](https://img-blog.csdnimg.cn/img_convert/f95ef4461eb139612078136232f13a5a.png)\n\n图1 BFF示意图\n\n在实际业务的实践中，导致这种端差异性的原因有很多，有技术的原因，也有业务的原因。比如，用户的客户端是Android还是iOS，是大屏还是小屏，是什么版本。再比如，业务属于哪个行业，产品形态是什么，功能投放在什么场景，面向的用户群体是谁等等。这些因素都会带来面向端的功能逻辑的差异性。\n\n在这个问题上，笔者所在团队负责的商品展示业务有一定的发言权，同样的商品业务，在C端的展示功能逻辑，深刻受到商品类型、所在行业、交易形态、投放场所、面向群体等因素的影响。同时，面向消费者端的功能频繁迭代的属性，更是加剧并深化了这种矛盾，使其演化成了一种服务端单一稳定与端的差异灵活之间的矛盾，这也是商品展示（商品展示BFF）业务系统存在的必然性原因。本文主要在美团到店商品展示场景的背景下，介绍面临的一些问题及解决思路。\n\n## 2 BFF背景下的核心矛盾\n\nBFF这层的引入是解决服务端单一稳定与端的差异灵活诉求之间的矛盾，这个矛盾并不是不存在，而是转移了。由原来后端和前端之间的矛盾转移成了BFF和前端之间的矛盾。笔者所在团队的主要工作，就是和这种矛盾作斗争。下面以具体的业务场景为例，结合当前的业务特点，说明在BFF的生产模式下，我们所面临的具体问题。下图是两个不同行业的团购货架展示模块，这两个模块我们认为是两个商品的展示场景，它们是两套独立定义的产品逻辑，并且会各自迭代。\n\n![](https://img-blog.csdnimg.cn/img_convert/1aa3a779c43374c8038fada6b5c78290.png)\n\n图2 展示场景\n\n在业务发展初期，这样的场景不多。BFF层系统“烟囱式”建设，功能快速开发上线满足业务的诉求，在这样的情况下，这种矛盾表现的不明显。而随着业务发展，行业的开拓，形成了许许多多这样的商品展示功能，矛盾逐渐加剧，主要表现在以下两个方面：\n\n* **业务支撑效率**：随着商品展示场景变得越来越多，API呈爆炸趋势，业务支撑效率和人力成线性关系，系统能力难以支撑业务场景的规模化拓展。\n\n* **系统复杂度高**：核心功能持续迭代，内部逻辑充斥着`if…else…`，代码过程式编写，系统复杂度较高，难以修改和维护。\n\n那么这些问题是怎么产生的呢？这要结合“烟囱式”系统建设的背景和商品展示场景所面临的业务，以及系统特点来进行理解。\n\n**特点一：外部依赖多、场景间取数存在差异、用户体验要求高**\n\n图例展示了两个不同行业的团购货架模块，这样一个看似不大的模块，后端在BFF层要调用20个以上的下游服务才能把数据拿全，这是其一。在上面两个不同的场景中，需要的数据源集合存在差异，而且这种差异普遍存在，这是其二，比如足疗团购货架需要的某个数据源，在丽人团购货架上不需要，丽人团购货架需要的某个数据源，足疗团购货架不需要。尽管依赖下游服务多，同时还要保证C端的用户体验，这是其三。\n\n这几个特点给技术带来了不小的难题：1）聚合大小难控制，聚合功能是分场景建设？还是统一建设？如果分场景建设，必然存在不同场景重复编写类似聚合逻辑的问题。如果统一建设，那么一个大而全的数据聚合中必然会存在无效的调用。2）聚合逻辑的复杂性控制问题，在这么多的数据源的情况下，不仅要考虑业务逻辑怎么写，还要考虑异步调用的编排，在代码复杂度未能良好控制的情况下，后续聚合的变更修改将会是一个难题。\n\n**特点二：展示逻辑多、场景之间存在差异，共性个性逻辑耦合**\n\n我们可以明显地识别某一类场景的逻辑是存在共性的，比如团单相关的展示场景。直观可以看出基本上都是展示团单维度的信息，但这只是表象。实际上在模块的生成过程中存在诸多的差异，比如以下两种差异：\n\n* **字段拼接逻辑差异**：比如以上图中两个团购货架的团购标题为例，同样是标题，在丽人团购货架中的展示规则是：**\\[类型\\] + 团购标题**，而在足疗团购货架的展示规则是：**团购标题**。\n\n* **排序过滤逻辑差异**：比如同样是团单列表，A场景按照销量倒排序，B场景按照价格排序，不同场景的排序逻辑不同。\n\n诸如此类的**展示逻辑**的差异性还有很多。类似的场景实际上在内部存在很多差异的逻辑，后端如何应对这种差异性是一个难题，下面是最常见的一种写法，通过读取具体的条件字段来做判断实现逻辑路由，如下所示：\n\n```go\nif(category == \"丽人\") {  title = \"[\" + category + \"]\" + productTitle;} else if (category == \"足疗\") {  title = productTitle；}\n```\n\n这种方案在功能实现方面没有问题，也能够复用共同的逻辑。但是实际上在场景非常多的情况下，将会有非常多的差异性判断逻辑叠加在一起，功能一直会被持续迭代的情况下，可以想象，系统将会变得越来越复杂，越来越难以修改和维护。\n\n**总结**：在BFF这层，不同商品展示场景存在差异。在业务发展初期，系统通过独立建设的方式支持业务快速试错，在这种情况下，业务差异性带来的问题不明显。而随着业务的不断发展，需要搭建及运营的场景越来越多，呈规模化趋势。此时，业务对技术效率提出了更高的要求。**在这种场景多、场景间存在差异的背景下，如何满足场景拓展效率同时能够控制系统的复杂性，就是我们业务场景中面临的核心问题**。\n\n## 3 BFF应用模式分析\n\n目前，业界针对此类的解决方案主要有两种模式，一种是后端BFF模式；另一种是前端BFF模式。\n\n### 3.1 后端BFF模式\n\n后端BFF模式指的是BFF由后端同学负责，这种模式目前最广泛的实践是基于GraphQL搭建的后端BFF方案，具体是：后端将展示字段封装成展示服务，通过GraphQL编排之后暴露给前端使用。如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/9186b94e756d77bc0b098a1807e44e5a.png)\n\n图3 后端BFF模式\n\n这种模式最大的特性和优势是，当展示字段已经存在的情况下，后端不需要关心前端差异性需求，按需查询的能力由GraphQL支持。这个特性可以很好地应对不同场景存在展示字段差异性这个问题，前端直接基于GraphQL按需查询数据即可，后端不需要变更。同时，借助GraphQL的编排和聚合查询能力，后端可以将逻辑分解在不同的展示服务中，因此在一定程度上能够化解BFF这层的复杂性。\n\n但是基于这种模式，仍然存在几个问题：展示服务颗粒度问题、数据图划分问题以及字段扩散问题，下图是基于当前模式的具体案例：\n\n![](https://img-blog.csdnimg.cn/img_convert/8dd8ffdccae5273f1c723e7bba3e4e5a.png)\n\n图4 后端BFF模式（案例）\n\n**1）展示服务颗粒度设计问题**\n\n这种方案要求展示逻辑和取数逻辑封装在一个模块中，形成一个展示服务（Presentation Service），如上图所示。而实际上展示逻辑和取数逻辑是多对多的关系，还是以前文提到的例子说明：\n\n> **背景**：有两个展示服务，分别封装了商品标题和商品标签的查询能力。\n>\n> **情景**：此时PM提了一个需求，希望商品在某个场景的标题以“\\[类型\\]+商品标题”的形式展示，此时商品标题的拼接依赖类型数据，而此时类型数据商品标签展示服务中已经调用了。\n>\n> **问题**：商品标题展示服务自己调用类型数据还是将两个展示服务合并到一起？\n\n以上描述的问题的是展示服务颗粒度把控的问题，我们可以怀疑上述的示例是不是因为展示服务的颗粒度过小？那么反过来看一看，如果将两个服务合并到一起，那么势必又会存在冗余。这是展示服务设计的难点，**核心原因在于，展示逻辑和取数逻辑本身是多对多的关系，结果却被设计放在了一起**。\n\n**2）数据图划分问题**\n\n通过GraphQL将多个展示服务的数据聚合到一张图（GraphQL Schema）中，形成一个数据视图，需要数据的时候只要数据在图中，就可以基于Query按需查询。那么问题来了，这个图应该怎么组织？是一张图还是多张图？图过大的话，势必带来复杂的数据关系维护问题，图过小则将会降低方案本身的价值。\n\n**3）展示服务内部复杂性 + 模型扩散问题**\n\n上文提到过一个商品标题的展示存在不同拼接逻辑的情况，在商品展示场景，这种逻辑特别普遍。比如同样是价格，A行业展示优惠后价格，B行业展示优惠前价格；同样是标签位置，C行业展示服务时长，而D行业展示商品特性等。\n\n那么问题来了，展示模型如何设计？以标题字段为例，是在展示模型上放个`title`字段就可以，还是分别放个`title`和`titleWithCategory`？如果是前者那么服务内部必然会存在`if…else…`这种逻辑，用于区分`title`的拼接方式，这同样会导致展示服务内部的复杂性。如果是多个字段，那么可以想象，展示服务的模型字段也将会不断扩散。\n\n**总结**：后端BFF模式能够在一定程度上化解后端逻辑的复杂性，同时提供一个展示字段的复用机制。但是仍然存在未决问题，如展示服务的颗粒度设计问题，数据图的划分问题，以及展示服务内部的复杂性和字段扩散问题。目前这种模式实践的代表有Facebook、爱彼迎、eBay、爱奇艺、携程、去哪儿等等。\n\n### 3.2 前端BFF模式\n\n前端BFF模式在Sam Newman的文章中的\"And Autonomy\"部分有特别的介绍，指的是BFF本身由前端团队自己负责，如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/94d1b0ff6f68b252711f342b3b0fd0ae.png)\n\n图5 前端BFF模式\n\n这种模式的理念是，本来能一个团队交付的需求，没必要拆成两个团队，两个团队本身带来较大的沟通协作成本。本质上，也是一种将“敌我矛盾”转化为“人民内部矛盾”的思路。前端完全接手BFF的开发工作，实现数据查询的自给自足，大大减少了前后端的协作成本。但是这种模式没有提到我们关心的一些核心问题，如：复杂性如何应对、差异性如何应对、展示模型如何设计等等问题。除此之外，这种模式也存在一些前提条件及弊端，比如较为完备的前端基础设施；前端不仅仅需要关心渲染、还需要了解业务逻辑等。\n\n**总结**：前端BFF模式通过前端自主查询和使用数据，从而达到降低跨团队协作的成本，提升BFF研发效率的效果。目前这种模式的实践代表是阿里巴巴。\n\n## 4 基于GraphQL及元数据的信息聚合架构设计\n\n### 4.1 整体思路\n\n通过对后端BFF和前端BFF两种模式的分析，我们最终选择后端BFF模式，前端BFF这个方案对目前的研发模式影响较大，不仅需要大量的前端资源，而且需要建设完善的前端基础设施，方案实施成本比较高昂。\n\n前文提到的后端GraphQL BFF模式代入我们的具体场景虽然存在一些问题，但是总体有非常大的参考价值，比如展示字段的复用思路、数据的按需查询思路等等。在商品展示场景中，**有80\\%的工作集中在数据的聚合和集成部分**，并且这部分具有很强的复用价值，因此信息的查询和聚合是我们面临的主要矛盾。因此，我们的思路是：**基于GraphQL+后端BFF方案改进，实现取数逻辑和展示逻辑的可沉淀、可组合、可复用**，整体架构如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/21ffacbebfc1c0c59f6a6f1f421e55ac.png)\n\n图6 基于GraphQL BFF的改进思路\n\n从上图可看出，与传统GraphQL BFF方案最大的差别在于我们将GraphQL下放至数据聚合部分，由于数据来源于商品领域，领域是相对稳定的，因此数据图规模可控且相对稳定。除此之外，整体架构的核心设计还包括以下三个方面：1）取数展示分离；2）查询模型归一；3）元数据驱动架构。\n\n我们通过取数展示分离解决展示服务颗粒度问题，同时使得展示逻辑和取数逻辑可沉淀、可复用；通过查询模型归一化设计解决展示字段扩散的问题；通过元数据驱动架构实现能力的可视化，业务组件编排执行的自动化，这能够让业务开发同学聚焦于业务逻辑的本身。下面将针对这三个部分逐一展开介绍。\n\n### 4.2 核心设计\n\n4.2.1 取数展示分离\n\n上文提到，在商品展示场景中，展示逻辑和取数逻辑是多对多的关系，而传统的基于GraphQL的后端BFF实践方案把它们封装在一起，这是导致展示服务颗粒度难以设计的根本原因。思考一下取数逻辑和展示逻辑的关注点是什么？取数逻辑关注怎么查询和聚合数据，而展示逻辑关注怎么加工生成需要的展示字段，它们的关注点不一样，放在一起也会增加展示服务的复杂性。因此，我们的思路是将取数逻辑和展示逻辑分离开来，单独封装成逻辑单元，分别叫取数单元和展示单元。在取数展示分离之后，GraphQL也随之下沉，用于实现数据的按需聚合，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/eeb60decd04420062983c3711804700e.png)\n\n图7 取数展示分离+元数据描述\n\n那么取数和展示逻辑的封装颗粒度是怎么样的呢？不能太小也不能太大，在颗粒度的设计上，我们有两个核心考量：1）**复用**，展示逻辑和取数逻辑在商品展示场景中，都是可以被复用的资产，我们希望它们能沉淀下来，被单独按需使用；2）**简单**，保持简单，这样容易修改和维护。基于这两点考虑，颗粒度的定义如下：\n\n* **取数单元**：尽量只封装1个外部数据源，同时负责对外部数据源返回的模型进行简化，这部分生成的模型我们称之为取数模型。\n\n* **展示单元**：尽量只封装1个展示字段的加工逻辑。\n\n分开的好处是简单且可被组合使用，那么具体如何实现组合使用呢？我们的思路是通过元数据来描述它们之间的关系，基于元数据由统一的执行框架来关联运行，具体设计下文会展开介绍。通过取数和展示的分离，元数据的关联和运行时的组合调用，可以保持逻辑单元的简单，同时又满足复用诉求，这也很好地解决了传统方案中存在的**展示服务的颗粒度问题**。\n\n4.2.2 查询模型归一\n\n展示单元的加工结果通过什么样的接口透出呢？接下来，我们介绍一下查询接口设计的问题。\n\n**1）查询接口设计的难点**\n\n常见查询接口的设计模式有以下两种：\n\n* **强类型模式**：强类型模式指的是查询接口返回的是POJO对象，每一个查询结果对应POJO中的一个明确的具有特定业务含义的字段。\n\n* **弱类型模式**：弱类型模式指的是查询结果以K-V或JSON模式返回，没有明确的静态字段。\n\n以上两种模式在业界都有广泛应用，且它们都有明确的优缺点。强类型模式对开发者友好，但是业务是不断迭代的，与此同时，系统沉淀的展示单元会不断丰富，在这样的情况下，接口返回的DTO中的字段将会愈来愈多，每次新功能的支持，都要伴随着接口查询模型的修改，JAR版本的升级。而JAR的升级涉及数据提供方和数据消费两方，存在明显效率问题。另外，可以想象，查询模型的不断迭代，最终将会包括成百上千个字段，难以维护。\n\n而弱类型模式恰好可以弥补这一缺点，但是弱类型模式对于开发者来说非常不友好，接口查询模型中有哪些查询结果对于开发者来说在开发的过程中完全没有感觉，但是程序员的天性就是喜欢通过代码去理解逻辑，而非配置和文档。其实，这两种接口设计模式都存在着一个共性问题——缺少抽象，下面两节，我们将介绍在接口返回的查询模型设计方面的抽象思路及框架能力支持。\n\n**2）查询模型归一化设计**\n\n回到商品展示场景中，一个展示字段有多种不同的实现，如商品标题的两种不同实现方式：1）商品标题；2）\\[类目\\]+商品标题。商品标题和这两种展示逻辑的关系本质上是一种抽象-具体的关系。识别这个关键点，思路就明了了，我们的思路是对查询模型做抽象。查询模型上都是抽象的展示字段，一个展示字段对应多个展示单元，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/d6223539b474bfdd2a7673c39752bcee.png)\n\n图8 查询模型归一化 + 元数据描述\n\n在实现层面，同样基于元数据描述展示字段和展示单元之间的关系，基于以上的设计思路，可以在一定程度上减缓模型的扩散，但是还不能避免扩展。比如除了价格、库存、销量等每个商品都有的标准属性之外，不同的商品类型一般还会有这个商品特有的属性。比如密室主题拼场商品才有“几人拼”这样的描述属性，这种字段本身抽象的意义不大，且放在商品查询模型中作为一个单独的字段会导致模型扩张，针对这类问题，我们的解决思路是引入扩展属性，扩展属性专门承载这类非标准的字段。通过标准字段 + 扩展属性的方式建立查询模型，能够较好地解决**字段扩散**的问题。\n\n4.2.3 元数据驱动架构\n\n到目前为止，我们定义了如何分解**业务逻辑单元**以及如何设计**查询模型**，并提到用元数据描述它们之间的关系。基于以上定义实现的业务逻辑及模型，都具备很强的复用价值，可以作为业务资产沉淀下来。那么，为什么用元数据描述业务功能及模型之间的关系呢？\n\n我们引入元数据描述主要有两个目的：1）代码逻辑的自动编排，通过元数据描述业务逻辑之间的关联关系，运行时可以自动基于元数据实现逻辑之间的关联执行，从而可以消除大量的人工逻辑编排代码；2）业务功能的可视化，元数据本身描述了业务逻辑所提供的功能，如下面两个示例：\n\n> 团单基础售价字符串展示，例：30元。 \n>\n> 团单市场价展示字段，例：100元。\n\n这些元数据上报到系统中，可以用于展示当前系统所提供的功能。通过元数据描述组件及组件之间关联关系，通过框架解析元数据自动进行业务组件的调用执行，形成了如下的元数据架构：\n\n![](https://img-blog.csdnimg.cn/img_convert/2acb91a2cdbee4b5eccf5309f5a295e1.png)\n\n图9 元数据驱动架构\n\n整体架构由三个核心部分组成：\n\n* **业务能力**：标准的业务逻辑单元，包括取数单元、展示单元和查询模型，这些都是关键的可复用资产。\n\n* **元数据**：描述业务功能（如：展示单元、取数单元）以及业务功能之间的关联关系，比如展示单元依赖的数据，展示单元映射的展示字段等。\n\n* **执行引擎**：负责消费元数据，并基于元数据对业务逻辑进行调度和执行。\n\n通过以上三个部分有机的组合在一起，形成了一个元数据驱动风格的架构。\n\n## 5 针对GraphQL的优化实践\n\n### 5.1 使用简化\n\n**1）GraphQL直接使用问题**\n\n引入GraphQL，会引入一些额外的复杂性，比如会涉及到GraphQL带来的一些概念如：Schema、RuntimeWiring，下面是基于GraphQL原生Java框架的开发过程：\n\n![](https://img-blog.csdnimg.cn/img_convert/1897c77958b24b0253e5968bb06dd147.png)\n\n图10 原生GraphQL使用流程\n\n这些概念对于未接触过GraphQL的同学来说，增加了学习和理解的成本，而这些概念和业务领域通常没有什么关系。而我们仅仅希望使用GraphQL的按需查询特性，却被GraphQL本身拖累了，业务开发同学的关注点应该聚焦在业务逻辑本身才对，这个问题如何解决呢？\n\n著名计算机科学家David Wheeler说了一句名言，\"All problems in computer science can be solved by another level of indirection\"。没有加一层解决不了的问题，本质上是需要有人来对这事负责，因此我们在原生GraphQL之上增加了一层执行引擎层来解决这些问题，目标是屏蔽GraphQL的复杂性，让开发人员只需要关注业务逻辑。\n\n**2）取数接口标准化**\n\n首先要简化数据的接入，原生的`DataFetcher`和`DataLoader`都是处在一个比较高的抽象层次，缺少业务语义，而在查询场景，我们能够归纳出，所有的查询都属于以下三种模式：\n\n* **1查1**：根据一个条件查询一个结果。\n\n* **1查N**：根据一个条件查询多个结果。\n\n* **N查N**：一查一或一查多的批量版本。\n\n由此，我们对查询接口进行了标准化，业务开发同学基于场景判断是那种，按需选择使用即可，取数接口标准化设计如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/71923ee77268f32e6ce9789d1b8dfc9f.png)\n\n图11 查询接口标准化\n\n业务开发同学按需选择所需要使用的取数器，通过泛型指定结果类型，1查1和1查N比较简单，N查N我们对其定义为批量查询接口，用于满足\"N+1\"的场景，其中`batchSize`字段用于指定分片大小，`batchKey`用于指定查询Key，业务开发只需要指定参数，其他的框架会自动处理。除此之外，我们还约束了返回结果必须是`CompleteFuture`，用于满足聚合查询的全链路异步化。\n\n**3）聚合编排自动化**\n\n取数接口标准化使得数据源的语义更清晰，开发过程按需选择即可，简化了业务的开发。但是此时业务开发同学写好`Fetcher`之后，还需要去另一个地方去写`Schema`，而且写完`Schema`还要再写`Schema`和`Fetcher`的映射关系，业务开发更享受写代码的过程，不太愿意写完代码还要去另外一个地方取配置，并且同时维护代码和对应配置也提高了出错的可能性，能否将这些冗杂的步骤移除掉？\n\n`Schema`和`RuntimeWiring`本质上是想描述某些信息，如果这些信息换一种方式描述是不是也可以。我们的优化思路是，在业务开发过程中标记注解，通过注解标注的元数据描述这些信息，其他的事情交给框架来做。解决思路示意图如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/a1adc237e833aad26cf198c0c5dd6bc2.png)\n\n图12 注解元数据描述Schema和RuntimeWiring\n\n### 5.2 性能优化\n\n5.2.1 GraphQL性能问题\n\n虽然GraphQL已经开源了，但是Facebook只开源了相关标准，并没有给出解决方案。GraphQL-Java框架是由社区贡献的，基于开源的GraphQL-Java作为按需查询引擎的方案，我们发现了GraphQL应用方面的一些问题，这些问题有部分是由于使用姿势不当所导致的，也有部分是GraphQL本身实现的问题，比如我们遇到的几个典型的问题：\n\n* 耗CPU的查询解析，包括`Schema`的解析和`Query`的解析。\n\n* 当查询模型比较复杂特别是存在大列表时候的延时问题。\n\n* 基于反射的模型转换CPU消耗问题。\n\n* `DataLoader`的层级调度问题。\n\n于是，我们对使用方式和框架做了一些优化与改造，以解决上面列举的问题。本章着重介绍我们在GraphQL-Java方面的优化和改造思路。\n\n5.2.2 GraphQL编译优化\n\n**1）GraphQL语言原理概述**\n\nGraphQL是一种查询语言，目的是基于直观和灵活的语法构建客户端应用程序，用于描述其数据需求和交互。GraphQL属于一种领域特定语言（DSL），而我们所使用的GraphQL-Java客户端在语言编译层面是基于ANTLR 4实现的，ANTLR 4是一种基于Java编写的语言定义和识别工具，Antlr是一种元语言（Meta-Language），它们的关系如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/780967a52c449d978d352760694363ae.png)\n\n图13 GraphQL语言基本原理示意图\n\nGraphQL执行引擎所接受的`Schema`及`Query`都是基于GraphQL定义的语言所表达的内容，GraphQL执行引擎不能直接理解GraphQL，在执行之前必须由GraphQL编译器翻译成GraphQL执行引擎可理解的文档对象。而GraphQL编译器是基于Java的，经验表明在大流量场景实时解释的情况下，这部分代码将会成为CPU热点，而且还占用响应延迟，`Schema`或`Query`越复杂，性能损耗越明显。\n\n**2）Schema及Query编译缓存**\n\n`Schema`表达的是数据视图和取数模型同构，相对稳定，个数也不多，在我们的业务场景一个服务也就一个。因此，我们的做法是在启动的时候就将基于`Schema`构造的GraphQL执行引擎构造好，作为单例缓存下来。对于`Query`来说，每个场景的`Query`有些差异，因此`Query`的解析结果不能作为单例，我们的做法是实现`PreparsedDocumentProvider`接口，基于`Query`作为Key将`Query`编译结果缓存下来。如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/ddbeff75483900054a0216acf3a52f2d.png)\n\n图14 Query缓存实现示意图\n\n5.2.3 GraphQL执行引擎优化\n\n**1）GraphQL执行机制及问题**\n\n我们先一起了解一下GraphQL-Java执行引擎的运行机制是怎么样的。假设在执行策略上我们选取的是`AsyncExecutionStrategy`，来看看GraphQL执行引擎的执行过程：\n\n![](https://img-blog.csdnimg.cn/img_convert/d792881807f277fcc7d02794f645a8b0.png)\n\n图15 GraphQL执行引擎执行过程\n\n以上时序图做了些简化，去除了一些与重点无关的信息，`AsyncExecutionStrategy`的`execute`方法是对象执行策略的异步化模式实现，是查询执行的起点，也是根节点查询的入口，`AsyncExecutionStrategy`对对象的多个字段的查询逻辑，采取的是循环+异步化的实现方式，我们从`AsyncExecutionStrategy`的`execute`方法触发，理解GraphQL查询过程如下：\n\n1.  调用当前字段所绑定的`DataFetcher`的`get`方法，如果字段没有绑定`DataFetcher`，则通过默认的`PropertyDataFetcher`查询字段，`PropertyDataFetcher`的实现是基于反射从源对象中读取查询字段。\n\n2.  将从`DataFetcher`查询得到结果包装成`CompletableFuture`，如果结果本身是`CompletableFuture`，那么不会包装。\n\n3.  结果`CompletableFuture`完成之后，调用`completeValue`，基于结果类型分别处理。\n\n* 如果查询结果是列表类型，那么会对列表类型进行遍历，针对每个元素在递归执行`completeValue`。\n\n* 如果结果类型是对象类型，那么会对对象执行`execute`，又回到了起点，也就是`AsyncExecutionStrategy的execute`。\n\n以上是GraphQL的执行过程，这个过程有什么问题呢？下面基于图上的标记顺序一起看看GraphQL在我们的业务场景中应用和实践所遇到的问题，这些问题不代表在其他场景也是问题，仅供参考：\n\n**问题1**：`PropertyDataFetcher`CPU热点问题，`PropertyDataFetcher`在整个查询过程中属于热点代码，而其本身的实现也有一些优化空间，在运行时`PropertyDataFetcher`的执行会成为CPU热点。（具体问题可参考GitHub上的commit和Conversion：<https://github.com/graphql-java/graphql-java/pull/1815>）\n\n![](https://img-blog.csdnimg.cn/img_convert/c3a377dc5b480b403a67a2f8cb5cd0aa.png)图16 PropertyDataFetcher成为CPU热点\n\n**问题2**：列表的计算耗时问题，列表计算是循环的，对于查询结果中存在大列表的场景，此时循环会造成整体查询明显的延迟。我们举个具体的例子，假设查询结果中存在一个列表大小是1000，每个元素的处理是0.01ms，那么总体耗时就是10ms，基于GraphQL的查机制，这个10ms会阻塞整个链路。\n\n**2）类型转换优化**\n\n通过GraphQL查询引擎拿到的GraphQL模型，和业务实现的`DataFetcher`返回的取数模型是同构，但是所有字段的类型都会被转换成GraphQL内部类型。`PropertyDataFetcher`之所以会成为CPU热点，问题就在于这个模型转换过程，业务定义的模型到GraphQL类型模型转换过程示意图如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/eda15725d57060f766fa2800784e4c3f.png)\n\n图17 业务模型到GraphQL模型转换示意图\n\n当查询结果模型中的字段非常多的时候，比如上万个，意味着每次查询有上万次的`PropertyDataFetcher`操作，实际就反映到了CPU热点问题上，这个问题我们的解决思路是保持原有业务模型不变，将非`PropertyDataFetcher`查询的结果反过来填充到业务模型上。如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/00312b3068556d24deb0f880e5c2103a.png)\n\n图18 查询结果模型反向填充示意图\n\n基于这个思路，我们通过GraphQL执行引擎拿到的结果就是业务`Fetcher`返回的对象模型，这样不仅仅解决了因字段反射转换带来的CPU热点问题，同时对于业务开发来说增加了友好性。因为GraphQL模型类似JSON模型，这种模型是缺少业务类型的，业务开发直接使用起来非常麻烦。以上优化在一个场景上试点测试，结果显示该场景的平均响应时间缩短1.457ms，平均99线缩短5.82ms，平均CPU利用率降低约12\\%。\n\n**3）列表计算优化**\n\n当列表元素比较多的时候，默认的单线程遍历列表元素计算的方式所带来的延迟消耗非常明显，对于响应时间比较敏感的场景这个延迟优化很有必要。针对这个问题我们的解决思路是充分利用CPU多核心计算的能力，将列表拆分成任务，通过多线程并行执行，实现机制如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/0858f511ea09ad5454793bd7ec11760e.png)\n\n图19 列表遍历多核计算思路\n\n5.2.4 GraphQL-DataLoader调度优化\n\n**1）DataLoader基本原理**\n\n先简单介绍一下DataLoader的基本原理，DataLoader有两个方法，一个是`load`，一个是`dispatch`，在解决N+1问题的场景中，DataLoader是这么用的：\n\n![](https://img-blog.csdnimg.cn/img_convert/a41035acc9fa1a6bcafc9ebf069b1071.png)\n\n图20 DataLoader基本原理\n\n整体分为2个阶段，第一个阶段调用`load`，调用N次，第二个阶段调用`dispatch`，调用`dispatch`的时候会真正的执行数据查询，从而达到批量查询+分片的效果。\n\n**2）DataLoader调度问题**\n\nGraphQL-Java对DataLoader的集成支持的实现在`FieldLevelTrackingApproach`中，`FieldLevelTrackingApproach`的实现会存在怎样的问题呢？下面基于一张图表达原生DataLoader调度机制所产生的问题：\n\n![](https://img-blog.csdnimg.cn/img_convert/7b544ddbe308313dfbb784d2cb3d4e50.png)\n\n图21 GraphQL-Java对DataLoader调度存在的问题\n\n问题很明显，基于`FieldLevelTrackingApproach`的实现，下一层级的`DataLoader`的`dispatch`是需要等到本层级的结果都回来之后才发出。基于这样的实现，查询总耗时的计算公式等于：TOTAL = MAX（Level  1 Latency）+ MAX（Level 2 Latency）+ MAX（Level 3 Latency）+ … ，**总查询耗时等于每层耗时最大的值加起来，而实际上如果链路编排由业务开发同学自己来写的话，理论上的效果是总耗时等于所有链路最长的那个链路所耗的时间**，这个才是合理的。而`FieldLevelTrackingApproach`的实现所表现出来的结果是反常识的，至于为什么这么实现，目前我们理解可能是设计者基于简单和通用方面的考虑。\n\n问题在于以上的实现在有些业务场景下是不能接受的，比如我们的列表场景的响应时间约束一共也就不到100ms，其中几十ms是因为这个原因搭进去的。针对这个问题的解决思路，一种方式是对于响应时间要求特别高的场景独立编排，不采用GraphQL；另一种方式是在GraphQL层面解决这个问题，保持架构的统一性。接下来，介绍一下我们是如何扩展GraphQL-Java执行引擎来解决这个问题的。\n\n**3）DataLoader调度优化**\n\n针对DataLoader调度的性能问题，**我们的解决思路是在最后一次调用某个****`DataLoader`的`load`之后，立即调用`dispatch`方法发出查询请求**，问题是我们怎么知道哪一次的load是最后一次load呢？这个问题也是解决DataLoader调度问题的难点，以下举个例子来解释我们的解决思路：\n\n![](https://img-blog.csdnimg.cn/img_convert/bd9ac368a374d5463c9c5ea6e41bd720.png)\n\n图22 查询对象结果示意图\n\n假设我们查询到的模型结构如下：根节点是`Query`下的字段，字段名叫`subjects`，`subject`引用的是个列表，`subject`下有两个元素，都是`ModelA`的对象实例，`ModelA`有两个字段，`fieldA`和`fieldB`，`subjects[0]`的`fieldA`关联是`ModelB`的一个实例，`subjects[0]`的`fieldB`关联多个`ModelC`实例。\n\n为了方便理解，我们定义一些概念，字段、字段实例、字段实例执行完、字段实例值大小等等：\n\n* **字段**：具有唯一路径，是静态的，和运行时对象大小没有关系，如：`subjects`和`subjects/fieldA`。\n\n* **字段实例**：字段的实例，具有唯一路径，是动态的，跟运行时对象大小有关系，如：`subjects[0]/fieldA`和`subjects[1]/fieldA`是字段`subjects/fieldA`的实例。\n\n* **字段实例执行完**：字段实例关联的对象实例都被GraphQL执行完了。\n\n* **字段实例值大小**：字段实例引用对象实例的个数，如以上示例，`subjects[0]/fieldA`字段实例值大小是1，`subjects[0]/fieldB`字段实例值大小是3。\n\n除了以上定义之外，我们的业务场景还满足以下条件：\n\n* 只有1个根节点，且根节点是列表。\n\n* `DataLoader`一定属于某个字段，某个字段下的`DataLoader`应该被执行次数等于其下的对象实例个数。\n\n基于以上信息，我们可以得出以下问题分析：\n\n* 在执行字段实例的时候，我们可以知道当前字段实例的大小，字段实例的大小等于字段关联`DataLoader`在当前实例下需要执行`load`的次数，因此在执行`load`之后，我们可以知道当前对象实例是否是其所在字段实例的最后一个对象。\n\n* 一个对象的实例可能会挂在不同的字段实例下，所以仅当当前对象实例是其所在字段实例的最后一个对象实例的时候，不代表当前对象实例是所有对象实例中的最后一个，当且仅当对象实例所在节点实例是节点的最后一个实例的时候才成立。\n\n* 我们可从字段实例大小推算字段实例的个数，比如我们知道`subjects`的大小是2，那么就知道`subjects`字段有两个字段实例`subjects[0]`和`subjects[1]`，也就知道字段`subjects/fieldA`有两个实例，`subjects[0]/fieldA`和`subjects[1]/fieldA`，因此我们从根节点可以往下推断出某个字段实例是否执行完。\n\n通过以上分析，我们可以得出，一个对象执行完的条件是其所在的字段实例以及其所在的字段所有的父亲字段实例都执行完，且当前执行的对象实例是其所在字段实例的最后一个对象实例的时候。\n\n基于这个判断逻辑，我们的实现方案是在每次调用完`DataFetcher`的时候，判断是否需要发起`dispatch`，如果是则发起。另外，以上时机和条件存在漏发`dispatch`的问题，有个特殊情况，当当前对象实例不是最后一个，但是剩下的对象大小都为0的时候，那么就永远不会触发当前对象关联的`DataLoader`的`load`了，所以在对象大小为0的时候，需要额外再判断一次。\n\n根据以上的逻辑分析，我们实现了`DataLoader`调用链路的最优化，达到理论最优的效果。\n\n## 6 新架构对研发模式的影响\n\n生产力决定生产关系，元数据驱动信息聚合架构是展示场景搭建的核心生产力，而业务开发模式和过程是生产关系，因此也会随之改变。下面我们将会从开发模式和流程两个角度来介绍新架构对研发带来的影响。\n\n### 6.1 聚焦业务的开发模式\n\n新架构提供了一套基于业务抽象出的标准化代码分解约束。以前开发同学对系统的理解很可能就是“查一查服务，把数据粘在一起”，而现在，研发同学对于业务的理解及代码分解思路将会是一致的。比如展示单元代表的是展示逻辑，取数单元代表的是取数逻辑。同时，很多冗杂且容易出错的逻辑已经被框架屏蔽掉了，研发同学能够有更多的精力聚焦于业务逻辑本身，比如：业务数据的理解和封装，展示逻辑的理解和编写，以及查询模型的抽象和建设。如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/ef9c7ad70499f66a090c1a53e358176d.png)\n\n图23 业务开发聚焦业务本身\n\n### 6.2 研发流程升级\n\n新架构不仅仅影响了研发的代码编写，同时也影响着研发流程的改进，基于元数据架构实现的可视化及配置化能力，现有研发流程和之前研发流程相比有了明显的区别，如下图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/3b542c0413452e6b5f48505faa1c2d4f.png)\n\n图24 基于开发框架搭建展示场景前后研发流程对比\n\n以前是“一杆子捅到底”的开发模式，每个展示场景的搭建需要经历过从接口的沟通到API的开发整个过程，基于新架构之后，系统自动具备多层复用及可视化、配置化能力。\n\n**情况一**：这是最好的情况，此时取数功能和展示功能都已经被沉淀下来，研发同学需要做的只是创建查询方案，基于运营平台按需选择需要的展示单元，拿着查询方案ID基于查询接口就可以查到需要的展示信息了，可视化、配置化界面如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/8472176f0fbaaa163b4534eed899f7d8.png)\n\n图25 可视化及文案按需选用\n\n**情况二**：此时可能没有展示功能，但是通过运营平台查看到，数据源已经接入过，那么也不难，只需要基于现有的数据源编写一段加工逻辑即可，这段加工逻辑是非常爽的一段纯逻辑的编写，数据源列表如下示意图所示：\n\n![](https://img-blog.csdnimg.cn/img_convert/cdcff0b999c17ac971ebd80e2842e42a.png)\n\n图26 数据源列表可视化\n\n**情况三**：最坏的情况是此时系统不能满足当前的查询能力，这种情况比较少见，因为后端服务是比较稳定的，那么也无需惊慌，只需要按照标准规范将数据源接入进来，然后编写加工逻辑片段即可，之后这些能力是可以被持续复用的。\n\n## 7 总结\n\n商品展示场景的复杂性体现在：场景多、依赖多、逻辑多，以及不同场景之间存在差异。在这样的背景下，如果是业务初期，怎么快怎么来，采用“烟囱式”个性化建设的方式不必有过多的质疑。但是随着业务的不断发展，功能的不断迭代，以及场景的规模化趋势，“烟囱式”个性化建设的弊端会慢慢凸显出来，包括代码复杂度高、缺少能力沉淀等问题。\n\n本文以基于对美团到店商品展示场景所面临的核心矛盾分析，介绍了：\n\n* 业界不同的BFF应用模式，以及不同模式的优势和缺点。\n\n* 基于GraphQL BFF模式改进的元数据驱动的架构方案设计。\n\n* 我们在GraphQL实践过程中遇到的问题及解决思路。\n\n* 新架构对研发模式产生的影响呈现。\n\n目前，笔者所在团队负责的核心商品展示场景都已迁入新架构，基于新的研发模式，我们实现了50\\%以上的展示逻辑复用以及1倍以上的效率提升。希望本文对大家能够有所帮助。\n\n## 8 参考文献\n\n\\[1\\]<https://samnewman.io/patterns/architectural/bff/>\n\n\\[2\\]<https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation>\n\n\\[3\\][了解电商后台系统，看这篇就够了](http://www.woshipm.com/pd/3712746.html)\n\n\\[4\\][框架定义-百度百科](https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6/1212667?fr=aladdin)\n\n\\[5\\][高效研发-闲鱼在数据聚合上的探索与实践](https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA%3D%3D&chksm=fd54d63aca235f2c5abf8f65b3a0f235b55723d014aa4c7c75c48fcb5ce5c32b14fb43e5b40b&idx=1&mid=2247483947&mpshare=1&scene=21&sn=d1b600e57cca8c7304cca77a693c0b32&srcid=0404dHE42TNCAGO7clq9K2ep#wechat_redirect)\n\n\\[6\\] 《系统架构-复杂系统的产品设计与开发》\n\n**阅读更多**\n\n\\---\n\n[前端](https://t.1yb.co/jo7r)** |**[ ](https://t.1yb.co/jo7v)[算法](https://t.1yb.co/jsdG)** |** [后端](https://t.1yb.co/jsWK)** | **[数据](https://t.1yb.co/jqRZ)\n\n[安全](https://t.1yb.co/jo7v)** | **[Android](https://t.1yb.co/jui4)** |** [iOS](https://t.1yb.co/jtXE) ** |** [运维](https://t.1yb.co/jo7K)** | **[测试](https://t.1yb.co/jtsX)\n\n\\----------  END  \\----------\n\n**招聘信息**\n\n美团到店综合研发中心长期招聘前端、后端、数据仓库、机器学习/数据挖掘算法工程师，坐标上海，欢迎感兴趣的同学发送简历至：tech\\@meituan.com（邮件标题注明：美团到店综合研发中心—上海）。\n\n**也许你还想看**\n\n**  | **[移动端UI一致性解决方案](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd124aae8a65c3b888df80cc15d2f6dbd25c7e7094f3dc665c8e9079963b709043ac6fe865a7&idx=1&mid=2651755491&scene=21&sn=4ac719deb5781e9060b4d023bc75691f#wechat_redirect)\n\n**  |** [外卖客户端容器化架构的演进](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd1252888a65db9e9aac10fb930f5ad6a2f62b47b6df868c7cb975ebf613650ad3c4b8ade51e&idx=1&mid=2651753413&scene=21&sn=e987b6a105d65952de35c86e5f19ba03#wechat_redirect)\n\n**  |** [美团外卖iOS多端复用的推动、支撑与思考](http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA%3D%3D&chksm=bd12aeee8a6527f8a297d0dc797b81492837019c821898ae21c3e158831aaa7a383d5155ec9b&idx=1&mid=2651748259&scene=21&sn=a7ef0d515e94631c8d86bdbbf81da143#wechat_redirect)\n\n![](https://img-blog.csdnimg.cn/img_convert/0ff5c1ae9c5bc0135299c86b4d6026a6.png)","slug":"GraphQL及元数据驱动架构在后端BFF中的实践","published":1,"updated":"2021-07-22T07:00:25.476Z","_id":"ckpp6ut6e000hdgv9dias5yhv","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>GraphQL是Facebook提出的一种数据查询语言，核心特性是数据聚合和按需索取，目前被广泛应用于前后端之间，解决客户端灵活使用数据问题。本文介绍的是GraphQL的另一种实践，我们将GraphQL下沉至后端BFF（Backend For Frontend）层之下，结合元数据技术，实现数据和加工逻辑的按需查询和执行。这样不仅解决了后端BFF层灵活使用数据的问题，这些字段加工逻辑还可以直接复用，大幅度提升了研发的效率。</p>\n<p>本文介绍的实践方案已经在美团部分业务场景中落地，并取得不错效果，希望这些经验能够对大家有帮助。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>BFF一词来自Sam Newman的一篇博文《<a href=\"https://samnewman.io/patterns/architectural/bff/\">Pattern:Backends For Frontends</a>》，指的是服务于前端的后端。BFF是解决什么问题的呢？据原文描述，随着移动互联网的兴起，原适应于桌面Web的服务端功能希望同时提供给移动App使用，而在这个过程中存在这样的问题：</p>\n<ul>\n<li><p>移动App和桌面Web在UI部分存在差异。</p>\n</li>\n<li><p>移动App涉及不同的端，不仅有iOS、还有Android，这些不同端的UI之间存在差异。</p>\n</li>\n<li><p>原有后端功能和桌面Web UI之间已经存在了较大的耦合。</p>\n</li>\n</ul>\n<p>因为端的差异性存在，服务端的功能要针对端的差异进行适配和裁剪，而服务端的业务功能本身是相对单一的，这就产生了一个矛盾——服务端的单一业务功能和端的差异性诉求之间的矛盾。那么这个问题怎么解决呢？这也是文章的副标题所描述的”Single-purpose Edge Services for UIs and external parties”，引入BFF，由BFF来针对多端差异做适配，这也是目前业界广泛使用的一种模式。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f95ef4461eb139612078136232f13a5a.png\"></p>\n<p>图1 BFF示意图</p>\n<p>在实际业务的实践中，导致这种端差异性的原因有很多，有技术的原因，也有业务的原因。比如，用户的客户端是Android还是iOS，是大屏还是小屏，是什么版本。再比如，业务属于哪个行业，产品形态是什么，功能投放在什么场景，面向的用户群体是谁等等。这些因素都会带来面向端的功能逻辑的差异性。</p>\n<p>在这个问题上，笔者所在团队负责的商品展示业务有一定的发言权，同样的商品业务，在C端的展示功能逻辑，深刻受到商品类型、所在行业、交易形态、投放场所、面向群体等因素的影响。同时，面向消费者端的功能频繁迭代的属性，更是加剧并深化了这种矛盾，使其演化成了一种服务端单一稳定与端的差异灵活之间的矛盾，这也是商品展示（商品展示BFF）业务系统存在的必然性原因。本文主要在美团到店商品展示场景的背景下，介绍面临的一些问题及解决思路。</p>\n<h2 id=\"2-BFF背景下的核心矛盾\"><a href=\"#2-BFF背景下的核心矛盾\" class=\"headerlink\" title=\"2 BFF背景下的核心矛盾\"></a>2 BFF背景下的核心矛盾</h2><p>BFF这层的引入是解决服务端单一稳定与端的差异灵活诉求之间的矛盾，这个矛盾并不是不存在，而是转移了。由原来后端和前端之间的矛盾转移成了BFF和前端之间的矛盾。笔者所在团队的主要工作，就是和这种矛盾作斗争。下面以具体的业务场景为例，结合当前的业务特点，说明在BFF的生产模式下，我们所面临的具体问题。下图是两个不同行业的团购货架展示模块，这两个模块我们认为是两个商品的展示场景，它们是两套独立定义的产品逻辑，并且会各自迭代。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1aa3a779c43374c8038fada6b5c78290.png\"></p>\n<p>图2 展示场景</p>\n<p>在业务发展初期，这样的场景不多。BFF层系统“烟囱式”建设，功能快速开发上线满足业务的诉求，在这样的情况下，这种矛盾表现的不明显。而随着业务发展，行业的开拓，形成了许许多多这样的商品展示功能，矛盾逐渐加剧，主要表现在以下两个方面：</p>\n<ul>\n<li><p><strong>业务支撑效率</strong>：随着商品展示场景变得越来越多，API呈爆炸趋势，业务支撑效率和人力成线性关系，系统能力难以支撑业务场景的规模化拓展。</p>\n</li>\n<li><p><strong>系统复杂度高</strong>：核心功能持续迭代，内部逻辑充斥着<code>if…else…</code>，代码过程式编写，系统复杂度较高，难以修改和维护。</p>\n</li>\n</ul>\n<p>那么这些问题是怎么产生的呢？这要结合“烟囱式”系统建设的背景和商品展示场景所面临的业务，以及系统特点来进行理解。</p>\n<p><strong>特点一：外部依赖多、场景间取数存在差异、用户体验要求高</strong></p>\n<p>图例展示了两个不同行业的团购货架模块，这样一个看似不大的模块，后端在BFF层要调用20个以上的下游服务才能把数据拿全，这是其一。在上面两个不同的场景中，需要的数据源集合存在差异，而且这种差异普遍存在，这是其二，比如足疗团购货架需要的某个数据源，在丽人团购货架上不需要，丽人团购货架需要的某个数据源，足疗团购货架不需要。尽管依赖下游服务多，同时还要保证C端的用户体验，这是其三。</p>\n<p>这几个特点给技术带来了不小的难题：1）聚合大小难控制，聚合功能是分场景建设？还是统一建设？如果分场景建设，必然存在不同场景重复编写类似聚合逻辑的问题。如果统一建设，那么一个大而全的数据聚合中必然会存在无效的调用。2）聚合逻辑的复杂性控制问题，在这么多的数据源的情况下，不仅要考虑业务逻辑怎么写，还要考虑异步调用的编排，在代码复杂度未能良好控制的情况下，后续聚合的变更修改将会是一个难题。</p>\n<p><strong>特点二：展示逻辑多、场景之间存在差异，共性个性逻辑耦合</strong></p>\n<p>我们可以明显地识别某一类场景的逻辑是存在共性的，比如团单相关的展示场景。直观可以看出基本上都是展示团单维度的信息，但这只是表象。实际上在模块的生成过程中存在诸多的差异，比如以下两种差异：</p>\n<ul>\n<li><p><strong>字段拼接逻辑差异</strong>：比如以上图中两个团购货架的团购标题为例，同样是标题，在丽人团购货架中的展示规则是：<strong>[类型] + 团购标题</strong>，而在足疗团购货架的展示规则是：<strong>团购标题</strong>。</p>\n</li>\n<li><p><strong>排序过滤逻辑差异</strong>：比如同样是团单列表，A场景按照销量倒排序，B场景按照价格排序，不同场景的排序逻辑不同。</p>\n</li>\n</ul>\n<p>诸如此类的<strong>展示逻辑</strong>的差异性还有很多。类似的场景实际上在内部存在很多差异的逻辑，后端如何应对这种差异性是一个难题，下面是最常见的一种写法，通过读取具体的条件字段来做判断实现逻辑路由，如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(category == <span class=\"string\">&quot;丽人&quot;</span>) &#123;  title = <span class=\"string\">&quot;[&quot;</span> + category + <span class=\"string\">&quot;]&quot;</span> + productTitle;&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (category == <span class=\"string\">&quot;足疗&quot;</span>) &#123;  title = productTitle；&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方案在功能实现方面没有问题，也能够复用共同的逻辑。但是实际上在场景非常多的情况下，将会有非常多的差异性判断逻辑叠加在一起，功能一直会被持续迭代的情况下，可以想象，系统将会变得越来越复杂，越来越难以修改和维护。</p>\n<p><strong>总结</strong>：在BFF这层，不同商品展示场景存在差异。在业务发展初期，系统通过独立建设的方式支持业务快速试错，在这种情况下，业务差异性带来的问题不明显。而随着业务的不断发展，需要搭建及运营的场景越来越多，呈规模化趋势。此时，业务对技术效率提出了更高的要求。<strong>在这种场景多、场景间存在差异的背景下，如何满足场景拓展效率同时能够控制系统的复杂性，就是我们业务场景中面临的核心问题</strong>。</p>\n<h2 id=\"3-BFF应用模式分析\"><a href=\"#3-BFF应用模式分析\" class=\"headerlink\" title=\"3 BFF应用模式分析\"></a>3 BFF应用模式分析</h2><p>目前，业界针对此类的解决方案主要有两种模式，一种是后端BFF模式；另一种是前端BFF模式。</p>\n<h3 id=\"3-1-后端BFF模式\"><a href=\"#3-1-后端BFF模式\" class=\"headerlink\" title=\"3.1 后端BFF模式\"></a>3.1 后端BFF模式</h3><p>后端BFF模式指的是BFF由后端同学负责，这种模式目前最广泛的实践是基于GraphQL搭建的后端BFF方案，具体是：后端将展示字段封装成展示服务，通过GraphQL编排之后暴露给前端使用。如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9186b94e756d77bc0b098a1807e44e5a.png\"></p>\n<p>图3 后端BFF模式</p>\n<p>这种模式最大的特性和优势是，当展示字段已经存在的情况下，后端不需要关心前端差异性需求，按需查询的能力由GraphQL支持。这个特性可以很好地应对不同场景存在展示字段差异性这个问题，前端直接基于GraphQL按需查询数据即可，后端不需要变更。同时，借助GraphQL的编排和聚合查询能力，后端可以将逻辑分解在不同的展示服务中，因此在一定程度上能够化解BFF这层的复杂性。</p>\n<p>但是基于这种模式，仍然存在几个问题：展示服务颗粒度问题、数据图划分问题以及字段扩散问题，下图是基于当前模式的具体案例：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8dd8ffdccae5273f1c723e7bba3e4e5a.png\"></p>\n<p>图4 后端BFF模式（案例）</p>\n<p><strong>1）展示服务颗粒度设计问题</strong></p>\n<p>这种方案要求展示逻辑和取数逻辑封装在一个模块中，形成一个展示服务（Presentation Service），如上图所示。而实际上展示逻辑和取数逻辑是多对多的关系，还是以前文提到的例子说明：</p>\n<blockquote>\n<p><strong>背景</strong>：有两个展示服务，分别封装了商品标题和商品标签的查询能力。</p>\n<p><strong>情景</strong>：此时PM提了一个需求，希望商品在某个场景的标题以“[类型]+商品标题”的形式展示，此时商品标题的拼接依赖类型数据，而此时类型数据商品标签展示服务中已经调用了。</p>\n<p><strong>问题</strong>：商品标题展示服务自己调用类型数据还是将两个展示服务合并到一起？</p>\n</blockquote>\n<p>以上描述的问题的是展示服务颗粒度把控的问题，我们可以怀疑上述的示例是不是因为展示服务的颗粒度过小？那么反过来看一看，如果将两个服务合并到一起，那么势必又会存在冗余。这是展示服务设计的难点，<strong>核心原因在于，展示逻辑和取数逻辑本身是多对多的关系，结果却被设计放在了一起</strong>。</p>\n<p><strong>2）数据图划分问题</strong></p>\n<p>通过GraphQL将多个展示服务的数据聚合到一张图（GraphQL Schema）中，形成一个数据视图，需要数据的时候只要数据在图中，就可以基于Query按需查询。那么问题来了，这个图应该怎么组织？是一张图还是多张图？图过大的话，势必带来复杂的数据关系维护问题，图过小则将会降低方案本身的价值。</p>\n<p><strong>3）展示服务内部复杂性 + 模型扩散问题</strong></p>\n<p>上文提到过一个商品标题的展示存在不同拼接逻辑的情况，在商品展示场景，这种逻辑特别普遍。比如同样是价格，A行业展示优惠后价格，B行业展示优惠前价格；同样是标签位置，C行业展示服务时长，而D行业展示商品特性等。</p>\n<p>那么问题来了，展示模型如何设计？以标题字段为例，是在展示模型上放个<code>title</code>字段就可以，还是分别放个<code>title</code>和<code>titleWithCategory</code>？如果是前者那么服务内部必然会存在<code>if…else…</code>这种逻辑，用于区分<code>title</code>的拼接方式，这同样会导致展示服务内部的复杂性。如果是多个字段，那么可以想象，展示服务的模型字段也将会不断扩散。</p>\n<p><strong>总结</strong>：后端BFF模式能够在一定程度上化解后端逻辑的复杂性，同时提供一个展示字段的复用机制。但是仍然存在未决问题，如展示服务的颗粒度设计问题，数据图的划分问题，以及展示服务内部的复杂性和字段扩散问题。目前这种模式实践的代表有Facebook、爱彼迎、eBay、爱奇艺、携程、去哪儿等等。</p>\n<h3 id=\"3-2-前端BFF模式\"><a href=\"#3-2-前端BFF模式\" class=\"headerlink\" title=\"3.2 前端BFF模式\"></a>3.2 前端BFF模式</h3><p>前端BFF模式在Sam Newman的文章中的”And Autonomy”部分有特别的介绍，指的是BFF本身由前端团队自己负责，如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/94d1b0ff6f68b252711f342b3b0fd0ae.png\"></p>\n<p>图5 前端BFF模式</p>\n<p>这种模式的理念是，本来能一个团队交付的需求，没必要拆成两个团队，两个团队本身带来较大的沟通协作成本。本质上，也是一种将“敌我矛盾”转化为“人民内部矛盾”的思路。前端完全接手BFF的开发工作，实现数据查询的自给自足，大大减少了前后端的协作成本。但是这种模式没有提到我们关心的一些核心问题，如：复杂性如何应对、差异性如何应对、展示模型如何设计等等问题。除此之外，这种模式也存在一些前提条件及弊端，比如较为完备的前端基础设施；前端不仅仅需要关心渲染、还需要了解业务逻辑等。</p>\n<p><strong>总结</strong>：前端BFF模式通过前端自主查询和使用数据，从而达到降低跨团队协作的成本，提升BFF研发效率的效果。目前这种模式的实践代表是阿里巴巴。</p>\n<h2 id=\"4-基于GraphQL及元数据的信息聚合架构设计\"><a href=\"#4-基于GraphQL及元数据的信息聚合架构设计\" class=\"headerlink\" title=\"4 基于GraphQL及元数据的信息聚合架构设计\"></a>4 基于GraphQL及元数据的信息聚合架构设计</h2><h3 id=\"4-1-整体思路\"><a href=\"#4-1-整体思路\" class=\"headerlink\" title=\"4.1 整体思路\"></a>4.1 整体思路</h3><p>通过对后端BFF和前端BFF两种模式的分析，我们最终选择后端BFF模式，前端BFF这个方案对目前的研发模式影响较大，不仅需要大量的前端资源，而且需要建设完善的前端基础设施，方案实施成本比较高昂。</p>\n<p>前文提到的后端GraphQL BFF模式代入我们的具体场景虽然存在一些问题，但是总体有非常大的参考价值，比如展示字段的复用思路、数据的按需查询思路等等。在商品展示场景中，<strong>有80%的工作集中在数据的聚合和集成部分</strong>，并且这部分具有很强的复用价值，因此信息的查询和聚合是我们面临的主要矛盾。因此，我们的思路是：<strong>基于GraphQL+后端BFF方案改进，实现取数逻辑和展示逻辑的可沉淀、可组合、可复用</strong>，整体架构如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/21ffacbebfc1c0c59f6a6f1f421e55ac.png\"></p>\n<p>图6 基于GraphQL BFF的改进思路</p>\n<p>从上图可看出，与传统GraphQL BFF方案最大的差别在于我们将GraphQL下放至数据聚合部分，由于数据来源于商品领域，领域是相对稳定的，因此数据图规模可控且相对稳定。除此之外，整体架构的核心设计还包括以下三个方面：1）取数展示分离；2）查询模型归一；3）元数据驱动架构。</p>\n<p>我们通过取数展示分离解决展示服务颗粒度问题，同时使得展示逻辑和取数逻辑可沉淀、可复用；通过查询模型归一化设计解决展示字段扩散的问题；通过元数据驱动架构实现能力的可视化，业务组件编排执行的自动化，这能够让业务开发同学聚焦于业务逻辑的本身。下面将针对这三个部分逐一展开介绍。</p>\n<h3 id=\"4-2-核心设计\"><a href=\"#4-2-核心设计\" class=\"headerlink\" title=\"4.2 核心设计\"></a>4.2 核心设计</h3><p>4.2.1 取数展示分离</p>\n<p>上文提到，在商品展示场景中，展示逻辑和取数逻辑是多对多的关系，而传统的基于GraphQL的后端BFF实践方案把它们封装在一起，这是导致展示服务颗粒度难以设计的根本原因。思考一下取数逻辑和展示逻辑的关注点是什么？取数逻辑关注怎么查询和聚合数据，而展示逻辑关注怎么加工生成需要的展示字段，它们的关注点不一样，放在一起也会增加展示服务的复杂性。因此，我们的思路是将取数逻辑和展示逻辑分离开来，单独封装成逻辑单元，分别叫取数单元和展示单元。在取数展示分离之后，GraphQL也随之下沉，用于实现数据的按需聚合，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eeb60decd04420062983c3711804700e.png\"></p>\n<p>图7 取数展示分离+元数据描述</p>\n<p>那么取数和展示逻辑的封装颗粒度是怎么样的呢？不能太小也不能太大，在颗粒度的设计上，我们有两个核心考量：1）<strong>复用</strong>，展示逻辑和取数逻辑在商品展示场景中，都是可以被复用的资产，我们希望它们能沉淀下来，被单独按需使用；2）<strong>简单</strong>，保持简单，这样容易修改和维护。基于这两点考虑，颗粒度的定义如下：</p>\n<ul>\n<li><p><strong>取数单元</strong>：尽量只封装1个外部数据源，同时负责对外部数据源返回的模型进行简化，这部分生成的模型我们称之为取数模型。</p>\n</li>\n<li><p><strong>展示单元</strong>：尽量只封装1个展示字段的加工逻辑。</p>\n</li>\n</ul>\n<p>分开的好处是简单且可被组合使用，那么具体如何实现组合使用呢？我们的思路是通过元数据来描述它们之间的关系，基于元数据由统一的执行框架来关联运行，具体设计下文会展开介绍。通过取数和展示的分离，元数据的关联和运行时的组合调用，可以保持逻辑单元的简单，同时又满足复用诉求，这也很好地解决了传统方案中存在的<strong>展示服务的颗粒度问题</strong>。</p>\n<p>4.2.2 查询模型归一</p>\n<p>展示单元的加工结果通过什么样的接口透出呢？接下来，我们介绍一下查询接口设计的问题。</p>\n<p><strong>1）查询接口设计的难点</strong></p>\n<p>常见查询接口的设计模式有以下两种：</p>\n<ul>\n<li><p><strong>强类型模式</strong>：强类型模式指的是查询接口返回的是POJO对象，每一个查询结果对应POJO中的一个明确的具有特定业务含义的字段。</p>\n</li>\n<li><p><strong>弱类型模式</strong>：弱类型模式指的是查询结果以K-V或JSON模式返回，没有明确的静态字段。</p>\n</li>\n</ul>\n<p>以上两种模式在业界都有广泛应用，且它们都有明确的优缺点。强类型模式对开发者友好，但是业务是不断迭代的，与此同时，系统沉淀的展示单元会不断丰富，在这样的情况下，接口返回的DTO中的字段将会愈来愈多，每次新功能的支持，都要伴随着接口查询模型的修改，JAR版本的升级。而JAR的升级涉及数据提供方和数据消费两方，存在明显效率问题。另外，可以想象，查询模型的不断迭代，最终将会包括成百上千个字段，难以维护。</p>\n<p>而弱类型模式恰好可以弥补这一缺点，但是弱类型模式对于开发者来说非常不友好，接口查询模型中有哪些查询结果对于开发者来说在开发的过程中完全没有感觉，但是程序员的天性就是喜欢通过代码去理解逻辑，而非配置和文档。其实，这两种接口设计模式都存在着一个共性问题——缺少抽象，下面两节，我们将介绍在接口返回的查询模型设计方面的抽象思路及框架能力支持。</p>\n<p><strong>2）查询模型归一化设计</strong></p>\n<p>回到商品展示场景中，一个展示字段有多种不同的实现，如商品标题的两种不同实现方式：1）商品标题；2）[类目]+商品标题。商品标题和这两种展示逻辑的关系本质上是一种抽象-具体的关系。识别这个关键点，思路就明了了，我们的思路是对查询模型做抽象。查询模型上都是抽象的展示字段，一个展示字段对应多个展示单元，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d6223539b474bfdd2a7673c39752bcee.png\"></p>\n<p>图8 查询模型归一化 + 元数据描述</p>\n<p>在实现层面，同样基于元数据描述展示字段和展示单元之间的关系，基于以上的设计思路，可以在一定程度上减缓模型的扩散，但是还不能避免扩展。比如除了价格、库存、销量等每个商品都有的标准属性之外，不同的商品类型一般还会有这个商品特有的属性。比如密室主题拼场商品才有“几人拼”这样的描述属性，这种字段本身抽象的意义不大，且放在商品查询模型中作为一个单独的字段会导致模型扩张，针对这类问题，我们的解决思路是引入扩展属性，扩展属性专门承载这类非标准的字段。通过标准字段 + 扩展属性的方式建立查询模型，能够较好地解决<strong>字段扩散</strong>的问题。</p>\n<p>4.2.3 元数据驱动架构</p>\n<p>到目前为止，我们定义了如何分解<strong>业务逻辑单元</strong>以及如何设计<strong>查询模型</strong>，并提到用元数据描述它们之间的关系。基于以上定义实现的业务逻辑及模型，都具备很强的复用价值，可以作为业务资产沉淀下来。那么，为什么用元数据描述业务功能及模型之间的关系呢？</p>\n<p>我们引入元数据描述主要有两个目的：1）代码逻辑的自动编排，通过元数据描述业务逻辑之间的关联关系，运行时可以自动基于元数据实现逻辑之间的关联执行，从而可以消除大量的人工逻辑编排代码；2）业务功能的可视化，元数据本身描述了业务逻辑所提供的功能，如下面两个示例：</p>\n<blockquote>\n<p>团单基础售价字符串展示，例：30元。 </p>\n<p>团单市场价展示字段，例：100元。</p>\n</blockquote>\n<p>这些元数据上报到系统中，可以用于展示当前系统所提供的功能。通过元数据描述组件及组件之间关联关系，通过框架解析元数据自动进行业务组件的调用执行，形成了如下的元数据架构：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2acb91a2cdbee4b5eccf5309f5a295e1.png\"></p>\n<p>图9 元数据驱动架构</p>\n<p>整体架构由三个核心部分组成：</p>\n<ul>\n<li><p><strong>业务能力</strong>：标准的业务逻辑单元，包括取数单元、展示单元和查询模型，这些都是关键的可复用资产。</p>\n</li>\n<li><p><strong>元数据</strong>：描述业务功能（如：展示单元、取数单元）以及业务功能之间的关联关系，比如展示单元依赖的数据，展示单元映射的展示字段等。</p>\n</li>\n<li><p><strong>执行引擎</strong>：负责消费元数据，并基于元数据对业务逻辑进行调度和执行。</p>\n</li>\n</ul>\n<p>通过以上三个部分有机的组合在一起，形成了一个元数据驱动风格的架构。</p>\n<h2 id=\"5-针对GraphQL的优化实践\"><a href=\"#5-针对GraphQL的优化实践\" class=\"headerlink\" title=\"5 针对GraphQL的优化实践\"></a>5 针对GraphQL的优化实践</h2><h3 id=\"5-1-使用简化\"><a href=\"#5-1-使用简化\" class=\"headerlink\" title=\"5.1 使用简化\"></a>5.1 使用简化</h3><p><strong>1）GraphQL直接使用问题</strong></p>\n<p>引入GraphQL，会引入一些额外的复杂性，比如会涉及到GraphQL带来的一些概念如：Schema、RuntimeWiring，下面是基于GraphQL原生Java框架的开发过程：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1897c77958b24b0253e5968bb06dd147.png\"></p>\n<p>图10 原生GraphQL使用流程</p>\n<p>这些概念对于未接触过GraphQL的同学来说，增加了学习和理解的成本，而这些概念和业务领域通常没有什么关系。而我们仅仅希望使用GraphQL的按需查询特性，却被GraphQL本身拖累了，业务开发同学的关注点应该聚焦在业务逻辑本身才对，这个问题如何解决呢？</p>\n<p>著名计算机科学家David Wheeler说了一句名言，”All problems in computer science can be solved by another level of indirection”。没有加一层解决不了的问题，本质上是需要有人来对这事负责，因此我们在原生GraphQL之上增加了一层执行引擎层来解决这些问题，目标是屏蔽GraphQL的复杂性，让开发人员只需要关注业务逻辑。</p>\n<p><strong>2）取数接口标准化</strong></p>\n<p>首先要简化数据的接入，原生的<code>DataFetcher</code>和<code>DataLoader</code>都是处在一个比较高的抽象层次，缺少业务语义，而在查询场景，我们能够归纳出，所有的查询都属于以下三种模式：</p>\n<ul>\n<li><p><strong>1查1</strong>：根据一个条件查询一个结果。</p>\n</li>\n<li><p><strong>1查N</strong>：根据一个条件查询多个结果。</p>\n</li>\n<li><p><strong>N查N</strong>：一查一或一查多的批量版本。</p>\n</li>\n</ul>\n<p>由此，我们对查询接口进行了标准化，业务开发同学基于场景判断是那种，按需选择使用即可，取数接口标准化设计如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/71923ee77268f32e6ce9789d1b8dfc9f.png\"></p>\n<p>图11 查询接口标准化</p>\n<p>业务开发同学按需选择所需要使用的取数器，通过泛型指定结果类型，1查1和1查N比较简单，N查N我们对其定义为批量查询接口，用于满足”N+1”的场景，其中<code>batchSize</code>字段用于指定分片大小，<code>batchKey</code>用于指定查询Key，业务开发只需要指定参数，其他的框架会自动处理。除此之外，我们还约束了返回结果必须是<code>CompleteFuture</code>，用于满足聚合查询的全链路异步化。</p>\n<p><strong>3）聚合编排自动化</strong></p>\n<p>取数接口标准化使得数据源的语义更清晰，开发过程按需选择即可，简化了业务的开发。但是此时业务开发同学写好<code>Fetcher</code>之后，还需要去另一个地方去写<code>Schema</code>，而且写完<code>Schema</code>还要再写<code>Schema</code>和<code>Fetcher</code>的映射关系，业务开发更享受写代码的过程，不太愿意写完代码还要去另外一个地方取配置，并且同时维护代码和对应配置也提高了出错的可能性，能否将这些冗杂的步骤移除掉？</p>\n<p><code>Schema</code>和<code>RuntimeWiring</code>本质上是想描述某些信息，如果这些信息换一种方式描述是不是也可以。我们的优化思路是，在业务开发过程中标记注解，通过注解标注的元数据描述这些信息，其他的事情交给框架来做。解决思路示意图如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a1adc237e833aad26cf198c0c5dd6bc2.png\"></p>\n<p>图12 注解元数据描述Schema和RuntimeWiring</p>\n<h3 id=\"5-2-性能优化\"><a href=\"#5-2-性能优化\" class=\"headerlink\" title=\"5.2 性能优化\"></a>5.2 性能优化</h3><p>5.2.1 GraphQL性能问题</p>\n<p>虽然GraphQL已经开源了，但是Facebook只开源了相关标准，并没有给出解决方案。GraphQL-Java框架是由社区贡献的，基于开源的GraphQL-Java作为按需查询引擎的方案，我们发现了GraphQL应用方面的一些问题，这些问题有部分是由于使用姿势不当所导致的，也有部分是GraphQL本身实现的问题，比如我们遇到的几个典型的问题：</p>\n<ul>\n<li><p>耗CPU的查询解析，包括<code>Schema</code>的解析和<code>Query</code>的解析。</p>\n</li>\n<li><p>当查询模型比较复杂特别是存在大列表时候的延时问题。</p>\n</li>\n<li><p>基于反射的模型转换CPU消耗问题。</p>\n</li>\n<li><p><code>DataLoader</code>的层级调度问题。</p>\n</li>\n</ul>\n<p>于是，我们对使用方式和框架做了一些优化与改造，以解决上面列举的问题。本章着重介绍我们在GraphQL-Java方面的优化和改造思路。</p>\n<p>5.2.2 GraphQL编译优化</p>\n<p><strong>1）GraphQL语言原理概述</strong></p>\n<p>GraphQL是一种查询语言，目的是基于直观和灵活的语法构建客户端应用程序，用于描述其数据需求和交互。GraphQL属于一种领域特定语言（DSL），而我们所使用的GraphQL-Java客户端在语言编译层面是基于ANTLR 4实现的，ANTLR 4是一种基于Java编写的语言定义和识别工具，Antlr是一种元语言（Meta-Language），它们的关系如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/780967a52c449d978d352760694363ae.png\"></p>\n<p>图13 GraphQL语言基本原理示意图</p>\n<p>GraphQL执行引擎所接受的<code>Schema</code>及<code>Query</code>都是基于GraphQL定义的语言所表达的内容，GraphQL执行引擎不能直接理解GraphQL，在执行之前必须由GraphQL编译器翻译成GraphQL执行引擎可理解的文档对象。而GraphQL编译器是基于Java的，经验表明在大流量场景实时解释的情况下，这部分代码将会成为CPU热点，而且还占用响应延迟，<code>Schema</code>或<code>Query</code>越复杂，性能损耗越明显。</p>\n<p><strong>2）Schema及Query编译缓存</strong></p>\n<p><code>Schema</code>表达的是数据视图和取数模型同构，相对稳定，个数也不多，在我们的业务场景一个服务也就一个。因此，我们的做法是在启动的时候就将基于<code>Schema</code>构造的GraphQL执行引擎构造好，作为单例缓存下来。对于<code>Query</code>来说，每个场景的<code>Query</code>有些差异，因此<code>Query</code>的解析结果不能作为单例，我们的做法是实现<code>PreparsedDocumentProvider</code>接口，基于<code>Query</code>作为Key将<code>Query</code>编译结果缓存下来。如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ddbeff75483900054a0216acf3a52f2d.png\"></p>\n<p>图14 Query缓存实现示意图</p>\n<p>5.2.3 GraphQL执行引擎优化</p>\n<p><strong>1）GraphQL执行机制及问题</strong></p>\n<p>我们先一起了解一下GraphQL-Java执行引擎的运行机制是怎么样的。假设在执行策略上我们选取的是<code>AsyncExecutionStrategy</code>，来看看GraphQL执行引擎的执行过程：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d792881807f277fcc7d02794f645a8b0.png\"></p>\n<p>图15 GraphQL执行引擎执行过程</p>\n<p>以上时序图做了些简化，去除了一些与重点无关的信息，<code>AsyncExecutionStrategy</code>的<code>execute</code>方法是对象执行策略的异步化模式实现，是查询执行的起点，也是根节点查询的入口，<code>AsyncExecutionStrategy</code>对对象的多个字段的查询逻辑，采取的是循环+异步化的实现方式，我们从<code>AsyncExecutionStrategy</code>的<code>execute</code>方法触发，理解GraphQL查询过程如下：</p>\n<ol>\n<li><p> 调用当前字段所绑定的<code>DataFetcher</code>的<code>get</code>方法，如果字段没有绑定<code>DataFetcher</code>，则通过默认的<code>PropertyDataFetcher</code>查询字段，<code>PropertyDataFetcher</code>的实现是基于反射从源对象中读取查询字段。</p>\n</li>\n<li><p> 将从<code>DataFetcher</code>查询得到结果包装成<code>CompletableFuture</code>，如果结果本身是<code>CompletableFuture</code>，那么不会包装。</p>\n</li>\n<li><p> 结果<code>CompletableFuture</code>完成之后，调用<code>completeValue</code>，基于结果类型分别处理。</p>\n</li>\n</ol>\n<ul>\n<li><p>如果查询结果是列表类型，那么会对列表类型进行遍历，针对每个元素在递归执行<code>completeValue</code>。</p>\n</li>\n<li><p>如果结果类型是对象类型，那么会对对象执行<code>execute</code>，又回到了起点，也就是<code>AsyncExecutionStrategy的execute</code>。</p>\n</li>\n</ul>\n<p>以上是GraphQL的执行过程，这个过程有什么问题呢？下面基于图上的标记顺序一起看看GraphQL在我们的业务场景中应用和实践所遇到的问题，这些问题不代表在其他场景也是问题，仅供参考：</p>\n<p><strong>问题1</strong>：<code>PropertyDataFetcher</code>CPU热点问题，<code>PropertyDataFetcher</code>在整个查询过程中属于热点代码，而其本身的实现也有一些优化空间，在运行时<code>PropertyDataFetcher</code>的执行会成为CPU热点。（具体问题可参考GitHub上的commit和Conversion：<a href=\"https://github.com/graphql-java/graphql-java/pull/1815\">https://github.com/graphql-java/graphql-java/pull/1815</a>）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c3a377dc5b480b403a67a2f8cb5cd0aa.png\">图16 PropertyDataFetcher成为CPU热点</p>\n<p><strong>问题2</strong>：列表的计算耗时问题，列表计算是循环的，对于查询结果中存在大列表的场景，此时循环会造成整体查询明显的延迟。我们举个具体的例子，假设查询结果中存在一个列表大小是1000，每个元素的处理是0.01ms，那么总体耗时就是10ms，基于GraphQL的查机制，这个10ms会阻塞整个链路。</p>\n<p><strong>2）类型转换优化</strong></p>\n<p>通过GraphQL查询引擎拿到的GraphQL模型，和业务实现的<code>DataFetcher</code>返回的取数模型是同构，但是所有字段的类型都会被转换成GraphQL内部类型。<code>PropertyDataFetcher</code>之所以会成为CPU热点，问题就在于这个模型转换过程，业务定义的模型到GraphQL类型模型转换过程示意图如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eda15725d57060f766fa2800784e4c3f.png\"></p>\n<p>图17 业务模型到GraphQL模型转换示意图</p>\n<p>当查询结果模型中的字段非常多的时候，比如上万个，意味着每次查询有上万次的<code>PropertyDataFetcher</code>操作，实际就反映到了CPU热点问题上，这个问题我们的解决思路是保持原有业务模型不变，将非<code>PropertyDataFetcher</code>查询的结果反过来填充到业务模型上。如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/00312b3068556d24deb0f880e5c2103a.png\"></p>\n<p>图18 查询结果模型反向填充示意图</p>\n<p>基于这个思路，我们通过GraphQL执行引擎拿到的结果就是业务<code>Fetcher</code>返回的对象模型，这样不仅仅解决了因字段反射转换带来的CPU热点问题，同时对于业务开发来说增加了友好性。因为GraphQL模型类似JSON模型，这种模型是缺少业务类型的，业务开发直接使用起来非常麻烦。以上优化在一个场景上试点测试，结果显示该场景的平均响应时间缩短1.457ms，平均99线缩短5.82ms，平均CPU利用率降低约12%。</p>\n<p><strong>3）列表计算优化</strong></p>\n<p>当列表元素比较多的时候，默认的单线程遍历列表元素计算的方式所带来的延迟消耗非常明显，对于响应时间比较敏感的场景这个延迟优化很有必要。针对这个问题我们的解决思路是充分利用CPU多核心计算的能力，将列表拆分成任务，通过多线程并行执行，实现机制如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0858f511ea09ad5454793bd7ec11760e.png\"></p>\n<p>图19 列表遍历多核计算思路</p>\n<p>5.2.4 GraphQL-DataLoader调度优化</p>\n<p><strong>1）DataLoader基本原理</strong></p>\n<p>先简单介绍一下DataLoader的基本原理，DataLoader有两个方法，一个是<code>load</code>，一个是<code>dispatch</code>，在解决N+1问题的场景中，DataLoader是这么用的：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a41035acc9fa1a6bcafc9ebf069b1071.png\"></p>\n<p>图20 DataLoader基本原理</p>\n<p>整体分为2个阶段，第一个阶段调用<code>load</code>，调用N次，第二个阶段调用<code>dispatch</code>，调用<code>dispatch</code>的时候会真正的执行数据查询，从而达到批量查询+分片的效果。</p>\n<p><strong>2）DataLoader调度问题</strong></p>\n<p>GraphQL-Java对DataLoader的集成支持的实现在<code>FieldLevelTrackingApproach</code>中，<code>FieldLevelTrackingApproach</code>的实现会存在怎样的问题呢？下面基于一张图表达原生DataLoader调度机制所产生的问题：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7b544ddbe308313dfbb784d2cb3d4e50.png\"></p>\n<p>图21 GraphQL-Java对DataLoader调度存在的问题</p>\n<p>问题很明显，基于<code>FieldLevelTrackingApproach</code>的实现，下一层级的<code>DataLoader</code>的<code>dispatch</code>是需要等到本层级的结果都回来之后才发出。基于这样的实现，查询总耗时的计算公式等于：TOTAL = MAX（Level  1 Latency）+ MAX（Level 2 Latency）+ MAX（Level 3 Latency）+ … ，<strong>总查询耗时等于每层耗时最大的值加起来，而实际上如果链路编排由业务开发同学自己来写的话，理论上的效果是总耗时等于所有链路最长的那个链路所耗的时间</strong>，这个才是合理的。而<code>FieldLevelTrackingApproach</code>的实现所表现出来的结果是反常识的，至于为什么这么实现，目前我们理解可能是设计者基于简单和通用方面的考虑。</p>\n<p>问题在于以上的实现在有些业务场景下是不能接受的，比如我们的列表场景的响应时间约束一共也就不到100ms，其中几十ms是因为这个原因搭进去的。针对这个问题的解决思路，一种方式是对于响应时间要求特别高的场景独立编排，不采用GraphQL；另一种方式是在GraphQL层面解决这个问题，保持架构的统一性。接下来，介绍一下我们是如何扩展GraphQL-Java执行引擎来解决这个问题的。</p>\n<p><strong>3）DataLoader调度优化</strong></p>\n<p>针对DataLoader调度的性能问题，<strong>我们的解决思路是在最后一次调用某个</strong><strong><code>DataLoader</code>的<code>load</code>之后，立即调用<code>dispatch</code>方法发出查询请求</strong>，问题是我们怎么知道哪一次的load是最后一次load呢？这个问题也是解决DataLoader调度问题的难点，以下举个例子来解释我们的解决思路：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bd9ac368a374d5463c9c5ea6e41bd720.png\"></p>\n<p>图22 查询对象结果示意图</p>\n<p>假设我们查询到的模型结构如下：根节点是<code>Query</code>下的字段，字段名叫<code>subjects</code>，<code>subject</code>引用的是个列表，<code>subject</code>下有两个元素，都是<code>ModelA</code>的对象实例，<code>ModelA</code>有两个字段，<code>fieldA</code>和<code>fieldB</code>，<code>subjects[0]</code>的<code>fieldA</code>关联是<code>ModelB</code>的一个实例，<code>subjects[0]</code>的<code>fieldB</code>关联多个<code>ModelC</code>实例。</p>\n<p>为了方便理解，我们定义一些概念，字段、字段实例、字段实例执行完、字段实例值大小等等：</p>\n<ul>\n<li><p><strong>字段</strong>：具有唯一路径，是静态的，和运行时对象大小没有关系，如：<code>subjects</code>和<code>subjects/fieldA</code>。</p>\n</li>\n<li><p><strong>字段实例</strong>：字段的实例，具有唯一路径，是动态的，跟运行时对象大小有关系，如：<code>subjects[0]/fieldA</code>和<code>subjects[1]/fieldA</code>是字段<code>subjects/fieldA</code>的实例。</p>\n</li>\n<li><p><strong>字段实例执行完</strong>：字段实例关联的对象实例都被GraphQL执行完了。</p>\n</li>\n<li><p><strong>字段实例值大小</strong>：字段实例引用对象实例的个数，如以上示例，<code>subjects[0]/fieldA</code>字段实例值大小是1，<code>subjects[0]/fieldB</code>字段实例值大小是3。</p>\n</li>\n</ul>\n<p>除了以上定义之外，我们的业务场景还满足以下条件：</p>\n<ul>\n<li><p>只有1个根节点，且根节点是列表。</p>\n</li>\n<li><p><code>DataLoader</code>一定属于某个字段，某个字段下的<code>DataLoader</code>应该被执行次数等于其下的对象实例个数。</p>\n</li>\n</ul>\n<p>基于以上信息，我们可以得出以下问题分析：</p>\n<ul>\n<li><p>在执行字段实例的时候，我们可以知道当前字段实例的大小，字段实例的大小等于字段关联<code>DataLoader</code>在当前实例下需要执行<code>load</code>的次数，因此在执行<code>load</code>之后，我们可以知道当前对象实例是否是其所在字段实例的最后一个对象。</p>\n</li>\n<li><p>一个对象的实例可能会挂在不同的字段实例下，所以仅当当前对象实例是其所在字段实例的最后一个对象实例的时候，不代表当前对象实例是所有对象实例中的最后一个，当且仅当对象实例所在节点实例是节点的最后一个实例的时候才成立。</p>\n</li>\n<li><p>我们可从字段实例大小推算字段实例的个数，比如我们知道<code>subjects</code>的大小是2，那么就知道<code>subjects</code>字段有两个字段实例<code>subjects[0]</code>和<code>subjects[1]</code>，也就知道字段<code>subjects/fieldA</code>有两个实例，<code>subjects[0]/fieldA</code>和<code>subjects[1]/fieldA</code>，因此我们从根节点可以往下推断出某个字段实例是否执行完。</p>\n</li>\n</ul>\n<p>通过以上分析，我们可以得出，一个对象执行完的条件是其所在的字段实例以及其所在的字段所有的父亲字段实例都执行完，且当前执行的对象实例是其所在字段实例的最后一个对象实例的时候。</p>\n<p>基于这个判断逻辑，我们的实现方案是在每次调用完<code>DataFetcher</code>的时候，判断是否需要发起<code>dispatch</code>，如果是则发起。另外，以上时机和条件存在漏发<code>dispatch</code>的问题，有个特殊情况，当当前对象实例不是最后一个，但是剩下的对象大小都为0的时候，那么就永远不会触发当前对象关联的<code>DataLoader</code>的<code>load</code>了，所以在对象大小为0的时候，需要额外再判断一次。</p>\n<p>根据以上的逻辑分析，我们实现了<code>DataLoader</code>调用链路的最优化，达到理论最优的效果。</p>\n<h2 id=\"6-新架构对研发模式的影响\"><a href=\"#6-新架构对研发模式的影响\" class=\"headerlink\" title=\"6 新架构对研发模式的影响\"></a>6 新架构对研发模式的影响</h2><p>生产力决定生产关系，元数据驱动信息聚合架构是展示场景搭建的核心生产力，而业务开发模式和过程是生产关系，因此也会随之改变。下面我们将会从开发模式和流程两个角度来介绍新架构对研发带来的影响。</p>\n<h3 id=\"6-1-聚焦业务的开发模式\"><a href=\"#6-1-聚焦业务的开发模式\" class=\"headerlink\" title=\"6.1 聚焦业务的开发模式\"></a>6.1 聚焦业务的开发模式</h3><p>新架构提供了一套基于业务抽象出的标准化代码分解约束。以前开发同学对系统的理解很可能就是“查一查服务，把数据粘在一起”，而现在，研发同学对于业务的理解及代码分解思路将会是一致的。比如展示单元代表的是展示逻辑，取数单元代表的是取数逻辑。同时，很多冗杂且容易出错的逻辑已经被框架屏蔽掉了，研发同学能够有更多的精力聚焦于业务逻辑本身，比如：业务数据的理解和封装，展示逻辑的理解和编写，以及查询模型的抽象和建设。如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ef9c7ad70499f66a090c1a53e358176d.png\"></p>\n<p>图23 业务开发聚焦业务本身</p>\n<h3 id=\"6-2-研发流程升级\"><a href=\"#6-2-研发流程升级\" class=\"headerlink\" title=\"6.2 研发流程升级\"></a>6.2 研发流程升级</h3><p>新架构不仅仅影响了研发的代码编写，同时也影响着研发流程的改进，基于元数据架构实现的可视化及配置化能力，现有研发流程和之前研发流程相比有了明显的区别，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3b542c0413452e6b5f48505faa1c2d4f.png\"></p>\n<p>图24 基于开发框架搭建展示场景前后研发流程对比</p>\n<p>以前是“一杆子捅到底”的开发模式，每个展示场景的搭建需要经历过从接口的沟通到API的开发整个过程，基于新架构之后，系统自动具备多层复用及可视化、配置化能力。</p>\n<p><strong>情况一</strong>：这是最好的情况，此时取数功能和展示功能都已经被沉淀下来，研发同学需要做的只是创建查询方案，基于运营平台按需选择需要的展示单元，拿着查询方案ID基于查询接口就可以查到需要的展示信息了，可视化、配置化界面如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8472176f0fbaaa163b4534eed899f7d8.png\"></p>\n<p>图25 可视化及文案按需选用</p>\n<p><strong>情况二</strong>：此时可能没有展示功能，但是通过运营平台查看到，数据源已经接入过，那么也不难，只需要基于现有的数据源编写一段加工逻辑即可，这段加工逻辑是非常爽的一段纯逻辑的编写，数据源列表如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cdcff0b999c17ac971ebd80e2842e42a.png\"></p>\n<p>图26 数据源列表可视化</p>\n<p><strong>情况三</strong>：最坏的情况是此时系统不能满足当前的查询能力，这种情况比较少见，因为后端服务是比较稳定的，那么也无需惊慌，只需要按照标准规范将数据源接入进来，然后编写加工逻辑片段即可，之后这些能力是可以被持续复用的。</p>\n<h2 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7 总结\"></a>7 总结</h2><p>商品展示场景的复杂性体现在：场景多、依赖多、逻辑多，以及不同场景之间存在差异。在这样的背景下，如果是业务初期，怎么快怎么来，采用“烟囱式”个性化建设的方式不必有过多的质疑。但是随着业务的不断发展，功能的不断迭代，以及场景的规模化趋势，“烟囱式”个性化建设的弊端会慢慢凸显出来，包括代码复杂度高、缺少能力沉淀等问题。</p>\n<p>本文以基于对美团到店商品展示场景所面临的核心矛盾分析，介绍了：</p>\n<ul>\n<li><p>业界不同的BFF应用模式，以及不同模式的优势和缺点。</p>\n</li>\n<li><p>基于GraphQL BFF模式改进的元数据驱动的架构方案设计。</p>\n</li>\n<li><p>我们在GraphQL实践过程中遇到的问题及解决思路。</p>\n</li>\n<li><p>新架构对研发模式产生的影响呈现。</p>\n</li>\n</ul>\n<p>目前，笔者所在团队负责的核心商品展示场景都已迁入新架构，基于新的研发模式，我们实现了50%以上的展示逻辑复用以及1倍以上的效率提升。希望本文对大家能够有所帮助。</p>\n<h2 id=\"8-参考文献\"><a href=\"#8-参考文献\" class=\"headerlink\" title=\"8 参考文献\"></a>8 参考文献</h2><p>[1]<a href=\"https://samnewman.io/patterns/architectural/bff/\">https://samnewman.io/patterns/architectural/bff/</a></p>\n<p>[2]<a href=\"https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation\">https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation</a></p>\n<p>[3]<a href=\"http://www.woshipm.com/pd/3712746.html\">了解电商后台系统，看这篇就够了</a></p>\n<p>[4]<a href=\"https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6/1212667?fr=aladdin\">框架定义-百度百科</a></p>\n<p>[5]<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA==&chksm=fd54d63aca235f2c5abf8f65b3a0f235b55723d014aa4c7c75c48fcb5ce5c32b14fb43e5b40b&idx=1&mid=2247483947&mpshare=1&scene=21&sn=d1b600e57cca8c7304cca77a693c0b32&srcid=0404dHE42TNCAGO7clq9K2ep#wechat_redirect\">高效研发-闲鱼在数据聚合上的探索与实践</a></p>\n<p>[6] 《系统架构-复杂系统的产品设计与开发》</p>\n<p><strong>阅读更多</strong></p>\n<p>-–</p>\n<p><a href=\"https://t.1yb.co/jo7r\">前端</a>** |<strong><a href=\"https://t.1yb.co/jo7v\"> </a><a href=\"https://t.1yb.co/jsdG\">算法</a></strong> |** <a href=\"https://t.1yb.co/jsWK\">后端</a>** | **<a href=\"https://t.1yb.co/jqRZ\">数据</a></p>\n<p><a href=\"https://t.1yb.co/jo7v\">安全</a>** | <strong><a href=\"https://t.1yb.co/jui4\">Android</a></strong> |** <a href=\"https://t.1yb.co/jtXE\">iOS</a> ** |** <a href=\"https://t.1yb.co/jo7K\">运维</a>** | **<a href=\"https://t.1yb.co/jtsX\">测试</a></p>\n<p>-———  END  -———</p>\n<p><strong>招聘信息</strong></p>\n<p>美团到店综合研发中心长期招聘前端、后端、数据仓库、机器学习/数据挖掘算法工程师，坐标上海，欢迎感兴趣的同学发送简历至：tech@meituan.com（邮件标题注明：美团到店综合研发中心—上海）。</p>\n<p><strong>也许你还想看</strong></p>\n<p>**  | **<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd124aae8a65c3b888df80cc15d2f6dbd25c7e7094f3dc665c8e9079963b709043ac6fe865a7&idx=1&mid=2651755491&scene=21&sn=4ac719deb5781e9060b4d023bc75691f#wechat_redirect\">移动端UI一致性解决方案</a></p>\n<p>**  |** <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd1252888a65db9e9aac10fb930f5ad6a2f62b47b6df868c7cb975ebf613650ad3c4b8ade51e&idx=1&mid=2651753413&scene=21&sn=e987b6a105d65952de35c86e5f19ba03#wechat_redirect\">外卖客户端容器化架构的演进</a></p>\n<p>**  |** <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd12aeee8a6527f8a297d0dc797b81492837019c821898ae21c3e158831aaa7a383d5155ec9b&idx=1&mid=2651748259&scene=21&sn=a7ef0d515e94631c8d86bdbbf81da143#wechat_redirect\">美团外卖iOS多端复用的推动、支撑与思考</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ff5c1ae9c5bc0135299c86b4d6026a6.png\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>GraphQL是Facebook提出的一种数据查询语言，核心特性是数据聚合和按需索取，目前被广泛应用于前后端之间，解决客户端灵活使用数据问题。本文介绍的是GraphQL的另一种实践，我们将GraphQL下沉至后端BFF（Backend For Frontend）层之下，结合元数据技术，实现数据和加工逻辑的按需查询和执行。这样不仅解决了后端BFF层灵活使用数据的问题，这些字段加工逻辑还可以直接复用，大幅度提升了研发的效率。</p>\n<p>本文介绍的实践方案已经在美团部分业务场景中落地，并取得不错效果，希望这些经验能够对大家有帮助。</p>\n</blockquote>","more":"<p>BFF一词来自Sam Newman的一篇博文《<a href=\"https://samnewman.io/patterns/architectural/bff/\">Pattern:Backends For Frontends</a>》，指的是服务于前端的后端。BFF是解决什么问题的呢？据原文描述，随着移动互联网的兴起，原适应于桌面Web的服务端功能希望同时提供给移动App使用，而在这个过程中存在这样的问题：</p>\n<ul>\n<li><p>移动App和桌面Web在UI部分存在差异。</p>\n</li>\n<li><p>移动App涉及不同的端，不仅有iOS、还有Android，这些不同端的UI之间存在差异。</p>\n</li>\n<li><p>原有后端功能和桌面Web UI之间已经存在了较大的耦合。</p>\n</li>\n</ul>\n<p>因为端的差异性存在，服务端的功能要针对端的差异进行适配和裁剪，而服务端的业务功能本身是相对单一的，这就产生了一个矛盾——服务端的单一业务功能和端的差异性诉求之间的矛盾。那么这个问题怎么解决呢？这也是文章的副标题所描述的”Single-purpose Edge Services for UIs and external parties”，引入BFF，由BFF来针对多端差异做适配，这也是目前业界广泛使用的一种模式。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f95ef4461eb139612078136232f13a5a.png\"></p>\n<p>图1 BFF示意图</p>\n<p>在实际业务的实践中，导致这种端差异性的原因有很多，有技术的原因，也有业务的原因。比如，用户的客户端是Android还是iOS，是大屏还是小屏，是什么版本。再比如，业务属于哪个行业，产品形态是什么，功能投放在什么场景，面向的用户群体是谁等等。这些因素都会带来面向端的功能逻辑的差异性。</p>\n<p>在这个问题上，笔者所在团队负责的商品展示业务有一定的发言权，同样的商品业务，在C端的展示功能逻辑，深刻受到商品类型、所在行业、交易形态、投放场所、面向群体等因素的影响。同时，面向消费者端的功能频繁迭代的属性，更是加剧并深化了这种矛盾，使其演化成了一种服务端单一稳定与端的差异灵活之间的矛盾，这也是商品展示（商品展示BFF）业务系统存在的必然性原因。本文主要在美团到店商品展示场景的背景下，介绍面临的一些问题及解决思路。</p>\n<h2 id=\"2-BFF背景下的核心矛盾\"><a href=\"#2-BFF背景下的核心矛盾\" class=\"headerlink\" title=\"2 BFF背景下的核心矛盾\"></a>2 BFF背景下的核心矛盾</h2><p>BFF这层的引入是解决服务端单一稳定与端的差异灵活诉求之间的矛盾，这个矛盾并不是不存在，而是转移了。由原来后端和前端之间的矛盾转移成了BFF和前端之间的矛盾。笔者所在团队的主要工作，就是和这种矛盾作斗争。下面以具体的业务场景为例，结合当前的业务特点，说明在BFF的生产模式下，我们所面临的具体问题。下图是两个不同行业的团购货架展示模块，这两个模块我们认为是两个商品的展示场景，它们是两套独立定义的产品逻辑，并且会各自迭代。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1aa3a779c43374c8038fada6b5c78290.png\"></p>\n<p>图2 展示场景</p>\n<p>在业务发展初期，这样的场景不多。BFF层系统“烟囱式”建设，功能快速开发上线满足业务的诉求，在这样的情况下，这种矛盾表现的不明显。而随着业务发展，行业的开拓，形成了许许多多这样的商品展示功能，矛盾逐渐加剧，主要表现在以下两个方面：</p>\n<ul>\n<li><p><strong>业务支撑效率</strong>：随着商品展示场景变得越来越多，API呈爆炸趋势，业务支撑效率和人力成线性关系，系统能力难以支撑业务场景的规模化拓展。</p>\n</li>\n<li><p><strong>系统复杂度高</strong>：核心功能持续迭代，内部逻辑充斥着<code>if…else…</code>，代码过程式编写，系统复杂度较高，难以修改和维护。</p>\n</li>\n</ul>\n<p>那么这些问题是怎么产生的呢？这要结合“烟囱式”系统建设的背景和商品展示场景所面临的业务，以及系统特点来进行理解。</p>\n<p><strong>特点一：外部依赖多、场景间取数存在差异、用户体验要求高</strong></p>\n<p>图例展示了两个不同行业的团购货架模块，这样一个看似不大的模块，后端在BFF层要调用20个以上的下游服务才能把数据拿全，这是其一。在上面两个不同的场景中，需要的数据源集合存在差异，而且这种差异普遍存在，这是其二，比如足疗团购货架需要的某个数据源，在丽人团购货架上不需要，丽人团购货架需要的某个数据源，足疗团购货架不需要。尽管依赖下游服务多，同时还要保证C端的用户体验，这是其三。</p>\n<p>这几个特点给技术带来了不小的难题：1）聚合大小难控制，聚合功能是分场景建设？还是统一建设？如果分场景建设，必然存在不同场景重复编写类似聚合逻辑的问题。如果统一建设，那么一个大而全的数据聚合中必然会存在无效的调用。2）聚合逻辑的复杂性控制问题，在这么多的数据源的情况下，不仅要考虑业务逻辑怎么写，还要考虑异步调用的编排，在代码复杂度未能良好控制的情况下，后续聚合的变更修改将会是一个难题。</p>\n<p><strong>特点二：展示逻辑多、场景之间存在差异，共性个性逻辑耦合</strong></p>\n<p>我们可以明显地识别某一类场景的逻辑是存在共性的，比如团单相关的展示场景。直观可以看出基本上都是展示团单维度的信息，但这只是表象。实际上在模块的生成过程中存在诸多的差异，比如以下两种差异：</p>\n<ul>\n<li><p><strong>字段拼接逻辑差异</strong>：比如以上图中两个团购货架的团购标题为例，同样是标题，在丽人团购货架中的展示规则是：<strong>[类型] + 团购标题</strong>，而在足疗团购货架的展示规则是：<strong>团购标题</strong>。</p>\n</li>\n<li><p><strong>排序过滤逻辑差异</strong>：比如同样是团单列表，A场景按照销量倒排序，B场景按照价格排序，不同场景的排序逻辑不同。</p>\n</li>\n</ul>\n<p>诸如此类的<strong>展示逻辑</strong>的差异性还有很多。类似的场景实际上在内部存在很多差异的逻辑，后端如何应对这种差异性是一个难题，下面是最常见的一种写法，通过读取具体的条件字段来做判断实现逻辑路由，如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(category == <span class=\"string\">&quot;丽人&quot;</span>) &#123;  title = <span class=\"string\">&quot;[&quot;</span> + category + <span class=\"string\">&quot;]&quot;</span> + productTitle;&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (category == <span class=\"string\">&quot;足疗&quot;</span>) &#123;  title = productTitle；&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方案在功能实现方面没有问题，也能够复用共同的逻辑。但是实际上在场景非常多的情况下，将会有非常多的差异性判断逻辑叠加在一起，功能一直会被持续迭代的情况下，可以想象，系统将会变得越来越复杂，越来越难以修改和维护。</p>\n<p><strong>总结</strong>：在BFF这层，不同商品展示场景存在差异。在业务发展初期，系统通过独立建设的方式支持业务快速试错，在这种情况下，业务差异性带来的问题不明显。而随着业务的不断发展，需要搭建及运营的场景越来越多，呈规模化趋势。此时，业务对技术效率提出了更高的要求。<strong>在这种场景多、场景间存在差异的背景下，如何满足场景拓展效率同时能够控制系统的复杂性，就是我们业务场景中面临的核心问题</strong>。</p>\n<h2 id=\"3-BFF应用模式分析\"><a href=\"#3-BFF应用模式分析\" class=\"headerlink\" title=\"3 BFF应用模式分析\"></a>3 BFF应用模式分析</h2><p>目前，业界针对此类的解决方案主要有两种模式，一种是后端BFF模式；另一种是前端BFF模式。</p>\n<h3 id=\"3-1-后端BFF模式\"><a href=\"#3-1-后端BFF模式\" class=\"headerlink\" title=\"3.1 后端BFF模式\"></a>3.1 后端BFF模式</h3><p>后端BFF模式指的是BFF由后端同学负责，这种模式目前最广泛的实践是基于GraphQL搭建的后端BFF方案，具体是：后端将展示字段封装成展示服务，通过GraphQL编排之后暴露给前端使用。如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9186b94e756d77bc0b098a1807e44e5a.png\"></p>\n<p>图3 后端BFF模式</p>\n<p>这种模式最大的特性和优势是，当展示字段已经存在的情况下，后端不需要关心前端差异性需求，按需查询的能力由GraphQL支持。这个特性可以很好地应对不同场景存在展示字段差异性这个问题，前端直接基于GraphQL按需查询数据即可，后端不需要变更。同时，借助GraphQL的编排和聚合查询能力，后端可以将逻辑分解在不同的展示服务中，因此在一定程度上能够化解BFF这层的复杂性。</p>\n<p>但是基于这种模式，仍然存在几个问题：展示服务颗粒度问题、数据图划分问题以及字段扩散问题，下图是基于当前模式的具体案例：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8dd8ffdccae5273f1c723e7bba3e4e5a.png\"></p>\n<p>图4 后端BFF模式（案例）</p>\n<p><strong>1）展示服务颗粒度设计问题</strong></p>\n<p>这种方案要求展示逻辑和取数逻辑封装在一个模块中，形成一个展示服务（Presentation Service），如上图所示。而实际上展示逻辑和取数逻辑是多对多的关系，还是以前文提到的例子说明：</p>\n<blockquote>\n<p><strong>背景</strong>：有两个展示服务，分别封装了商品标题和商品标签的查询能力。</p>\n<p><strong>情景</strong>：此时PM提了一个需求，希望商品在某个场景的标题以“[类型]+商品标题”的形式展示，此时商品标题的拼接依赖类型数据，而此时类型数据商品标签展示服务中已经调用了。</p>\n<p><strong>问题</strong>：商品标题展示服务自己调用类型数据还是将两个展示服务合并到一起？</p>\n</blockquote>\n<p>以上描述的问题的是展示服务颗粒度把控的问题，我们可以怀疑上述的示例是不是因为展示服务的颗粒度过小？那么反过来看一看，如果将两个服务合并到一起，那么势必又会存在冗余。这是展示服务设计的难点，<strong>核心原因在于，展示逻辑和取数逻辑本身是多对多的关系，结果却被设计放在了一起</strong>。</p>\n<p><strong>2）数据图划分问题</strong></p>\n<p>通过GraphQL将多个展示服务的数据聚合到一张图（GraphQL Schema）中，形成一个数据视图，需要数据的时候只要数据在图中，就可以基于Query按需查询。那么问题来了，这个图应该怎么组织？是一张图还是多张图？图过大的话，势必带来复杂的数据关系维护问题，图过小则将会降低方案本身的价值。</p>\n<p><strong>3）展示服务内部复杂性 + 模型扩散问题</strong></p>\n<p>上文提到过一个商品标题的展示存在不同拼接逻辑的情况，在商品展示场景，这种逻辑特别普遍。比如同样是价格，A行业展示优惠后价格，B行业展示优惠前价格；同样是标签位置，C行业展示服务时长，而D行业展示商品特性等。</p>\n<p>那么问题来了，展示模型如何设计？以标题字段为例，是在展示模型上放个<code>title</code>字段就可以，还是分别放个<code>title</code>和<code>titleWithCategory</code>？如果是前者那么服务内部必然会存在<code>if…else…</code>这种逻辑，用于区分<code>title</code>的拼接方式，这同样会导致展示服务内部的复杂性。如果是多个字段，那么可以想象，展示服务的模型字段也将会不断扩散。</p>\n<p><strong>总结</strong>：后端BFF模式能够在一定程度上化解后端逻辑的复杂性，同时提供一个展示字段的复用机制。但是仍然存在未决问题，如展示服务的颗粒度设计问题，数据图的划分问题，以及展示服务内部的复杂性和字段扩散问题。目前这种模式实践的代表有Facebook、爱彼迎、eBay、爱奇艺、携程、去哪儿等等。</p>\n<h3 id=\"3-2-前端BFF模式\"><a href=\"#3-2-前端BFF模式\" class=\"headerlink\" title=\"3.2 前端BFF模式\"></a>3.2 前端BFF模式</h3><p>前端BFF模式在Sam Newman的文章中的”And Autonomy”部分有特别的介绍，指的是BFF本身由前端团队自己负责，如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/94d1b0ff6f68b252711f342b3b0fd0ae.png\"></p>\n<p>图5 前端BFF模式</p>\n<p>这种模式的理念是，本来能一个团队交付的需求，没必要拆成两个团队，两个团队本身带来较大的沟通协作成本。本质上，也是一种将“敌我矛盾”转化为“人民内部矛盾”的思路。前端完全接手BFF的开发工作，实现数据查询的自给自足，大大减少了前后端的协作成本。但是这种模式没有提到我们关心的一些核心问题，如：复杂性如何应对、差异性如何应对、展示模型如何设计等等问题。除此之外，这种模式也存在一些前提条件及弊端，比如较为完备的前端基础设施；前端不仅仅需要关心渲染、还需要了解业务逻辑等。</p>\n<p><strong>总结</strong>：前端BFF模式通过前端自主查询和使用数据，从而达到降低跨团队协作的成本，提升BFF研发效率的效果。目前这种模式的实践代表是阿里巴巴。</p>\n<h2 id=\"4-基于GraphQL及元数据的信息聚合架构设计\"><a href=\"#4-基于GraphQL及元数据的信息聚合架构设计\" class=\"headerlink\" title=\"4 基于GraphQL及元数据的信息聚合架构设计\"></a>4 基于GraphQL及元数据的信息聚合架构设计</h2><h3 id=\"4-1-整体思路\"><a href=\"#4-1-整体思路\" class=\"headerlink\" title=\"4.1 整体思路\"></a>4.1 整体思路</h3><p>通过对后端BFF和前端BFF两种模式的分析，我们最终选择后端BFF模式，前端BFF这个方案对目前的研发模式影响较大，不仅需要大量的前端资源，而且需要建设完善的前端基础设施，方案实施成本比较高昂。</p>\n<p>前文提到的后端GraphQL BFF模式代入我们的具体场景虽然存在一些问题，但是总体有非常大的参考价值，比如展示字段的复用思路、数据的按需查询思路等等。在商品展示场景中，<strong>有80%的工作集中在数据的聚合和集成部分</strong>，并且这部分具有很强的复用价值，因此信息的查询和聚合是我们面临的主要矛盾。因此，我们的思路是：<strong>基于GraphQL+后端BFF方案改进，实现取数逻辑和展示逻辑的可沉淀、可组合、可复用</strong>，整体架构如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/21ffacbebfc1c0c59f6a6f1f421e55ac.png\"></p>\n<p>图6 基于GraphQL BFF的改进思路</p>\n<p>从上图可看出，与传统GraphQL BFF方案最大的差别在于我们将GraphQL下放至数据聚合部分，由于数据来源于商品领域，领域是相对稳定的，因此数据图规模可控且相对稳定。除此之外，整体架构的核心设计还包括以下三个方面：1）取数展示分离；2）查询模型归一；3）元数据驱动架构。</p>\n<p>我们通过取数展示分离解决展示服务颗粒度问题，同时使得展示逻辑和取数逻辑可沉淀、可复用；通过查询模型归一化设计解决展示字段扩散的问题；通过元数据驱动架构实现能力的可视化，业务组件编排执行的自动化，这能够让业务开发同学聚焦于业务逻辑的本身。下面将针对这三个部分逐一展开介绍。</p>\n<h3 id=\"4-2-核心设计\"><a href=\"#4-2-核心设计\" class=\"headerlink\" title=\"4.2 核心设计\"></a>4.2 核心设计</h3><p>4.2.1 取数展示分离</p>\n<p>上文提到，在商品展示场景中，展示逻辑和取数逻辑是多对多的关系，而传统的基于GraphQL的后端BFF实践方案把它们封装在一起，这是导致展示服务颗粒度难以设计的根本原因。思考一下取数逻辑和展示逻辑的关注点是什么？取数逻辑关注怎么查询和聚合数据，而展示逻辑关注怎么加工生成需要的展示字段，它们的关注点不一样，放在一起也会增加展示服务的复杂性。因此，我们的思路是将取数逻辑和展示逻辑分离开来，单独封装成逻辑单元，分别叫取数单元和展示单元。在取数展示分离之后，GraphQL也随之下沉，用于实现数据的按需聚合，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eeb60decd04420062983c3711804700e.png\"></p>\n<p>图7 取数展示分离+元数据描述</p>\n<p>那么取数和展示逻辑的封装颗粒度是怎么样的呢？不能太小也不能太大，在颗粒度的设计上，我们有两个核心考量：1）<strong>复用</strong>，展示逻辑和取数逻辑在商品展示场景中，都是可以被复用的资产，我们希望它们能沉淀下来，被单独按需使用；2）<strong>简单</strong>，保持简单，这样容易修改和维护。基于这两点考虑，颗粒度的定义如下：</p>\n<ul>\n<li><p><strong>取数单元</strong>：尽量只封装1个外部数据源，同时负责对外部数据源返回的模型进行简化，这部分生成的模型我们称之为取数模型。</p>\n</li>\n<li><p><strong>展示单元</strong>：尽量只封装1个展示字段的加工逻辑。</p>\n</li>\n</ul>\n<p>分开的好处是简单且可被组合使用，那么具体如何实现组合使用呢？我们的思路是通过元数据来描述它们之间的关系，基于元数据由统一的执行框架来关联运行，具体设计下文会展开介绍。通过取数和展示的分离，元数据的关联和运行时的组合调用，可以保持逻辑单元的简单，同时又满足复用诉求，这也很好地解决了传统方案中存在的<strong>展示服务的颗粒度问题</strong>。</p>\n<p>4.2.2 查询模型归一</p>\n<p>展示单元的加工结果通过什么样的接口透出呢？接下来，我们介绍一下查询接口设计的问题。</p>\n<p><strong>1）查询接口设计的难点</strong></p>\n<p>常见查询接口的设计模式有以下两种：</p>\n<ul>\n<li><p><strong>强类型模式</strong>：强类型模式指的是查询接口返回的是POJO对象，每一个查询结果对应POJO中的一个明确的具有特定业务含义的字段。</p>\n</li>\n<li><p><strong>弱类型模式</strong>：弱类型模式指的是查询结果以K-V或JSON模式返回，没有明确的静态字段。</p>\n</li>\n</ul>\n<p>以上两种模式在业界都有广泛应用，且它们都有明确的优缺点。强类型模式对开发者友好，但是业务是不断迭代的，与此同时，系统沉淀的展示单元会不断丰富，在这样的情况下，接口返回的DTO中的字段将会愈来愈多，每次新功能的支持，都要伴随着接口查询模型的修改，JAR版本的升级。而JAR的升级涉及数据提供方和数据消费两方，存在明显效率问题。另外，可以想象，查询模型的不断迭代，最终将会包括成百上千个字段，难以维护。</p>\n<p>而弱类型模式恰好可以弥补这一缺点，但是弱类型模式对于开发者来说非常不友好，接口查询模型中有哪些查询结果对于开发者来说在开发的过程中完全没有感觉，但是程序员的天性就是喜欢通过代码去理解逻辑，而非配置和文档。其实，这两种接口设计模式都存在着一个共性问题——缺少抽象，下面两节，我们将介绍在接口返回的查询模型设计方面的抽象思路及框架能力支持。</p>\n<p><strong>2）查询模型归一化设计</strong></p>\n<p>回到商品展示场景中，一个展示字段有多种不同的实现，如商品标题的两种不同实现方式：1）商品标题；2）[类目]+商品标题。商品标题和这两种展示逻辑的关系本质上是一种抽象-具体的关系。识别这个关键点，思路就明了了，我们的思路是对查询模型做抽象。查询模型上都是抽象的展示字段，一个展示字段对应多个展示单元，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d6223539b474bfdd2a7673c39752bcee.png\"></p>\n<p>图8 查询模型归一化 + 元数据描述</p>\n<p>在实现层面，同样基于元数据描述展示字段和展示单元之间的关系，基于以上的设计思路，可以在一定程度上减缓模型的扩散，但是还不能避免扩展。比如除了价格、库存、销量等每个商品都有的标准属性之外，不同的商品类型一般还会有这个商品特有的属性。比如密室主题拼场商品才有“几人拼”这样的描述属性，这种字段本身抽象的意义不大，且放在商品查询模型中作为一个单独的字段会导致模型扩张，针对这类问题，我们的解决思路是引入扩展属性，扩展属性专门承载这类非标准的字段。通过标准字段 + 扩展属性的方式建立查询模型，能够较好地解决<strong>字段扩散</strong>的问题。</p>\n<p>4.2.3 元数据驱动架构</p>\n<p>到目前为止，我们定义了如何分解<strong>业务逻辑单元</strong>以及如何设计<strong>查询模型</strong>，并提到用元数据描述它们之间的关系。基于以上定义实现的业务逻辑及模型，都具备很强的复用价值，可以作为业务资产沉淀下来。那么，为什么用元数据描述业务功能及模型之间的关系呢？</p>\n<p>我们引入元数据描述主要有两个目的：1）代码逻辑的自动编排，通过元数据描述业务逻辑之间的关联关系，运行时可以自动基于元数据实现逻辑之间的关联执行，从而可以消除大量的人工逻辑编排代码；2）业务功能的可视化，元数据本身描述了业务逻辑所提供的功能，如下面两个示例：</p>\n<blockquote>\n<p>团单基础售价字符串展示，例：30元。 </p>\n<p>团单市场价展示字段，例：100元。</p>\n</blockquote>\n<p>这些元数据上报到系统中，可以用于展示当前系统所提供的功能。通过元数据描述组件及组件之间关联关系，通过框架解析元数据自动进行业务组件的调用执行，形成了如下的元数据架构：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2acb91a2cdbee4b5eccf5309f5a295e1.png\"></p>\n<p>图9 元数据驱动架构</p>\n<p>整体架构由三个核心部分组成：</p>\n<ul>\n<li><p><strong>业务能力</strong>：标准的业务逻辑单元，包括取数单元、展示单元和查询模型，这些都是关键的可复用资产。</p>\n</li>\n<li><p><strong>元数据</strong>：描述业务功能（如：展示单元、取数单元）以及业务功能之间的关联关系，比如展示单元依赖的数据，展示单元映射的展示字段等。</p>\n</li>\n<li><p><strong>执行引擎</strong>：负责消费元数据，并基于元数据对业务逻辑进行调度和执行。</p>\n</li>\n</ul>\n<p>通过以上三个部分有机的组合在一起，形成了一个元数据驱动风格的架构。</p>\n<h2 id=\"5-针对GraphQL的优化实践\"><a href=\"#5-针对GraphQL的优化实践\" class=\"headerlink\" title=\"5 针对GraphQL的优化实践\"></a>5 针对GraphQL的优化实践</h2><h3 id=\"5-1-使用简化\"><a href=\"#5-1-使用简化\" class=\"headerlink\" title=\"5.1 使用简化\"></a>5.1 使用简化</h3><p><strong>1）GraphQL直接使用问题</strong></p>\n<p>引入GraphQL，会引入一些额外的复杂性，比如会涉及到GraphQL带来的一些概念如：Schema、RuntimeWiring，下面是基于GraphQL原生Java框架的开发过程：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1897c77958b24b0253e5968bb06dd147.png\"></p>\n<p>图10 原生GraphQL使用流程</p>\n<p>这些概念对于未接触过GraphQL的同学来说，增加了学习和理解的成本，而这些概念和业务领域通常没有什么关系。而我们仅仅希望使用GraphQL的按需查询特性，却被GraphQL本身拖累了，业务开发同学的关注点应该聚焦在业务逻辑本身才对，这个问题如何解决呢？</p>\n<p>著名计算机科学家David Wheeler说了一句名言，”All problems in computer science can be solved by another level of indirection”。没有加一层解决不了的问题，本质上是需要有人来对这事负责，因此我们在原生GraphQL之上增加了一层执行引擎层来解决这些问题，目标是屏蔽GraphQL的复杂性，让开发人员只需要关注业务逻辑。</p>\n<p><strong>2）取数接口标准化</strong></p>\n<p>首先要简化数据的接入，原生的<code>DataFetcher</code>和<code>DataLoader</code>都是处在一个比较高的抽象层次，缺少业务语义，而在查询场景，我们能够归纳出，所有的查询都属于以下三种模式：</p>\n<ul>\n<li><p><strong>1查1</strong>：根据一个条件查询一个结果。</p>\n</li>\n<li><p><strong>1查N</strong>：根据一个条件查询多个结果。</p>\n</li>\n<li><p><strong>N查N</strong>：一查一或一查多的批量版本。</p>\n</li>\n</ul>\n<p>由此，我们对查询接口进行了标准化，业务开发同学基于场景判断是那种，按需选择使用即可，取数接口标准化设计如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/71923ee77268f32e6ce9789d1b8dfc9f.png\"></p>\n<p>图11 查询接口标准化</p>\n<p>业务开发同学按需选择所需要使用的取数器，通过泛型指定结果类型，1查1和1查N比较简单，N查N我们对其定义为批量查询接口，用于满足”N+1”的场景，其中<code>batchSize</code>字段用于指定分片大小，<code>batchKey</code>用于指定查询Key，业务开发只需要指定参数，其他的框架会自动处理。除此之外，我们还约束了返回结果必须是<code>CompleteFuture</code>，用于满足聚合查询的全链路异步化。</p>\n<p><strong>3）聚合编排自动化</strong></p>\n<p>取数接口标准化使得数据源的语义更清晰，开发过程按需选择即可，简化了业务的开发。但是此时业务开发同学写好<code>Fetcher</code>之后，还需要去另一个地方去写<code>Schema</code>，而且写完<code>Schema</code>还要再写<code>Schema</code>和<code>Fetcher</code>的映射关系，业务开发更享受写代码的过程，不太愿意写完代码还要去另外一个地方取配置，并且同时维护代码和对应配置也提高了出错的可能性，能否将这些冗杂的步骤移除掉？</p>\n<p><code>Schema</code>和<code>RuntimeWiring</code>本质上是想描述某些信息，如果这些信息换一种方式描述是不是也可以。我们的优化思路是，在业务开发过程中标记注解，通过注解标注的元数据描述这些信息，其他的事情交给框架来做。解决思路示意图如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a1adc237e833aad26cf198c0c5dd6bc2.png\"></p>\n<p>图12 注解元数据描述Schema和RuntimeWiring</p>\n<h3 id=\"5-2-性能优化\"><a href=\"#5-2-性能优化\" class=\"headerlink\" title=\"5.2 性能优化\"></a>5.2 性能优化</h3><p>5.2.1 GraphQL性能问题</p>\n<p>虽然GraphQL已经开源了，但是Facebook只开源了相关标准，并没有给出解决方案。GraphQL-Java框架是由社区贡献的，基于开源的GraphQL-Java作为按需查询引擎的方案，我们发现了GraphQL应用方面的一些问题，这些问题有部分是由于使用姿势不当所导致的，也有部分是GraphQL本身实现的问题，比如我们遇到的几个典型的问题：</p>\n<ul>\n<li><p>耗CPU的查询解析，包括<code>Schema</code>的解析和<code>Query</code>的解析。</p>\n</li>\n<li><p>当查询模型比较复杂特别是存在大列表时候的延时问题。</p>\n</li>\n<li><p>基于反射的模型转换CPU消耗问题。</p>\n</li>\n<li><p><code>DataLoader</code>的层级调度问题。</p>\n</li>\n</ul>\n<p>于是，我们对使用方式和框架做了一些优化与改造，以解决上面列举的问题。本章着重介绍我们在GraphQL-Java方面的优化和改造思路。</p>\n<p>5.2.2 GraphQL编译优化</p>\n<p><strong>1）GraphQL语言原理概述</strong></p>\n<p>GraphQL是一种查询语言，目的是基于直观和灵活的语法构建客户端应用程序，用于描述其数据需求和交互。GraphQL属于一种领域特定语言（DSL），而我们所使用的GraphQL-Java客户端在语言编译层面是基于ANTLR 4实现的，ANTLR 4是一种基于Java编写的语言定义和识别工具，Antlr是一种元语言（Meta-Language），它们的关系如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/780967a52c449d978d352760694363ae.png\"></p>\n<p>图13 GraphQL语言基本原理示意图</p>\n<p>GraphQL执行引擎所接受的<code>Schema</code>及<code>Query</code>都是基于GraphQL定义的语言所表达的内容，GraphQL执行引擎不能直接理解GraphQL，在执行之前必须由GraphQL编译器翻译成GraphQL执行引擎可理解的文档对象。而GraphQL编译器是基于Java的，经验表明在大流量场景实时解释的情况下，这部分代码将会成为CPU热点，而且还占用响应延迟，<code>Schema</code>或<code>Query</code>越复杂，性能损耗越明显。</p>\n<p><strong>2）Schema及Query编译缓存</strong></p>\n<p><code>Schema</code>表达的是数据视图和取数模型同构，相对稳定，个数也不多，在我们的业务场景一个服务也就一个。因此，我们的做法是在启动的时候就将基于<code>Schema</code>构造的GraphQL执行引擎构造好，作为单例缓存下来。对于<code>Query</code>来说，每个场景的<code>Query</code>有些差异，因此<code>Query</code>的解析结果不能作为单例，我们的做法是实现<code>PreparsedDocumentProvider</code>接口，基于<code>Query</code>作为Key将<code>Query</code>编译结果缓存下来。如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ddbeff75483900054a0216acf3a52f2d.png\"></p>\n<p>图14 Query缓存实现示意图</p>\n<p>5.2.3 GraphQL执行引擎优化</p>\n<p><strong>1）GraphQL执行机制及问题</strong></p>\n<p>我们先一起了解一下GraphQL-Java执行引擎的运行机制是怎么样的。假设在执行策略上我们选取的是<code>AsyncExecutionStrategy</code>，来看看GraphQL执行引擎的执行过程：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d792881807f277fcc7d02794f645a8b0.png\"></p>\n<p>图15 GraphQL执行引擎执行过程</p>\n<p>以上时序图做了些简化，去除了一些与重点无关的信息，<code>AsyncExecutionStrategy</code>的<code>execute</code>方法是对象执行策略的异步化模式实现，是查询执行的起点，也是根节点查询的入口，<code>AsyncExecutionStrategy</code>对对象的多个字段的查询逻辑，采取的是循环+异步化的实现方式，我们从<code>AsyncExecutionStrategy</code>的<code>execute</code>方法触发，理解GraphQL查询过程如下：</p>\n<ol>\n<li><p> 调用当前字段所绑定的<code>DataFetcher</code>的<code>get</code>方法，如果字段没有绑定<code>DataFetcher</code>，则通过默认的<code>PropertyDataFetcher</code>查询字段，<code>PropertyDataFetcher</code>的实现是基于反射从源对象中读取查询字段。</p>\n</li>\n<li><p> 将从<code>DataFetcher</code>查询得到结果包装成<code>CompletableFuture</code>，如果结果本身是<code>CompletableFuture</code>，那么不会包装。</p>\n</li>\n<li><p> 结果<code>CompletableFuture</code>完成之后，调用<code>completeValue</code>，基于结果类型分别处理。</p>\n</li>\n</ol>\n<ul>\n<li><p>如果查询结果是列表类型，那么会对列表类型进行遍历，针对每个元素在递归执行<code>completeValue</code>。</p>\n</li>\n<li><p>如果结果类型是对象类型，那么会对对象执行<code>execute</code>，又回到了起点，也就是<code>AsyncExecutionStrategy的execute</code>。</p>\n</li>\n</ul>\n<p>以上是GraphQL的执行过程，这个过程有什么问题呢？下面基于图上的标记顺序一起看看GraphQL在我们的业务场景中应用和实践所遇到的问题，这些问题不代表在其他场景也是问题，仅供参考：</p>\n<p><strong>问题1</strong>：<code>PropertyDataFetcher</code>CPU热点问题，<code>PropertyDataFetcher</code>在整个查询过程中属于热点代码，而其本身的实现也有一些优化空间，在运行时<code>PropertyDataFetcher</code>的执行会成为CPU热点。（具体问题可参考GitHub上的commit和Conversion：<a href=\"https://github.com/graphql-java/graphql-java/pull/1815\">https://github.com/graphql-java/graphql-java/pull/1815</a>）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c3a377dc5b480b403a67a2f8cb5cd0aa.png\">图16 PropertyDataFetcher成为CPU热点</p>\n<p><strong>问题2</strong>：列表的计算耗时问题，列表计算是循环的，对于查询结果中存在大列表的场景，此时循环会造成整体查询明显的延迟。我们举个具体的例子，假设查询结果中存在一个列表大小是1000，每个元素的处理是0.01ms，那么总体耗时就是10ms，基于GraphQL的查机制，这个10ms会阻塞整个链路。</p>\n<p><strong>2）类型转换优化</strong></p>\n<p>通过GraphQL查询引擎拿到的GraphQL模型，和业务实现的<code>DataFetcher</code>返回的取数模型是同构，但是所有字段的类型都会被转换成GraphQL内部类型。<code>PropertyDataFetcher</code>之所以会成为CPU热点，问题就在于这个模型转换过程，业务定义的模型到GraphQL类型模型转换过程示意图如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eda15725d57060f766fa2800784e4c3f.png\"></p>\n<p>图17 业务模型到GraphQL模型转换示意图</p>\n<p>当查询结果模型中的字段非常多的时候，比如上万个，意味着每次查询有上万次的<code>PropertyDataFetcher</code>操作，实际就反映到了CPU热点问题上，这个问题我们的解决思路是保持原有业务模型不变，将非<code>PropertyDataFetcher</code>查询的结果反过来填充到业务模型上。如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/00312b3068556d24deb0f880e5c2103a.png\"></p>\n<p>图18 查询结果模型反向填充示意图</p>\n<p>基于这个思路，我们通过GraphQL执行引擎拿到的结果就是业务<code>Fetcher</code>返回的对象模型，这样不仅仅解决了因字段反射转换带来的CPU热点问题，同时对于业务开发来说增加了友好性。因为GraphQL模型类似JSON模型，这种模型是缺少业务类型的，业务开发直接使用起来非常麻烦。以上优化在一个场景上试点测试，结果显示该场景的平均响应时间缩短1.457ms，平均99线缩短5.82ms，平均CPU利用率降低约12%。</p>\n<p><strong>3）列表计算优化</strong></p>\n<p>当列表元素比较多的时候，默认的单线程遍历列表元素计算的方式所带来的延迟消耗非常明显，对于响应时间比较敏感的场景这个延迟优化很有必要。针对这个问题我们的解决思路是充分利用CPU多核心计算的能力，将列表拆分成任务，通过多线程并行执行，实现机制如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0858f511ea09ad5454793bd7ec11760e.png\"></p>\n<p>图19 列表遍历多核计算思路</p>\n<p>5.2.4 GraphQL-DataLoader调度优化</p>\n<p><strong>1）DataLoader基本原理</strong></p>\n<p>先简单介绍一下DataLoader的基本原理，DataLoader有两个方法，一个是<code>load</code>，一个是<code>dispatch</code>，在解决N+1问题的场景中，DataLoader是这么用的：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a41035acc9fa1a6bcafc9ebf069b1071.png\"></p>\n<p>图20 DataLoader基本原理</p>\n<p>整体分为2个阶段，第一个阶段调用<code>load</code>，调用N次，第二个阶段调用<code>dispatch</code>，调用<code>dispatch</code>的时候会真正的执行数据查询，从而达到批量查询+分片的效果。</p>\n<p><strong>2）DataLoader调度问题</strong></p>\n<p>GraphQL-Java对DataLoader的集成支持的实现在<code>FieldLevelTrackingApproach</code>中，<code>FieldLevelTrackingApproach</code>的实现会存在怎样的问题呢？下面基于一张图表达原生DataLoader调度机制所产生的问题：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7b544ddbe308313dfbb784d2cb3d4e50.png\"></p>\n<p>图21 GraphQL-Java对DataLoader调度存在的问题</p>\n<p>问题很明显，基于<code>FieldLevelTrackingApproach</code>的实现，下一层级的<code>DataLoader</code>的<code>dispatch</code>是需要等到本层级的结果都回来之后才发出。基于这样的实现，查询总耗时的计算公式等于：TOTAL = MAX（Level  1 Latency）+ MAX（Level 2 Latency）+ MAX（Level 3 Latency）+ … ，<strong>总查询耗时等于每层耗时最大的值加起来，而实际上如果链路编排由业务开发同学自己来写的话，理论上的效果是总耗时等于所有链路最长的那个链路所耗的时间</strong>，这个才是合理的。而<code>FieldLevelTrackingApproach</code>的实现所表现出来的结果是反常识的，至于为什么这么实现，目前我们理解可能是设计者基于简单和通用方面的考虑。</p>\n<p>问题在于以上的实现在有些业务场景下是不能接受的，比如我们的列表场景的响应时间约束一共也就不到100ms，其中几十ms是因为这个原因搭进去的。针对这个问题的解决思路，一种方式是对于响应时间要求特别高的场景独立编排，不采用GraphQL；另一种方式是在GraphQL层面解决这个问题，保持架构的统一性。接下来，介绍一下我们是如何扩展GraphQL-Java执行引擎来解决这个问题的。</p>\n<p><strong>3）DataLoader调度优化</strong></p>\n<p>针对DataLoader调度的性能问题，<strong>我们的解决思路是在最后一次调用某个</strong><strong><code>DataLoader</code>的<code>load</code>之后，立即调用<code>dispatch</code>方法发出查询请求</strong>，问题是我们怎么知道哪一次的load是最后一次load呢？这个问题也是解决DataLoader调度问题的难点，以下举个例子来解释我们的解决思路：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bd9ac368a374d5463c9c5ea6e41bd720.png\"></p>\n<p>图22 查询对象结果示意图</p>\n<p>假设我们查询到的模型结构如下：根节点是<code>Query</code>下的字段，字段名叫<code>subjects</code>，<code>subject</code>引用的是个列表，<code>subject</code>下有两个元素，都是<code>ModelA</code>的对象实例，<code>ModelA</code>有两个字段，<code>fieldA</code>和<code>fieldB</code>，<code>subjects[0]</code>的<code>fieldA</code>关联是<code>ModelB</code>的一个实例，<code>subjects[0]</code>的<code>fieldB</code>关联多个<code>ModelC</code>实例。</p>\n<p>为了方便理解，我们定义一些概念，字段、字段实例、字段实例执行完、字段实例值大小等等：</p>\n<ul>\n<li><p><strong>字段</strong>：具有唯一路径，是静态的，和运行时对象大小没有关系，如：<code>subjects</code>和<code>subjects/fieldA</code>。</p>\n</li>\n<li><p><strong>字段实例</strong>：字段的实例，具有唯一路径，是动态的，跟运行时对象大小有关系，如：<code>subjects[0]/fieldA</code>和<code>subjects[1]/fieldA</code>是字段<code>subjects/fieldA</code>的实例。</p>\n</li>\n<li><p><strong>字段实例执行完</strong>：字段实例关联的对象实例都被GraphQL执行完了。</p>\n</li>\n<li><p><strong>字段实例值大小</strong>：字段实例引用对象实例的个数，如以上示例，<code>subjects[0]/fieldA</code>字段实例值大小是1，<code>subjects[0]/fieldB</code>字段实例值大小是3。</p>\n</li>\n</ul>\n<p>除了以上定义之外，我们的业务场景还满足以下条件：</p>\n<ul>\n<li><p>只有1个根节点，且根节点是列表。</p>\n</li>\n<li><p><code>DataLoader</code>一定属于某个字段，某个字段下的<code>DataLoader</code>应该被执行次数等于其下的对象实例个数。</p>\n</li>\n</ul>\n<p>基于以上信息，我们可以得出以下问题分析：</p>\n<ul>\n<li><p>在执行字段实例的时候，我们可以知道当前字段实例的大小，字段实例的大小等于字段关联<code>DataLoader</code>在当前实例下需要执行<code>load</code>的次数，因此在执行<code>load</code>之后，我们可以知道当前对象实例是否是其所在字段实例的最后一个对象。</p>\n</li>\n<li><p>一个对象的实例可能会挂在不同的字段实例下，所以仅当当前对象实例是其所在字段实例的最后一个对象实例的时候，不代表当前对象实例是所有对象实例中的最后一个，当且仅当对象实例所在节点实例是节点的最后一个实例的时候才成立。</p>\n</li>\n<li><p>我们可从字段实例大小推算字段实例的个数，比如我们知道<code>subjects</code>的大小是2，那么就知道<code>subjects</code>字段有两个字段实例<code>subjects[0]</code>和<code>subjects[1]</code>，也就知道字段<code>subjects/fieldA</code>有两个实例，<code>subjects[0]/fieldA</code>和<code>subjects[1]/fieldA</code>，因此我们从根节点可以往下推断出某个字段实例是否执行完。</p>\n</li>\n</ul>\n<p>通过以上分析，我们可以得出，一个对象执行完的条件是其所在的字段实例以及其所在的字段所有的父亲字段实例都执行完，且当前执行的对象实例是其所在字段实例的最后一个对象实例的时候。</p>\n<p>基于这个判断逻辑，我们的实现方案是在每次调用完<code>DataFetcher</code>的时候，判断是否需要发起<code>dispatch</code>，如果是则发起。另外，以上时机和条件存在漏发<code>dispatch</code>的问题，有个特殊情况，当当前对象实例不是最后一个，但是剩下的对象大小都为0的时候，那么就永远不会触发当前对象关联的<code>DataLoader</code>的<code>load</code>了，所以在对象大小为0的时候，需要额外再判断一次。</p>\n<p>根据以上的逻辑分析，我们实现了<code>DataLoader</code>调用链路的最优化，达到理论最优的效果。</p>\n<h2 id=\"6-新架构对研发模式的影响\"><a href=\"#6-新架构对研发模式的影响\" class=\"headerlink\" title=\"6 新架构对研发模式的影响\"></a>6 新架构对研发模式的影响</h2><p>生产力决定生产关系，元数据驱动信息聚合架构是展示场景搭建的核心生产力，而业务开发模式和过程是生产关系，因此也会随之改变。下面我们将会从开发模式和流程两个角度来介绍新架构对研发带来的影响。</p>\n<h3 id=\"6-1-聚焦业务的开发模式\"><a href=\"#6-1-聚焦业务的开发模式\" class=\"headerlink\" title=\"6.1 聚焦业务的开发模式\"></a>6.1 聚焦业务的开发模式</h3><p>新架构提供了一套基于业务抽象出的标准化代码分解约束。以前开发同学对系统的理解很可能就是“查一查服务，把数据粘在一起”，而现在，研发同学对于业务的理解及代码分解思路将会是一致的。比如展示单元代表的是展示逻辑，取数单元代表的是取数逻辑。同时，很多冗杂且容易出错的逻辑已经被框架屏蔽掉了，研发同学能够有更多的精力聚焦于业务逻辑本身，比如：业务数据的理解和封装，展示逻辑的理解和编写，以及查询模型的抽象和建设。如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ef9c7ad70499f66a090c1a53e358176d.png\"></p>\n<p>图23 业务开发聚焦业务本身</p>\n<h3 id=\"6-2-研发流程升级\"><a href=\"#6-2-研发流程升级\" class=\"headerlink\" title=\"6.2 研发流程升级\"></a>6.2 研发流程升级</h3><p>新架构不仅仅影响了研发的代码编写，同时也影响着研发流程的改进，基于元数据架构实现的可视化及配置化能力，现有研发流程和之前研发流程相比有了明显的区别，如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3b542c0413452e6b5f48505faa1c2d4f.png\"></p>\n<p>图24 基于开发框架搭建展示场景前后研发流程对比</p>\n<p>以前是“一杆子捅到底”的开发模式，每个展示场景的搭建需要经历过从接口的沟通到API的开发整个过程，基于新架构之后，系统自动具备多层复用及可视化、配置化能力。</p>\n<p><strong>情况一</strong>：这是最好的情况，此时取数功能和展示功能都已经被沉淀下来，研发同学需要做的只是创建查询方案，基于运营平台按需选择需要的展示单元，拿着查询方案ID基于查询接口就可以查到需要的展示信息了，可视化、配置化界面如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8472176f0fbaaa163b4534eed899f7d8.png\"></p>\n<p>图25 可视化及文案按需选用</p>\n<p><strong>情况二</strong>：此时可能没有展示功能，但是通过运营平台查看到，数据源已经接入过，那么也不难，只需要基于现有的数据源编写一段加工逻辑即可，这段加工逻辑是非常爽的一段纯逻辑的编写，数据源列表如下示意图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cdcff0b999c17ac971ebd80e2842e42a.png\"></p>\n<p>图26 数据源列表可视化</p>\n<p><strong>情况三</strong>：最坏的情况是此时系统不能满足当前的查询能力，这种情况比较少见，因为后端服务是比较稳定的，那么也无需惊慌，只需要按照标准规范将数据源接入进来，然后编写加工逻辑片段即可，之后这些能力是可以被持续复用的。</p>\n<h2 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7 总结\"></a>7 总结</h2><p>商品展示场景的复杂性体现在：场景多、依赖多、逻辑多，以及不同场景之间存在差异。在这样的背景下，如果是业务初期，怎么快怎么来，采用“烟囱式”个性化建设的方式不必有过多的质疑。但是随着业务的不断发展，功能的不断迭代，以及场景的规模化趋势，“烟囱式”个性化建设的弊端会慢慢凸显出来，包括代码复杂度高、缺少能力沉淀等问题。</p>\n<p>本文以基于对美团到店商品展示场景所面临的核心矛盾分析，介绍了：</p>\n<ul>\n<li><p>业界不同的BFF应用模式，以及不同模式的优势和缺点。</p>\n</li>\n<li><p>基于GraphQL BFF模式改进的元数据驱动的架构方案设计。</p>\n</li>\n<li><p>我们在GraphQL实践过程中遇到的问题及解决思路。</p>\n</li>\n<li><p>新架构对研发模式产生的影响呈现。</p>\n</li>\n</ul>\n<p>目前，笔者所在团队负责的核心商品展示场景都已迁入新架构，基于新的研发模式，我们实现了50%以上的展示逻辑复用以及1倍以上的效率提升。希望本文对大家能够有所帮助。</p>\n<h2 id=\"8-参考文献\"><a href=\"#8-参考文献\" class=\"headerlink\" title=\"8 参考文献\"></a>8 参考文献</h2><p>[1]<a href=\"https://samnewman.io/patterns/architectural/bff/\">https://samnewman.io/patterns/architectural/bff/</a></p>\n<p>[2]<a href=\"https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation\">https://www.thoughtworks.com/cn/radar/techniques/graphql-for-server-side-resource-aggregation</a></p>\n<p>[3]<a href=\"http://www.woshipm.com/pd/3712746.html\">了解电商后台系统，看这篇就够了</a></p>\n<p>[4]<a href=\"https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6/1212667?fr=aladdin\">框架定义-百度百科</a></p>\n<p>[5]<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA==&chksm=fd54d63aca235f2c5abf8f65b3a0f235b55723d014aa4c7c75c48fcb5ce5c32b14fb43e5b40b&idx=1&mid=2247483947&mpshare=1&scene=21&sn=d1b600e57cca8c7304cca77a693c0b32&srcid=0404dHE42TNCAGO7clq9K2ep#wechat_redirect\">高效研发-闲鱼在数据聚合上的探索与实践</a></p>\n<p>[6] 《系统架构-复杂系统的产品设计与开发》</p>\n<p><strong>阅读更多</strong></p>\n<p>-–</p>\n<p><a href=\"https://t.1yb.co/jo7r\">前端</a>** |<strong><a href=\"https://t.1yb.co/jo7v\"> </a><a href=\"https://t.1yb.co/jsdG\">算法</a></strong> |** <a href=\"https://t.1yb.co/jsWK\">后端</a>** | **<a href=\"https://t.1yb.co/jqRZ\">数据</a></p>\n<p><a href=\"https://t.1yb.co/jo7v\">安全</a>** | <strong><a href=\"https://t.1yb.co/jui4\">Android</a></strong> |** <a href=\"https://t.1yb.co/jtXE\">iOS</a> ** |** <a href=\"https://t.1yb.co/jo7K\">运维</a>** | **<a href=\"https://t.1yb.co/jtsX\">测试</a></p>\n<p>-———  END  -———</p>\n<p><strong>招聘信息</strong></p>\n<p>美团到店综合研发中心长期招聘前端、后端、数据仓库、机器学习/数据挖掘算法工程师，坐标上海，欢迎感兴趣的同学发送简历至：tech@meituan.com（邮件标题注明：美团到店综合研发中心—上海）。</p>\n<p><strong>也许你还想看</strong></p>\n<p>**  | **<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd124aae8a65c3b888df80cc15d2f6dbd25c7e7094f3dc665c8e9079963b709043ac6fe865a7&idx=1&mid=2651755491&scene=21&sn=4ac719deb5781e9060b4d023bc75691f#wechat_redirect\">移动端UI一致性解决方案</a></p>\n<p>**  |** <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd1252888a65db9e9aac10fb930f5ad6a2f62b47b6df868c7cb975ebf613650ad3c4b8ade51e&idx=1&mid=2651753413&scene=21&sn=e987b6a105d65952de35c86e5f19ba03#wechat_redirect\">外卖客户端容器化架构的演进</a></p>\n<p>**  |** <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&chksm=bd12aeee8a6527f8a297d0dc797b81492837019c821898ae21c3e158831aaa7a383d5155ec9b&idx=1&mid=2651748259&scene=21&sn=a7ef0d515e94631c8d86bdbbf81da143#wechat_redirect\">美团外卖iOS多端复用的推动、支撑与思考</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ff5c1ae9c5bc0135299c86b4d6026a6.png\"></p>"},{"title":"shiro","date":"2021-06-10T06:00:39.000Z","_content":"###shiro鉴权\n\njwt和shiro鉴权一起使用\n通过realm判断权限问题\n<!-- more -->\n JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。虫虫今天给大家介绍JWT的原理和用法。","source":"_posts/shiro.md","raw":"---\ntitle: shiro\ndate: 2021-06-10 14:00:39\ntags:\n---\n###shiro鉴权\n\njwt和shiro鉴权一起使用\n通过realm判断权限问题\n<!-- more -->\n JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。虫虫今天给大家介绍JWT的原理和用法。","slug":"shiro","published":1,"updated":"2021-07-28T02:56:56.394Z","_id":"ckpyrh3s000007lv98cgr5mpb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>###shiro鉴权</p>\n<p>jwt和shiro鉴权一起使用<br>通过realm判断权限问题</p>\n<span id=\"more\"></span>\n<p> JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。虫虫今天给大家介绍JWT的原理和用法。</p>\n","site":{"data":{}},"excerpt":"<p>###shiro鉴权</p>\n<p>jwt和shiro鉴权一起使用<br>通过realm判断权限问题</p>","more":"<p> JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。虫虫今天给大家介绍JWT的原理和用法。</p>"},{"title":"python学习","date":"2021-07-12T03:45:34.000Z","_content":"查看jvm程序占用存储是多少\nps -p 21971  -o rss,vsz\n<!-- more -->","source":"_posts/python学习.md","raw":"---\ntitle: python学习\ndate: 2021-07-12 11:45:34\ntags:\n---\n查看jvm程序占用存储是多少\nps -p 21971  -o rss,vsz\n<!-- more -->","slug":"python学习","published":1,"updated":"2021-07-22T07:00:56.733Z","_id":"ckrd34xcp00001ev949spfiqh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查看jvm程序占用存储是多少<br>ps -p 21971  -o rss,vsz</p>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p>查看jvm程序占用存储是多少<br>ps -p 21971  -o rss,vsz</p>","more":""},{"title":"学习Maven之Maven Surefire Plugin(JUnit篇)","date":"2021-07-14T02:58:37.000Z","_content":"# 学习Maven之Maven Surefire Plugin(JUnit篇)\nmaven的生命周期有哪些阶段？\n<!-- more -->\n[validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]\n当然，如果你明确用的是JUnit4.7及以上版本，可以明确声明：\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit47</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit4.0(含)到JUnit4.7(不含)的版本，这样声明:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit4</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit3.8(含)到JUnit4.0(不含)的版本，这样声明:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit3</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit3.8以下的版本surefire不支持。建议大家用最新的JUnit版本，目前是4.12.\n```\n<dependencies>\n\t[...]\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n        <scope>test</scope>\n    </dependency>\n\t[...]        \n</dependencies>\n```\n本文的例子我们用的Junit4.12.\n本项目中：\n```pom\n <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.1</version>\n                <configuration>\n                    <forkCount>1</forkCount>\n                    <reuseForks>false</reuseForks>\n                    <testFailureIgnore>true</testFailureIgnore>\n                    <skipTests>false</skipTests>\n                </configuration>\n            </plugin>\n```\ndependency\n```\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <artifactId>mockito-core</artifactId>\n                    <groupId>org.mockito</groupId>\n                </exclusion>\n                <exclusion>\n                    <artifactId>junit</artifactId>\n                    <groupId>junit</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n```\n在spring-boot-starter-test中用的JUnit Jupiter        \nJunit Jupiter是junit5\nJUnit with Gradle\n代码地址为\nhttps://github.com/makotogo/HelloJUnit5\n导入idea中会出现\n“Cannot add task 'wrapper' as a task with that name already exists.”\n这是因为gradle版本所致，修改文件\n```\n\n// 旧版本是:\ntask wrapper(type:Wrapper) {\n    //configuration\n}\n \n// 新版本是：\nwrapper {\n    //configuration\n\n```\n运行gradle test报错\nIDEA报错：Process ‘command ‘./Java/jdk1.8.0_131/bin/java.exe‘‘ finished with non-zero exit value 1 解决！\n解决办法：\n设置idea-》settings-》gradle \n设置run test using “intelij idea”","source":"_posts/学习Maven之Maven-Surefire-Plugin-JUnit篇.md","raw":"---\ntitle: 学习Maven之Maven Surefire Plugin(JUnit篇)\ndate: 2021-07-14 10:58:37\ntags:\n---\n# 学习Maven之Maven Surefire Plugin(JUnit篇)\nmaven的生命周期有哪些阶段？\n<!-- more -->\n[validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]\n当然，如果你明确用的是JUnit4.7及以上版本，可以明确声明：\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit47</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit4.0(含)到JUnit4.7(不含)的版本，这样声明:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit4</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit3.8(含)到JUnit4.0(不含)的版本，这样声明:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.19</version>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.maven.surefire</groupId>\n\t\t\t<artifactId>surefire-junit3</artifactId>\n\t\t\t<version>2.19</version>\n\t\t</dependency>\n\t</dependencies>\n</plugin>\n```\nJUnit3.8以下的版本surefire不支持。建议大家用最新的JUnit版本，目前是4.12.\n```\n<dependencies>\n\t[...]\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n        <scope>test</scope>\n    </dependency>\n\t[...]        \n</dependencies>\n```\n本文的例子我们用的Junit4.12.\n本项目中：\n```pom\n <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.1</version>\n                <configuration>\n                    <forkCount>1</forkCount>\n                    <reuseForks>false</reuseForks>\n                    <testFailureIgnore>true</testFailureIgnore>\n                    <skipTests>false</skipTests>\n                </configuration>\n            </plugin>\n```\ndependency\n```\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <artifactId>mockito-core</artifactId>\n                    <groupId>org.mockito</groupId>\n                </exclusion>\n                <exclusion>\n                    <artifactId>junit</artifactId>\n                    <groupId>junit</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n```\n在spring-boot-starter-test中用的JUnit Jupiter        \nJunit Jupiter是junit5\nJUnit with Gradle\n代码地址为\nhttps://github.com/makotogo/HelloJUnit5\n导入idea中会出现\n“Cannot add task 'wrapper' as a task with that name already exists.”\n这是因为gradle版本所致，修改文件\n```\n\n// 旧版本是:\ntask wrapper(type:Wrapper) {\n    //configuration\n}\n \n// 新版本是：\nwrapper {\n    //configuration\n\n```\n运行gradle test报错\nIDEA报错：Process ‘command ‘./Java/jdk1.8.0_131/bin/java.exe‘‘ finished with non-zero exit value 1 解决！\n解决办法：\n设置idea-》settings-》gradle \n设置run test using “intelij idea”","slug":"学习Maven之Maven-Surefire-Plugin-JUnit篇","published":1,"updated":"2021-07-22T03:15:30.212Z","_id":"ckrd34xcv00011ev96v6recnb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"学习Maven之Maven-Surefire-Plugin-JUnit篇\"><a href=\"#学习Maven之Maven-Surefire-Plugin-JUnit篇\" class=\"headerlink\" title=\"学习Maven之Maven Surefire Plugin(JUnit篇)\"></a>学习Maven之Maven Surefire Plugin(JUnit篇)</h1><p>maven的生命周期有哪些阶段？</p>\n<span id=\"more\"></span>\n<p>[validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]<br>当然，如果你明确用的是JUnit4.7及以上版本，可以明确声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit47&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit4.0(含)到JUnit4.7(不含)的版本，这样声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit4&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit3.8(含)到JUnit4.0(不含)的版本，这样声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit3&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit3.8以下的版本surefire不支持。建议大家用最新的JUnit版本，目前是4.12.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t[...]</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class=\"line\">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">\t[...]        </span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>本文的例子我们用的Junit4.12.<br>本项目中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">               &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class=\"line\">               &lt;configuration&gt;</span><br><span class=\"line\">                   &lt;forkCount&gt;1&lt;/forkCount&gt;</span><br><span class=\"line\">                   &lt;reuseForks&gt;false&lt;/reuseForks&gt;</span><br><span class=\"line\">                   &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;</span><br><span class=\"line\">                   &lt;skipTests&gt;false&lt;/skipTests&gt;</span><br><span class=\"line\">               &lt;/configuration&gt;</span><br><span class=\"line\">           &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>dependency</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">           &lt;exclusions&gt;</span><br><span class=\"line\">               &lt;exclusion&gt;</span><br><span class=\"line\">                   &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;</span><br><span class=\"line\">                   &lt;groupId&gt;org.mockito&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;/exclusion&gt;</span><br><span class=\"line\">               &lt;exclusion&gt;</span><br><span class=\"line\">                   &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">                   &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;/exclusion&gt;</span><br><span class=\"line\">           &lt;/exclusions&gt;</span><br><span class=\"line\">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>在spring-boot-starter-test中用的JUnit Jupiter<br>Junit Jupiter是junit5<br>JUnit with Gradle<br>代码地址为<br><a href=\"https://github.com/makotogo/HelloJUnit5\">https://github.com/makotogo/HelloJUnit5</a><br>导入idea中会出现<br>“Cannot add task ‘wrapper’ as a task with that name already exists.”<br>这是因为gradle版本所致，修改文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 旧版本是:</span><br><span class=\"line\">task wrapper(type:Wrapper) &#123;</span><br><span class=\"line\">    //configuration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 新版本是：</span><br><span class=\"line\">wrapper &#123;</span><br><span class=\"line\">    //configuration</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>运行gradle test报错<br>IDEA报错：Process ‘command ‘./Java/jdk1.8.0_131/bin/java.exe‘‘ finished with non-zero exit value 1 解决！<br>解决办法：<br>设置idea-》settings-》gradle<br>设置run test using “intelij idea”</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"学习Maven之Maven-Surefire-Plugin-JUnit篇\"><a href=\"#学习Maven之Maven-Surefire-Plugin-JUnit篇\" class=\"headerlink\" title=\"学习Maven之Maven Surefire Plugin(JUnit篇)\"></a>学习Maven之Maven Surefire Plugin(JUnit篇)</h1><p>maven的生命周期有哪些阶段？</p>","more":"<p>[validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy]<br>当然，如果你明确用的是JUnit4.7及以上版本，可以明确声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit47&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit4.0(含)到JUnit4.7(不含)的版本，这样声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit4&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit3.8(含)到JUnit4.0(不含)的版本，这样声明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;surefire-junit3&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.19&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>JUnit3.8以下的版本surefire不支持。建议大家用最新的JUnit版本，目前是4.12.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t[...]</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class=\"line\">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">\t[...]        </span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>本文的例子我们用的Junit4.12.<br>本项目中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">               &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class=\"line\">               &lt;configuration&gt;</span><br><span class=\"line\">                   &lt;forkCount&gt;1&lt;/forkCount&gt;</span><br><span class=\"line\">                   &lt;reuseForks&gt;false&lt;/reuseForks&gt;</span><br><span class=\"line\">                   &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;</span><br><span class=\"line\">                   &lt;skipTests&gt;false&lt;/skipTests&gt;</span><br><span class=\"line\">               &lt;/configuration&gt;</span><br><span class=\"line\">           &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>dependency</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">           &lt;exclusions&gt;</span><br><span class=\"line\">               &lt;exclusion&gt;</span><br><span class=\"line\">                   &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;</span><br><span class=\"line\">                   &lt;groupId&gt;org.mockito&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;/exclusion&gt;</span><br><span class=\"line\">               &lt;exclusion&gt;</span><br><span class=\"line\">                   &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">                   &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;/exclusion&gt;</span><br><span class=\"line\">           &lt;/exclusions&gt;</span><br><span class=\"line\">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>在spring-boot-starter-test中用的JUnit Jupiter<br>Junit Jupiter是junit5<br>JUnit with Gradle<br>代码地址为<br><a href=\"https://github.com/makotogo/HelloJUnit5\">https://github.com/makotogo/HelloJUnit5</a><br>导入idea中会出现<br>“Cannot add task ‘wrapper’ as a task with that name already exists.”<br>这是因为gradle版本所致，修改文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 旧版本是:</span><br><span class=\"line\">task wrapper(type:Wrapper) &#123;</span><br><span class=\"line\">    //configuration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 新版本是：</span><br><span class=\"line\">wrapper &#123;</span><br><span class=\"line\">    //configuration</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>运行gradle test报错<br>IDEA报错：Process ‘command ‘./Java/jdk1.8.0_131/bin/java.exe‘‘ finished with non-zero exit value 1 解决！<br>解决办法：<br>设置idea-》settings-》gradle<br>设置run test using “intelij idea”</p>"},{"title":"一文教你用Typora + Gitee(码云) + PicGo 实现 云 markdown笔记","date":"2021-07-28T01:59:14.000Z","photos":["https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg"],"_content":"\n## 前言\n\n你在开心写markdown文档时，有没有为图片的分享，而煎熬，现在通过picgo吧图片上传gitee上，实现文档的分享，会不会很开心。好的，下面开始介绍如何操作\n\n1.picgo安装\n\n下载picgo\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg\" width=50% />\n哇，漂亮的小姐姐(❤ ω ❤)\n<!--more-->\n\n下载路径：\n\nhttps://github.com/Molunerfinn/PicGo/releases\n\n![image-20210728110457315](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110457315.png)\n\n如上图选择对应的安装文件下载：\n\n点击安装picgo进行配置：\n\n### 1.1 安装gitee插件\n\n![image-20210728110604641](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110604641.png)\n\n输入gitee搜索：\n\n![image-20210728110631995](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110631995.png)\n\n先安装gitee-uploader，再安装gitee 2.0.3\n\n接下面配置图床：\n\n ![](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111204092.png)\n\n配置gitee图床：\n\n1）*repo: 为 username + 仓库名，![image-20210728111307879](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111307879.png)\n\n2）branch: 分支，之前创建仓库的时候使用Readme文件初始化仓库的时候为我们创建了master 分支\n\n3）*token:：私人令牌，获取方式\n点击头像 --> 进入个人主页 --> 点击私人令牌 （私人令牌只出现一次，丢了需要重新创建）\n\n4）path 设为img\n\n5）customepath选择年月即可\n\n点击确定，设为默认图床\n\n点击测试上传，来验证是否生效\n\n![image-20210728111621502](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111621502.png)\n\n![image-20210728111639810](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111639810.png)\n\n图片可以在gitee上看见\n\n2.接下来配置typora\n\n![image-20210728112225189](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112225189.png)\n\n对于typora还是需要在配置命令行，因为无法选择app\n\n进入命令行目录\n\n```\ncd C:\\Users\\hxf\\AppData\\Roaming\\Typora\\picgo\\win64\n.\\picgo.exe install gitee-uploader\n.\\picgo.exe  set uploader\n\n```\n\n选择gitee\n\n配置如下：\n\n```\n{\n  \"picBed\": {\n    \"current\": \"smms\",\n    \"gitee\": {\n      \"repo\": \"hxf88/imgrepo\",\n      \"branch\": \"master\",\n      \"token\": \"994875f6f8aacc9508dc707ade1485c1\",\n      \"path\": \"img\",\n      \"customPath\": \"yearMonth\",\n      \"customUrl\": \"\"\n    },\n    \"uploader\": \"smms\",\n    \"transformer\": \"path\"\n  },\n  \"picgoPlugins\": {\n    \"picgo-plugin-gitee\": true,\n    \"picgo-plugin-gitee-uploader\": true,\n    \"picgo-plugin-smms-user\": true\n  }\n}\n```\n\n![image-20210728112806311](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112806311.png)\n\n当配置完后选择，testuploader，当看到上传成功即可。\n\n下面就可以愉快写文档了。\n\n","source":"_posts/一文教你用Typora-Gitee-码云-PicGo-实现-云-markdown笔记.md","raw":"---\ntitle: 一文教你用Typora + Gitee(码云) + PicGo 实现 云 markdown笔记\ndate: 2021-07-28 09:59:14\ntags: gitee typora picgo\nphotos:\n  -  \"https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg\"\n---\n\n## 前言\n\n你在开心写markdown文档时，有没有为图片的分享，而煎熬，现在通过picgo吧图片上传gitee上，实现文档的分享，会不会很开心。好的，下面开始介绍如何操作\n\n1.picgo安装\n\n下载picgo\n<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg\" width=50% />\n哇，漂亮的小姐姐(❤ ω ❤)\n<!--more-->\n\n下载路径：\n\nhttps://github.com/Molunerfinn/PicGo/releases\n\n![image-20210728110457315](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110457315.png)\n\n如上图选择对应的安装文件下载：\n\n点击安装picgo进行配置：\n\n### 1.1 安装gitee插件\n\n![image-20210728110604641](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110604641.png)\n\n输入gitee搜索：\n\n![image-20210728110631995](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110631995.png)\n\n先安装gitee-uploader，再安装gitee 2.0.3\n\n接下面配置图床：\n\n ![](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111204092.png)\n\n配置gitee图床：\n\n1）*repo: 为 username + 仓库名，![image-20210728111307879](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111307879.png)\n\n2）branch: 分支，之前创建仓库的时候使用Readme文件初始化仓库的时候为我们创建了master 分支\n\n3）*token:：私人令牌，获取方式\n点击头像 --> 进入个人主页 --> 点击私人令牌 （私人令牌只出现一次，丢了需要重新创建）\n\n4）path 设为img\n\n5）customepath选择年月即可\n\n点击确定，设为默认图床\n\n点击测试上传，来验证是否生效\n\n![image-20210728111621502](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111621502.png)\n\n![image-20210728111639810](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111639810.png)\n\n图片可以在gitee上看见\n\n2.接下来配置typora\n\n![image-20210728112225189](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112225189.png)\n\n对于typora还是需要在配置命令行，因为无法选择app\n\n进入命令行目录\n\n```\ncd C:\\Users\\hxf\\AppData\\Roaming\\Typora\\picgo\\win64\n.\\picgo.exe install gitee-uploader\n.\\picgo.exe  set uploader\n\n```\n\n选择gitee\n\n配置如下：\n\n```\n{\n  \"picBed\": {\n    \"current\": \"smms\",\n    \"gitee\": {\n      \"repo\": \"hxf88/imgrepo\",\n      \"branch\": \"master\",\n      \"token\": \"994875f6f8aacc9508dc707ade1485c1\",\n      \"path\": \"img\",\n      \"customPath\": \"yearMonth\",\n      \"customUrl\": \"\"\n    },\n    \"uploader\": \"smms\",\n    \"transformer\": \"path\"\n  },\n  \"picgoPlugins\": {\n    \"picgo-plugin-gitee\": true,\n    \"picgo-plugin-gitee-uploader\": true,\n    \"picgo-plugin-smms-user\": true\n  }\n}\n```\n\n![image-20210728112806311](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112806311.png)\n\n当配置完后选择，testuploader，当看到上传成功即可。\n\n下面就可以愉快写文档了。\n\n","slug":"一文教你用Typora-Gitee-码云-PicGo-实现-云-markdown笔记","published":1,"updated":"2021-07-29T01:17:21.750Z","_id":"ckrmzjq0z00006zv9647k5x36","comments":1,"layout":"post","link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>你在开心写markdown文档时，有没有为图片的分享，而煎熬，现在通过picgo吧图片上传gitee上，实现文档的分享，会不会很开心。好的，下面开始介绍如何操作</p>\n<p>1.picgo安装</p>\n<p>下载picgo<br><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg\" width=50% /><br>哇，漂亮的小姐姐(❤ ω ❤)</p>\n<span id=\"more\"></span>\n\n<p>下载路径：</p>\n<p><a href=\"https://github.com/Molunerfinn/PicGo/releases\">https://github.com/Molunerfinn/PicGo/releases</a></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110457315.png\" alt=\"image-20210728110457315\"></p>\n<p>如上图选择对应的安装文件下载：</p>\n<p>点击安装picgo进行配置：</p>\n<h3 id=\"1-1-安装gitee插件\"><a href=\"#1-1-安装gitee插件\" class=\"headerlink\" title=\"1.1 安装gitee插件\"></a>1.1 安装gitee插件</h3><p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110604641.png\" alt=\"image-20210728110604641\"></p>\n<p>输入gitee搜索：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110631995.png\" alt=\"image-20210728110631995\"></p>\n<p>先安装gitee-uploader，再安装gitee 2.0.3</p>\n<p>接下面配置图床：</p>\n<p> <img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111204092.png\"></p>\n<p>配置gitee图床：</p>\n<p>1）*repo: 为 username + 仓库名，<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111307879.png\" alt=\"image-20210728111307879\"></p>\n<p>2）branch: 分支，之前创建仓库的时候使用Readme文件初始化仓库的时候为我们创建了master 分支</p>\n<p>3）*token:：私人令牌，获取方式<br>点击头像 –&gt; 进入个人主页 –&gt; 点击私人令牌 （私人令牌只出现一次，丢了需要重新创建）</p>\n<p>4）path 设为img</p>\n<p>5）customepath选择年月即可</p>\n<p>点击确定，设为默认图床</p>\n<p>点击测试上传，来验证是否生效</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111621502.png\" alt=\"image-20210728111621502\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111639810.png\" alt=\"image-20210728111639810\"></p>\n<p>图片可以在gitee上看见</p>\n<p>2.接下来配置typora</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112225189.png\" alt=\"image-20210728112225189\"></p>\n<p>对于typora还是需要在配置命令行，因为无法选择app</p>\n<p>进入命令行目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd C:\\Users\\hxf\\AppData\\Roaming\\Typora\\picgo\\win64</span><br><span class=\"line\">.\\picgo.exe install gitee-uploader</span><br><span class=\"line\">.\\picgo.exe  set uploader</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选择gitee</p>\n<p>配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;picBed&quot;: &#123;</span><br><span class=\"line\">    &quot;current&quot;: &quot;smms&quot;,</span><br><span class=\"line\">    &quot;gitee&quot;: &#123;</span><br><span class=\"line\">      &quot;repo&quot;: &quot;hxf88/imgrepo&quot;,</span><br><span class=\"line\">      &quot;branch&quot;: &quot;master&quot;,</span><br><span class=\"line\">      &quot;token&quot;: &quot;994875f6f8aacc9508dc707ade1485c1&quot;,</span><br><span class=\"line\">      &quot;path&quot;: &quot;img&quot;,</span><br><span class=\"line\">      &quot;customPath&quot;: &quot;yearMonth&quot;,</span><br><span class=\"line\">      &quot;customUrl&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;uploader&quot;: &quot;smms&quot;,</span><br><span class=\"line\">    &quot;transformer&quot;: &quot;path&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;picgoPlugins&quot;: &#123;</span><br><span class=\"line\">    &quot;picgo-plugin-gitee&quot;: true,</span><br><span class=\"line\">    &quot;picgo-plugin-gitee-uploader&quot;: true,</span><br><span class=\"line\">    &quot;picgo-plugin-smms-user&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112806311.png\" alt=\"image-20210728112806311\"></p>\n<p>当配置完后选择，testuploader，当看到上传成功即可。</p>\n<p>下面就可以愉快写文档了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>你在开心写markdown文档时，有没有为图片的分享，而煎熬，现在通过picgo吧图片上传gitee上，实现文档的分享，会不会很开心。好的，下面开始介绍如何操作</p>\n<p>1.picgo安装</p>\n<p>下载picgo<br><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/20210728173505.jpg\" width=50% /><br>哇，漂亮的小姐姐(❤ ω ❤)</p>","more":"<p>下载路径：</p>\n<p><a href=\"https://github.com/Molunerfinn/PicGo/releases\">https://github.com/Molunerfinn/PicGo/releases</a></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110457315.png\" alt=\"image-20210728110457315\"></p>\n<p>如上图选择对应的安装文件下载：</p>\n<p>点击安装picgo进行配置：</p>\n<h3 id=\"1-1-安装gitee插件\"><a href=\"#1-1-安装gitee插件\" class=\"headerlink\" title=\"1.1 安装gitee插件\"></a>1.1 安装gitee插件</h3><p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110604641.png\" alt=\"image-20210728110604641\"></p>\n<p>输入gitee搜索：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728110631995.png\" alt=\"image-20210728110631995\"></p>\n<p>先安装gitee-uploader，再安装gitee 2.0.3</p>\n<p>接下面配置图床：</p>\n<p> <img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111204092.png\"></p>\n<p>配置gitee图床：</p>\n<p>1）*repo: 为 username + 仓库名，<img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111307879.png\" alt=\"image-20210728111307879\"></p>\n<p>2）branch: 分支，之前创建仓库的时候使用Readme文件初始化仓库的时候为我们创建了master 分支</p>\n<p>3）*token:：私人令牌，获取方式<br>点击头像 –&gt; 进入个人主页 –&gt; 点击私人令牌 （私人令牌只出现一次，丢了需要重新创建）</p>\n<p>4）path 设为img</p>\n<p>5）customepath选择年月即可</p>\n<p>点击确定，设为默认图床</p>\n<p>点击测试上传，来验证是否生效</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111621502.png\" alt=\"image-20210728111621502\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728111639810.png\" alt=\"image-20210728111639810\"></p>\n<p>图片可以在gitee上看见</p>\n<p>2.接下来配置typora</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112225189.png\" alt=\"image-20210728112225189\"></p>\n<p>对于typora还是需要在配置命令行，因为无法选择app</p>\n<p>进入命令行目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd C:\\Users\\hxf\\AppData\\Roaming\\Typora\\picgo\\win64</span><br><span class=\"line\">.\\picgo.exe install gitee-uploader</span><br><span class=\"line\">.\\picgo.exe  set uploader</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选择gitee</p>\n<p>配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;picBed&quot;: &#123;</span><br><span class=\"line\">    &quot;current&quot;: &quot;smms&quot;,</span><br><span class=\"line\">    &quot;gitee&quot;: &#123;</span><br><span class=\"line\">      &quot;repo&quot;: &quot;hxf88/imgrepo&quot;,</span><br><span class=\"line\">      &quot;branch&quot;: &quot;master&quot;,</span><br><span class=\"line\">      &quot;token&quot;: &quot;994875f6f8aacc9508dc707ade1485c1&quot;,</span><br><span class=\"line\">      &quot;path&quot;: &quot;img&quot;,</span><br><span class=\"line\">      &quot;customPath&quot;: &quot;yearMonth&quot;,</span><br><span class=\"line\">      &quot;customUrl&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;uploader&quot;: &quot;smms&quot;,</span><br><span class=\"line\">    &quot;transformer&quot;: &quot;path&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;picgoPlugins&quot;: &#123;</span><br><span class=\"line\">    &quot;picgo-plugin-gitee&quot;: true,</span><br><span class=\"line\">    &quot;picgo-plugin-gitee-uploader&quot;: true,</span><br><span class=\"line\">    &quot;picgo-plugin-smms-user&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210728112806311.png\" alt=\"image-20210728112806311\"></p>\n<p>当配置完后选择，testuploader，当看到上传成功即可。</p>\n<p>下面就可以愉快写文档了。</p>"},{"title":"go加速","date":"2021-07-29T03:14:19.000Z","_content":"\n使用七牛云 go module 镜像\n\ngolang1.13.x 可以直接执行：\n\n```\ngo` `env -w GO111MODULE=on``go` `env -w GOPROXY=https:``//goproxy.cn,direct\n```\n\n然后再次使用 go get 下载 gin 依赖就可以了。\n\n","source":"_posts/go加速.md","raw":"---\ntitle: go加速\ndate: 2021-07-29 11:14:19\ntags: go\n---\n\n使用七牛云 go module 镜像\n\ngolang1.13.x 可以直接执行：\n\n```\ngo` `env -w GO111MODULE=on``go` `env -w GOPROXY=https:``//goproxy.cn,direct\n```\n\n然后再次使用 go get 下载 gin 依赖就可以了。\n\n","slug":"go加速","published":1,"updated":"2021-07-29T03:15:00.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrybznbw00008sv970yy489g","content":"<p>使用七牛云 go module 镜像</p>\n<p>golang1.13.x 可以直接执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go` `env -w GO111MODULE=on``go` `env -w GOPROXY=https:``//goproxy.cn,direct</span><br></pre></td></tr></table></figure>\n\n<p>然后再次使用 go get 下载 gin 依赖就可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用七牛云 go module 镜像</p>\n<p>golang1.13.x 可以直接执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go` `env -w GO111MODULE=on``go` `env -w GOPROXY=https:``//goproxy.cn,direct</span><br></pre></td></tr></table></figure>\n\n<p>然后再次使用 go get 下载 gin 依赖就可以了。</p>\n"},{"title":"windowsTerminal美化","date":"2021-07-29T09:32:47.000Z","_content":"\n安装 Window Terminal \n\n有两种安装方式，这个要自行选择\n\n git 安装\n\n  1.0正式版本已经发布了，不需要自行编译了。直接去Github Window Terminal下载安装即可 \n\n商店安装\n\n在微软商店里搜windows terminal，安装即可。 1、商店打不开的，自行解决，直接了当的方式就是升级系统到最新版本，重启。 2、提示当前所在的区域不支持的话 ： 登录账号的进账号把自己所在区域地址改成美国，然后把系统时间设置成美国。重启 正常情况下，你会安装成功的。 可以继续往下看了，先放一张图：\n\n![image-20210730112728438](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210730112728438.png)我们需要安装以下模块：\n\n\n```\n\nInstall-Module git-aliases -AllowColbber\nInstall-Module posh-git\nInstall-Module oh-my-posh\nInstall-Module DirColors#让ls等命令可以像Unix系统终端一样具有多彩的颜色。\n\n```\n\n## 保存配置\n\n```\n notepad $PROFILE\n```\n\n通过notepad打开配置文件：\n\n输入以下内容：\n\n```\nImport-Module posh-git # 引入 posh-git\nImport-Module oh-my-posh # 引入 oh-my-posh\nImport-Module DirColors\nImport-Module git-aliases -DisableNameChecking\n\nSet-PoshPrompt -Theme PowerLine\n\nSet-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录\n\nSet-PSReadlineKeyHandler -Key Tab -Function Complete # 设置 Tab 键补全\nSet-PSReadLineKeyHandler -Key \"Ctrl+d\" -Function MenuComplete # 设置 Ctrl+d 为菜单补全和 Intellisense\nSet-PSReadLineKeyHandler -Key \"Ctrl+z\" -Function Undo # 设置 Ctrl+z 为撤销\nSet-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向上键为后向搜索历史记录\nSet-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward # 设置向下键为前向搜索历史纪录\n```\n\n## 分屏\n\nwindows terminal 也支持分屏，分屏的快捷键为：\n\n- 水平分屏 alt + shift + - (减号)\n- 垂直分屏 alt + shift + + (加号)\n\n切换当前的分屏视图：alt + left/right/up/down\n调整分屏的窗口的大小：alt + shift + left/right/up/down\n\n缩放当前视图：ctrl + +/-/鼠标滚轮\n\n退出当前分屏视图：直接输入`exit`\n\n参考文章：[windows terminal 终极美化](https://www.chuchur.com/article/windows-terminal-beautify)\n\n[https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/](https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/)\n\n​             \n\n","source":"_posts/windowsTerminal美化.md","raw":"---\ntitle: windowsTerminal美化\ndate: 2021-07-29 17:32:47\ntags:  windowsTerminal powershell7\n---\n\n安装 Window Terminal \n\n有两种安装方式，这个要自行选择\n\n git 安装\n\n  1.0正式版本已经发布了，不需要自行编译了。直接去Github Window Terminal下载安装即可 \n\n商店安装\n\n在微软商店里搜windows terminal，安装即可。 1、商店打不开的，自行解决，直接了当的方式就是升级系统到最新版本，重启。 2、提示当前所在的区域不支持的话 ： 登录账号的进账号把自己所在区域地址改成美国，然后把系统时间设置成美国。重启 正常情况下，你会安装成功的。 可以继续往下看了，先放一张图：\n\n![image-20210730112728438](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210730112728438.png)我们需要安装以下模块：\n\n\n```\n\nInstall-Module git-aliases -AllowColbber\nInstall-Module posh-git\nInstall-Module oh-my-posh\nInstall-Module DirColors#让ls等命令可以像Unix系统终端一样具有多彩的颜色。\n\n```\n\n## 保存配置\n\n```\n notepad $PROFILE\n```\n\n通过notepad打开配置文件：\n\n输入以下内容：\n\n```\nImport-Module posh-git # 引入 posh-git\nImport-Module oh-my-posh # 引入 oh-my-posh\nImport-Module DirColors\nImport-Module git-aliases -DisableNameChecking\n\nSet-PoshPrompt -Theme PowerLine\n\nSet-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录\n\nSet-PSReadlineKeyHandler -Key Tab -Function Complete # 设置 Tab 键补全\nSet-PSReadLineKeyHandler -Key \"Ctrl+d\" -Function MenuComplete # 设置 Ctrl+d 为菜单补全和 Intellisense\nSet-PSReadLineKeyHandler -Key \"Ctrl+z\" -Function Undo # 设置 Ctrl+z 为撤销\nSet-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向上键为后向搜索历史记录\nSet-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward # 设置向下键为前向搜索历史纪录\n```\n\n## 分屏\n\nwindows terminal 也支持分屏，分屏的快捷键为：\n\n- 水平分屏 alt + shift + - (减号)\n- 垂直分屏 alt + shift + + (加号)\n\n切换当前的分屏视图：alt + left/right/up/down\n调整分屏的窗口的大小：alt + shift + left/right/up/down\n\n缩放当前视图：ctrl + +/-/鼠标滚轮\n\n退出当前分屏视图：直接输入`exit`\n\n参考文章：[windows terminal 终极美化](https://www.chuchur.com/article/windows-terminal-beautify)\n\n[https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/](https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/)\n\n​             \n\n","slug":"windowsTerminal美化","published":1,"updated":"2021-07-30T03:27:38.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrybznc100018sv9aoil7pt6","content":"<p>安装 Window Terminal </p>\n<p>有两种安装方式，这个要自行选择</p>\n<p> git 安装</p>\n<p>  1.0正式版本已经发布了，不需要自行编译了。直接去Github Window Terminal下载安装即可 </p>\n<p>商店安装</p>\n<p>在微软商店里搜windows terminal，安装即可。 1、商店打不开的，自行解决，直接了当的方式就是升级系统到最新版本，重启。 2、提示当前所在的区域不支持的话 ： 登录账号的进账号把自己所在区域地址改成美国，然后把系统时间设置成美国。重启 正常情况下，你会安装成功的。 可以继续往下看了，先放一张图：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210730112728438.png\" alt=\"image-20210730112728438\">我们需要安装以下模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Install-Module git-aliases -AllowColbber</span><br><span class=\"line\">Install-Module posh-git</span><br><span class=\"line\">Install-Module oh-my-posh</span><br><span class=\"line\">Install-Module DirColors#让ls等命令可以像Unix系统终端一样具有多彩的颜色。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保存配置\"><a href=\"#保存配置\" class=\"headerlink\" title=\"保存配置\"></a>保存配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notepad $PROFILE</span><br></pre></td></tr></table></figure>\n\n<p>通过notepad打开配置文件：</p>\n<p>输入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Import-Module posh-git # 引入 posh-git</span><br><span class=\"line\">Import-Module oh-my-posh # 引入 oh-my-posh</span><br><span class=\"line\">Import-Module DirColors</span><br><span class=\"line\">Import-Module git-aliases -DisableNameChecking</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PoshPrompt -Theme PowerLine</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PSReadlineKeyHandler -Key Tab -Function Complete # 设置 Tab 键补全</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key &quot;Ctrl+d&quot; -Function MenuComplete # 设置 Ctrl+d 为菜单补全和 Intellisense</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key &quot;Ctrl+z&quot; -Function Undo # 设置 Ctrl+z 为撤销</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向上键为后向搜索历史记录</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward # 设置向下键为前向搜索历史纪录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h2><p>windows terminal 也支持分屏，分屏的快捷键为：</p>\n<ul>\n<li>水平分屏 alt + shift + - (减号)</li>\n<li>垂直分屏 alt + shift + + (加号)</li>\n</ul>\n<p>切换当前的分屏视图：alt + left/right/up/down<br>调整分屏的窗口的大小：alt + shift + left/right/up/down</p>\n<p>缩放当前视图：ctrl + +/-/鼠标滚轮</p>\n<p>退出当前分屏视图：直接输入<code>exit</code></p>\n<p>参考文章：<a href=\"https://www.chuchur.com/article/windows-terminal-beautify\">windows terminal 终极美化</a></p>\n<p><a href=\"https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/\">https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/</a></p>\n<p>​             </p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装 Window Terminal </p>\n<p>有两种安装方式，这个要自行选择</p>\n<p> git 安装</p>\n<p>  1.0正式版本已经发布了，不需要自行编译了。直接去Github Window Terminal下载安装即可 </p>\n<p>商店安装</p>\n<p>在微软商店里搜windows terminal，安装即可。 1、商店打不开的，自行解决，直接了当的方式就是升级系统到最新版本，重启。 2、提示当前所在的区域不支持的话 ： 登录账号的进账号把自己所在区域地址改成美国，然后把系统时间设置成美国。重启 正常情况下，你会安装成功的。 可以继续往下看了，先放一张图：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210730112728438.png\" alt=\"image-20210730112728438\">我们需要安装以下模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Install-Module git-aliases -AllowColbber</span><br><span class=\"line\">Install-Module posh-git</span><br><span class=\"line\">Install-Module oh-my-posh</span><br><span class=\"line\">Install-Module DirColors#让ls等命令可以像Unix系统终端一样具有多彩的颜色。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保存配置\"><a href=\"#保存配置\" class=\"headerlink\" title=\"保存配置\"></a>保存配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notepad $PROFILE</span><br></pre></td></tr></table></figure>\n\n<p>通过notepad打开配置文件：</p>\n<p>输入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Import-Module posh-git # 引入 posh-git</span><br><span class=\"line\">Import-Module oh-my-posh # 引入 oh-my-posh</span><br><span class=\"line\">Import-Module DirColors</span><br><span class=\"line\">Import-Module git-aliases -DisableNameChecking</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PoshPrompt -Theme PowerLine</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录</span><br><span class=\"line\"></span><br><span class=\"line\">Set-PSReadlineKeyHandler -Key Tab -Function Complete # 设置 Tab 键补全</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key &quot;Ctrl+d&quot; -Function MenuComplete # 设置 Ctrl+d 为菜单补全和 Intellisense</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key &quot;Ctrl+z&quot; -Function Undo # 设置 Ctrl+z 为撤销</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向上键为后向搜索历史记录</span><br><span class=\"line\">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward # 设置向下键为前向搜索历史纪录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h2><p>windows terminal 也支持分屏，分屏的快捷键为：</p>\n<ul>\n<li>水平分屏 alt + shift + - (减号)</li>\n<li>垂直分屏 alt + shift + + (加号)</li>\n</ul>\n<p>切换当前的分屏视图：alt + left/right/up/down<br>调整分屏的窗口的大小：alt + shift + left/right/up/down</p>\n<p>缩放当前视图：ctrl + +/-/鼠标滚轮</p>\n<p>退出当前分屏视图：直接输入<code>exit</code></p>\n<p>参考文章：<a href=\"https://www.chuchur.com/article/windows-terminal-beautify\">windows terminal 终极美化</a></p>\n<p><a href=\"https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/\">https://blog.tcs-y.com/2021/05/24/windows-powershell-beautify/</a></p>\n<p>​             </p>\n"},{"title":"powershell7不识别最新path","date":"2021-07-30T01:39:28.000Z","_content":"\n# 问题\n\n使用不用方式启动的 Powershell 得到的环境是不同的。通过以下命令查看。可将系统路径（Machine）和用户路径合并后设置未当前的环境变量\n\n```powershell\n>> $env:path\n```\n\n# 解决\n\n```powershell\n$env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::Get\n```\n\n","source":"_posts/powershell7不识别最新path.md","raw":"---\ntitle: powershell7不识别最新path\ndate: 2021-07-30 09:39:28\ntags: powershell7 \n---\n\n# 问题\n\n使用不用方式启动的 Powershell 得到的环境是不同的。通过以下命令查看。可将系统路径（Machine）和用户路径合并后设置未当前的环境变量\n\n```powershell\n>> $env:path\n```\n\n# 解决\n\n```powershell\n$env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::Get\n```\n\n","slug":"powershell7不识别最新path","published":1,"updated":"2021-07-30T01:40:26.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrybznc800038sv9bqom4ymj","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>使用不用方式启动的 Powershell 得到的环境是不同的。通过以下命令查看。可将系统路径（Machine）和用户路径合并后设置未当前的环境变量</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; <span class=\"variable\">$env:path</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:Path</span> = [<span class=\"type\">System.Environment</span>]::GetEnvironmentVariable(<span class=\"string\">&quot;Path&quot;</span>,<span class=\"string\">&quot;Machine&quot;</span>) + <span class=\"string\">&quot;;&quot;</span> + [<span class=\"type\">System.Environment</span>]::Get</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>使用不用方式启动的 Powershell 得到的环境是不同的。通过以下命令查看。可将系统路径（Machine）和用户路径合并后设置未当前的环境变量</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; <span class=\"variable\">$env:path</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:Path</span> = [<span class=\"type\">System.Environment</span>]::GetEnvironmentVariable(<span class=\"string\">&quot;Path&quot;</span>,<span class=\"string\">&quot;Machine&quot;</span>) + <span class=\"string\">&quot;;&quot;</span> + [<span class=\"type\">System.Environment</span>]::Get</span><br></pre></td></tr></table></figure>\n\n"},{"title":"yarn设置淘宝镜像源","date":"2021-07-29T01:04:29.000Z","_content":"\n全局修改：\n\n```shell\nyarn config set registry https://registry.npm.taobao.org/\n```\n\n临时修改\n\n```shell\nyarn save 软件名 --registry https://registry.npm.taobao.org/\n```\n\n```\n# 全局配置，单台设备上永久生效\nyarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n\n# 针对单次安装\nSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ && yarn add node-sass\n# or\nyarn add node-sass --sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n```\n\n","source":"_posts/yarn设置淘宝镜像源.md","raw":"---\ntitle: yarn设置淘宝镜像源\ndate: 2021-07-29 09:04:29\ntags: yarn\n---\n\n全局修改：\n\n```shell\nyarn config set registry https://registry.npm.taobao.org/\n```\n\n临时修改\n\n```shell\nyarn save 软件名 --registry https://registry.npm.taobao.org/\n```\n\n```\n# 全局配置，单台设备上永久生效\nyarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n\n# 针对单次安装\nSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ && yarn add node-sass\n# or\nyarn add node-sass --sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n```\n\n","slug":"yarn设置淘宝镜像源","published":1,"updated":"2021-07-29T01:18:04.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrybzncb00048sv9751w1xrk","content":"<p>全局修改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<p>临时修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn save 软件名 --registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 全局配置，单台设备上永久生效</span><br><span class=\"line\">yarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\"></span><br><span class=\"line\"># 针对单次安装</span><br><span class=\"line\">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ &amp;&amp; yarn add node-sass</span><br><span class=\"line\"># or</span><br><span class=\"line\">yarn add node-sass --sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>全局修改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<p>临时修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn save 软件名 --registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 全局配置，单台设备上永久生效</span><br><span class=\"line\">yarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\"></span><br><span class=\"line\"># 针对单次安装</span><br><span class=\"line\">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ &amp;&amp; yarn add node-sass</span><br><span class=\"line\"># or</span><br><span class=\"line\">yarn add node-sass --sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure>\n\n"},{"title":"注解customParam在并发下问题","date":"2021-08-03T01:59:35.000Z","_content":"\nIPH中引入自定义customParam参数\n\ncustomParam在并发情况下，会出现报错，\n\n![image-20210803101609700](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101609700.png)\n\n报错代码在\n\n![image-20210803101710426](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101710426.png)\n\n该原因是因为value在并发情况下为空，分析问题，原因为param不因作为类的私有变量，在并发情况下map不安全，需要吧map作为局部变量使用，当改为局部变量，该问题解决。\n\n代码类位置为CustomMethodArgumentResolver\n\n![image-20210803102111316](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102111316.png)\n\n第二个问题，customParam是作为单个参数接收的，当改为局部变量，做login接口变为customParam来接受username和password，则会报错，因为customParam会两次经过customHandler来处理，所以需要改写requestBody来接受用户名和密码，\n\n![image-20210803102651718](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102651718.png)\n\n![image-20210803102616035](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png\n\n![image-20210803102239469](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102239469.png)\n\ncustomParam推荐接收单个参数，多个参数使用bean来接受\n\n需要大家检测自身代码问题，\n\n针对于requestbody这种修改方式，综合考虑成本比较大，涉及到之前的很多接口，需要重新考虑该接口如何实现，\n\n通过分析，发现多个customParam注解为什么会不成功，是因为getrequestbody只能获取一次，多个参数时，获取不到，那么解决办法，需要保证能多次从requestbody中获取数据。\n\n我们先来看看为什么HttpServletRequest的输入流只能读一次，当我们调用`getInputStream()`方法获取输入流时得到的是一个InputStream对象，而实际类型是ServletInputStream，它继承于InputStream。\n\nInputStream的`read()`方法内部有一个postion，标志当前流被读取到的位置，每读取一次，该标志就会移动一次，如果读到最后，`read()`会返回-1，表示已经读取完了。如果想要重新读取则需要调用`reset()`方法，position就会移动到上次调用mark的位置，mark默认是0，所以就能从头再读了。调用`reset()`方法的前提是已经重写了`reset()`方法，当然能否reset也是有条件的，它取决于`markSupported()`方法是否返回true。\n\nInputStream默认不实现`reset()`，并且`markSupported()`默认也是返回false，这一点查看其源码便知：\n\n我们再来看看ServletInputStream，可以看到该类没有重写`mark()`，`reset()`以及`markSupported()`方法：\n\n综上，InputStream默认不实现reset的相关方法，而ServletInputStream也没有重写reset的相关方法，这样就无法重复读取流，这就是我们从request对象中获取的输入流就只能读取一次的原因。\n\n### 使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题\n\n既然ServletInputStream不支持重新读写，那么为什么不把流读出来后用容器存储起来，后面就可以多次利用了。那么问题就来了，要如何存储这个流呢？\n\n所幸JavaEE提供了一个 HttpServletRequestWrapper类，从类名也可以知道它是一个http请求包装器，其基于装饰者模式实现了HttpServletRequest界面，部分源码如下：\n\n![image-20210804101044518](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101044518.png)\n\n从上图中的部分源码可以看到，该类并没有真正去实现HttpServletRequest的方法，而只是在方法内又去调用HttpServletRequest的方法，所以我们可以通过继承该类并实现想要重新定义的方法以达到包装原生HttpServletRequest对象的目的。\n\n首先我们要定义一个容器，将输入流里面的数据存储到这个容器里，这个容器可以是数组或集合。然后我们重写getInputStream方法，每次都从这个容器里读数据，这样我们的输入流就可以读取任意次了。\n\n具体的实现代码如下：\n\n```\n\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport javax.servlet.ReadListener;\nimport javax.servlet.ServletInputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport java.io.*;\nimport java.nio.charset.Charset;\n\n@Slf4j\npublic class RequestWrapper extends HttpServletRequestWrapper {\n    /**\n     * 存储body数据的容器\n     */\n    private final byte[] body;\n\n    public RequestWrapper(HttpServletRequest request) throws IOException {\n        super(request);\n\n        // 将body数据存储起来\n        String bodyStr = getBodyString(request);\n        body = bodyStr.getBytes(Charset.defaultCharset());\n    }\n\n    /**\n     * 获取请求Body\n     *\n     * @param request request\n     * @return String\n     */\n    public String getBodyString(final ServletRequest request) {\n        try {\n            return inputStream2String(request.getInputStream());\n        } catch (IOException e) {\n            log.error(\"\", e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * 获取请求Body\n     *\n     * @return String\n     */\n    public String getBodyString() {\n        final InputStream inputStream = new ByteArrayInputStream(body);\n\n        return inputStream2String(inputStream);\n    }\n\n    /**\n     * 将inputStream里的数据读取出来并转换成字符串\n     *\n     * @param inputStream inputStream\n     * @return String\n     */\n    private String inputStream2String(InputStream inputStream) {\n        StringBuilder sb = new StringBuilder();\n        BufferedReader reader = null;\n\n        try {\n            reader = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n        } catch (IOException e) {\n            log.error(\"\", e);\n            throw new RuntimeException(e);\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    log.error(\"\", e);\n                }\n            }\n        }\n\n        return sb.toString();\n    }\n\n    @Override\n    public BufferedReader getReader() throws IOException {\n        return new BufferedReader(new InputStreamReader(getInputStream()));\n    }\n\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n\n        final ByteArrayInputStream inputStream = new ByteArrayInputStream(body);\n\n        return new ServletInputStream() {\n            @Override\n            public int read() throws IOException {\n                return inputStream.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n                return false;\n            }\n\n            @Override\n            public boolean isReady() {\n                return false;\n            }\n\n            @Override\n            public void setReadListener(ReadListener readListener) {\n            }\n        };\n    }\n}\n\n```\n\n除了要写一个包装器外，我们还需要在过滤器里将原生的HttpServletRequest对象替换成我们的RequestWrapper对象，代码如下：\n\n```\n\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\n\n@Slf4j\npublic class ReplaceStreamFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        log.info(\"StreamFilter初始化...\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        ServletRequest requestWrapper = new RequestWrapper((HttpServletRequest) request);\n        chain.doFilter(requestWrapper, response);\n    }\n\n    @Override\n    public void destroy() {\n        log.info(\"StreamFilter销毁...\");\n    }\n}\n\n```\n\n从而我们在customParam中使用requestbody就没有问题了\n\n![image-20210804101807196](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101807196.png)\n\n```\nprivate String getRequestBody(HttpServletRequest servletRequest)  {\n        String jsonParam = null;\n        try {\n            jsonParam = new RequestWrapper(servletRequest).getBodyString();\n        } catch (IOException e) {\n            log.error(\"读取流异常\", e);\n            throw new BizException(ErrorCodeConstant.SERVER_INTERNAL_ERROR,\"IO异常\");\n        }\n        log.info(\"[preHandle] json数据 : {}\", jsonParam);\n        return jsonParam;\n    }\n```\n\n编写完以上的代码后，还需要将过滤器在配置类中进行注册才会生效，过滤器配置类代码如下：\n\n![image-20210804102053267](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804102053267.png)\n\n```\n   /**\n     * 实例化StreamFilter\n     *\n     * @return Filter\n     */\n    @Bean(name = \"replaceStreamFilter\")\n    public Filter replaceStreamFilter() {\n        return new ReplaceStreamFilter();\n    }\n```\n\n经过以上配置，就可以正常使用@customParam在多参数下。\n\n","source":"_posts/注解customParam在并发下问题.md","raw":"---\ntitle: 注解customParam在并发下问题\ndate: 2021-08-03 09:59:35\ntags: 注解 customParam\n---\n\nIPH中引入自定义customParam参数\n\ncustomParam在并发情况下，会出现报错，\n\n![image-20210803101609700](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101609700.png)\n\n报错代码在\n\n![image-20210803101710426](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101710426.png)\n\n该原因是因为value在并发情况下为空，分析问题，原因为param不因作为类的私有变量，在并发情况下map不安全，需要吧map作为局部变量使用，当改为局部变量，该问题解决。\n\n代码类位置为CustomMethodArgumentResolver\n\n![image-20210803102111316](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102111316.png)\n\n第二个问题，customParam是作为单个参数接收的，当改为局部变量，做login接口变为customParam来接受username和password，则会报错，因为customParam会两次经过customHandler来处理，所以需要改写requestBody来接受用户名和密码，\n\n![image-20210803102651718](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102651718.png)\n\n![image-20210803102616035](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png\n\n![image-20210803102239469](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102239469.png)\n\ncustomParam推荐接收单个参数，多个参数使用bean来接受\n\n需要大家检测自身代码问题，\n\n针对于requestbody这种修改方式，综合考虑成本比较大，涉及到之前的很多接口，需要重新考虑该接口如何实现，\n\n通过分析，发现多个customParam注解为什么会不成功，是因为getrequestbody只能获取一次，多个参数时，获取不到，那么解决办法，需要保证能多次从requestbody中获取数据。\n\n我们先来看看为什么HttpServletRequest的输入流只能读一次，当我们调用`getInputStream()`方法获取输入流时得到的是一个InputStream对象，而实际类型是ServletInputStream，它继承于InputStream。\n\nInputStream的`read()`方法内部有一个postion，标志当前流被读取到的位置，每读取一次，该标志就会移动一次，如果读到最后，`read()`会返回-1，表示已经读取完了。如果想要重新读取则需要调用`reset()`方法，position就会移动到上次调用mark的位置，mark默认是0，所以就能从头再读了。调用`reset()`方法的前提是已经重写了`reset()`方法，当然能否reset也是有条件的，它取决于`markSupported()`方法是否返回true。\n\nInputStream默认不实现`reset()`，并且`markSupported()`默认也是返回false，这一点查看其源码便知：\n\n我们再来看看ServletInputStream，可以看到该类没有重写`mark()`，`reset()`以及`markSupported()`方法：\n\n综上，InputStream默认不实现reset的相关方法，而ServletInputStream也没有重写reset的相关方法，这样就无法重复读取流，这就是我们从request对象中获取的输入流就只能读取一次的原因。\n\n### 使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题\n\n既然ServletInputStream不支持重新读写，那么为什么不把流读出来后用容器存储起来，后面就可以多次利用了。那么问题就来了，要如何存储这个流呢？\n\n所幸JavaEE提供了一个 HttpServletRequestWrapper类，从类名也可以知道它是一个http请求包装器，其基于装饰者模式实现了HttpServletRequest界面，部分源码如下：\n\n![image-20210804101044518](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101044518.png)\n\n从上图中的部分源码可以看到，该类并没有真正去实现HttpServletRequest的方法，而只是在方法内又去调用HttpServletRequest的方法，所以我们可以通过继承该类并实现想要重新定义的方法以达到包装原生HttpServletRequest对象的目的。\n\n首先我们要定义一个容器，将输入流里面的数据存储到这个容器里，这个容器可以是数组或集合。然后我们重写getInputStream方法，每次都从这个容器里读数据，这样我们的输入流就可以读取任意次了。\n\n具体的实现代码如下：\n\n```\n\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport javax.servlet.ReadListener;\nimport javax.servlet.ServletInputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport java.io.*;\nimport java.nio.charset.Charset;\n\n@Slf4j\npublic class RequestWrapper extends HttpServletRequestWrapper {\n    /**\n     * 存储body数据的容器\n     */\n    private final byte[] body;\n\n    public RequestWrapper(HttpServletRequest request) throws IOException {\n        super(request);\n\n        // 将body数据存储起来\n        String bodyStr = getBodyString(request);\n        body = bodyStr.getBytes(Charset.defaultCharset());\n    }\n\n    /**\n     * 获取请求Body\n     *\n     * @param request request\n     * @return String\n     */\n    public String getBodyString(final ServletRequest request) {\n        try {\n            return inputStream2String(request.getInputStream());\n        } catch (IOException e) {\n            log.error(\"\", e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * 获取请求Body\n     *\n     * @return String\n     */\n    public String getBodyString() {\n        final InputStream inputStream = new ByteArrayInputStream(body);\n\n        return inputStream2String(inputStream);\n    }\n\n    /**\n     * 将inputStream里的数据读取出来并转换成字符串\n     *\n     * @param inputStream inputStream\n     * @return String\n     */\n    private String inputStream2String(InputStream inputStream) {\n        StringBuilder sb = new StringBuilder();\n        BufferedReader reader = null;\n\n        try {\n            reader = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n        } catch (IOException e) {\n            log.error(\"\", e);\n            throw new RuntimeException(e);\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    log.error(\"\", e);\n                }\n            }\n        }\n\n        return sb.toString();\n    }\n\n    @Override\n    public BufferedReader getReader() throws IOException {\n        return new BufferedReader(new InputStreamReader(getInputStream()));\n    }\n\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n\n        final ByteArrayInputStream inputStream = new ByteArrayInputStream(body);\n\n        return new ServletInputStream() {\n            @Override\n            public int read() throws IOException {\n                return inputStream.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n                return false;\n            }\n\n            @Override\n            public boolean isReady() {\n                return false;\n            }\n\n            @Override\n            public void setReadListener(ReadListener readListener) {\n            }\n        };\n    }\n}\n\n```\n\n除了要写一个包装器外，我们还需要在过滤器里将原生的HttpServletRequest对象替换成我们的RequestWrapper对象，代码如下：\n\n```\n\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\n\n@Slf4j\npublic class ReplaceStreamFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        log.info(\"StreamFilter初始化...\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        ServletRequest requestWrapper = new RequestWrapper((HttpServletRequest) request);\n        chain.doFilter(requestWrapper, response);\n    }\n\n    @Override\n    public void destroy() {\n        log.info(\"StreamFilter销毁...\");\n    }\n}\n\n```\n\n从而我们在customParam中使用requestbody就没有问题了\n\n![image-20210804101807196](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101807196.png)\n\n```\nprivate String getRequestBody(HttpServletRequest servletRequest)  {\n        String jsonParam = null;\n        try {\n            jsonParam = new RequestWrapper(servletRequest).getBodyString();\n        } catch (IOException e) {\n            log.error(\"读取流异常\", e);\n            throw new BizException(ErrorCodeConstant.SERVER_INTERNAL_ERROR,\"IO异常\");\n        }\n        log.info(\"[preHandle] json数据 : {}\", jsonParam);\n        return jsonParam;\n    }\n```\n\n编写完以上的代码后，还需要将过滤器在配置类中进行注册才会生效，过滤器配置类代码如下：\n\n![image-20210804102053267](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804102053267.png)\n\n```\n   /**\n     * 实例化StreamFilter\n     *\n     * @return Filter\n     */\n    @Bean(name = \"replaceStreamFilter\")\n    public Filter replaceStreamFilter() {\n        return new ReplaceStreamFilter();\n    }\n```\n\n经过以上配置，就可以正常使用@customParam在多参数下。\n\n","slug":"注解customParam在并发下问题","published":1,"updated":"2021-08-04T02:23:01.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrybzncc00078sv9g6ct7ol0","content":"<p>IPH中引入自定义customParam参数</p>\n<p>customParam在并发情况下，会出现报错，</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101609700.png\" alt=\"image-20210803101609700\"></p>\n<p>报错代码在</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101710426.png\" alt=\"image-20210803101710426\"></p>\n<p>该原因是因为value在并发情况下为空，分析问题，原因为param不因作为类的私有变量，在并发情况下map不安全，需要吧map作为局部变量使用，当改为局部变量，该问题解决。</p>\n<p>代码类位置为CustomMethodArgumentResolver</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102111316.png\" alt=\"image-20210803102111316\"></p>\n<p>第二个问题，customParam是作为单个参数接收的，当改为局部变量，做login接口变为customParam来接受username和password，则会报错，因为customParam会两次经过customHandler来处理，所以需要改写requestBody来接受用户名和密码，</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102651718.png\" alt=\"image-20210803102651718\"></p>\n<p>![image-20210803102616035](<a href=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png\">https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png</a></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102239469.png\" alt=\"image-20210803102239469\"></p>\n<p>customParam推荐接收单个参数，多个参数使用bean来接受</p>\n<p>需要大家检测自身代码问题，</p>\n<p>针对于requestbody这种修改方式，综合考虑成本比较大，涉及到之前的很多接口，需要重新考虑该接口如何实现，</p>\n<p>通过分析，发现多个customParam注解为什么会不成功，是因为getrequestbody只能获取一次，多个参数时，获取不到，那么解决办法，需要保证能多次从requestbody中获取数据。</p>\n<p>我们先来看看为什么HttpServletRequest的输入流只能读一次，当我们调用<code>getInputStream()</code>方法获取输入流时得到的是一个InputStream对象，而实际类型是ServletInputStream，它继承于InputStream。</p>\n<p>InputStream的<code>read()</code>方法内部有一个postion，标志当前流被读取到的位置，每读取一次，该标志就会移动一次，如果读到最后，<code>read()</code>会返回-1，表示已经读取完了。如果想要重新读取则需要调用<code>reset()</code>方法，position就会移动到上次调用mark的位置，mark默认是0，所以就能从头再读了。调用<code>reset()</code>方法的前提是已经重写了<code>reset()</code>方法，当然能否reset也是有条件的，它取决于<code>markSupported()</code>方法是否返回true。</p>\n<p>InputStream默认不实现<code>reset()</code>，并且<code>markSupported()</code>默认也是返回false，这一点查看其源码便知：</p>\n<p>我们再来看看ServletInputStream，可以看到该类没有重写<code>mark()</code>，<code>reset()</code>以及<code>markSupported()</code>方法：</p>\n<p>综上，InputStream默认不实现reset的相关方法，而ServletInputStream也没有重写reset的相关方法，这样就无法重复读取流，这就是我们从request对象中获取的输入流就只能读取一次的原因。</p>\n<h3 id=\"使用HttpServletRequestWrapper-Filter解决输入流不能重复读取问题\"><a href=\"#使用HttpServletRequestWrapper-Filter解决输入流不能重复读取问题\" class=\"headerlink\" title=\"使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题\"></a>使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题</h3><p>既然ServletInputStream不支持重新读写，那么为什么不把流读出来后用容器存储起来，后面就可以多次利用了。那么问题就来了，要如何存储这个流呢？</p>\n<p>所幸JavaEE提供了一个 HttpServletRequestWrapper类，从类名也可以知道它是一个http请求包装器，其基于装饰者模式实现了HttpServletRequest界面，部分源码如下：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101044518.png\" alt=\"image-20210804101044518\"></p>\n<p>从上图中的部分源码可以看到，该类并没有真正去实现HttpServletRequest的方法，而只是在方法内又去调用HttpServletRequest的方法，所以我们可以通过继承该类并实现想要重新定义的方法以达到包装原生HttpServletRequest对象的目的。</p>\n<p>首先我们要定义一个容器，将输入流里面的数据存储到这个容器里，这个容器可以是数组或集合。然后我们重写getInputStream方法，每次都从这个容器里读数据，这样我们的输入流就可以读取任意次了。</p>\n<p>具体的实现代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.ReadListener;</span><br><span class=\"line\">import javax.servlet.ServletInputStream;</span><br><span class=\"line\">import javax.servlet.ServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequestWrapper;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class RequestWrapper extends HttpServletRequestWrapper &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 存储body数据的容器</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private final byte[] body;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RequestWrapper(HttpServletRequest request) throws IOException &#123;</span><br><span class=\"line\">        super(request);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 将body数据存储起来</span><br><span class=\"line\">        String bodyStr = getBodyString(request);</span><br><span class=\"line\">        body = bodyStr.getBytes(Charset.defaultCharset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取请求Body</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request request</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String getBodyString(final ServletRequest request) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return inputStream2String(request.getInputStream());</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;&quot;, e);</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取请求Body</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String getBodyString() &#123;</span><br><span class=\"line\">        final InputStream inputStream = new ByteArrayInputStream(body);</span><br><span class=\"line\"></span><br><span class=\"line\">        return inputStream2String(inputStream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将inputStream里的数据读取出来并转换成字符串</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param inputStream inputStream</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String inputStream2String(InputStream inputStream) &#123;</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        BufferedReader reader = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            reader = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = reader.readLine()) != null) &#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;&quot;, e);</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            if (reader != null) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    reader.close();</span><br><span class=\"line\">                &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                    log.error(&quot;&quot;, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public BufferedReader getReader() throws IOException &#123;</span><br><span class=\"line\">        return new BufferedReader(new InputStreamReader(getInputStream()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public ServletInputStream getInputStream() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        final ByteArrayInputStream inputStream = new ByteArrayInputStream(body);</span><br><span class=\"line\"></span><br><span class=\"line\">        return new ServletInputStream() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public int read() throws IOException &#123;</span><br><span class=\"line\">                return inputStream.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean isFinished() &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean isReady() &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void setReadListener(ReadListener readListener) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>除了要写一个包装器外，我们还需要在过滤器里将原生的HttpServletRequest对象替换成我们的RequestWrapper对象，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.*;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class ReplaceStreamFilter implements Filter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\">        log.info(&quot;StreamFilter初始化...&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        ServletRequest requestWrapper = new RequestWrapper((HttpServletRequest) request);</span><br><span class=\"line\">        chain.doFilter(requestWrapper, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">        log.info(&quot;StreamFilter销毁...&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从而我们在customParam中使用requestbody就没有问题了</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101807196.png\" alt=\"image-20210804101807196\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String getRequestBody(HttpServletRequest servletRequest)  &#123;</span><br><span class=\"line\">        String jsonParam = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            jsonParam = new RequestWrapper(servletRequest).getBodyString();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;读取流异常&quot;, e);</span><br><span class=\"line\">            throw new BizException(ErrorCodeConstant.SERVER_INTERNAL_ERROR,&quot;IO异常&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(&quot;[preHandle] json数据 : &#123;&#125;&quot;, jsonParam);</span><br><span class=\"line\">        return jsonParam;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写完以上的代码后，还需要将过滤器在配置类中进行注册才会生效，过滤器配置类代码如下：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804102053267.png\" alt=\"image-20210804102053267\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">  * 实例化StreamFilter</span><br><span class=\"line\">  *</span><br><span class=\"line\">  * @return Filter</span><br><span class=\"line\">  */</span><br><span class=\"line\"> @Bean(name = &quot;replaceStreamFilter&quot;)</span><br><span class=\"line\"> public Filter replaceStreamFilter() &#123;</span><br><span class=\"line\">     return new ReplaceStreamFilter();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过以上配置，就可以正常使用@customParam在多参数下。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>IPH中引入自定义customParam参数</p>\n<p>customParam在并发情况下，会出现报错，</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101609700.png\" alt=\"image-20210803101609700\"></p>\n<p>报错代码在</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803101710426.png\" alt=\"image-20210803101710426\"></p>\n<p>该原因是因为value在并发情况下为空，分析问题，原因为param不因作为类的私有变量，在并发情况下map不安全，需要吧map作为局部变量使用，当改为局部变量，该问题解决。</p>\n<p>代码类位置为CustomMethodArgumentResolver</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102111316.png\" alt=\"image-20210803102111316\"></p>\n<p>第二个问题，customParam是作为单个参数接收的，当改为局部变量，做login接口变为customParam来接受username和password，则会报错，因为customParam会两次经过customHandler来处理，所以需要改写requestBody来接受用户名和密码，</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102651718.png\" alt=\"image-20210803102651718\"></p>\n<p>![image-20210803102616035](<a href=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png\">https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102616035.png</a></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210803102239469.png\" alt=\"image-20210803102239469\"></p>\n<p>customParam推荐接收单个参数，多个参数使用bean来接受</p>\n<p>需要大家检测自身代码问题，</p>\n<p>针对于requestbody这种修改方式，综合考虑成本比较大，涉及到之前的很多接口，需要重新考虑该接口如何实现，</p>\n<p>通过分析，发现多个customParam注解为什么会不成功，是因为getrequestbody只能获取一次，多个参数时，获取不到，那么解决办法，需要保证能多次从requestbody中获取数据。</p>\n<p>我们先来看看为什么HttpServletRequest的输入流只能读一次，当我们调用<code>getInputStream()</code>方法获取输入流时得到的是一个InputStream对象，而实际类型是ServletInputStream，它继承于InputStream。</p>\n<p>InputStream的<code>read()</code>方法内部有一个postion，标志当前流被读取到的位置，每读取一次，该标志就会移动一次，如果读到最后，<code>read()</code>会返回-1，表示已经读取完了。如果想要重新读取则需要调用<code>reset()</code>方法，position就会移动到上次调用mark的位置，mark默认是0，所以就能从头再读了。调用<code>reset()</code>方法的前提是已经重写了<code>reset()</code>方法，当然能否reset也是有条件的，它取决于<code>markSupported()</code>方法是否返回true。</p>\n<p>InputStream默认不实现<code>reset()</code>，并且<code>markSupported()</code>默认也是返回false，这一点查看其源码便知：</p>\n<p>我们再来看看ServletInputStream，可以看到该类没有重写<code>mark()</code>，<code>reset()</code>以及<code>markSupported()</code>方法：</p>\n<p>综上，InputStream默认不实现reset的相关方法，而ServletInputStream也没有重写reset的相关方法，这样就无法重复读取流，这就是我们从request对象中获取的输入流就只能读取一次的原因。</p>\n<h3 id=\"使用HttpServletRequestWrapper-Filter解决输入流不能重复读取问题\"><a href=\"#使用HttpServletRequestWrapper-Filter解决输入流不能重复读取问题\" class=\"headerlink\" title=\"使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题\"></a>使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题</h3><p>既然ServletInputStream不支持重新读写，那么为什么不把流读出来后用容器存储起来，后面就可以多次利用了。那么问题就来了，要如何存储这个流呢？</p>\n<p>所幸JavaEE提供了一个 HttpServletRequestWrapper类，从类名也可以知道它是一个http请求包装器，其基于装饰者模式实现了HttpServletRequest界面，部分源码如下：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101044518.png\" alt=\"image-20210804101044518\"></p>\n<p>从上图中的部分源码可以看到，该类并没有真正去实现HttpServletRequest的方法，而只是在方法内又去调用HttpServletRequest的方法，所以我们可以通过继承该类并实现想要重新定义的方法以达到包装原生HttpServletRequest对象的目的。</p>\n<p>首先我们要定义一个容器，将输入流里面的数据存储到这个容器里，这个容器可以是数组或集合。然后我们重写getInputStream方法，每次都从这个容器里读数据，这样我们的输入流就可以读取任意次了。</p>\n<p>具体的实现代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.ReadListener;</span><br><span class=\"line\">import javax.servlet.ServletInputStream;</span><br><span class=\"line\">import javax.servlet.ServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequestWrapper;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class RequestWrapper extends HttpServletRequestWrapper &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 存储body数据的容器</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private final byte[] body;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RequestWrapper(HttpServletRequest request) throws IOException &#123;</span><br><span class=\"line\">        super(request);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 将body数据存储起来</span><br><span class=\"line\">        String bodyStr = getBodyString(request);</span><br><span class=\"line\">        body = bodyStr.getBytes(Charset.defaultCharset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取请求Body</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request request</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String getBodyString(final ServletRequest request) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return inputStream2String(request.getInputStream());</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;&quot;, e);</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取请求Body</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String getBodyString() &#123;</span><br><span class=\"line\">        final InputStream inputStream = new ByteArrayInputStream(body);</span><br><span class=\"line\"></span><br><span class=\"line\">        return inputStream2String(inputStream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将inputStream里的数据读取出来并转换成字符串</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param inputStream inputStream</span><br><span class=\"line\">     * @return String</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String inputStream2String(InputStream inputStream) &#123;</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        BufferedReader reader = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            reader = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = reader.readLine()) != null) &#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;&quot;, e);</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            if (reader != null) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    reader.close();</span><br><span class=\"line\">                &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                    log.error(&quot;&quot;, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public BufferedReader getReader() throws IOException &#123;</span><br><span class=\"line\">        return new BufferedReader(new InputStreamReader(getInputStream()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public ServletInputStream getInputStream() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        final ByteArrayInputStream inputStream = new ByteArrayInputStream(body);</span><br><span class=\"line\"></span><br><span class=\"line\">        return new ServletInputStream() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public int read() throws IOException &#123;</span><br><span class=\"line\">                return inputStream.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean isFinished() &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean isReady() &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void setReadListener(ReadListener readListener) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>除了要写一个包装器外，我们还需要在过滤器里将原生的HttpServletRequest对象替换成我们的RequestWrapper对象，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.*;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class ReplaceStreamFilter implements Filter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\">        log.info(&quot;StreamFilter初始化...&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        ServletRequest requestWrapper = new RequestWrapper((HttpServletRequest) request);</span><br><span class=\"line\">        chain.doFilter(requestWrapper, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">        log.info(&quot;StreamFilter销毁...&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从而我们在customParam中使用requestbody就没有问题了</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804101807196.png\" alt=\"image-20210804101807196\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String getRequestBody(HttpServletRequest servletRequest)  &#123;</span><br><span class=\"line\">        String jsonParam = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            jsonParam = new RequestWrapper(servletRequest).getBodyString();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            log.error(&quot;读取流异常&quot;, e);</span><br><span class=\"line\">            throw new BizException(ErrorCodeConstant.SERVER_INTERNAL_ERROR,&quot;IO异常&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(&quot;[preHandle] json数据 : &#123;&#125;&quot;, jsonParam);</span><br><span class=\"line\">        return jsonParam;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写完以上的代码后，还需要将过滤器在配置类中进行注册才会生效，过滤器配置类代码如下：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210804102053267.png\" alt=\"image-20210804102053267\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">  * 实例化StreamFilter</span><br><span class=\"line\">  *</span><br><span class=\"line\">  * @return Filter</span><br><span class=\"line\">  */</span><br><span class=\"line\"> @Bean(name = &quot;replaceStreamFilter&quot;)</span><br><span class=\"line\"> public Filter replaceStreamFilter() &#123;</span><br><span class=\"line\">     return new ReplaceStreamFilter();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过以上配置，就可以正常使用@customParam在多参数下。</p>\n"},{"title":"用 Docker 每日自动化备份 MySQL, Postgres 或 MongoDB 并上传到 minio","date":"2021-07-29T03:38:11.000Z","_content":"\n由于备份[PostgreSQL](https://www.postgresql.org/)的指令[pg_dump](https://docs.postgresql.tw/reference/client-applications/pg_dump)需要特定版本才可以备份，故制作用[Docker](https://www.docker.com/)容器方式来自己备份，此工具支持[MySQL](https://www.mysql.com/)，PostgreSQL跟[MongoDB](https://www.mongodb.com/)，只要一个docker-compose yaml 档案就可以进行线上的备份，并且上传到minio，另外也可以设定每天晚上固定时间点进行时间备份，也就是饮食所设定的定时任务。没有使用，或者管理机房的朋友们，就可以通过这小工具，进行每天半夜线上备份，避免资料被误判。\n\n<!--more-->\n\n使用方式：\n\n```yaml\nservices:\n  minio:\n    image: minio/minio:edge\n    restart: always\n    volumes:\n      - data1-1:/data1\n    ports:\n      - 9000:9000\n    environment:\n      MINIO_ACCESS_KEY: 1234567890\n      MINIO_SECRET_KEY: 1234567890\n    command: server /data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n\n  postgres:\n    image: postgres:12\n    restart: always\n    volumes:\n      - pg-data:/var/lib/postgresql/data\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      POSTGRES_USER: db\n      POSTGRES_DB: db\n      POSTGRES_PASSWORD: db\n```\n\n挑选特定资料库版本的Docker Image\n\n```yaml\nbackup_postgres:\n    image: appleboy/docker-backup-database:postgres-12\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      STORAGE_DRIVER: s3\n      STORAGE_ENDPOINT: minio:9000\n      STORAGE_BUCKET: test\n      STORAGE_REGION: ap-northeast-1\n      STORAGE_PATH: backup_postgres\n      STORAGE_SSL: \"false\"\n      STORAGE_INSECURE_SKIP_VERIFY: \"false\"\n      ACCESS_KEY_ID: 1234567890\n      SECRET_ACCESS_KEY: 1234567890\n\n      DATABASE_DRIVER: postgres\n      DATABASE_HOST: postgres:5432\n      DATABASE_USERNAME: db\n      DATABASE_PASSWORD: db\n      DATABASE_NAME: db\n      DATABASE_OPTS:\n```\n\nFinal Step: [manage bucket lifecycle](https://docs.min.io/docs/minio-bucket-lifecycle-guide.html) using [MinIO Client (mc)](https://docs.min.io/docs/minio-client-quickstart-guide.html).\n\n```shell\n$ mc ilm import minio/test <<EOF\n{\n    \"Rules\": [\n        {\n            \"Expiration\": {\n                \"Days\": 7\n            },\n            \"ID\": \"backup_postgres\",\n            \"Filter\": {\n                \"Prefix\": \"backup_postgres/\"\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\nEOF\n```\n\n上面设定是快乐的备份，也就是手动使用`docker-compose up backup_postgres`就可以进行一次备份，当然可以每天晚上来备份\n\n```yaml\n backup_mysql:\n    image: appleboy/docker-backup-database:mysql-8\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      STORAGE_DRIVER: s3\n      STORAGE_ENDPOINT: minio:9000\n      STORAGE_BUCKET: test\n      STORAGE_REGION: ap-northeast-1\n      STORAGE_PATH: backup_mysql\n      STORAGE_SSL: \"false\"\n      STORAGE_INSECURE_SKIP_VERIFY: \"false\"\n      ACCESS_KEY_ID: 1234567890\n      SECRET_ACCESS_KEY: 1234567890\n\n      DATABASE_DRIVER: mysql\n      DATABASE_HOST: mysql:3306\n      DATABASE_USERNAME: root\n      DATABASE_PASSWORD: db\n      DATABASE_NAME: db\n      DATABASE_OPTS:\n\n      TIME_SCHEDULE: \"@daily\"\n      TIME_LOCATION: Asia/Shanghai\n```\n\n`TIME_LOCATION`可以设为上海时区，美食预设会是UTC+8时间。更多详细的设置可以[参考文件](https://github.com/appleboy/docker-backup-database)。\n\n```\n./mc alias set minio http://minio:9000 1234567890 1234567890\n./mc mb minio/test\n./mc ilm import minio/test <<EOF\n{\n    \"Rules\": [\n        {\n            \"Expiration\": {\n                \"Days\": 7\n            },\n            \"ID\": \"backup_postgres\",\n            \"Filter\": {\n                \"Prefix\": \"backup_postgres/\"\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\nEOF\n```\n\n当文件上传后如下图所示：\n\n![image-20210729130727118](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130727118.png)\n\n![image-20210729130614955](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130614955.png)\n","source":"_posts/用-Docker-每日自动化备份-MySQL-Postgres-或-MongoDB-并上传到-minio.md","raw":"---\ntitle: '用 Docker 每日自动化备份 MySQL, Postgres 或 MongoDB 并上传到 minio'\ndate: 2021-07-29 11:38:11\ntags: docker 备份\n---\n\n由于备份[PostgreSQL](https://www.postgresql.org/)的指令[pg_dump](https://docs.postgresql.tw/reference/client-applications/pg_dump)需要特定版本才可以备份，故制作用[Docker](https://www.docker.com/)容器方式来自己备份，此工具支持[MySQL](https://www.mysql.com/)，PostgreSQL跟[MongoDB](https://www.mongodb.com/)，只要一个docker-compose yaml 档案就可以进行线上的备份，并且上传到minio，另外也可以设定每天晚上固定时间点进行时间备份，也就是饮食所设定的定时任务。没有使用，或者管理机房的朋友们，就可以通过这小工具，进行每天半夜线上备份，避免资料被误判。\n\n<!--more-->\n\n使用方式：\n\n```yaml\nservices:\n  minio:\n    image: minio/minio:edge\n    restart: always\n    volumes:\n      - data1-1:/data1\n    ports:\n      - 9000:9000\n    environment:\n      MINIO_ACCESS_KEY: 1234567890\n      MINIO_SECRET_KEY: 1234567890\n    command: server /data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n\n  postgres:\n    image: postgres:12\n    restart: always\n    volumes:\n      - pg-data:/var/lib/postgresql/data\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      POSTGRES_USER: db\n      POSTGRES_DB: db\n      POSTGRES_PASSWORD: db\n```\n\n挑选特定资料库版本的Docker Image\n\n```yaml\nbackup_postgres:\n    image: appleboy/docker-backup-database:postgres-12\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      STORAGE_DRIVER: s3\n      STORAGE_ENDPOINT: minio:9000\n      STORAGE_BUCKET: test\n      STORAGE_REGION: ap-northeast-1\n      STORAGE_PATH: backup_postgres\n      STORAGE_SSL: \"false\"\n      STORAGE_INSECURE_SKIP_VERIFY: \"false\"\n      ACCESS_KEY_ID: 1234567890\n      SECRET_ACCESS_KEY: 1234567890\n\n      DATABASE_DRIVER: postgres\n      DATABASE_HOST: postgres:5432\n      DATABASE_USERNAME: db\n      DATABASE_PASSWORD: db\n      DATABASE_NAME: db\n      DATABASE_OPTS:\n```\n\nFinal Step: [manage bucket lifecycle](https://docs.min.io/docs/minio-bucket-lifecycle-guide.html) using [MinIO Client (mc)](https://docs.min.io/docs/minio-client-quickstart-guide.html).\n\n```shell\n$ mc ilm import minio/test <<EOF\n{\n    \"Rules\": [\n        {\n            \"Expiration\": {\n                \"Days\": 7\n            },\n            \"ID\": \"backup_postgres\",\n            \"Filter\": {\n                \"Prefix\": \"backup_postgres/\"\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\nEOF\n```\n\n上面设定是快乐的备份，也就是手动使用`docker-compose up backup_postgres`就可以进行一次备份，当然可以每天晚上来备份\n\n```yaml\n backup_mysql:\n    image: appleboy/docker-backup-database:mysql-8\n    logging:\n      options:\n        max-size: \"100k\"\n        max-file: \"3\"\n    environment:\n      STORAGE_DRIVER: s3\n      STORAGE_ENDPOINT: minio:9000\n      STORAGE_BUCKET: test\n      STORAGE_REGION: ap-northeast-1\n      STORAGE_PATH: backup_mysql\n      STORAGE_SSL: \"false\"\n      STORAGE_INSECURE_SKIP_VERIFY: \"false\"\n      ACCESS_KEY_ID: 1234567890\n      SECRET_ACCESS_KEY: 1234567890\n\n      DATABASE_DRIVER: mysql\n      DATABASE_HOST: mysql:3306\n      DATABASE_USERNAME: root\n      DATABASE_PASSWORD: db\n      DATABASE_NAME: db\n      DATABASE_OPTS:\n\n      TIME_SCHEDULE: \"@daily\"\n      TIME_LOCATION: Asia/Shanghai\n```\n\n`TIME_LOCATION`可以设为上海时区，美食预设会是UTC+8时间。更多详细的设置可以[参考文件](https://github.com/appleboy/docker-backup-database)。\n\n```\n./mc alias set minio http://minio:9000 1234567890 1234567890\n./mc mb minio/test\n./mc ilm import minio/test <<EOF\n{\n    \"Rules\": [\n        {\n            \"Expiration\": {\n                \"Days\": 7\n            },\n            \"ID\": \"backup_postgres\",\n            \"Filter\": {\n                \"Prefix\": \"backup_postgres/\"\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\nEOF\n```\n\n当文件上传后如下图所示：\n\n![image-20210729130727118](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130727118.png)\n\n![image-20210729130614955](https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130614955.png)\n","slug":"用-Docker-每日自动化备份-MySQL-Postgres-或-MongoDB-并上传到-minio","published":1,"updated":"2021-07-29T06:38:42.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrybzncd00088sv9g5j11g6g","content":"<p>由于备份<a href=\"https://www.postgresql.org/\">PostgreSQL</a>的指令<a href=\"https://docs.postgresql.tw/reference/client-applications/pg_dump\">pg_dump</a>需要特定版本才可以备份，故制作用<a href=\"https://www.docker.com/\">Docker</a>容器方式来自己备份，此工具支持<a href=\"https://www.mysql.com/\">MySQL</a>，PostgreSQL跟<a href=\"https://www.mongodb.com/\">MongoDB</a>，只要一个docker-compose yaml 档案就可以进行线上的备份，并且上传到minio，另外也可以设定每天晚上固定时间点进行时间备份，也就是饮食所设定的定时任务。没有使用，或者管理机房的朋友们，就可以通过这小工具，进行每天半夜线上备份，避免资料被误判。</p>\n<span id=\"more\"></span>\n\n<p>使用方式：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">minio:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">minio/minio:edge</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">data1-1:/data1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9000</span><span class=\"string\">:9000</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_SECRET_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">server</span> <span class=\"string\">/data</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">postgres:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:12</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pg-data:/var/lib/postgresql/data</span></span><br><span class=\"line\">    <span class=\"attr\">logging:</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_USER:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_DB:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_PASSWORD:</span> <span class=\"string\">db</span></span><br></pre></td></tr></table></figure>\n\n<p>挑选特定资料库版本的Docker Image</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup_postgres:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">appleboy/docker-backup-database:postgres-12</span></span><br><span class=\"line\">    <span class=\"attr\">logging:</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_DRIVER:</span> <span class=\"string\">s3</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_ENDPOINT:</span> <span class=\"string\">minio:9000</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_BUCKET:</span> <span class=\"string\">test</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_REGION:</span> <span class=\"string\">ap-northeast-1</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_PATH:</span> <span class=\"string\">backup_postgres</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_SSL:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_INSECURE_SKIP_VERIFY:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">ACCESS_KEY_ID:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">      <span class=\"attr\">SECRET_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_DRIVER:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_HOST:</span> <span class=\"string\">postgres:5432</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_USERNAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_PASSWORD:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_NAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_OPTS:</span></span><br></pre></td></tr></table></figure>\n\n<p>Final Step: <a href=\"https://docs.min.io/docs/minio-bucket-lifecycle-guide.html\">manage bucket lifecycle</a> using <a href=\"https://docs.min.io/docs/minio-client-quickstart-guide.html\">MinIO Client (mc)</a>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc ilm import minio/<span class=\"built_in\">test</span> &lt;&lt;<span class=\"string\">EOF</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Rules&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;Expiration&quot;: &#123;</span><br><span class=\"line\">                &quot;Days&quot;: 7</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;ID&quot;: &quot;backup_postgres&quot;,</span><br><span class=\"line\">            &quot;Filter&quot;: &#123;</span><br><span class=\"line\">                &quot;Prefix&quot;: &quot;backup_postgres/&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Status&quot;: &quot;Enabled&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>上面设定是快乐的备份，也就是手动使用<code>docker-compose up backup_postgres</code>就可以进行一次备份，当然可以每天晚上来备份</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup_mysql:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">appleboy/docker-backup-database:mysql-8</span></span><br><span class=\"line\">   <span class=\"attr\">logging:</span></span><br><span class=\"line\">     <span class=\"attr\">options:</span></span><br><span class=\"line\">       <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_DRIVER:</span> <span class=\"string\">s3</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_ENDPOINT:</span> <span class=\"string\">minio:9000</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_BUCKET:</span> <span class=\"string\">test</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_REGION:</span> <span class=\"string\">ap-northeast-1</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_PATH:</span> <span class=\"string\">backup_mysql</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_SSL:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_INSECURE_SKIP_VERIFY:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">ACCESS_KEY_ID:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">     <span class=\"attr\">SECRET_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_DRIVER:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_HOST:</span> <span class=\"string\">mysql:3306</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_USERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_PASSWORD:</span> <span class=\"string\">db</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_NAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_OPTS:</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">TIME_SCHEDULE:</span> <span class=\"string\">&quot;@daily&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">TIME_LOCATION:</span> <span class=\"string\">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>\n\n<p><code>TIME_LOCATION</code>可以设为上海时区，美食预设会是UTC+8时间。更多详细的设置可以<a href=\"https://github.com/appleboy/docker-backup-database\">参考文件</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc alias set minio http://minio:9000 1234567890 1234567890</span><br><span class=\"line\">./mc mb minio/test</span><br><span class=\"line\">./mc ilm import minio/test &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Rules&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;Expiration&quot;: &#123;</span><br><span class=\"line\">                &quot;Days&quot;: 7</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;ID&quot;: &quot;backup_postgres&quot;,</span><br><span class=\"line\">            &quot;Filter&quot;: &#123;</span><br><span class=\"line\">                &quot;Prefix&quot;: &quot;backup_postgres/&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Status&quot;: &quot;Enabled&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>当文件上传后如下图所示：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130727118.png\" alt=\"image-20210729130727118\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130614955.png\" alt=\"image-20210729130614955\"></p>\n","site":{"data":{}},"excerpt":"<p>由于备份<a href=\"https://www.postgresql.org/\">PostgreSQL</a>的指令<a href=\"https://docs.postgresql.tw/reference/client-applications/pg_dump\">pg_dump</a>需要特定版本才可以备份，故制作用<a href=\"https://www.docker.com/\">Docker</a>容器方式来自己备份，此工具支持<a href=\"https://www.mysql.com/\">MySQL</a>，PostgreSQL跟<a href=\"https://www.mongodb.com/\">MongoDB</a>，只要一个docker-compose yaml 档案就可以进行线上的备份，并且上传到minio，另外也可以设定每天晚上固定时间点进行时间备份，也就是饮食所设定的定时任务。没有使用，或者管理机房的朋友们，就可以通过这小工具，进行每天半夜线上备份，避免资料被误判。</p>","more":"<p>使用方式：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">minio:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">minio/minio:edge</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">data1-1:/data1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9000</span><span class=\"string\">:9000</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_SECRET_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">server</span> <span class=\"string\">/data</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">postgres:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:12</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pg-data:/var/lib/postgresql/data</span></span><br><span class=\"line\">    <span class=\"attr\">logging:</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_USER:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_DB:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_PASSWORD:</span> <span class=\"string\">db</span></span><br></pre></td></tr></table></figure>\n\n<p>挑选特定资料库版本的Docker Image</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup_postgres:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">appleboy/docker-backup-database:postgres-12</span></span><br><span class=\"line\">    <span class=\"attr\">logging:</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_DRIVER:</span> <span class=\"string\">s3</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_ENDPOINT:</span> <span class=\"string\">minio:9000</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_BUCKET:</span> <span class=\"string\">test</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_REGION:</span> <span class=\"string\">ap-northeast-1</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_PATH:</span> <span class=\"string\">backup_postgres</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_SSL:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">STORAGE_INSECURE_SKIP_VERIFY:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">ACCESS_KEY_ID:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">      <span class=\"attr\">SECRET_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_DRIVER:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_HOST:</span> <span class=\"string\">postgres:5432</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_USERNAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_PASSWORD:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_NAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">      <span class=\"attr\">DATABASE_OPTS:</span></span><br></pre></td></tr></table></figure>\n\n<p>Final Step: <a href=\"https://docs.min.io/docs/minio-bucket-lifecycle-guide.html\">manage bucket lifecycle</a> using <a href=\"https://docs.min.io/docs/minio-client-quickstart-guide.html\">MinIO Client (mc)</a>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc ilm import minio/<span class=\"built_in\">test</span> &lt;&lt;<span class=\"string\">EOF</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Rules&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;Expiration&quot;: &#123;</span><br><span class=\"line\">                &quot;Days&quot;: 7</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;ID&quot;: &quot;backup_postgres&quot;,</span><br><span class=\"line\">            &quot;Filter&quot;: &#123;</span><br><span class=\"line\">                &quot;Prefix&quot;: &quot;backup_postgres/&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Status&quot;: &quot;Enabled&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>上面设定是快乐的备份，也就是手动使用<code>docker-compose up backup_postgres</code>就可以进行一次备份，当然可以每天晚上来备份</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup_mysql:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">appleboy/docker-backup-database:mysql-8</span></span><br><span class=\"line\">   <span class=\"attr\">logging:</span></span><br><span class=\"line\">     <span class=\"attr\">options:</span></span><br><span class=\"line\">       <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;100k&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">max-file:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_DRIVER:</span> <span class=\"string\">s3</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_ENDPOINT:</span> <span class=\"string\">minio:9000</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_BUCKET:</span> <span class=\"string\">test</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_REGION:</span> <span class=\"string\">ap-northeast-1</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_PATH:</span> <span class=\"string\">backup_mysql</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_SSL:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">STORAGE_INSECURE_SKIP_VERIFY:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">ACCESS_KEY_ID:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">     <span class=\"attr\">SECRET_ACCESS_KEY:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_DRIVER:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_HOST:</span> <span class=\"string\">mysql:3306</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_USERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_PASSWORD:</span> <span class=\"string\">db</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_NAME:</span> <span class=\"string\">db</span></span><br><span class=\"line\">     <span class=\"attr\">DATABASE_OPTS:</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">TIME_SCHEDULE:</span> <span class=\"string\">&quot;@daily&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">TIME_LOCATION:</span> <span class=\"string\">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>\n\n<p><code>TIME_LOCATION</code>可以设为上海时区，美食预设会是UTC+8时间。更多详细的设置可以<a href=\"https://github.com/appleboy/docker-backup-database\">参考文件</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc alias set minio http://minio:9000 1234567890 1234567890</span><br><span class=\"line\">./mc mb minio/test</span><br><span class=\"line\">./mc ilm import minio/test &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Rules&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;Expiration&quot;: &#123;</span><br><span class=\"line\">                &quot;Days&quot;: 7</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;ID&quot;: &quot;backup_postgres&quot;,</span><br><span class=\"line\">            &quot;Filter&quot;: &#123;</span><br><span class=\"line\">                &quot;Prefix&quot;: &quot;backup_postgres/&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Status&quot;: &quot;Enabled&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>当文件上传后如下图所示：</p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130727118.png\" alt=\"image-20210729130727118\"></p>\n<p><img src=\"https://gitee.com/hxf88/imgrepo/raw/master/img/image-20210729130614955.png\" alt=\"image-20210729130614955\"></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckrmzjq0z00006zv9647k5x36","tag_id":"ckrmzjq1300016zv9ffit6nw8","_id":"ckrmzjq1700026zv9dw8x2pz4"},{"post_id":"ckrybznbw00008sv970yy489g","tag_id":"ckrybznc300028sv9hv0ccm1x","_id":"ckrybzncc00068sv96xzx8fcj"},{"post_id":"ckrybznc100018sv9aoil7pt6","tag_id":"ckrybzncb00058sv975xa4bzw","_id":"ckrybznce000a8sv93b3w8tfg"},{"post_id":"ckrybznc800038sv9bqom4ymj","tag_id":"ckrybznce00098sv99jys3y6i","_id":"ckrybznce000c8sv9grd3e24c"},{"post_id":"ckrybzncb00048sv9751w1xrk","tag_id":"ckrybznce000b8sv98f4khbks","_id":"ckrybzncf000e8sv9f4ky47ht"},{"post_id":"ckrybzncc00078sv9g6ct7ol0","tag_id":"ckrybzncf000d8sv94wtjf559","_id":"ckrybzncf000g8sv99zrf3tub"},{"post_id":"ckrybzncd00088sv9g5j11g6g","tag_id":"ckrybzncf000f8sv94y8bf7tm","_id":"ckrybzncg000h8sv94jtt7nfw"}],"Tag":[{"name":"gitee typora picgo","_id":"ckrmzjq1300016zv9ffit6nw8"},{"name":"go","_id":"ckrybznc300028sv9hv0ccm1x"},{"name":"windowsTerminal powershell7","_id":"ckrybzncb00058sv975xa4bzw"},{"name":"powershell7","_id":"ckrybznce00098sv99jys3y6i"},{"name":"yarn","_id":"ckrybznce000b8sv98f4khbks"},{"name":"注解 customParam","_id":"ckrybzncf000d8sv94wtjf559"},{"name":"docker 备份","_id":"ckrybzncf000f8sv94y8bf7tm"}]}}